<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171026 01:21:11.732" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<kw type="setup" name="Suite Setup Execution">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:21:12.760" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:21:12.762" starttime="20171026 01:21:12.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:21:12.763" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:21:12.763" starttime="20171026 01:21:12.763"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:21:12.764" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:21:12.764" starttime="20171026 01:21:12.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:21:12.764" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:21:12.765" starttime="20171026 01:21:12.764"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:21:13.146" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:21:13.146" starttime="20171026 01:21:12.765"></status>
</kw>
<msg timestamp="20171026 01:21:13.147" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:13.147" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:13.147" starttime="20171026 01:21:12.765"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:21:13.147" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:13.147" starttime="20171026 01:21:13.147"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:13.148" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:13.148" starttime="20171026 01:21:13.148"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:13.148" starttime="20171026 01:21:12.758"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:13.148" starttime="20171026 01:21:12.758"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:13.149" starttime="20171026 01:21:12.754"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:21:13.149" level="INFO">${base_uri} = /xyz/openbmc_project//dump/entry/list</msg>
<status status="PASS" endtime="20171026 01:21:13.149" starttime="20171026 01:21:13.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:13.150" starttime="20171026 01:21:13.150"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:21:13.226" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project//dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171026 01:21:13.226" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:13.226" starttime="20171026 01:21:13.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:13.227" starttime="20171026 01:21:13.227"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:21:13.228" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:21:13.228" starttime="20171026 01:21:13.227"></status>
</kw>
<msg timestamp="20171026 01:21:13.228" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:13.228" starttime="20171026 01:21:12.754"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171026 01:21:13.229" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:21:13.229" starttime="20171026 01:21:13.228"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:13.229" starttime="20171026 01:21:12.753"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Smart Power Off</arg>
</arguments>
<kw name="Smart Power Off" library="boot_utils">
<doc>Do a smart power off.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${quiet}</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171026 01:21:13.230" level="INFO">${loc_quiet} = 0</msg>
<status status="PASS" endtime="20171026 01:21:13.230" starttime="20171026 01:21:13.230"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>REST Power Off \ stack_mode=skip</arg>
<arg>\ \ quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:21:13.231" level="INFO">${cmd_buf} = REST Power Off  stack_mode=skip   quiet=0</msg>
<status status="PASS" endtime="20171026 01:21:13.231" starttime="20171026 01:21:13.231"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
<arg>quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="REST Power Off" library="boot_utils">
<doc>Do "REST Power Off" boot test.</doc>
<arguments>
<arg>stack_mode=skip</arg>
<arg>quiet=0</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=REST Power Off</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:21:13.233" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=REST Power Off  loc_stack_mode=skip  loc_quiet=0</msg>
<status status="PASS" endtime="20171026 01:21:13.233" starttime="20171026 01:21:13.233"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=REST Power Off</arg>
<arg>loc_stack_mode=skip</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:13.242" starttime="20171026 01:21:13.242"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171026 01:21:13.244" level="INFO">${boot_stack} = REST Power Off</msg>
<msg timestamp="20171026 01:21:13.244" level="INFO">${stack_mode} = skip</msg>
<msg timestamp="20171026 01:21:13.245" level="INFO">${quiet} = 0</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171026 01:21:13.357" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:21:13.357" level="INFO">Logging into '9.5.180.47:22' as 'root'.</msg>
<msg timestamp="20171026 01:21:14.630" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171026 01:21:14.631" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171026 01:21:14.809" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171026 01:21:14.819" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171026 01:21:14.819" level="INFO">${stderr} = </msg>
<msg timestamp="20171026 01:21:14.819" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171026 01:21:14.819" starttime="20171026 01:21:13.346"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171026 01:21:14.820" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171026 01:21:14.820" starttime="20171026 01:21:14.820"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171026 01:21:14.821" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171026 01:21:14.821" starttime="20171026 01:21:14.820"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:14.821" starttime="20171026 01:21:13.344"></status>
</kw>
<msg timestamp="20171026 01:21:14.821" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20171026 01:21:15.026" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171026 01:21:15.037" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:21:15.064" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:21:15.065" starttime="20171026 01:21:15.064"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:21:15.066" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:21:15.066" starttime="20171026 01:21:15.065"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:21:15.067" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:21:15.067" starttime="20171026 01:21:15.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:21:15.067" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:21:15.067" starttime="20171026 01:21:15.067"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:21:15.443" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:21:15.443" starttime="20171026 01:21:15.068"></status>
</kw>
<msg timestamp="20171026 01:21:15.443" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:15.443" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:15.443" starttime="20171026 01:21:15.068"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:21:15.444" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:15.444" starttime="20171026 01:21:15.443"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:15.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:15.445" starttime="20171026 01:21:15.444"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:15.445" starttime="20171026 01:21:15.063"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:15.445" starttime="20171026 01:21:15.063"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:15.445" starttime="20171026 01:21:15.062"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:21:15.446" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171026 01:21:15.446" starttime="20171026 01:21:15.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:21:15.448" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:21:15.448" starttime="20171026 01:21:15.447"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:21:15.449" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:21:15.449" starttime="20171026 01:21:15.448"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:15.449" starttime="20171026 01:21:15.448"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:15.449" starttime="20171026 01:21:15.446"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:15.449" starttime="20171026 01:21:15.446"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:21:15.574" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171026 01:21:15.574" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:15.575" starttime="20171026 01:21:15.449"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:21:15.576" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:21:15.576" starttime="20171026 01:21:15.576"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:21:15.577" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:21:15.577" starttime="20171026 01:21:15.577"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:15.578" starttime="20171026 01:21:15.577"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:15.578" starttime="20171026 01:21:15.575"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:15.578" starttime="20171026 01:21:15.575"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:21:15.578" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:21:15.578" starttime="20171026 01:21:15.578"></status>
</kw>
<msg timestamp="20171026 01:21:15.579" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:15.579" starttime="20171026 01:21:15.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:15.579" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:15.579" starttime="20171026 01:21:15.579"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 01:21:15.580" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:21:15.580" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 01:21:15.580" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171026 01:21:15.580" starttime="20171026 01:21:15.580"></status>
</kw>
<msg timestamp="20171026 01:21:15.580" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 01:21:15.580" starttime="20171026 01:21:15.060"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:15.581" starttime="20171026 01:21:15.060"></status>
</kw>
<msg timestamp="20171026 01:21:15.601" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20171026 01:21:15.602" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20171026 01:21:15.602" starttime="20171026 01:21:15.052"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:15.604" starttime="20171026 01:21:15.603"></status>
</kw>
<msg timestamp="20171026 01:21:15.604" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 01:21:15.604" starttime="20171026 01:21:15.603"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171026 01:21:15.622" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171026 01:21:15.622" starttime="20171026 01:21:15.622"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:21:15.623" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171026 01:21:15.623" starttime="20171026 01:21:15.623"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:21:15.626" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:21:15.627" starttime="20171026 01:21:15.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:21:15.628" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:21:15.628" starttime="20171026 01:21:15.627"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:21:15.628" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:21:15.628" starttime="20171026 01:21:15.628"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:21:15.629" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:21:15.629" starttime="20171026 01:21:15.629"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:21:15.970" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:21:15.970" starttime="20171026 01:21:15.630"></status>
</kw>
<msg timestamp="20171026 01:21:15.970" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:15.970" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:15.970" starttime="20171026 01:21:15.629"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:21:15.971" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:15.971" starttime="20171026 01:21:15.971"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:15.972" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:15.972" starttime="20171026 01:21:15.971"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:15.972" starttime="20171026 01:21:15.625"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:15.972" starttime="20171026 01:21:15.625"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:15.972" starttime="20171026 01:21:15.624"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:21:15.973" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171026 01:21:15.973" starttime="20171026 01:21:15.972"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:21:15.973" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:21:15.973" starttime="20171026 01:21:15.973"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:15.974" starttime="20171026 01:21:15.974"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:21:15.975" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171026 01:21:15.975" starttime="20171026 01:21:15.975"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:21:15.976" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171026 01:21:15.976" starttime="20171026 01:21:15.976"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:15.977" starttime="20171026 01:21:15.976"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:15.977" starttime="20171026 01:21:15.974"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:21:16.147" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171026 01:21:16.147" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:16.147" starttime="20171026 01:21:15.977"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:21:16.148" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:21:16.148" starttime="20171026 01:21:16.148"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:21:16.149" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:21:16.149" starttime="20171026 01:21:16.149"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:16.149" starttime="20171026 01:21:16.148"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:16.149" starttime="20171026 01:21:16.147"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:21:16.150" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:21:16.150" starttime="20171026 01:21:16.150"></status>
</kw>
<msg timestamp="20171026 01:21:16.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:16.150" starttime="20171026 01:21:15.624"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:16.151" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:16.151" starttime="20171026 01:21:16.151"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171026 01:21:16.152" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:21:16.152" starttime="20171026 01:21:16.152"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:16.152" starttime="20171026 01:21:15.622"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:16.152" starttime="20171026 01:21:15.621"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:16.152" starttime="20171026 01:21:15.604"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171026 01:21:16.154" starttime="20171026 01:21:16.153"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:21:16.154" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171026 01:21:16.154" starttime="20171026 01:21:16.154"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:21:16.158" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:21:16.159" starttime="20171026 01:21:16.158"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:21:16.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:21:16.159" starttime="20171026 01:21:16.159"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:21:16.160" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:21:16.160" starttime="20171026 01:21:16.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:21:16.161" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:21:16.161" starttime="20171026 01:21:16.160"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:21:16.524" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:21:16.524" starttime="20171026 01:21:16.162"></status>
</kw>
<msg timestamp="20171026 01:21:16.524" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:16.525" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:16.525" starttime="20171026 01:21:16.161"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:21:16.525" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:16.525" starttime="20171026 01:21:16.525"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:16.526" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:16.526" starttime="20171026 01:21:16.526"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:16.526" starttime="20171026 01:21:16.157"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:16.526" starttime="20171026 01:21:16.157"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:16.526" starttime="20171026 01:21:16.156"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:21:16.527" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171026 01:21:16.527" starttime="20171026 01:21:16.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:21:16.529" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:21:16.529" starttime="20171026 01:21:16.529"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:21:16.530" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:21:16.531" starttime="20171026 01:21:16.530"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:16.531" starttime="20171026 01:21:16.530"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:16.531" starttime="20171026 01:21:16.528"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:16.531" starttime="20171026 01:21:16.527"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:21:16.639" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171026 01:21:16.639" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:16.639" starttime="20171026 01:21:16.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:21:16.641" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:21:16.641" starttime="20171026 01:21:16.641"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:21:16.642" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:21:16.642" starttime="20171026 01:21:16.642"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:16.642" starttime="20171026 01:21:16.642"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:16.643" starttime="20171026 01:21:16.640"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:16.643" starttime="20171026 01:21:16.640"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:21:16.643" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:21:16.643" starttime="20171026 01:21:16.643"></status>
</kw>
<msg timestamp="20171026 01:21:16.644" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:16.644" starttime="20171026 01:21:16.156"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:16.644" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:16.644" starttime="20171026 01:21:16.644"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 01:21:16.645" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:21:16.645" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 01:21:16.645" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171026 01:21:16.645" starttime="20171026 01:21:16.645"></status>
</kw>
<msg timestamp="20171026 01:21:16.645" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 01:21:16.645" starttime="20171026 01:21:16.155"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:16.646" starttime="20171026 01:21:16.155"></status>
</kw>
<msg timestamp="20171026 01:21:16.646" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 01:21:16.646" starttime="20171026 01:21:16.154"></status>
</kw>
<msg timestamp="20171026 01:21:16.646" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 01:21:16.646" starttime="20171026 01:21:16.153"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171026 01:21:16.647" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:16.647" starttime="20171026 01:21:16.646"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:16.647" starttime="20171026 01:21:15.051"></status>
</kw>
<msg timestamp="20171026 01:21:16.689" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 01:21:16.728" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 01:21:16.736" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171026 01:21:16.737" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:21:16.782" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:21:16.783" starttime="20171026 01:21:16.781"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:21:16.783" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:21:16.783" starttime="20171026 01:21:16.783"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:21:16.784" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:21:16.784" starttime="20171026 01:21:16.784"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:21:16.785" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:21:16.785" starttime="20171026 01:21:16.784"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:21:17.154" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:21:17.154" starttime="20171026 01:21:16.786"></status>
</kw>
<msg timestamp="20171026 01:21:17.154" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:17.154" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:17.154" starttime="20171026 01:21:16.785"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:21:17.155" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:17.155" starttime="20171026 01:21:17.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:17.156" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:17.156" starttime="20171026 01:21:17.155"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.156" starttime="20171026 01:21:16.781"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.156" starttime="20171026 01:21:16.779"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.156" starttime="20171026 01:21:16.778"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:21:17.157" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171026 01:21:17.157" starttime="20171026 01:21:17.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:21:17.159" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:21:17.159" starttime="20171026 01:21:17.158"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:21:17.160" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:21:17.160" starttime="20171026 01:21:17.160"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.160" starttime="20171026 01:21:17.159"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.160" starttime="20171026 01:21:17.157"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.160" starttime="20171026 01:21:17.157"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:21:17.405" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:21:17.405" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:17.405" starttime="20171026 01:21:17.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:21:17.407" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171026 01:21:17.407" starttime="20171026 01:21:17.406"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:21:17.408" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:21:17.408" starttime="20171026 01:21:17.408"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.409" starttime="20171026 01:21:17.407"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.409" starttime="20171026 01:21:17.406"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.409" starttime="20171026 01:21:17.405"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:21:17.409" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:21:17.409" starttime="20171026 01:21:17.409"></status>
</kw>
<msg timestamp="20171026 01:21:17.410" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:17.410" starttime="20171026 01:21:16.777"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:17.410" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:17.410" starttime="20171026 01:21:17.410"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 01:21:17.411" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:21:17.411" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 01:21:17.411" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171026 01:21:17.411" starttime="20171026 01:21:17.411"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.412" starttime="20171026 01:21:16.775"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.470" starttime="20171026 01:21:13.243"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171026 01:21:17.476" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 01:21:17.486" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171026 01:21:17.486" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171026 01:21:17.487" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171026 01:21:17.487" starttime="20171026 01:21:17.471"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.487" starttime="20171026 01:21:13.241"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.487" starttime="20171026 01:21:13.233"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.487" starttime="20171026 01:21:13.232"></status>
</kw>
<msg timestamp="20171026 01:21:17.487" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:17.487" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:21:17.487" starttime="20171026 01:21:13.231"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'PASS'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20171026 01:21:17.489" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:21:17.489" starttime="20171026 01:21:17.488"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.489" starttime="20171026 01:21:17.488"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.489" starttime="20171026 01:21:13.230"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.489" starttime="20171026 01:21:13.229"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:17.489" starttime="20171026 01:21:12.752"></status>
</kw>
<test id="s1-t1" name="REST BMC Code Update">
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20171026 01:21:17.491" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20171026 01:21:17.491" starttime="20171026 01:21:17.491"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20171026 01:21:17.508" level="INFO">${image_version} = v1.99.10-211-g2a9818c</msg>
<status status="PASS" endtime="20171026 01:21:17.508" starttime="20171026 01:21:17.491"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20171026 01:21:17.508" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20171026 01:21:30.071" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20171026 01:21:30.071" starttime="20171026 01:21:17.508"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:21:30.076" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:21:30.077" starttime="20171026 01:21:30.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:21:30.078" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:21:30.078" starttime="20171026 01:21:30.077"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:21:30.078" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:21:30.078" starttime="20171026 01:21:30.078"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:21:30.079" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:21:30.079" starttime="20171026 01:21:30.079"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:21:30.459" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:21:30.459" starttime="20171026 01:21:30.080"></status>
</kw>
<msg timestamp="20171026 01:21:30.459" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:30.459" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:30.459" starttime="20171026 01:21:30.079"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:21:30.460" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:30.460" starttime="20171026 01:21:30.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:30.461" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:30.461" starttime="20171026 01:21:30.460"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:30.461" starttime="20171026 01:21:30.075"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:30.461" starttime="20171026 01:21:30.074"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:30.461" starttime="20171026 01:21:30.073"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:21:30.462" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20171026 01:21:30.462" starttime="20171026 01:21:30.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:21:30.462" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20171026 01:21:30.462" starttime="20171026 01:21:30.462"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:30.463" starttime="20171026 01:21:30.463"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:30.464" starttime="20171026 01:21:30.463"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:21:40.480" level="FAIL">SSLError: ('The write operation timed out',)</msg>
<status status="FAIL" endtime="20171026 01:21:40.480" starttime="20171026 01:21:30.464"></status>
</kw>
<status status="FAIL" endtime="20171026 01:21:40.481" starttime="20171026 01:21:30.072"></status>
</kw>
<status status="FAIL" endtime="20171026 01:21:40.481" starttime="20171026 01:21:17.490"></status>
</kw>
<kw type="teardown" name="REST BMC Code Update Teardown">
<doc>Do code update test teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.5.180.47</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171026 01:21:40.495" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20171026 01:21:40.495" starttime="20171026 01:21:40.495"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171026 01:21:40.499" level="INFO">Running command 'ping -c 4 9.5.180.47 2&gt;&amp;1'.</msg>
<msg timestamp="20171026 01:21:43.544" level="INFO">${RC} = 0</msg>
<msg timestamp="20171026 01:21:43.544" level="INFO">${output} = PING 9.5.180.47 (9.5.180.47) 56(84) bytes of data.
64 bytes from 9.5.180.47: icmp_seq=1 ttl=50 time=37.1 ms
64 bytes from 9.5.180.47: icmp_seq=2 ttl=50 time=35.0 ms
64 bytes from 9.5.180.47: icmp_seq=...</msg>
<status status="PASS" endtime="20171026 01:21:43.544" starttime="20171026 01:21:40.496"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.548" level="INFO">RC: 0
Output:
PING 9.5.180.47 (9.5.180.47) 56(84) bytes of data.
64 bytes from 9.5.180.47: icmp_seq=1 ttl=50 time=37.1 ms
64 bytes from 9.5.180.47: icmp_seq=2 ttl=50 time=35.0 ms
64 bytes from 9.5.180.47: icmp_seq=3 ttl=50 time=43.9 ms
64 bytes from 9.5.180.47: icmp_seq=4 ttl=50 time=35.1 ms

--- 9.5.180.47 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 35.084/37.815/43.912/3.627 ms</msg>
<status status="PASS" endtime="20171026 01:21:43.548" starttime="20171026 01:21:43.547"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:43.549" starttime="20171026 01:21:43.549"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.549" starttime="20171026 01:21:40.494"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171026 01:21:43.563" level="INFO">${cur_time} = 2017-10-26 01:21:43:562621</msg>
<status status="PASS" endtime="20171026 01:21:43.563" starttime="20171026 01:21:43.562"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171026 01:21:43.564" level="INFO">${cur_time} = 20171026012143562621</msg>
<status status="PASS" endtime="20171026 01:21:43.564" starttime="20171026 01:21:43.563"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.564" starttime="20171026 01:21:43.561"></status>
</kw>
<msg timestamp="20171026 01:21:43.570" level="INFO">${FFDC_TIME} = 20171026012143562621</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171026 01:21:43.571" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20171026 01:21:43.571" starttime="20171026 01:21:43.571"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171026 01:21:43.572" level="INFO">${suite_name} = 20171026012143562621_BmcCodeUpdate</msg>
<status status="PASS" endtime="20171026 01:21:43.572" starttime="20171026 01:21:43.571"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171026 01:21:43.572" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171026 01:21:43.572" starttime="20171026 01:21:43.572"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171026 01:21:43.573" level="INFO">${test_name} = 20171026012143562621_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171026 01:21:43.573" starttime="20171026 01:21:43.573"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.573" starttime="20171026 01:21:43.570"></status>
</kw>
<msg timestamp="20171026 01:21:43.574" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/</msg>
<msg timestamp="20171026 01:21:43.574" level="INFO">${FFDC_PREFIX} = 20171026012143562621_</msg>
<msg timestamp="20171026 01:21:43.594" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20171026 01:21:43.595" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.595" starttime="20171026 01:21:43.594"></status>
</kw>
<msg timestamp="20171026 01:21:43.601" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.611" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.612" starttime="20171026 01:21:43.611"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.612" starttime="20171026 01:21:43.610"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.613" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.613" starttime="20171026 01:21:43.612"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.613" starttime="20171026 01:21:43.612"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.614" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.614" starttime="20171026 01:21:43.614"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.614" starttime="20171026 01:21:43.613"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.616" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.616" starttime="20171026 01:21:43.615"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.616" starttime="20171026 01:21:43.615"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.617" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.617" starttime="20171026 01:21:43.617"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.617" starttime="20171026 01:21:43.616"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.623" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.623" starttime="20171026 01:21:43.618"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.623" starttime="20171026 01:21:43.618"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.624" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.624" starttime="20171026 01:21:43.624"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.624" starttime="20171026 01:21:43.623"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.626" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.626" starttime="20171026 01:21:43.625"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.626" starttime="20171026 01:21:43.625"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.627" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.627" starttime="20171026 01:21:43.627"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.627" starttime="20171026 01:21:43.626"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.629" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.629" starttime="20171026 01:21:43.628"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.629" starttime="20171026 01:21:43.628"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.630" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.630" starttime="20171026 01:21:43.630"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.630" starttime="20171026 01:21:43.629"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.631" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.631" starttime="20171026 01:21:43.631"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.632" starttime="20171026 01:21:43.630"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.633" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.633" starttime="20171026 01:21:43.632"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.633" starttime="20171026 01:21:43.632"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171026 01:21:43.642" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:21:43.643" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171026 01:21:43.895" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171026 01:21:43.904" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171026 01:21:43.904" level="INFO">${stderr} = </msg>
<msg timestamp="20171026 01:21:43.904" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171026 01:21:43.904" starttime="20171026 01:21:43.634"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.904" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171026 01:21:43.905" starttime="20171026 01:21:43.904"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.905" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171026 01:21:43.905" starttime="20171026 01:21:43.905"></status>
</kw>
<msg timestamp="20171026 01:21:43.905" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20171026 01:21:43.905" starttime="20171026 01:21:43.633"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.907" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.907" starttime="20171026 01:21:43.906"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.907" starttime="20171026 01:21:43.906"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.907" starttime="20171026 01:21:43.627"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.909" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.909" starttime="20171026 01:21:43.908"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.909" starttime="20171026 01:21:43.907"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 01:21:43.909" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171026 01:21:43.909" starttime="20171026 01:21:43.909"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.911" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.911" starttime="20171026 01:21:43.911"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.911" starttime="20171026 01:21:43.910"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.912" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.912" starttime="20171026 01:21:43.912"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.912" starttime="20171026 01:21:43.911"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.912" starttime="20171026 01:21:43.910"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.914" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.914" starttime="20171026 01:21:43.913"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.914" starttime="20171026 01:21:43.913"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.915" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.915" starttime="20171026 01:21:43.915"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.915" starttime="20171026 01:21:43.914"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.915" starttime="20171026 01:21:43.913"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.917" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.917" starttime="20171026 01:21:43.916"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.917" starttime="20171026 01:21:43.916"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.918" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.918" starttime="20171026 01:21:43.918"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.918" starttime="20171026 01:21:43.917"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.918" starttime="20171026 01:21:43.915"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.918" starttime="20171026 01:21:43.909"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.919" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.919" starttime="20171026 01:21:43.919"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.920" starttime="20171026 01:21:43.918"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.920" starttime="20171026 01:21:43.610"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 01:21:43.925" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20171026 01:21:43.925" starttime="20171026 01:21:43.925"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20171026 01:21:43.926" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20171026 01:21:43.926" starttime="20171026 01:21:43.926"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:43.928" starttime="20171026 01:21:43.927"></status>
</kw>
<msg timestamp="20171026 01:21:43.928" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20171026 01:21:43.928" starttime="20171026 01:21:43.927"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:43.930" starttime="20171026 01:21:43.930"></status>
</kw>
<msg timestamp="20171026 01:21:43.931" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:43.931" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:21:43.931" starttime="20171026 01:21:43.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:43.931" starttime="20171026 01:21:43.931"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 01:21:43.945" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171026 01:21:43.945" starttime="20171026 01:21:43.945"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 01:21:43.947" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20171026 01:21:43.947" starttime="20171026 01:21:43.946"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.953" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20171026 01:21:43.953" starttime="20171026 01:21:43.947"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.957" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.957" starttime="20171026 01:21:43.956"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.957" starttime="20171026 01:21:43.956"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.958" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.958" starttime="20171026 01:21:43.958"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.959" starttime="20171026 01:21:43.957"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.960" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.960" starttime="20171026 01:21:43.959"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.960" starttime="20171026 01:21:43.959"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:43.961" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:43.961" starttime="20171026 01:21:43.961"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.962" starttime="20171026 01:21:43.960"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.962" starttime="20171026 01:21:43.955"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:43.962" starttime="20171026 01:21:43.955"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:21:43.962" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:21:43.963" starttime="20171026 01:21:43.962"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:21:44.004" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:21:44.004" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20171026 01:21:46.111" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:21:46.111" starttime="20171026 01:21:43.980"></status>
</kw>
<msg timestamp="20171026 01:21:46.112" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:46.112" level="INFO">${ret_values} = (u'CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState    : xyz.openbmc_project.State.Host.Host...</msg>
<status status="PASS" endtime="20171026 01:21:46.112" starttime="20171026 01:21:43.963"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:21:46.112" level="INFO">${stdout} = CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState    : xyz.openbmc_project.State.Host.HostState...</msg>
<status status="PASS" endtime="20171026 01:21:46.112" starttime="20171026 01:21:46.112"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:21:46.113" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:21:46.113" starttime="20171026 01:21:46.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.121" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:46.121" starttime="20171026 01:21:46.121"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.121" starttime="20171026 01:21:46.120"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.121" starttime="20171026 01:21:46.113"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.121" starttime="20171026 01:21:43.954"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.121" starttime="20171026 01:21:43.954"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.121" starttime="20171026 01:21:43.953"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.122" starttime="20171026 01:21:43.946"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.122" starttime="20171026 01:21:43.945"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 01:21:46.123" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20171026 01:21:46.123" starttime="20171026 01:21:46.123"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.124" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20171026 01:21:46.124" starttime="20171026 01:21:46.123"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.127" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:46.127" starttime="20171026 01:21:46.127"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.127" starttime="20171026 01:21:46.126"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.129" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:46.129" starttime="20171026 01:21:46.128"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.129" starttime="20171026 01:21:46.127"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.130" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:46.130" starttime="20171026 01:21:46.130"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.130" starttime="20171026 01:21:46.129"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.131" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:46.132" starttime="20171026 01:21:46.131"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.132" starttime="20171026 01:21:46.130"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.132" starttime="20171026 01:21:46.125"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.132" starttime="20171026 01:21:46.125"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:21:46.133" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:21:46.133" starttime="20171026 01:21:46.132"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:21:46.173" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:21:46.174" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20171026 01:21:46.530" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:21:46.530" starttime="20171026 01:21:46.150"></status>
</kw>
<msg timestamp="20171026 01:21:46.530" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:46.530" level="INFO">${ret_values} = (u'20171026004218', u'', 0)</msg>
<status status="PASS" endtime="20171026 01:21:46.530" starttime="20171026 01:21:46.133"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:21:46.531" level="INFO">${stdout} = 20171026004218</msg>
<status status="PASS" endtime="20171026 01:21:46.531" starttime="20171026 01:21:46.531"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:21:46.532" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:21:46.532" starttime="20171026 01:21:46.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.539" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:46.539" starttime="20171026 01:21:46.539"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.540" starttime="20171026 01:21:46.538"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.540" starttime="20171026 01:21:46.532"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.540" starttime="20171026 01:21:46.124"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.540" starttime="20171026 01:21:46.124"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.543" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:46.543" starttime="20171026 01:21:46.543"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.543" starttime="20171026 01:21:46.542"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.544" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:46.544" starttime="20171026 01:21:46.544"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.545" starttime="20171026 01:21:46.543"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.546" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:46.546" starttime="20171026 01:21:46.545"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.546" starttime="20171026 01:21:46.545"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.547" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:46.548" starttime="20171026 01:21:46.547"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.548" starttime="20171026 01:21:46.546"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.548" starttime="20171026 01:21:46.541"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.548" starttime="20171026 01:21:46.541"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:21:46.549" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:21:46.549" starttime="20171026 01:21:46.548"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:21:46.589" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:21:46.590" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20171026 01:21:46.891" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:21:46.891" starttime="20171026 01:21:46.567"></status>
</kw>
<msg timestamp="20171026 01:21:46.891" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:46.891" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-210"\nVERSION_ID="v1.99.10-210-gbd5b518"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenB...</msg>
<status status="PASS" endtime="20171026 01:21:46.892" starttime="20171026 01:21:46.549"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:21:46.892" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-210"
VERSION_ID="v1.99.10-210-gbd5b518"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Proj...</msg>
<status status="PASS" endtime="20171026 01:21:46.892" starttime="20171026 01:21:46.892"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:21:46.893" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:21:46.893" starttime="20171026 01:21:46.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.900" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:46.901" starttime="20171026 01:21:46.900"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.901" starttime="20171026 01:21:46.899"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.901" starttime="20171026 01:21:46.893"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.901" starttime="20171026 01:21:46.540"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.901" starttime="20171026 01:21:46.540"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.901" starttime="20171026 01:21:46.124"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.901" starttime="20171026 01:21:46.122"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.901" starttime="20171026 01:21:46.122"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 01:21:46.902" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20171026 01:21:46.902" starttime="20171026 01:21:46.902"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.903" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20171026 01:21:46.903" starttime="20171026 01:21:46.903"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.906" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:46.906" starttime="20171026 01:21:46.906"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.907" starttime="20171026 01:21:46.905"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.908" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:46.908" starttime="20171026 01:21:46.907"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.908" starttime="20171026 01:21:46.907"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.909" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:46.909" starttime="20171026 01:21:46.909"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.909" starttime="20171026 01:21:46.908"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:46.911" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:46.911" starttime="20171026 01:21:46.910"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.911" starttime="20171026 01:21:46.910"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.911" starttime="20171026 01:21:46.905"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:46.911" starttime="20171026 01:21:46.904"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:21:46.912" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:21:46.912" starttime="20171026 01:21:46.912"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:21:46.952" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:21:46.953" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20171026 01:21:47.254" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:21:47.254" starttime="20171026 01:21:46.930"></status>
</kw>
<msg timestamp="20171026 01:21:47.254" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:47.254" level="INFO">${ret_values} = (u' 01:21:57 up 23 min,  load average: 0.30, 0.49, 0.81', u'', 0)</msg>
<status status="PASS" endtime="20171026 01:21:47.254" starttime="20171026 01:21:46.912"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:21:47.255" level="INFO">${stdout} =  01:21:57 up 23 min,  load average: 0.30, 0.49, 0.81</msg>
<status status="PASS" endtime="20171026 01:21:47.255" starttime="20171026 01:21:47.255"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:21:47.256" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:21:47.256" starttime="20171026 01:21:47.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:47.263" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:47.263" starttime="20171026 01:21:47.263"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.264" starttime="20171026 01:21:47.262"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.264" starttime="20171026 01:21:47.256"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.264" starttime="20171026 01:21:46.904"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.264" starttime="20171026 01:21:46.903"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:47.267" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:47.267" starttime="20171026 01:21:47.267"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.267" starttime="20171026 01:21:47.266"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:47.269" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:47.269" starttime="20171026 01:21:47.268"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.269" starttime="20171026 01:21:47.268"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:47.270" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:47.270" starttime="20171026 01:21:47.270"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.270" starttime="20171026 01:21:47.269"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:47.271" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:47.271" starttime="20171026 01:21:47.271"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.272" starttime="20171026 01:21:47.270"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.272" starttime="20171026 01:21:47.265"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.272" starttime="20171026 01:21:47.265"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:21:47.273" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:21:47.273" starttime="20171026 01:21:47.272"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:21:47.313" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:21:47.313" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20171026 01:21:47.630" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:21:47.631" starttime="20171026 01:21:47.290"></status>
</kw>
<msg timestamp="20171026 01:21:47.631" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:47.631" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.4M     14.4M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20171026 01:21:47.631" starttime="20171026 01:21:47.273"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:21:47.632" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.4M     14.4M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20171026 01:21:47.632" starttime="20171026 01:21:47.631"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:21:47.632" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:21:47.632" starttime="20171026 01:21:47.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:47.640" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:47.640" starttime="20171026 01:21:47.640"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.640" starttime="20171026 01:21:47.639"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.640" starttime="20171026 01:21:47.633"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.640" starttime="20171026 01:21:47.264"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.640" starttime="20171026 01:21:47.264"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:47.643" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:47.644" starttime="20171026 01:21:47.643"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.644" starttime="20171026 01:21:47.642"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:47.645" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:47.645" starttime="20171026 01:21:47.645"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.645" starttime="20171026 01:21:47.644"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:47.646" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:47.646" starttime="20171026 01:21:47.646"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.646" starttime="20171026 01:21:47.645"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:47.648" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:47.648" starttime="20171026 01:21:47.647"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.648" starttime="20171026 01:21:47.647"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.648" starttime="20171026 01:21:47.642"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:47.648" starttime="20171026 01:21:47.642"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:21:47.649" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:21:47.649" starttime="20171026 01:21:47.648"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:21:47.689" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:21:47.689" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20171026 01:21:48.007" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:21:48.008" starttime="20171026 01:21:47.667"></status>
</kw>
<msg timestamp="20171026 01:21:48.008" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:48.008" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-da78428ac543d6d9ac2493dfa77364eb300a47cb #1 Mon Oct 23 15:28:01 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20171026 01:21:48.008" starttime="20171026 01:21:47.649"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:21:48.009" level="INFO">${stdout} = Linux witherspoon 4.10.17-da78428ac543d6d9ac2493dfa77364eb300a47cb #1 Mon Oct 23 15:28:01 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20171026 01:21:48.009" starttime="20171026 01:21:48.008"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:21:48.009" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:21:48.009" starttime="20171026 01:21:48.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:48.018" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:48.018" starttime="20171026 01:21:48.017"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:48.018" starttime="20171026 01:21:48.016"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:48.018" starttime="20171026 01:21:48.010"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:48.018" starttime="20171026 01:21:47.641"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:48.018" starttime="20171026 01:21:47.640"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:48.018" starttime="20171026 01:21:46.903"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:48.018" starttime="20171026 01:21:46.901"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:48.018" starttime="20171026 01:21:46.901"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:48.018" starttime="20171026 01:21:43.945"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:48.018" starttime="20171026 01:21:43.944"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:48.018" starttime="20171026 01:21:43.932"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:48.019" starttime="20171026 01:21:43.929"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:48.019" starttime="20171026 01:21:43.928"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:48.021" starttime="20171026 01:21:48.020"></status>
</kw>
<msg timestamp="20171026 01:21:48.021" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:48.021" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:21:48.021" starttime="20171026 01:21:48.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:48.021" starttime="20171026 01:21:48.021"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 01:21:48.035" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20171026 01:21:48.036" starttime="20171026 01:21:48.035"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 01:21:48.037" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20171026 01:21:48.037" starttime="20171026 01:21:48.037"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:21:48.038" level="INFO">${logpath} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20171026 01:21:48.038" starttime="20171026 01:21:48.038"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:21:48.041" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:21:48.042" starttime="20171026 01:21:48.041"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:21:48.042" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:21:48.042" starttime="20171026 01:21:48.042"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:21:48.043" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:21:48.043" starttime="20171026 01:21:48.043"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:21:48.044" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:21:48.044" starttime="20171026 01:21:48.043"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:21:48.632" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:21:48.632" starttime="20171026 01:21:48.045"></status>
</kw>
<msg timestamp="20171026 01:21:48.632" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:48.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:48.632" starttime="20171026 01:21:48.044"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:21:48.633" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:48.633" starttime="20171026 01:21:48.633"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:48.634" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:48.634" starttime="20171026 01:21:48.633"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:48.634" starttime="20171026 01:21:48.040"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:48.634" starttime="20171026 01:21:48.040"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:48.634" starttime="20171026 01:21:48.039"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:21:48.635" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20171026 01:21:48.635" starttime="20171026 01:21:48.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:48.635" starttime="20171026 01:21:48.635"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:21:49.420" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:21:49.420" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:49.420" starttime="20171026 01:21:48.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:49.421" starttime="20171026 01:21:49.420"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:21:49.421" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:21:49.421" starttime="20171026 01:21:49.421"></status>
</kw>
<msg timestamp="20171026 01:21:49.421" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:49.421" starttime="20171026 01:21:48.038"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:49.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:49.423" starttime="20171026 01:21:49.422"></status>
</kw>
<msg timestamp="20171026 01:21:49.423" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:21:49.423" starttime="20171026 01:21:49.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:49.423" starttime="20171026 01:21:49.423"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:21:49.425" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 180000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 170000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 180000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 125, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 170000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 7200, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 7200, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 7200, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 2500000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 20000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 2350000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 2500000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 20000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 2350000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 35000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 23375, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 25000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 2000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 2000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 2000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000, 
      "CriticalLow": 180000, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 203000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 290000, 
      "WarningLow": 200000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 13000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 12700, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000, 
      "CriticalLow": 180000, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 204000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 290000, 
      "WarningLow": 200000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 13000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 12700, 
      "WarningLow": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:21:49.426" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:21:49.426" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "CriticalAlarmHigh": 0,
            "CriticalAlarmLow": 0,
            "CriticalHigh": 180000,
        ...</msg>
<status status="PASS" endtime="20171026 01:21:49.426" starttime="20171026 01:21:49.424"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:49.428" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:49.428" starttime="20171026 01:21:49.427"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:49.428" starttime="20171026 01:21:49.426"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:49.428" starttime="20171026 01:21:48.037"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:21:49.429" level="INFO">${logpath} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_OCC_state.txt</msg>
<status status="PASS" endtime="20171026 01:21:49.429" starttime="20171026 01:21:49.428"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:21:49.432" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:21:49.432" starttime="20171026 01:21:49.431"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:21:49.433" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:21:49.433" starttime="20171026 01:21:49.432"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:21:49.433" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:21:49.433" starttime="20171026 01:21:49.433"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:21:49.434" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:21:49.434" starttime="20171026 01:21:49.434"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:21:49.803" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:21:49.803" starttime="20171026 01:21:49.435"></status>
</kw>
<msg timestamp="20171026 01:21:49.803" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:49.803" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:49.803" starttime="20171026 01:21:49.435"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:21:49.804" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:49.804" starttime="20171026 01:21:49.804"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:49.805" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:49.806" starttime="20171026 01:21:49.805"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:49.806" starttime="20171026 01:21:49.431"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:49.806" starttime="20171026 01:21:49.430"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:49.806" starttime="20171026 01:21:49.430"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:21:49.807" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20171026 01:21:49.807" starttime="20171026 01:21:49.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:49.808" starttime="20171026 01:21:49.808"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:21:50.104" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:21:50.105" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:50.105" starttime="20171026 01:21:49.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:50.105" starttime="20171026 01:21:50.105"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:21:50.106" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:21:50.106" starttime="20171026 01:21:50.106"></status>
</kw>
<msg timestamp="20171026 01:21:50.106" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:50.106" starttime="20171026 01:21:49.429"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:50.107" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:50.107" starttime="20171026 01:21:50.107"></status>
</kw>
<msg timestamp="20171026 01:21:50.107" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:21:50.108" starttime="20171026 01:21:50.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:50.108" starttime="20171026 01:21:50.108"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:21:50.109" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:21:50.109" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:21:50.109" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0,
            "ThrottleMemTemp": 0,
            "ThrottleProcPower": 0,...</msg>
<status status="PASS" endtime="20171026 01:21:50.109" starttime="20171026 01:21:50.108"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:50.111" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_OCC_state.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:50.111" starttime="20171026 01:21:50.111"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:50.111" starttime="20171026 01:21:50.109"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:50.111" starttime="20171026 01:21:49.428"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:21:50.112" level="INFO">${logpath} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_control_list.txt</msg>
<status status="PASS" endtime="20171026 01:21:50.112" starttime="20171026 01:21:50.112"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:21:50.115" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:21:50.116" starttime="20171026 01:21:50.115"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:21:50.116" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:21:50.116" starttime="20171026 01:21:50.116"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:21:50.117" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:21:50.117" starttime="20171026 01:21:50.117"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:21:50.118" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:21:50.118" starttime="20171026 01:21:50.117"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:21:50.486" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:21:50.487" starttime="20171026 01:21:50.119"></status>
</kw>
<msg timestamp="20171026 01:21:50.487" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:50.487" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:50.487" starttime="20171026 01:21:50.118"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:21:50.487" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:50.487" starttime="20171026 01:21:50.487"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:50.488" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:50.488" starttime="20171026 01:21:50.488"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:50.488" starttime="20171026 01:21:50.114"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:50.488" starttime="20171026 01:21:50.114"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:50.489" starttime="20171026 01:21:50.113"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:21:50.489" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20171026 01:21:50.489" starttime="20171026 01:21:50.489"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:50.490" starttime="20171026 01:21:50.490"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:21:50.827" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:21:50.827" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:50.827" starttime="20171026 01:21:50.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:50.828" starttime="20171026 01:21:50.827"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:21:50.828" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:21:50.828" starttime="20171026 01:21:50.828"></status>
</kw>
<msg timestamp="20171026 01:21:50.828" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:50.828" starttime="20171026 01:21:50.112"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:50.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:50.830" starttime="20171026 01:21:50.829"></status>
</kw>
<msg timestamp="20171026 01:21:50.830" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:21:50.830" starttime="20171026 01:21:50.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:50.830" starttime="20171026 01:21:50.830"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:21:50.831" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:21:50.831" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:21:50.831" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20171026 01:21:50.831" starttime="20171026 01:21:50.831"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:50.833" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_control_list.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:50.833" starttime="20171026 01:21:50.832"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:50.833" starttime="20171026 01:21:50.832"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:50.833" starttime="20171026 01:21:50.111"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:21:50.834" level="INFO">${logpath} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_led.txt</msg>
<status status="PASS" endtime="20171026 01:21:50.834" starttime="20171026 01:21:50.834"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:21:50.837" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:21:50.839" starttime="20171026 01:21:50.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:21:50.839" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:21:50.839" starttime="20171026 01:21:50.839"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:21:50.840" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:21:50.840" starttime="20171026 01:21:50.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:21:50.841" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:21:50.841" starttime="20171026 01:21:50.840"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:21:51.348" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:21:51.348" starttime="20171026 01:21:50.842"></status>
</kw>
<msg timestamp="20171026 01:21:51.348" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:51.348" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:51.348" starttime="20171026 01:21:50.841"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:21:51.349" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:51.349" starttime="20171026 01:21:51.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:51.350" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:51.350" starttime="20171026 01:21:51.350"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:51.350" starttime="20171026 01:21:50.836"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:51.350" starttime="20171026 01:21:50.835"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:51.350" starttime="20171026 01:21:50.835"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:21:51.351" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20171026 01:21:51.351" starttime="20171026 01:21:51.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:51.352" starttime="20171026 01:21:51.352"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:21:53.163" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:21:53.163" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:53.163" starttime="20171026 01:21:51.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:53.164" starttime="20171026 01:21:53.164"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:21:53.164" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:21:53.165" starttime="20171026 01:21:53.164"></status>
</kw>
<msg timestamp="20171026 01:21:53.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:53.166" starttime="20171026 01:21:50.834"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:53.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:53.167" starttime="20171026 01:21:53.167"></status>
</kw>
<msg timestamp="20171026 01:21:53.168" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:21:53.168" starttime="20171026 01:21:53.167"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:53.168" starttime="20171026 01:21:53.168"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:21:53.170" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:21:53.170" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:21:53.171" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20171026 01:21:53.171" starttime="20171026 01:21:53.169"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:53.172" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_led.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:53.172" starttime="20171026 01:21:53.172"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:53.172" starttime="20171026 01:21:53.171"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:53.172" starttime="20171026 01:21:50.833"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:21:53.173" level="INFO">${logpath} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20171026 01:21:53.173" starttime="20171026 01:21:53.173"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:21:53.176" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:21:53.177" starttime="20171026 01:21:53.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:21:53.177" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:21:53.177" starttime="20171026 01:21:53.177"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:21:53.178" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:21:53.178" starttime="20171026 01:21:53.178"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:21:53.179" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:21:53.179" starttime="20171026 01:21:53.178"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:21:53.599" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:21:53.599" starttime="20171026 01:21:53.180"></status>
</kw>
<msg timestamp="20171026 01:21:53.599" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:53.600" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:53.600" starttime="20171026 01:21:53.179"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:21:53.600" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:53.600" starttime="20171026 01:21:53.600"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:53.601" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:53.601" starttime="20171026 01:21:53.601"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:53.601" starttime="20171026 01:21:53.175"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:53.601" starttime="20171026 01:21:53.175"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:53.601" starttime="20171026 01:21:53.174"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:21:53.602" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20171026 01:21:53.602" starttime="20171026 01:21:53.602"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:53.603" starttime="20171026 01:21:53.602"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:21:53.971" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:21:53.971" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:53.971" starttime="20171026 01:21:53.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:53.972" starttime="20171026 01:21:53.971"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:21:53.972" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:21:53.972" starttime="20171026 01:21:53.972"></status>
</kw>
<msg timestamp="20171026 01:21:53.972" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:53.972" starttime="20171026 01:21:53.173"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:53.974" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:53.974" starttime="20171026 01:21:53.973"></status>
</kw>
<msg timestamp="20171026 01:21:53.974" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:21:53.974" starttime="20171026 01:21:53.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:53.974" starttime="20171026 01:21:53.974"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:21:53.975" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/0fab445b": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-210-gbd5b518", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/0fab445b/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/0fab445b/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/347855ea": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-208-g69b2e34", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/347855ea/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/347855ea/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/390e9d0f": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1471-g8043efb,buildroot-2017.08-8-g5e23247,skiboot-v5.8-150-gabb1d4e81f33-p74eca7d,hostboot-b01e6bb,linux-4.13.5-openpower1-pd2c0bbb,petitboot-v1.6.0-p3dc37e1,machine-xml-389c56f,occ-ba4e81e,hostboot-binaries-0886586,capp-ucode-p9-dd2-v2,sbe-374add4", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-ibm-OP9_v1.19_1.62", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/390e9d0f/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/390e9d0f/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/347855ea", 
        "/xyz/openbmc_project/software/0fab445b", 
        "/xyz/openbmc_project/software/390e9d0f"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/0fab445b", 
        "/xyz/openbmc_project/software/390e9d0f"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:21:53.976" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:21:53.976" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/0fab445b": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status status="PASS" endtime="20171026 01:21:53.976" starttime="20171026 01:21:53.975"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:53.977" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:53.977" starttime="20171026 01:21:53.977"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:53.977" starttime="20171026 01:21:53.976"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:53.977" starttime="20171026 01:21:53.173"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:21:53.978" level="INFO">${logpath} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_elog.txt</msg>
<status status="PASS" endtime="20171026 01:21:53.978" starttime="20171026 01:21:53.978"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:21:53.981" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:21:53.982" starttime="20171026 01:21:53.981"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:21:53.983" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:21:53.983" starttime="20171026 01:21:53.982"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:21:53.983" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:21:53.983" starttime="20171026 01:21:53.983"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:21:53.984" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:21:53.984" starttime="20171026 01:21:53.984"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:21:54.381" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:21:54.381" starttime="20171026 01:21:53.985"></status>
</kw>
<msg timestamp="20171026 01:21:54.381" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:54.381" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:54.382" starttime="20171026 01:21:53.984"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:21:54.382" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:54.382" starttime="20171026 01:21:54.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:54.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:54.383" starttime="20171026 01:21:54.383"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:54.383" starttime="20171026 01:21:53.980"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:54.383" starttime="20171026 01:21:53.980"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:54.383" starttime="20171026 01:21:53.979"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:21:54.384" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20171026 01:21:54.384" starttime="20171026 01:21:54.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:54.385" starttime="20171026 01:21:54.384"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:21:54.499" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:21:54.499" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:54.499" starttime="20171026 01:21:54.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:54.500" starttime="20171026 01:21:54.499"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:21:54.500" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:21:54.500" starttime="20171026 01:21:54.500"></status>
</kw>
<msg timestamp="20171026 01:21:54.500" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:54.500" starttime="20171026 01:21:53.978"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:54.502" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171026 01:21:54.502" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171026 01:21:54.502" starttime="20171026 01:21:54.501"></status>
</kw>
<msg timestamp="20171026 01:21:54.502" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171026 01:21:54.502" starttime="20171026 01:21:54.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20171026 01:21:54.503" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171026 01:21:54.503" starttime="20171026 01:21:54.503"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:54.504" starttime="20171026 01:21:54.503"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:54.504" starttime="20171026 01:21:53.977"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:21:54.504" level="INFO">${logpath} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_inventory.txt</msg>
<status status="PASS" endtime="20171026 01:21:54.504" starttime="20171026 01:21:54.504"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:21:54.507" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:21:54.508" starttime="20171026 01:21:54.507"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:21:54.508" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:21:54.509" starttime="20171026 01:21:54.508"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:21:54.509" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:21:54.509" starttime="20171026 01:21:54.509"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:21:54.510" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:21:54.510" starttime="20171026 01:21:54.510"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:21:54.950" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:21:54.950" starttime="20171026 01:21:54.511"></status>
</kw>
<msg timestamp="20171026 01:21:54.951" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:54.951" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:54.951" starttime="20171026 01:21:54.510"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:21:54.951" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:54.952" starttime="20171026 01:21:54.951"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:54.952" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:54.952" starttime="20171026 01:21:54.952"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:54.953" starttime="20171026 01:21:54.506"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:54.953" starttime="20171026 01:21:54.506"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:54.953" starttime="20171026 01:21:54.505"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:21:54.953" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20171026 01:21:54.953" starttime="20171026 01:21:54.953"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:54.954" starttime="20171026 01:21:54.954"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:21:57.053" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:21:57.053" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:57.053" starttime="20171026 01:21:54.954"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:57.054" starttime="20171026 01:21:57.053"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:21:57.054" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:21:57.054" starttime="20171026 01:21:57.054"></status>
</kw>
<msg timestamp="20171026 01:21:57.055" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:21:57.055" starttime="20171026 01:21:54.505"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:21:57.056" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:21:57.056" starttime="20171026 01:21:57.055"></status>
</kw>
<msg timestamp="20171026 01:21:57.056" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:21:57.056" starttime="20171026 01:21:57.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:57.057" starttime="20171026 01:21:57.056"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:21:57.060" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "'8335-GTW000000'", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "'1318AAA0000000'"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/390e9d0f"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM WS", 
      "Model": "", 
      "PartNumber": "'00VK5250000000'", 
      "Present": 1, 
      "PrettyName": "FRU DESCRIPTION", 
      "SerialNumber": "Y130UF72702N0000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/0fab445b", 
        "/xyz/openbmc_project/software/347855ea"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:2a:08", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "02AA862", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA1934095325", 
      "Version": "21"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "02AA862", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA1934095327", 
      "Version": "21"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447ab88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x34479965", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106206", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106774", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1610632b", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x161067d9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16105459", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106032", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447b3cb", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447b1ae", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x347a74db", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447a78b", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447ab90", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x347a7465", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x161067bc", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106204", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 0, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:21:57.060" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:21:57.060" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20171026 01:21:57.060" starttime="20171026 01:21:57.057"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:57.062" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_inventory.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:57.062" starttime="20171026 01:21:57.061"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:57.062" starttime="20171026 01:21:57.060"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:57.062" starttime="20171026 01:21:54.504"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:57.062" starttime="20171026 01:21:48.037"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:57.062" starttime="20171026 01:21:48.036"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:57.062" starttime="20171026 01:21:48.036"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:57.062" starttime="20171026 01:21:48.036"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:57.063" starttime="20171026 01:21:48.035"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:57.063" starttime="20171026 01:21:48.022"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:57.063" starttime="20171026 01:21:48.019"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:57.063" starttime="20171026 01:21:48.019"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:57.066" starttime="20171026 01:21:57.064"></status>
</kw>
<msg timestamp="20171026 01:21:57.066" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:57.066" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:21:57.066" starttime="20171026 01:21:57.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:57.067" starttime="20171026 01:21:57.067"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:57.084" starttime="20171026 01:21:57.082"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20171026 01:21:57.085" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20171026 01:21:57.085" starttime="20171026 01:21:57.085"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:57.085" starttime="20171026 01:21:57.082"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:57.085" starttime="20171026 01:21:57.067"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:57.085" starttime="20171026 01:21:57.063"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:57.085" starttime="20171026 01:21:57.063"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:57.088" starttime="20171026 01:21:57.088"></status>
</kw>
<msg timestamp="20171026 01:21:57.088" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:57.088" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:21:57.088" starttime="20171026 01:21:57.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:57.089" starttime="20171026 01:21:57.089"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171026 01:21:57.125" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:21:57.125" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20171026 01:21:57.410" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20171026 01:21:57.420" level="INFO">${core_files} = None</msg>
<msg timestamp="20171026 01:21:57.420" level="INFO">${stderr} = None</msg>
<msg timestamp="20171026 01:21:57.420" level="INFO">${rc} = None</msg>
<msg timestamp="20171026 01:21:57.420" level="FAIL">#(UTC) 2017/10/26 01:21:57.419352 -    0.294933 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20171026 01:21:57.420" starttime="20171026 01:21:57.104"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20171026 01:21:57.421" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20171026 01:21:57.421" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20171026 01:21:57.421" starttime="20171026 01:21:57.421"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:57.431" starttime="20171026 01:21:57.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:58.494" starttime="20171026 01:21:57.432"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:58.494" starttime="20171026 01:21:57.431"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:58.494" starttime="20171026 01:21:57.429"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:58.494" starttime="20171026 01:21:57.422"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20171026 01:21:58.494" starttime="20171026 01:21:58.494"></status>
</kw>
<status status="FAIL" endtime="20171026 01:21:58.495" starttime="20171026 01:21:57.103"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:58.495" starttime="20171026 01:21:57.089"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:58.495" starttime="20171026 01:21:57.086"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:58.495" starttime="20171026 01:21:57.085"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:58.497" starttime="20171026 01:21:58.497"></status>
</kw>
<msg timestamp="20171026 01:21:58.497" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:58.497" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:21:58.497" starttime="20171026 01:21:58.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:58.498" starttime="20171026 01:21:58.498"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 01:21:58.512" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20171026 01:21:58.512" starttime="20171026 01:21:58.512"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 01:21:58.514" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20171026 01:21:58.514" starttime="20171026 01:21:58.513"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:21:58.515" level="INFO">${logpath} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20171026 01:21:58.515" starttime="20171026 01:21:58.514"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:58.516" starttime="20171026 01:21:58.516"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:21:58.517" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:21:58.517" starttime="20171026 01:21:58.517"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:21:58.558" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:21:58.558" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20171026 01:21:58.844" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:21:58.844" starttime="20171026 01:21:58.535"></status>
</kw>
<msg timestamp="20171026 01:21:58.844" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:58.844" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20171026 01:21:58.844" starttime="20171026 01:21:58.517"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:21:58.845" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20171026 01:21:58.845" starttime="20171026 01:21:58.845"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:21:58.846" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:21:58.846" starttime="20171026 01:21:58.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:58.854" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:58.854" starttime="20171026 01:21:58.853"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:58.854" starttime="20171026 01:21:58.853"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:58.854" starttime="20171026 01:21:58.846"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:58.854" starttime="20171026 01:21:58.515"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:58.854" starttime="20171026 01:21:58.514"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:21:58.855" level="INFO">${logpath} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20171026 01:21:58.855" starttime="20171026 01:21:58.855"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:58.856" starttime="20171026 01:21:58.856"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:21:58.857" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:21:58.857" starttime="20171026 01:21:58.857"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:21:58.898" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:21:58.899" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20171026 01:21:59.562" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:21:59.562" starttime="20171026 01:21:58.875"></status>
</kw>
<msg timestamp="20171026 01:21:59.563" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:21:59.564" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct 26 01:12 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct 26 01:12 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20171026 01:21:59.564" starttime="20171026 01:21:58.858"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:21:59.564" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct 26 01:12 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct 26 01:12 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20171026 01:21:59.565" starttime="20171026 01:21:59.564"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:21:59.565" level="INFO">${stderr} = ls: /proc/2721/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20171026 01:21:59.565" starttime="20171026 01:21:59.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:21:59.574" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:21:59.574" starttime="20171026 01:21:59.573"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:59.574" starttime="20171026 01:21:59.572"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:59.574" starttime="20171026 01:21:59.566"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:59.574" starttime="20171026 01:21:58.855"></status>
</kw>
<status status="PASS" endtime="20171026 01:21:59.574" starttime="20171026 01:21:58.854"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:21:59.575" level="INFO">${logpath} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20171026 01:21:59.575" starttime="20171026 01:21:59.575"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:21:59.576" starttime="20171026 01:21:59.576"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:21:59.577" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:21:59.577" starttime="20171026 01:21:59.577"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:21:59.618" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:21:59.619" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20171026 01:22:02.041" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:22:02.042" starttime="20171026 01:21:59.595"></status>
</kw>
<msg timestamp="20171026 01:22:02.042" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:22:02.045" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-10-26 00:58:29 UTC, end at Thu 2017-10-26 01:22:09 UTC. --\nOct 26 00:58:29 witherspoon kernel: Booting Linux on physical CPU 0x0\nOct 26 00:58:29 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20171026 01:22:02.045" starttime="20171026 01:21:59.578"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:22:02.047" level="INFO">${stdout} = -- Logs begin at Thu 2017-10-26 00:58:29 UTC, end at Thu 2017-10-26 01:22:09 UTC. --
Oct 26 00:58:29 witherspoon kernel: Booting Linux on physical CPU 0x0
Oct 26 00:58:29 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20171026 01:22:02.047" starttime="20171026 01:22:02.046"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:22:02.047" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:22:02.047" starttime="20171026 01:22:02.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:22:02.057" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:22:02.057" starttime="20171026 01:22:02.056"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:02.057" starttime="20171026 01:22:02.054"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:02.057" starttime="20171026 01:22:02.048"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:02.057" starttime="20171026 01:21:59.575"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:02.057" starttime="20171026 01:21:59.574"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:22:02.058" level="INFO">${logpath} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20171026 01:22:02.058" starttime="20171026 01:22:02.058"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:02.059" starttime="20171026 01:22:02.059"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:22:02.060" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:22:02.060" starttime="20171026 01:22:02.060"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:22:02.103" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:22:02.103" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20171026 01:22:09.354" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:22:09.358" starttime="20171026 01:22:02.078"></status>
</kw>
<msg timestamp="20171026 01:22:09.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:22:09.398" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=fa0051fb1ad740b9b27528d1b107b98c;i=1;b=6f1ce2ce89de44d482f279d541f8230a;m=c46bc6;t=55c68aba2a6ec;x=c18f24fe3377bfee",\n\t"__REALTIME_TIMESTAMP" : "1508979509470956",\n\t"__MONO...</msg>
<status status="PASS" endtime="20171026 01:22:09.398" starttime="20171026 01:22:02.061"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:22:09.408" level="INFO">${stdout} = {
	"__CURSOR" : "s=fa0051fb1ad740b9b27528d1b107b98c;i=1;b=6f1ce2ce89de44d482f279d541f8230a;m=c46bc6;t=55c68aba2a6ec;x=c18f24fe3377bfee",
	"__REALTIME_TIMESTAMP" : "1508979509470956",
	"__MONOTONIC_TIM...</msg>
<status status="PASS" endtime="20171026 01:22:09.408" starttime="20171026 01:22:09.399"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:22:09.409" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:22:09.409" starttime="20171026 01:22:09.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:22:09.434" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:22:09.434" starttime="20171026 01:22:09.428"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:09.434" starttime="20171026 01:22:09.417"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:09.434" starttime="20171026 01:22:09.409"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:09.434" starttime="20171026 01:22:02.058"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:09.434" starttime="20171026 01:22:02.057"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:22:09.435" level="INFO">${logpath} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20171026 01:22:09.435" starttime="20171026 01:22:09.435"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:09.437" starttime="20171026 01:22:09.436"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:22:09.438" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:22:09.438" starttime="20171026 01:22:09.437"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:22:09.478" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:22:09.479" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20171026 01:22:09.651" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:22:09.651" starttime="20171026 01:22:09.455"></status>
</kw>
<msg timestamp="20171026 01:22:09.651" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:22:09.651" level="INFO">${ret_values} = (u'MemTotal:         432252 kB\nMemFree:          219192 kB\nMemAvailable:     327492 kB\nBuffers:           33172 kB\nCached:            85440 kB\nSwapCached:            0 kB\nActive:           16354...</msg>
<status status="PASS" endtime="20171026 01:22:09.651" starttime="20171026 01:22:09.438"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:22:09.652" level="INFO">${stdout} = MemTotal:         432252 kB
MemFree:          219192 kB
MemAvailable:     327492 kB
Buffers:           33172 kB
Cached:            85440 kB
SwapCached:            0 kB
Active:           163540 kB
Inac...</msg>
<status status="PASS" endtime="20171026 01:22:09.652" starttime="20171026 01:22:09.652"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:22:09.653" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:22:09.653" starttime="20171026 01:22:09.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:22:09.660" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:22:09.660" starttime="20171026 01:22:09.660"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:09.661" starttime="20171026 01:22:09.659"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:09.661" starttime="20171026 01:22:09.653"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:09.661" starttime="20171026 01:22:09.436"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:09.661" starttime="20171026 01:22:09.435"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:22:09.662" level="INFO">${logpath} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20171026 01:22:09.662" starttime="20171026 01:22:09.661"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:09.663" starttime="20171026 01:22:09.663"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:22:09.664" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:22:09.664" starttime="20171026 01:22:09.663"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:22:09.705" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:22:09.706" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20171026 01:22:10.148" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:22:10.148" starttime="20171026 01:22:09.682"></status>
</kw>
<msg timestamp="20171026 01:22:10.148" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:22:10.149" level="INFO">${ret_values} = (u'Mem: 213060K used, 219192K free, 8948K shrd, 33172K buff, 85440K cached\nCPU:   0% usr  25% sys   0% nic  75% idle   0% io   0% irq   0% sirq\nLoad average: 0.66 0.56 0.83 1/152 2725\n  PID  PPID U...</msg>
<status status="PASS" endtime="20171026 01:22:10.149" starttime="20171026 01:22:09.664"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:22:10.149" level="INFO">${stdout} = Mem: 213060K used, 219192K free, 8948K shrd, 33172K buff, 85440K cached
CPU:   0% usr  25% sys   0% nic  75% idle   0% io   0% irq   0% sirq
Load average: 0.66 0.56 0.83 1/152 2725
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20171026 01:22:10.149" starttime="20171026 01:22:10.149"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:22:10.150" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:22:10.150" starttime="20171026 01:22:10.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:22:10.158" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:22:10.159" starttime="20171026 01:22:10.158"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.159" starttime="20171026 01:22:10.157"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.159" starttime="20171026 01:22:10.150"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.159" starttime="20171026 01:22:09.662"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.159" starttime="20171026 01:22:09.661"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:22:10.160" level="INFO">${logpath} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20171026 01:22:10.160" starttime="20171026 01:22:10.159"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:10.161" starttime="20171026 01:22:10.161"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:22:10.162" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:22:10.162" starttime="20171026 01:22:10.161"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:22:10.202" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:22:10.203" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20171026 01:22:10.418" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:22:10.419" starttime="20171026 01:22:10.180"></status>
</kw>
<msg timestamp="20171026 01:22:10.419" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:22:10.419" level="INFO">${ret_values} = (u'[    0.650000] console [ttyS4] enabled\n[    0.790000] timeriomem_rng 1e6e2078.hwrng: 32bits from 0xf00e2078 @ 1us\n[    0.810000] random: fast init done\n[    0.840000] brd: module loaded\n[    0....</msg>
<status status="PASS" endtime="20171026 01:22:10.419" starttime="20171026 01:22:10.162"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:22:10.420" level="INFO">${stdout} = [    0.650000] console [ttyS4] enabled
[    0.790000] timeriomem_rng 1e6e2078.hwrng: 32bits from 0xf00e2078 @ 1us
[    0.810000] random: fast init done
[    0.840000] brd: module loaded
[    0.870000]...</msg>
<status status="PASS" endtime="20171026 01:22:10.420" starttime="20171026 01:22:10.419"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:22:10.420" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:22:10.420" starttime="20171026 01:22:10.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:22:10.428" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/20171026012143562621_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:22:10.428" starttime="20171026 01:22:10.428"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.429" starttime="20171026 01:22:10.427"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.429" starttime="20171026 01:22:10.421"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.429" starttime="20171026 01:22:10.160"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.429" starttime="20171026 01:22:10.159"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.429" starttime="20171026 01:21:58.514"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.429" starttime="20171026 01:21:58.513"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.429" starttime="20171026 01:21:58.512"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.429" starttime="20171026 01:21:58.512"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.429" starttime="20171026 01:21:58.511"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.429" starttime="20171026 01:21:58.498"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.429" starttime="20171026 01:21:58.495"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.429" starttime="20171026 01:21:58.495"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:10.432" starttime="20171026 01:22:10.432"></status>
</kw>
<msg timestamp="20171026 01:22:10.432" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:22:10.433" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:22:10.433" starttime="20171026 01:22:10.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:10.433" starttime="20171026 01:22:10.433"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:22:10.450" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:22:10.451" starttime="20171026 01:22:10.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:22:10.451" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:22:10.451" starttime="20171026 01:22:10.451"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:22:10.452" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:22:10.452" starttime="20171026 01:22:10.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:22:10.453" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:22:10.453" starttime="20171026 01:22:10.452"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:22:10.787" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:22:10.787" starttime="20171026 01:22:10.454"></status>
</kw>
<msg timestamp="20171026 01:22:10.787" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:22:10.787" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:22:10.787" starttime="20171026 01:22:10.453"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:22:10.788" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:22:10.788" starttime="20171026 01:22:10.788"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:22:10.789" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:22:10.789" starttime="20171026 01:22:10.788"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.789" starttime="20171026 01:22:10.449"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.789" starttime="20171026 01:22:10.448"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.789" starttime="20171026 01:22:10.448"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:22:10.790" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20171026 01:22:10.790" starttime="20171026 01:22:10.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:10.790" starttime="20171026 01:22:10.790"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:22:10.879" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:22:10.879" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:22:10.879" starttime="20171026 01:22:10.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:10.880" starttime="20171026 01:22:10.879"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:22:10.880" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:22:10.880" starttime="20171026 01:22:10.880"></status>
</kw>
<msg timestamp="20171026 01:22:10.880" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:22:10.880" starttime="20171026 01:22:10.447"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:22:10.882" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171026 01:22:10.882" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171026 01:22:10.882" starttime="20171026 01:22:10.881"></status>
</kw>
<msg timestamp="20171026 01:22:10.882" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171026 01:22:10.882" starttime="20171026 01:22:10.881"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20171026 01:22:10.883" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:22:10.883" starttime="20171026 01:22:10.882"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.883" starttime="20171026 01:22:10.447"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.883" starttime="20171026 01:22:10.434"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.883" starttime="20171026 01:22:10.430"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.883" starttime="20171026 01:22:10.429"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:10.885" starttime="20171026 01:22:10.885"></status>
</kw>
<msg timestamp="20171026 01:22:10.885" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:22:10.885" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:22:10.885" starttime="20171026 01:22:10.884"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:10.886" starttime="20171026 01:22:10.886"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20171026 01:22:10.900" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:22:10.900" starttime="20171026 01:22:10.900"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.900" starttime="20171026 01:22:10.899"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.901" starttime="20171026 01:22:10.886"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.901" starttime="20171026 01:22:10.883"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.901" starttime="20171026 01:22:10.883"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.901" starttime="20171026 01:21:43.928"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.901" starttime="20171026 01:21:43.925"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.901" starttime="20171026 01:21:43.925"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.901" starttime="20171026 01:21:43.925"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171026 01:22:10.907" starttime="20171026 01:22:10.907"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.907" starttime="20171026 01:22:10.901"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.907" starttime="20171026 01:21:43.924"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.908" starttime="20171026 01:21:40.483"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.908" starttime="20171026 01:21:40.483"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171026 01:22:10.909" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20171026 01:22:10.909" starttime="20171026 01:22:10.909"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171026 01:22:10.910" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171026012143562621_BmcCodeUpdate/20171026012143562621_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20171026 01:22:10.910" starttime="20171026 01:22:10.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:10.910" starttime="20171026 01:22:10.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:10.911" starttime="20171026 01:22:10.911"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20171026 01:22:10.912" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20171026 01:22:10.912" starttime="20171026 01:22:10.911"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171026 01:22:10.913" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20171026 01:22:10.913" starttime="20171026 01:22:10.912"></status>
</kw>
<msg timestamp="20171026 01:22:10.913" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20171026 01:22:10.913" starttime="20171026 01:22:10.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171026 01:22:10.915" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:22:10.915" starttime="20171026 01:22:10.914"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.915" starttime="20171026 01:22:10.914"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:10.916" starttime="20171026 01:22:10.915"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171026 01:22:10.917" level="INFO">${cur_time} = 2017-10-26 01:22:10:916875</msg>
<status status="PASS" endtime="20171026 01:22:10.917" starttime="20171026 01:22:10.917"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171026 01:22:10.918" level="INFO">${cur_time} = 20171026012210916875</msg>
<status status="PASS" endtime="20171026 01:22:10.918" starttime="20171026 01:22:10.917"></status>
</kw>
<msg timestamp="20171026 01:22:10.918" level="INFO">${cur_time} = 20171026012210916875</msg>
<status status="PASS" endtime="20171026 01:22:10.918" starttime="20171026 01:22:10.916"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20171026 01:22:10.919" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:22:10.919" starttime="20171026 01:22:10.918"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:10.919" starttime="20171026 01:22:10.908"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:22:10.923" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:22:10.924" starttime="20171026 01:22:10.923"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:22:10.924" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:22:10.924" starttime="20171026 01:22:10.924"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:22:10.925" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:22:10.925" starttime="20171026 01:22:10.925"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:22:10.926" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:22:10.926" starttime="20171026 01:22:10.925"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:22:11.327" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:22:11.328" starttime="20171026 01:22:10.927"></status>
</kw>
<msg timestamp="20171026 01:22:11.328" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:22:11.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:22:11.328" starttime="20171026 01:22:10.926"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:22:11.328" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:22:11.329" starttime="20171026 01:22:11.328"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:22:11.329" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:22:11.329" starttime="20171026 01:22:11.329"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:11.329" starttime="20171026 01:22:10.922"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:11.330" starttime="20171026 01:22:10.922"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:11.330" starttime="20171026 01:22:10.921"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:22:11.330" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171026 01:22:11.330" starttime="20171026 01:22:11.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:11.331" starttime="20171026 01:22:11.331"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:22:11.434" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171026 01:22:11.434" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:22:11.434" starttime="20171026 01:22:11.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:11.435" starttime="20171026 01:22:11.435"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:22:11.435" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:22:11.436" starttime="20171026 01:22:11.435"></status>
</kw>
<msg timestamp="20171026 01:22:11.436" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:22:11.436" starttime="20171026 01:22:10.921"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171026 01:22:11.436" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:22:11.437" starttime="20171026 01:22:11.436"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:11.437" starttime="20171026 01:22:10.920"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:22:11.440" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:22:11.440" starttime="20171026 01:22:11.440"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:22:11.441" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:22:11.441" starttime="20171026 01:22:11.441"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:22:11.442" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:22:11.442" starttime="20171026 01:22:11.441"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:22:11.442" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:22:11.442" starttime="20171026 01:22:11.442"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:22:11.799" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:22:11.799" starttime="20171026 01:22:11.443"></status>
</kw>
<msg timestamp="20171026 01:22:11.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:22:11.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:22:11.800" starttime="20171026 01:22:11.443"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:22:11.800" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:22:11.800" starttime="20171026 01:22:11.800"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:22:11.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:22:11.801" starttime="20171026 01:22:11.801"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:11.801" starttime="20171026 01:22:11.439"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:11.801" starttime="20171026 01:22:11.439"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:11.801" starttime="20171026 01:22:11.438"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:22:11.802" level="INFO">${base_uri} = /xyz/openbmc_project//dump/entry/list</msg>
<status status="PASS" endtime="20171026 01:22:11.802" starttime="20171026 01:22:11.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:11.803" starttime="20171026 01:22:11.802"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:22:11.891" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project//dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171026 01:22:11.892" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:22:11.892" starttime="20171026 01:22:11.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:22:11.892" starttime="20171026 01:22:11.892"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:22:11.893" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:22:11.893" starttime="20171026 01:22:11.893"></status>
</kw>
<msg timestamp="20171026 01:22:11.893" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:22:11.893" starttime="20171026 01:22:11.437"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171026 01:22:11.894" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:22:11.894" starttime="20171026 01:22:11.893"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:11.894" starttime="20171026 01:22:11.437"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:11.894" starttime="20171026 01:22:10.920"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:11.894" starttime="20171026 01:22:10.919"></status>
</kw>
<status status="PASS" endtime="20171026 01:22:11.894" starttime="20171026 01:21:40.482"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Fatal Error</arg>
<arg>msg=Code update failed.</arg>
</arguments>
<kw name="Fatal Error" library="BuiltIn">
<doc>Stops the whole test execution.</doc>
<arguments>
<arg>msg=Code update failed.</arg>
</arguments>
<msg timestamp="20171026 01:22:11.895" level="FAIL">Code update failed.</msg>
<status status="FAIL" endtime="20171026 01:22:11.895" starttime="20171026 01:22:11.895"></status>
</kw>
<status status="FAIL" endtime="20171026 01:22:11.895" starttime="20171026 01:22:11.895"></status>
</kw>
<status status="FAIL" endtime="20171026 01:22:11.896" starttime="20171026 01:21:40.481">Code update failed.</status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>BMC_Code_Update</tag>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20171026 01:22:11.896" critical="yes" starttime="20171026 01:21:17.489">SSLError: ('The write operation timed out',)

Also teardown failed:
Code update failed.</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20171026 01:22:11.897" starttime="20171026 01:21:11.734"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">BMC_Code_Update</stat>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
