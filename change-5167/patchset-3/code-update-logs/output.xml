<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170711 20:36:48.969" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170711 20:36:50.022" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170711 20:36:50.022" starttime="20170711 20:36:50.021"></status>
</kw>
<msg timestamp="20170711 20:36:50.022" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170711 20:36:50.022" starttime="20170711 20:36:50.021"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:50.023" starttime="20170711 20:36:50.023"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:50.023" starttime="20170711 20:36:50.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:50.024" starttime="20170711 20:36:50.023"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170711 20:36:50.025" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170711 20:36:50.025" starttime="20170711 20:36:50.025"></status>
</kw>
<msg timestamp="20170711 20:36:50.025" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170711 20:36:50.025" starttime="20170711 20:36:50.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:50.028" starttime="20170711 20:36:50.027"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:50.028" starttime="20170711 20:36:50.027"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:50.028" starttime="20170711 20:36:50.025"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170711 20:36:50.029" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170711 20:36:51.823" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170711 20:36:51.823" starttime="20170711 20:36:50.028"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:51.823" starttime="20170711 20:36:50.020"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170711 20:36:51.824" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170711 20:36:51.953" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170711 20:36:51.953" level="INFO">${output} = 1493346005</msg>
<msg timestamp="20170711 20:36:51.953" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170711 20:36:51.953" starttime="20170711 20:36:51.824"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170711 20:36:51.954" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170711 20:36:51.954" starttime="20170711 20:36:51.954"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170711 20:36:51.954" level="INFO">${btime} = 1493346005</msg>
<status status="PASS" endtime="20170711 20:36:51.955" starttime="20170711 20:36:51.954"></status>
</kw>
<msg timestamp="20170711 20:36:51.955" level="INFO">${cur_btime} = 1493346005</msg>
<status status="PASS" endtime="20170711 20:36:51.955" starttime="20170711 20:36:50.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170711 20:36:51.956" level="INFO">${BOOT_TIME} = 1493346005</msg>
<status status="PASS" endtime="20170711 20:36:51.957" starttime="20170711 20:36:51.956"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:51.957" starttime="20170711 20:36:51.955"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:51.957" starttime="20170711 20:36:50.019"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:51.957" starttime="20170711 20:36:51.957"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:51.959" starttime="20170711 20:36:51.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:51.960" starttime="20170711 20:36:51.960"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:51.960" starttime="20170711 20:36:50.019"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170711 20:36:51.963" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170711 20:36:51.963" starttime="20170711 20:36:51.963"></status>
</kw>
<msg timestamp="20170711 20:36:51.963" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170711 20:36:51.963" starttime="20170711 20:36:51.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:51.964" starttime="20170711 20:36:51.964"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:51.965" starttime="20170711 20:36:51.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:51.965" starttime="20170711 20:36:51.965"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170711 20:36:51.966" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170711 20:36:51.966" starttime="20170711 20:36:51.966"></status>
</kw>
<msg timestamp="20170711 20:36:51.966" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170711 20:36:51.966" starttime="20170711 20:36:51.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:51.969" starttime="20170711 20:36:51.969"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:51.969" starttime="20170711 20:36:51.968"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:51.969" starttime="20170711 20:36:51.967"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170711 20:36:51.970" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170711 20:36:53.648" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170711 20:36:53.648" starttime="20170711 20:36:51.969"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:53.648" starttime="20170711 20:36:51.961"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170711 20:36:53.649" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170711 20:36:53.736" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170711 20:36:53.736" level="INFO">${output} = </msg>
<msg timestamp="20170711 20:36:53.737" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/98da6a547f8141998b98e23f5894fd04.</msg>
<msg timestamp="20170711 20:36:53.737" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170711 20:36:53.737" starttime="20170711 20:36:53.648"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:53.737" starttime="20170711 20:36:53.737"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:53.738" starttime="20170711 20:36:51.961"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170711 20:36:53.740" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170711 20:36:53.740" starttime="20170711 20:36:53.739"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:36:53.741" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170711 20:36:53.741" starttime="20170711 20:36:53.741"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:36:53.745" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:36:53.745" starttime="20170711 20:36:53.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:36:53.746" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:36:53.746" starttime="20170711 20:36:53.746"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:36:53.747" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:36:53.747" starttime="20170711 20:36:53.746"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:36:53.748" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:36:53.748" starttime="20170711 20:36:53.747"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:36:53.958" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:36:53.958" starttime="20170711 20:36:53.749"></status>
</kw>
<msg timestamp="20170711 20:36:53.958" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:36:53.958" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:36:53.958" starttime="20170711 20:36:53.749"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:36:53.959" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:36:53.959" starttime="20170711 20:36:53.958"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:36:53.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:36:53.960" starttime="20170711 20:36:53.959"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:53.960" starttime="20170711 20:36:53.744"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:53.960" starttime="20170711 20:36:53.743"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:53.960" starttime="20170711 20:36:53.742"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:36:53.960" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170711 20:36:53.960" starttime="20170711 20:36:53.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:36:53.961" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:36:53.961" starttime="20170711 20:36:53.961"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:53.962" starttime="20170711 20:36:53.961"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170711 20:36:53.963" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Ty...</msg>
<status status="PASS" endtime="20170711 20:36:53.963" starttime="20170711 20:36:53.963"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170711 20:36:53.964" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170711 20:36:53.964" starttime="20170711 20:36:53.964"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:53.964" starttime="20170711 20:36:53.963"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:53.965" starttime="20170711 20:36:53.962"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170711 20:36:54.286" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170711 20:36:54.286" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:36:54.286" starttime="20170711 20:36:53.965"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170711 20:36:54.288" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170711 20:36:54.288" starttime="20170711 20:36:54.287"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170711 20:36:54.289" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170711 20:36:54.289" starttime="20170711 20:36:54.288"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:54.289" starttime="20170711 20:36:54.288"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:54.289" starttime="20170711 20:36:54.287"></status>
</kw>
<msg timestamp="20170711 20:36:54.289" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:36:54.289" starttime="20170711 20:36:53.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:36:54.290" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:36:54.290" starttime="20170711 20:36:54.290"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170711 20:36:54.291" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170711 20:36:54.291" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170711 20:36:54.291" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170711 20:36:54.291" starttime="20170711 20:36:54.290"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:54.291" starttime="20170711 20:36:53.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:54.292" starttime="20170711 20:36:54.291"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:36:54.297" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:36:54.297" starttime="20170711 20:36:54.296"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:36:54.298" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:36:54.298" starttime="20170711 20:36:54.297"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:36:54.298" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:36:54.298" starttime="20170711 20:36:54.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:36:54.299" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:36:54.299" starttime="20170711 20:36:54.299"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:36:54.817" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:36:54.818" starttime="20170711 20:36:54.300"></status>
</kw>
<msg timestamp="20170711 20:36:54.818" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:36:54.818" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:36:54.818" starttime="20170711 20:36:54.299"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:36:54.818" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:36:54.819" starttime="20170711 20:36:54.818"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:36:54.819" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:36:54.819" starttime="20170711 20:36:54.819"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:54.819" starttime="20170711 20:36:54.296"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:54.819" starttime="20170711 20:36:54.295"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:54.820" starttime="20170711 20:36:54.294"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:36:54.820" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170711 20:36:54.820" starttime="20170711 20:36:54.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:54.821" starttime="20170711 20:36:54.821"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170711 20:36:54.977" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170711 20:36:54.977" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:36:54.977" starttime="20170711 20:36:54.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:54.978" starttime="20170711 20:36:54.977"></status>
</kw>
<msg timestamp="20170711 20:36:54.978" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:36:54.978" starttime="20170711 20:36:54.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:36:54.979" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:36:54.979" starttime="20170711 20:36:54.978"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170711 20:36:54.979" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170711 20:36:54.979" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170711 20:36:54.979" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170711 20:36:54.979" starttime="20170711 20:36:54.979"></status>
</kw>
<msg timestamp="20170711 20:36:54.980" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170711 20:36:54.980" starttime="20170711 20:36:54.293"></status>
</kw>
<msg timestamp="20170711 20:36:54.980" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170711 20:36:54.980" starttime="20170711 20:36:54.293"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:54.981" starttime="20170711 20:36:54.980"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:54.981" starttime="20170711 20:36:54.292"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:54.981" starttime="20170711 20:36:54.292"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:54.981" starttime="20170711 20:36:53.739"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:54.981" starttime="20170711 20:36:53.738"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:54.981" starttime="20170711 20:36:53.738"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170711 20:36:54.982" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170711 20:36:54.982" starttime="20170711 20:36:54.982"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:36:54.983" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170711 20:36:54.983" starttime="20170711 20:36:54.983"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:36:54.987" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:36:54.987" starttime="20170711 20:36:54.986"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:36:54.988" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:36:54.988" starttime="20170711 20:36:54.987"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:36:54.988" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:36:54.988" starttime="20170711 20:36:54.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:36:54.989" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:36:54.989" starttime="20170711 20:36:54.989"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:36:55.491" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:36:55.491" starttime="20170711 20:36:54.990"></status>
</kw>
<msg timestamp="20170711 20:36:55.491" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:36:55.491" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:36:55.491" starttime="20170711 20:36:54.989"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:36:55.492" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:36:55.492" starttime="20170711 20:36:55.492"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:36:55.493" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:36:55.493" starttime="20170711 20:36:55.492"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:55.493" starttime="20170711 20:36:54.986"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:55.493" starttime="20170711 20:36:54.985"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:55.493" starttime="20170711 20:36:54.984"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:36:55.494" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170711 20:36:55.494" starttime="20170711 20:36:55.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:36:55.494" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:36:55.494" starttime="20170711 20:36:55.494"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:55.495" starttime="20170711 20:36:55.495"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170711 20:36:55.496" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170711 20:36:55.497" starttime="20170711 20:36:55.496"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170711 20:36:55.497" level="INFO">URI:https://9.41.166.169/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170711 20:36:55.498" starttime="20170711 20:36:55.497"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:55.498" starttime="20170711 20:36:55.497"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:55.498" starttime="20170711 20:36:55.495"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170711 20:36:55.780" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170711 20:36:55.780" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:36:55.780" starttime="20170711 20:36:55.498"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170711 20:36:55.782" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170711 20:36:55.782" starttime="20170711 20:36:55.781"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170711 20:36:55.783" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170711 20:36:55.783" starttime="20170711 20:36:55.782"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:55.783" starttime="20170711 20:36:55.782"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:55.783" starttime="20170711 20:36:55.780"></status>
</kw>
<msg timestamp="20170711 20:36:55.783" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:36:55.783" starttime="20170711 20:36:54.984"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:36:55.784" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:36:55.784" starttime="20170711 20:36:55.784"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170711 20:36:55.785" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170711 20:36:55.785" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170711 20:36:55.785" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170711 20:36:55.785" starttime="20170711 20:36:55.785"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:55.785" starttime="20170711 20:36:54.982"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:36:55.789" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:36:55.789" starttime="20170711 20:36:55.788"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:36:55.790" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:36:55.790" starttime="20170711 20:36:55.789"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:36:55.790" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:36:55.790" starttime="20170711 20:36:55.790"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:36:55.791" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:36:55.791" starttime="20170711 20:36:55.791"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:36:56.000" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:36:56.000" starttime="20170711 20:36:55.792"></status>
</kw>
<msg timestamp="20170711 20:36:56.000" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:36:56.000" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:36:56.000" starttime="20170711 20:36:55.791"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:36:56.001" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:36:56.001" starttime="20170711 20:36:56.000"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:36:56.001" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:36:56.002" starttime="20170711 20:36:56.001"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:56.002" starttime="20170711 20:36:55.788"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:56.002" starttime="20170711 20:36:55.787"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:56.002" starttime="20170711 20:36:55.787"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:36:56.002" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170711 20:36:56.003" starttime="20170711 20:36:56.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:56.003" starttime="20170711 20:36:56.003"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170711 20:36:56.110" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170711 20:36:56.111" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:36:56.111" starttime="20170711 20:36:56.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:56.111" starttime="20170711 20:36:56.111"></status>
</kw>
<msg timestamp="20170711 20:36:56.112" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:36:56.112" starttime="20170711 20:36:55.786"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:36:56.112" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:36:56.112" starttime="20170711 20:36:56.112"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170711 20:36:56.113" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170711 20:36:56.113" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170711 20:36:56.113" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170711 20:36:56.113" starttime="20170711 20:36:56.113"></status>
</kw>
<msg timestamp="20170711 20:36:56.113" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170711 20:36:56.113" starttime="20170711 20:36:55.786"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:56.114" starttime="20170711 20:36:56.114"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:56.114" starttime="20170711 20:36:54.981"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:36:56.115" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170711 20:36:56.115" starttime="20170711 20:36:56.115"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:36:56.118" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:36:56.118" starttime="20170711 20:36:56.118"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:36:56.119" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:36:56.119" starttime="20170711 20:36:56.118"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:36:56.120" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:36:56.120" starttime="20170711 20:36:56.119"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:36:56.120" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:36:56.120" starttime="20170711 20:36:56.120"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:36:56.421" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:36:56.421" starttime="20170711 20:36:56.121"></status>
</kw>
<msg timestamp="20170711 20:36:56.421" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:36:56.421" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:36:56.421" starttime="20170711 20:36:56.121"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:36:56.422" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:36:56.422" starttime="20170711 20:36:56.422"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:36:56.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:36:56.423" starttime="20170711 20:36:56.422"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:56.423" starttime="20170711 20:36:56.117"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:56.423" starttime="20170711 20:36:56.117"></status>
</kw>
<status status="PASS" endtime="20170711 20:36:56.423" starttime="20170711 20:36:56.116"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:36:56.424" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170711 20:36:56.424" starttime="20170711 20:36:56.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:36:56.425" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:36:56.425" starttime="20170711 20:36:56.424"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:56.425" starttime="20170711 20:36:56.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:56.426" starttime="20170711 20:36:56.425"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170711 20:36:56.824" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170711 20:36:56.824" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:36:56.824" starttime="20170711 20:36:56.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:36:56.825" starttime="20170711 20:36:56.825"></status>
</kw>
<msg timestamp="20170711 20:36:56.825" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:36:56.825" starttime="20170711 20:36:56.115"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:36:56.826" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:36:56.826" starttime="20170711 20:36:56.826"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170711 20:37:06.827" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170711 20:37:06.827" starttime="20170711 20:36:56.826"></status>
</kw>
<status status="PASS" endtime="20170711 20:37:06.827" starttime="20170711 20:36:56.114"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170711 20:37:06.831" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170711 20:37:06.831" starttime="20170711 20:37:06.830"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170711 20:37:06.835" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170711 20:37:09.841" level="INFO">${RC} = 0</msg>
<msg timestamp="20170711 20:37:09.841" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.18 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.556 ms
64 bytes from 9.41.166.169...</msg>
<status status="PASS" endtime="20170711 20:37:09.841" starttime="20170711 20:37:06.831"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170711 20:37:09.846" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.18 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.556 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=1.42 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.593 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.556/0.938/1.422/0.375 ms</msg>
<status status="PASS" endtime="20170711 20:37:09.846" starttime="20170711 20:37:09.845"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:37:09.847" starttime="20170711 20:37:09.847"></status>
</kw>
<status status="PASS" endtime="20170711 20:37:09.847" starttime="20170711 20:37:06.830"></status>
</kw>
<msg timestamp="20170711 20:37:09.847" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170711 20:37:09.847" starttime="20170711 20:37:06.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170711 20:37:09.848" starttime="20170711 20:37:09.848"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:37:09.851" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:37:09.854" starttime="20170711 20:37:09.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:37:09.855" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:37:09.855" starttime="20170711 20:37:09.854"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:37:09.855" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:37:09.855" starttime="20170711 20:37:09.855"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:37:09.856" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:37:09.856" starttime="20170711 20:37:09.856"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:37:09.863" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff864f6150&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170711 20:37:10.064" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff864eb950&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170711 20:37:10.466" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff864eb510&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170711 20:37:10.469" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff864eb850&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20170711 20:37:10.470" starttime="20170711 20:37:09.857"></status>
</kw>
<msg timestamp="20170711 20:37:10.470" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170711 20:37:10.470" level="INFO">${resp} = ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff86...</msg>
<status status="PASS" endtime="20170711 20:37:10.470" starttime="20170711 20:37:09.856"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:37:10.471" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170711 20:37:10.471" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff864eb850&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170711 20:37:10.471" starttime="20170711 20:37:10.470"></status>
</kw>
<status status="FAIL" endtime="20170711 20:37:10.471" starttime="20170711 20:37:09.850"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:37:30.473" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:37:30.474" starttime="20170711 20:37:30.473"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:37:30.474" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:37:30.474" starttime="20170711 20:37:30.474"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:37:30.475" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:37:30.475" starttime="20170711 20:37:30.475"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:37:30.476" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:37:30.476" starttime="20170711 20:37:30.475"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:37:48.497" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff86dc9210&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170711 20:37:51.697" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8974c690&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170711 20:37:54.897" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8974ca10&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170711 20:37:57.497" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff890bf710&gt;: Failed to establish a new connection: [Errno 113] No route to host',))</msg>
<status status="FAIL" endtime="20170711 20:37:57.498" starttime="20170711 20:37:30.476"></status>
</kw>
<msg timestamp="20170711 20:37:57.498" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170711 20:37:57.498" level="INFO">${resp} = ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff89...</msg>
<status status="PASS" endtime="20170711 20:37:57.498" starttime="20170711 20:37:30.476"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:37:57.499" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170711 20:37:57.499" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff890bf710&gt;: Failed to establish a new connection: [Errno 113] No route to host',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170711 20:37:57.499" starttime="20170711 20:37:57.498"></status>
</kw>
<status status="FAIL" endtime="20170711 20:37:57.499" starttime="20170711 20:37:30.472"></status>
</kw>
<msg timestamp="20170711 20:37:57.499" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ConnectionError: HTTPSConnectionPool(host='9.41.166.169', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff890bf710&gt;: Failed to establish a new connection: [Errno 113] No route to host',)): FAIL != PASS</msg>
<status status="FAIL" endtime="20170711 20:37:57.499" starttime="20170711 20:37:09.850"></status>
</kw>
<status status="FAIL" endtime="20170711 20:37:57.500" starttime="20170711 20:37:09.849"></status>
</kw>
<msg timestamp="20170711 20:37:57.500" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170711 20:37:57.500" starttime="20170711 20:37:09.849"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170711 20:37:57.501" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170711 20:37:57.501" starttime="20170711 20:37:57.501"></status>
</kw>
<status status="FAIL" endtime="20170711 20:37:57.501" starttime="20170711 20:37:57.500"></status>
</kw>
<status status="FAIL" endtime="20170711 20:37:57.501" starttime="20170711 20:37:06.829"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170711 20:38:07.504" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170711 20:38:07.504" starttime="20170711 20:38:07.504"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170711 20:38:07.509" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170711 20:38:13.526" level="INFO">${RC} = 1</msg>
<msg timestamp="20170711 20:38:13.526" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
From 9.41.165.94 icmp_seq=1 Destination Host Unreachable
From 9.41.165.94 icmp_seq=2 Destination Host Unreachable
From 9.41.165.94 icmp_seq=3 Des...</msg>
<status status="PASS" endtime="20170711 20:38:13.527" starttime="20170711 20:38:07.504"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170711 20:38:13.531" level="INFO">RC: 1
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
From 9.41.165.94 icmp_seq=1 Destination Host Unreachable
From 9.41.165.94 icmp_seq=2 Destination Host Unreachable
From 9.41.165.94 icmp_seq=3 Destination Host Unreachable
From 9.41.165.94 icmp_seq=4 Destination Host Unreachable

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 0 received, +4 errors, 100% packet loss, time 3015ms
pipe 3</msg>
<status status="PASS" endtime="20170711 20:38:13.531" starttime="20170711 20:38:13.530"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20170711 20:38:13.532" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20170711 20:38:13.532" starttime="20170711 20:38:13.531"></status>
</kw>
<status status="FAIL" endtime="20170711 20:38:13.532" starttime="20170711 20:38:07.503"></status>
</kw>
<msg timestamp="20170711 20:38:13.532" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20170711 20:38:13.532" starttime="20170711 20:38:07.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20170711 20:38:13.534" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20170711 20:38:13.534" starttime="20170711 20:38:13.533"></status>
</kw>
<status status="FAIL" endtime="20170711 20:38:13.534" starttime="20170711 20:38:13.533"></status>
</kw>
<status status="FAIL" endtime="20170711 20:38:13.534" starttime="20170711 20:38:07.502"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170711 20:38:23.537" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170711 20:38:23.537" starttime="20170711 20:38:23.537"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170711 20:38:23.541" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170711 20:38:26.546" level="INFO">${RC} = 0</msg>
<msg timestamp="20170711 20:38:26.546" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.92 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.754 ms
64 bytes from 9.41.166.169...</msg>
<status status="PASS" endtime="20170711 20:38:26.547" starttime="20170711 20:38:23.538"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170711 20:38:26.550" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.92 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.754 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.610 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.563 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.563/0.963/1.928/0.562 ms</msg>
<status status="PASS" endtime="20170711 20:38:26.551" starttime="20170711 20:38:26.550"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:38:26.553" starttime="20170711 20:38:26.551"></status>
</kw>
<status status="PASS" endtime="20170711 20:38:26.553" starttime="20170711 20:38:23.536"></status>
</kw>
<msg timestamp="20170711 20:38:26.553" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170711 20:38:26.553" starttime="20170711 20:38:23.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170711 20:38:26.554" starttime="20170711 20:38:26.554"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:38:26.557" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:38:26.558" starttime="20170711 20:38:26.557"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:38:26.559" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:38:26.559" starttime="20170711 20:38:26.558"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:38:26.559" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:38:26.559" starttime="20170711 20:38:26.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:38:26.560" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:38:26.560" starttime="20170711 20:38:26.560"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:38:46.586" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170711 20:38:46.586" starttime="20170711 20:38:26.561"></status>
</kw>
<msg timestamp="20170711 20:38:46.587" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170711 20:38:46.587" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170711 20:38:46.587" starttime="20170711 20:38:26.560"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:38:46.587" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170711 20:38:46.588" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170711 20:38:46.588" starttime="20170711 20:38:46.587"></status>
</kw>
<status status="FAIL" endtime="20170711 20:38:46.588" starttime="20170711 20:38:26.556"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:39:06.590" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:39:06.590" starttime="20170711 20:39:06.589"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:39:06.591" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:39:06.591" starttime="20170711 20:39:06.591"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:39:06.592" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:39:06.592" starttime="20170711 20:39:06.591"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:39:06.592" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:39:06.592" starttime="20170711 20:39:06.592"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:39:21.588" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:39:21.588" starttime="20170711 20:39:06.593"></status>
</kw>
<msg timestamp="20170711 20:39:21.588" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:21.588" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:21.588" starttime="20170711 20:39:06.593"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:39:21.589" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:21.589" starttime="20170711 20:39:21.589"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:21.590" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:21.590" starttime="20170711 20:39:21.589"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:21.590" starttime="20170711 20:39:06.588"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:21.590" starttime="20170711 20:38:26.556"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:21.590" starttime="20170711 20:38:26.555"></status>
</kw>
<msg timestamp="20170711 20:39:21.590" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170711 20:39:21.590" starttime="20170711 20:38:26.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:21.591" starttime="20170711 20:39:21.591"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170711 20:39:21.593" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170711 20:39:21.593" starttime="20170711 20:39:21.592"></status>
</kw>
<msg timestamp="20170711 20:39:21.593" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170711 20:39:21.593" starttime="20170711 20:39:21.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:21.594" starttime="20170711 20:39:21.594"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:21.594" starttime="20170711 20:39:21.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:21.595" starttime="20170711 20:39:21.595"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170711 20:39:21.596" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170711 20:39:21.596" starttime="20170711 20:39:21.596"></status>
</kw>
<msg timestamp="20170711 20:39:21.596" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170711 20:39:21.596" starttime="20170711 20:39:21.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:21.600" starttime="20170711 20:39:21.598"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:21.600" starttime="20170711 20:39:21.597"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:21.600" starttime="20170711 20:39:21.597"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170711 20:39:21.600" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170711 20:39:23.651" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170711 20:39:23.651" starttime="20170711 20:39:21.600"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:23.651" starttime="20170711 20:39:21.591"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170711 20:39:23.652" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170711 20:39:23.709" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170711 20:39:23.709" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170711 20:39:23.710" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170711 20:39:23.710" starttime="20170711 20:39:23.652"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170711 20:39:23.710" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170711 20:39:23.710" starttime="20170711 20:39:23.710"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:23.710" starttime="20170711 20:38:23.535"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:23.710" starttime="20170711 20:37:06.828"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:23.711" starttime="20170711 20:37:06.828"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170711 20:39:23.714" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170711 20:39:23.714" starttime="20170711 20:39:23.713"></status>
</kw>
<msg timestamp="20170711 20:39:23.714" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170711 20:39:23.714" starttime="20170711 20:39:23.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:23.715" starttime="20170711 20:39:23.715"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:23.715" starttime="20170711 20:39:23.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:23.716" starttime="20170711 20:39:23.716"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170711 20:39:23.719" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170711 20:39:23.719" starttime="20170711 20:39:23.718"></status>
</kw>
<msg timestamp="20170711 20:39:23.719" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170711 20:39:23.719" starttime="20170711 20:39:23.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:23.721" starttime="20170711 20:39:23.721"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:23.721" starttime="20170711 20:39:23.720"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:23.721" starttime="20170711 20:39:23.719"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170711 20:39:23.722" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170711 20:39:25.563" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170711 20:39:25.564" starttime="20170711 20:39:23.721"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:25.564" starttime="20170711 20:39:23.712"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170711 20:39:25.565" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170711 20:39:25.643" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170711 20:39:25.643" level="INFO">${output} = 1493345999</msg>
<msg timestamp="20170711 20:39:25.643" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170711 20:39:25.643" starttime="20170711 20:39:25.565"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170711 20:39:25.644" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170711 20:39:25.644" starttime="20170711 20:39:25.643"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170711 20:39:25.644" level="INFO">${btime} = 1493345999</msg>
<status status="PASS" endtime="20170711 20:39:25.644" starttime="20170711 20:39:25.644"></status>
</kw>
<msg timestamp="20170711 20:39:25.645" level="INFO">${cur_btime} = 1493345999</msg>
<status status="PASS" endtime="20170711 20:39:25.645" starttime="20170711 20:39:23.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:25.646" starttime="20170711 20:39:25.645"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:25.646" starttime="20170711 20:39:23.711"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:25.647" starttime="20170711 20:39:25.646"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:25.647" starttime="20170711 20:39:25.647"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:25.648" starttime="20170711 20:39:25.648"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:25.648" starttime="20170711 20:39:23.711"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:39:25.652" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:39:25.652" starttime="20170711 20:39:25.652"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:39:25.653" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:39:25.653" starttime="20170711 20:39:25.653"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:39:25.654" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:39:25.654" starttime="20170711 20:39:25.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:39:25.655" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:39:25.655" starttime="20170711 20:39:25.654"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:39:25.831" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:39:25.831" starttime="20170711 20:39:25.655"></status>
</kw>
<msg timestamp="20170711 20:39:25.831" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:25.832" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:25.832" starttime="20170711 20:39:25.655"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:39:25.832" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:25.832" starttime="20170711 20:39:25.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:25.833" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:25.833" starttime="20170711 20:39:25.833"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:25.833" starttime="20170711 20:39:25.651"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:25.833" starttime="20170711 20:39:25.650"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:25.833" starttime="20170711 20:39:25.650"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:39:25.834" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170711 20:39:25.834" starttime="20170711 20:39:25.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:25.835" starttime="20170711 20:39:25.835"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170711 20:39:25.878" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170711 20:39:25.879" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:25.879" starttime="20170711 20:39:25.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:25.879" starttime="20170711 20:39:25.879"></status>
</kw>
<msg timestamp="20170711 20:39:25.879" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:25.880" starttime="20170711 20:39:25.649"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:25.880" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170711 20:39:25.880" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170711 20:39:25.880" starttime="20170711 20:39:25.880"></status>
</kw>
<status status="FAIL" endtime="20170711 20:39:25.881" starttime="20170711 20:39:25.649"></status>
</kw>
<msg timestamp="20170711 20:39:25.881" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170711 20:39:25.881" starttime="20170711 20:39:25.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170711 20:39:25.882" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170711 20:39:25.882" starttime="20170711 20:39:25.882"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:39:25.888" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:39:25.888" starttime="20170711 20:39:25.888"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:39:25.889" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:39:25.889" starttime="20170711 20:39:25.889"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:39:25.889" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:39:25.890" starttime="20170711 20:39:25.889"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:39:25.890" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:39:25.890" starttime="20170711 20:39:25.890"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:39:26.094" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:39:26.094" starttime="20170711 20:39:25.891"></status>
</kw>
<msg timestamp="20170711 20:39:26.095" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:26.095" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:26.095" starttime="20170711 20:39:25.890"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:39:26.096" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:26.096" starttime="20170711 20:39:26.095"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:26.096" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:26.096" starttime="20170711 20:39:26.096"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.096" starttime="20170711 20:39:25.887"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.097" starttime="20170711 20:39:25.887"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.097" starttime="20170711 20:39:25.886"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:39:26.097" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170711 20:39:26.097" starttime="20170711 20:39:26.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:26.098" starttime="20170711 20:39:26.098"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170711 20:39:26.239" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170711 20:39:26.239" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:26.239" starttime="20170711 20:39:26.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:26.239" starttime="20170711 20:39:26.239"></status>
</kw>
<msg timestamp="20170711 20:39:26.240" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:26.240" starttime="20170711 20:39:25.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:26.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:26.240" starttime="20170711 20:39:26.240"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170711 20:39:26.241" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170711 20:39:26.241" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170711 20:39:26.241" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170711 20:39:26.242" starttime="20170711 20:39:26.241"></status>
</kw>
<msg timestamp="20170711 20:39:26.242" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170711 20:39:26.242" starttime="20170711 20:39:25.884"></status>
</kw>
<msg timestamp="20170711 20:39:26.242" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170711 20:39:26.242" starttime="20170711 20:39:25.884"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:26.243" starttime="20170711 20:39:26.242"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.243" starttime="20170711 20:39:25.884"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.243" starttime="20170711 20:39:25.883"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.243" starttime="20170711 20:39:25.883"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.243" starttime="20170711 20:39:25.881"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.243" starttime="20170711 20:39:25.881"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.243" starttime="20170711 20:36:50.018"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.243" starttime="20170711 20:36:50.018"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170711 20:39:26.251" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170711 20:39:26.251" starttime="20170711 20:39:26.251"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170711 20:39:26.252" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170711 20:39:26.252" starttime="20170711 20:39:26.252"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:39:26.253" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170711 20:39:26.253" starttime="20170711 20:39:26.253"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:39:26.256" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:39:26.257" starttime="20170711 20:39:26.256"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:39:26.257" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:39:26.257" starttime="20170711 20:39:26.257"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:39:26.258" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:39:26.258" starttime="20170711 20:39:26.258"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:39:26.259" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:39:26.259" starttime="20170711 20:39:26.258"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:39:26.437" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:39:26.437" starttime="20170711 20:39:26.259"></status>
</kw>
<msg timestamp="20170711 20:39:26.437" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:26.437" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:26.437" starttime="20170711 20:39:26.259"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:39:26.438" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:26.439" starttime="20170711 20:39:26.438"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:26.439" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:26.440" starttime="20170711 20:39:26.439"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.440" starttime="20170711 20:39:26.255"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.440" starttime="20170711 20:39:26.255"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.440" starttime="20170711 20:39:26.254"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:39:26.441" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170711 20:39:26.441" starttime="20170711 20:39:26.440"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:39:26.442" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:39:26.442" starttime="20170711 20:39:26.441"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:26.443" starttime="20170711 20:39:26.442"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170711 20:39:26.445" level="INFO">${msg} = URI:https://9.41.166.169/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170711 20:39:26.445" starttime="20170711 20:39:26.444"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170711 20:39:26.446" level="INFO">URI:https://9.41.166.169/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170711 20:39:26.446" starttime="20170711 20:39:26.446"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.446" starttime="20170711 20:39:26.445"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.446" starttime="20170711 20:39:26.443"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170711 20:39:26.805" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170711 20:39:26.805" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:26.805" starttime="20170711 20:39:26.447"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170711 20:39:26.807" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170711 20:39:26.807" starttime="20170711 20:39:26.806"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170711 20:39:26.809" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170711 20:39:26.809" starttime="20170711 20:39:26.808"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.809" starttime="20170711 20:39:26.808"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.809" starttime="20170711 20:39:26.806"></status>
</kw>
<msg timestamp="20170711 20:39:26.809" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:26.809" starttime="20170711 20:39:26.254"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:26.810" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:26.810" starttime="20170711 20:39:26.810"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170711 20:39:26.811" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170711 20:39:26.811" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170711 20:39:26.811" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170711 20:39:26.811" starttime="20170711 20:39:26.811"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.811" starttime="20170711 20:39:26.252"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:39:26.815" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:39:26.815" starttime="20170711 20:39:26.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:39:26.816" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:39:26.816" starttime="20170711 20:39:26.816"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:39:26.817" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:39:26.817" starttime="20170711 20:39:26.816"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:39:26.817" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:39:26.817" starttime="20170711 20:39:26.817"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:39:26.995" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:39:26.995" starttime="20170711 20:39:26.818"></status>
</kw>
<msg timestamp="20170711 20:39:26.995" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:26.995" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:26.995" starttime="20170711 20:39:26.818"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:39:26.996" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:26.996" starttime="20170711 20:39:26.995"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:26.997" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:26.997" starttime="20170711 20:39:26.996"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.997" starttime="20170711 20:39:26.814"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.997" starttime="20170711 20:39:26.813"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:26.997" starttime="20170711 20:39:26.813"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:39:26.998" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170711 20:39:26.998" starttime="20170711 20:39:26.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:26.998" starttime="20170711 20:39:26.998"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170711 20:39:27.099" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170711 20:39:27.099" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:27.099" starttime="20170711 20:39:26.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:27.100" starttime="20170711 20:39:27.100"></status>
</kw>
<msg timestamp="20170711 20:39:27.100" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:27.100" starttime="20170711 20:39:26.812"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:27.101" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:27.101" starttime="20170711 20:39:27.100"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170711 20:39:27.101" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170711 20:39:27.101" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170711 20:39:27.102" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20170711 20:39:27.102" starttime="20170711 20:39:27.101"></status>
</kw>
<msg timestamp="20170711 20:39:27.102" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170711 20:39:27.102" starttime="20170711 20:39:26.811"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:27.103" starttime="20170711 20:39:27.102"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:27.103" starttime="20170711 20:39:26.251"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:27.103" starttime="20170711 20:39:26.244"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<arguments>
<arg>/home/fspcibld/witherspoon-20170711201257.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:27.121" starttime="20170711 20:39:27.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:27.890" starttime="20170711 20:39:27.123"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:27.890" starttime="20170711 20:39:27.122"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:27.890" starttime="20170711 20:39:27.111"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<msg timestamp="20170711 20:39:32.967" level="FAIL">timeout</msg>
<status status="FAIL" endtime="20170711 20:39:32.967" starttime="20170711 20:39:27.890"></status>
</kw>
<status status="FAIL" endtime="20170711 20:39:32.967" starttime="20170711 20:39:27.111"></status>
</kw>
<msg timestamp="20170711 20:39:32.969" level="FAIL">timeout</msg>
<status status="FAIL" endtime="20170711 20:39:32.969" starttime="20170711 20:39:27.103"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:39:32.983" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:39:32.984" starttime="20170711 20:39:32.983"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:39:32.984" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:39:32.984" starttime="20170711 20:39:32.984"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:39:32.985" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:39:32.985" starttime="20170711 20:39:32.985"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:39:32.986" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:39:32.986" starttime="20170711 20:39:32.985"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:39:33.164" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:39:33.164" starttime="20170711 20:39:32.987"></status>
</kw>
<msg timestamp="20170711 20:39:33.165" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:33.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:33.165" starttime="20170711 20:39:32.986"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:39:33.165" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:33.165" starttime="20170711 20:39:33.165"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:33.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:33.166" starttime="20170711 20:39:33.166"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:33.166" starttime="20170711 20:39:32.982"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:33.166" starttime="20170711 20:39:32.982"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:33.167" starttime="20170711 20:39:32.981"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:39:33.167" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170711 20:39:33.167" starttime="20170711 20:39:33.167"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:33.168" starttime="20170711 20:39:33.167"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170711 20:39:33.231" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170711 20:39:33.231" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:33.231" starttime="20170711 20:39:33.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:33.232" starttime="20170711 20:39:33.231"></status>
</kw>
<msg timestamp="20170711 20:39:33.232" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:33.232" starttime="20170711 20:39:32.980"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:33.233" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:33.233" starttime="20170711 20:39:33.232"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170711 20:39:33.233" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170711 20:39:33.233" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170711 20:39:33.233" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170711 20:39:33.233" starttime="20170711 20:39:33.233"></status>
</kw>
<msg timestamp="20170711 20:39:33.234" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170711 20:39:33.234" starttime="20170711 20:39:32.979"></status>
</kw>
<msg timestamp="20170711 20:39:33.234" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170711 20:39:33.234" starttime="20170711 20:39:32.979"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170711 20:39:33.235" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170711 20:39:33.235" starttime="20170711 20:39:33.235"></status>
</kw>
<msg timestamp="20170711 20:39:33.236" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170711 20:39:33.236" starttime="20170711 20:39:33.234"></status>
</kw>
<msg timestamp="20170711 20:39:33.236" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170711 20:39:33.236" starttime="20170711 20:39:32.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170711 20:39:33.250" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170711 20:39:33.251" starttime="20170711 20:39:33.250"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170711 20:39:33.257" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170711 20:39:36.262" level="INFO">${RC} = 0</msg>
<msg timestamp="20170711 20:39:36.262" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.726 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.584 ms
64 bytes from 9.41.166.16...</msg>
<status status="PASS" endtime="20170711 20:39:36.262" starttime="20170711 20:39:33.251"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170711 20:39:36.266" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.726 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.584 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.544 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.570 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.544/0.606/0.726/0.070 ms</msg>
<status status="PASS" endtime="20170711 20:39:36.266" starttime="20170711 20:39:36.265"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:36.266" starttime="20170711 20:39:36.266"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.267" starttime="20170711 20:39:33.249"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170711 20:39:36.296" level="INFO">${cur_time} = 2017-07-11 20:39:36:295611</msg>
<status status="PASS" endtime="20170711 20:39:36.296" starttime="20170711 20:39:36.295"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170711 20:39:36.298" level="INFO">${cur_time} = 20170711203936295611</msg>
<status status="PASS" endtime="20170711 20:39:36.298" starttime="20170711 20:39:36.298"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.298" starttime="20170711 20:39:36.295"></status>
</kw>
<msg timestamp="20170711 20:39:36.303" level="INFO">${FFDC_TIME} = 20170711203936295611</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170711 20:39:36.305" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170711 20:39:36.305" starttime="20170711 20:39:36.304"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170711 20:39:36.306" level="INFO">${suite_name} = 20170711203936295611_UpdateBmc</msg>
<status status="PASS" endtime="20170711 20:39:36.306" starttime="20170711 20:39:36.306"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170711 20:39:36.307" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170711 20:39:36.307" starttime="20170711 20:39:36.306"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170711 20:39:36.307" level="INFO">${test_name} = 20170711203936295611_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170711 20:39:36.307" starttime="20170711 20:39:36.307"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.308" starttime="20170711 20:39:36.304"></status>
</kw>
<msg timestamp="20170711 20:39:36.313" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170711 20:39:36.318" level="INFO">${FFDC_PREFIX} = 20170711203936295611_</msg>
<msg timestamp="20170711 20:39:36.341" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170711 20:39:36.343" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:36.343" starttime="20170711 20:39:36.342"></status>
</kw>
<msg timestamp="20170711 20:39:36.348" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:36.363" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:36.363" starttime="20170711 20:39:36.362"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.363" starttime="20170711 20:39:36.361"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:36.364" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:36.364" starttime="20170711 20:39:36.364"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.364" starttime="20170711 20:39:36.363"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:36.366" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:36.366" starttime="20170711 20:39:36.365"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.366" starttime="20170711 20:39:36.365"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:36.367" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:36.367" starttime="20170711 20:39:36.367"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.367" starttime="20170711 20:39:36.366"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:36.369" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:36.369" starttime="20170711 20:39:36.369"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.369" starttime="20170711 20:39:36.368"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:36.370" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:36.371" starttime="20170711 20:39:36.370"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.371" starttime="20170711 20:39:36.369"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:36.372" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:36.372" starttime="20170711 20:39:36.371"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.372" starttime="20170711 20:39:36.371"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:36.373" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:36.373" starttime="20170711 20:39:36.373"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.373" starttime="20170711 20:39:36.372"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:36.375" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:36.375" starttime="20170711 20:39:36.374"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.375" starttime="20170711 20:39:36.374"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:36.378" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:36.378" starttime="20170711 20:39:36.378"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.378" starttime="20170711 20:39:36.376"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:36.379" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:36.379" starttime="20170711 20:39:36.379"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.379" starttime="20170711 20:39:36.378"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:36.381" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:36.381" starttime="20170711 20:39:36.380"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.381" starttime="20170711 20:39:36.380"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:36.382" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:36.382" starttime="20170711 20:39:36.382"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.382" starttime="20170711 20:39:36.381"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170711 20:39:36.384" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170711 20:39:36.384" starttime="20170711 20:39:36.384"></status>
</kw>
<msg timestamp="20170711 20:39:36.385" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170711 20:39:36.385" starttime="20170711 20:39:36.383"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:36.386" starttime="20170711 20:39:36.385"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.386" starttime="20170711 20:39:36.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:36.387" starttime="20170711 20:39:36.386"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170711 20:39:36.388" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170711 20:39:36.388" starttime="20170711 20:39:36.387"></status>
</kw>
<msg timestamp="20170711 20:39:36.388" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170711 20:39:36.388" starttime="20170711 20:39:36.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:36.390" starttime="20170711 20:39:36.389"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.390" starttime="20170711 20:39:36.389"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:36.390" starttime="20170711 20:39:36.388"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170711 20:39:36.390" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170711 20:39:38.101" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170711 20:39:38.102" starttime="20170711 20:39:36.390"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.102" starttime="20170711 20:39:36.383"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170711 20:39:38.103" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170711 20:39:38.170" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170711 20:39:38.171" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170711 20:39:38.171" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170711 20:39:38.171" starttime="20170711 20:39:38.103"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170711 20:39:38.171" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170711 20:39:38.171" starttime="20170711 20:39:38.171"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170711 20:39:38.172" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170711 20:39:38.172" starttime="20170711 20:39:38.172"></status>
</kw>
<msg timestamp="20170711 20:39:38.172" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170711 20:39:38.172" starttime="20170711 20:39:36.382"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:38.174" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:38.174" starttime="20170711 20:39:38.173"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.174" starttime="20170711 20:39:38.173"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.174" starttime="20170711 20:39:36.375"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:38.175" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:38.175" starttime="20170711 20:39:38.175"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.175" starttime="20170711 20:39:38.174"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170711 20:39:38.176" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170711 20:39:38.176" starttime="20170711 20:39:38.176"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:38.177" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:38.178" starttime="20170711 20:39:38.177"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.178" starttime="20170711 20:39:38.176"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:38.179" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:38.179" starttime="20170711 20:39:38.178"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.179" starttime="20170711 20:39:38.178"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.179" starttime="20170711 20:39:38.176"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:38.180" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:38.180" starttime="20170711 20:39:38.180"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.181" starttime="20170711 20:39:38.179"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:38.182" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:38.182" starttime="20170711 20:39:38.181"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.182" starttime="20170711 20:39:38.181"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.182" starttime="20170711 20:39:38.179"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:38.183" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:38.183" starttime="20170711 20:39:38.183"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.183" starttime="20170711 20:39:38.182"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:38.185" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:38.185" starttime="20170711 20:39:38.184"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.185" starttime="20170711 20:39:38.184"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.185" starttime="20170711 20:39:38.182"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.185" starttime="20170711 20:39:38.176"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:38.186" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:38.186" starttime="20170711 20:39:38.186"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.186" starttime="20170711 20:39:38.185"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.186" starttime="20170711 20:39:36.361"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170711 20:39:38.194" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170711 20:39:38.194" starttime="20170711 20:39:38.193"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170711 20:39:38.195" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170711 20:39:38.195" starttime="20170711 20:39:38.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:38.197" starttime="20170711 20:39:38.197"></status>
</kw>
<msg timestamp="20170711 20:39:38.197" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170711 20:39:38.197" starttime="20170711 20:39:38.196"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:38.199" starttime="20170711 20:39:38.199"></status>
</kw>
<msg timestamp="20170711 20:39:38.199" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:38.199" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170711 20:39:38.199" starttime="20170711 20:39:38.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:38.200" starttime="20170711 20:39:38.200"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170711 20:39:38.221" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170711 20:39:38.221" starttime="20170711 20:39:38.221"></status>
</kw>
<msg timestamp="20170711 20:39:38.222" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170711 20:39:38.222" starttime="20170711 20:39:38.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:38.223" starttime="20170711 20:39:38.222"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.223" starttime="20170711 20:39:38.222"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:38.224" starttime="20170711 20:39:38.223"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170711 20:39:38.226" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170711 20:39:38.226" starttime="20170711 20:39:38.225"></status>
</kw>
<msg timestamp="20170711 20:39:38.226" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170711 20:39:38.226" starttime="20170711 20:39:38.224"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:38.228" starttime="20170711 20:39:38.227"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.228" starttime="20170711 20:39:38.227"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:38.228" starttime="20170711 20:39:38.226"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170711 20:39:38.229" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170711 20:39:40.064" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170711 20:39:40.064" starttime="20170711 20:39:38.228"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:40.064" starttime="20170711 20:39:38.220"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170711 20:39:40.065" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170711 20:39:40.065" starttime="20170711 20:39:40.065"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170711 20:39:40.067" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170711 20:39:40.067" starttime="20170711 20:39:40.066"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170711 20:39:40.075" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170711 20:39:40.075" starttime="20170711 20:39:40.067"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:40.079" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:40.079" starttime="20170711 20:39:40.079"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:40.080" starttime="20170711 20:39:40.078"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:40.081" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:40.081" starttime="20170711 20:39:40.081"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:40.081" starttime="20170711 20:39:40.080"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:40.083" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:40.083" starttime="20170711 20:39:40.082"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:40.083" starttime="20170711 20:39:40.082"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:40.084" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:40.084" starttime="20170711 20:39:40.084"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:40.084" starttime="20170711 20:39:40.083"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:40.084" starttime="20170711 20:39:40.077"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:40.084" starttime="20170711 20:39:40.077"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170711 20:39:40.085" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170711 20:39:41.532" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170711 20:39:41.533" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170711 20:39:41.533" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170711 20:39:41.533" starttime="20170711 20:39:40.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.540" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.540" starttime="20170711 20:39:41.539"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.540" starttime="20170711 20:39:41.539"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.540" starttime="20170711 20:39:41.533"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.540" starttime="20170711 20:39:40.075"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.540" starttime="20170711 20:39:40.075"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.540" starttime="20170711 20:39:40.075"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.541" starttime="20170711 20:39:40.066"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.541" starttime="20170711 20:39:40.065"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170711 20:39:41.542" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170711 20:39:41.542" starttime="20170711 20:39:41.541"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.542" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170711 20:39:41.543" starttime="20170711 20:39:41.542"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.546" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.546" starttime="20170711 20:39:41.545"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.546" starttime="20170711 20:39:41.545"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.548" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.548" starttime="20170711 20:39:41.547"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.548" starttime="20170711 20:39:41.546"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.549" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.549" starttime="20170711 20:39:41.549"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.549" starttime="20170711 20:39:41.548"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.550" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.551" starttime="20170711 20:39:41.550"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.551" starttime="20170711 20:39:41.549"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.551" starttime="20170711 20:39:41.544"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.551" starttime="20170711 20:39:41.544"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170711 20:39:41.552" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170711 20:39:41.636" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170711 20:39:41.636" level="INFO">${stdout} = </msg>
<msg timestamp="20170711 20:39:41.636" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170711 20:39:41.637" starttime="20170711 20:39:41.551"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.643" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.643" starttime="20170711 20:39:41.643"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.643" starttime="20170711 20:39:41.642"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.643" starttime="20170711 20:39:41.637"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.643" starttime="20170711 20:39:41.543"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.643" starttime="20170711 20:39:41.543"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.646" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.647" starttime="20170711 20:39:41.646"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.647" starttime="20170711 20:39:41.646"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.648" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.648" starttime="20170711 20:39:41.648"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.648" starttime="20170711 20:39:41.647"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.649" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.649" starttime="20170711 20:39:41.649"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.650" starttime="20170711 20:39:41.648"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.651" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.651" starttime="20170711 20:39:41.650"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.651" starttime="20170711 20:39:41.650"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.651" starttime="20170711 20:39:41.645"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.651" starttime="20170711 20:39:41.645"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170711 20:39:41.652" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170711 20:39:41.736" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170711 20:39:41.736" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-118"
VERSION_ID="v1.99.7-118-g6ae9733"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<msg timestamp="20170711 20:39:41.736" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170711 20:39:41.736" starttime="20170711 20:39:41.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.743" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.743" starttime="20170711 20:39:41.742"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.743" starttime="20170711 20:39:41.742"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.743" starttime="20170711 20:39:41.737"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.743" starttime="20170711 20:39:41.644"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.743" starttime="20170711 20:39:41.644"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.743" starttime="20170711 20:39:41.543"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.743" starttime="20170711 20:39:41.541"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.743" starttime="20170711 20:39:41.541"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170711 20:39:41.744" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170711 20:39:41.745" starttime="20170711 20:39:41.744"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.745" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170711 20:39:41.745" starttime="20170711 20:39:41.745"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.749" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.749" starttime="20170711 20:39:41.748"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.749" starttime="20170711 20:39:41.748"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.750" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.750" starttime="20170711 20:39:41.750"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.750" starttime="20170711 20:39:41.749"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.752" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.752" starttime="20170711 20:39:41.751"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.752" starttime="20170711 20:39:41.751"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.753" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.753" starttime="20170711 20:39:41.753"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.753" starttime="20170711 20:39:41.752"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.753" starttime="20170711 20:39:41.747"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.753" starttime="20170711 20:39:41.747"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170711 20:39:41.754" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170711 20:39:41.844" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170711 20:39:41.844" level="INFO">${stdout} =  02:22:06 up 2 min,  load average: 3.26, 1.57, 0.59</msg>
<msg timestamp="20170711 20:39:41.845" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170711 20:39:41.845" starttime="20170711 20:39:41.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.851" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.851" starttime="20170711 20:39:41.851"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.851" starttime="20170711 20:39:41.850"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.851" starttime="20170711 20:39:41.845"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.852" starttime="20170711 20:39:41.746"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.852" starttime="20170711 20:39:41.746"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.855" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.855" starttime="20170711 20:39:41.854"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.855" starttime="20170711 20:39:41.854"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.856" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.856" starttime="20170711 20:39:41.856"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.856" starttime="20170711 20:39:41.855"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.858" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.858" starttime="20170711 20:39:41.857"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.858" starttime="20170711 20:39:41.857"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:41.859" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:41.859" starttime="20170711 20:39:41.859"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.860" starttime="20170711 20:39:41.858"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.860" starttime="20170711 20:39:41.853"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:41.860" starttime="20170711 20:39:41.853"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170711 20:39:41.860" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170711 20:39:42.027" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170711 20:39:42.028" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     37.4...</msg>
<msg timestamp="20170711 20:39:42.028" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170711 20:39:42.028" starttime="20170711 20:39:41.860"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:42.036" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:42.037" starttime="20170711 20:39:42.036"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.037" starttime="20170711 20:39:42.035"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.037" starttime="20170711 20:39:42.028"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.037" starttime="20170711 20:39:41.852"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.037" starttime="20170711 20:39:41.852"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:42.040" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:42.040" starttime="20170711 20:39:42.040"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.040" starttime="20170711 20:39:42.039"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:42.041" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:42.041" starttime="20170711 20:39:42.041"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.042" starttime="20170711 20:39:42.040"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:42.043" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:42.043" starttime="20170711 20:39:42.042"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.043" starttime="20170711 20:39:42.042"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:42.044" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:42.044" starttime="20170711 20:39:42.044"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.044" starttime="20170711 20:39:42.043"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.045" starttime="20170711 20:39:42.038"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.045" starttime="20170711 20:39:42.038"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170711 20:39:42.045" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170711 20:39:42.121" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170711 20:39:42.122" level="INFO">${stdout} = Linux witherspoon 4.10.17-7858cdff46b6d8aa4a4f88884a0623ff50fb78c9 #1 Tue Jul 11 20:04:48 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170711 20:39:42.122" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170711 20:39:42.122" starttime="20170711 20:39:42.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:42.129" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:42.129" starttime="20170711 20:39:42.128"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.129" starttime="20170711 20:39:42.127"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.129" starttime="20170711 20:39:42.122"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.129" starttime="20170711 20:39:42.037"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.129" starttime="20170711 20:39:42.037"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.129" starttime="20170711 20:39:41.745"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.129" starttime="20170711 20:39:41.744"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.129" starttime="20170711 20:39:41.743"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.129" starttime="20170711 20:39:40.065"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.130" starttime="20170711 20:39:38.219"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.130" starttime="20170711 20:39:38.200"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.130" starttime="20170711 20:39:38.198"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.130" starttime="20170711 20:39:38.197"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:42.132" starttime="20170711 20:39:42.131"></status>
</kw>
<msg timestamp="20170711 20:39:42.132" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:42.132" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170711 20:39:42.132" starttime="20170711 20:39:42.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:42.133" starttime="20170711 20:39:42.133"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170711 20:39:42.156" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170711 20:39:42.156" starttime="20170711 20:39:42.155"></status>
</kw>
<msg timestamp="20170711 20:39:42.156" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170711 20:39:42.156" starttime="20170711 20:39:42.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:42.157" starttime="20170711 20:39:42.157"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.157" starttime="20170711 20:39:42.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:42.158" starttime="20170711 20:39:42.158"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170711 20:39:42.159" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170711 20:39:42.159" starttime="20170711 20:39:42.159"></status>
</kw>
<msg timestamp="20170711 20:39:42.159" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170711 20:39:42.160" starttime="20170711 20:39:42.158"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:42.162" starttime="20170711 20:39:42.162"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.162" starttime="20170711 20:39:42.162"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:42.162" starttime="20170711 20:39:42.160"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170711 20:39:42.163" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170711 20:39:43.856" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170711 20:39:43.856" starttime="20170711 20:39:42.163"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:43.856" starttime="20170711 20:39:42.154"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170711 20:39:43.857" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170711 20:39:43.857" starttime="20170711 20:39:43.857"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170711 20:39:43.858" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170711 20:39:43.858" starttime="20170711 20:39:43.858"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170711 20:39:43.859" level="INFO">${logpath} = /home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_elog.txt</msg>
<status status="PASS" endtime="20170711 20:39:43.859" starttime="20170711 20:39:43.859"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:39:43.863" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:39:43.863" starttime="20170711 20:39:43.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:39:43.864" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:39:43.864" starttime="20170711 20:39:43.863"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:39:43.864" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:39:43.864" starttime="20170711 20:39:43.864"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:39:43.865" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:39:43.865" starttime="20170711 20:39:43.865"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:39:44.079" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:39:44.079" starttime="20170711 20:39:43.866"></status>
</kw>
<msg timestamp="20170711 20:39:44.079" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:44.079" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.079" starttime="20170711 20:39:43.865"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:39:44.080" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.080" starttime="20170711 20:39:44.080"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:44.081" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.081" starttime="20170711 20:39:44.081"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:44.081" starttime="20170711 20:39:43.861"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:44.081" starttime="20170711 20:39:43.861"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:44.081" starttime="20170711 20:39:43.860"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:39:44.082" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170711 20:39:44.082" starttime="20170711 20:39:44.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:44.083" starttime="20170711 20:39:44.082"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170711 20:39:44.138" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170711 20:39:44.138" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.138" starttime="20170711 20:39:44.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:44.139" starttime="20170711 20:39:44.139"></status>
</kw>
<msg timestamp="20170711 20:39:44.139" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.140" starttime="20170711 20:39:43.860"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:44.141" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170711 20:39:44.141" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170711 20:39:44.142" starttime="20170711 20:39:44.141"></status>
</kw>
<msg timestamp="20170711 20:39:44.142" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170711 20:39:44.142" starttime="20170711 20:39:44.140"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170711 20:39:44.143" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170711 20:39:44.143" starttime="20170711 20:39:44.143"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:44.143" starttime="20170711 20:39:44.142"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:44.144" starttime="20170711 20:39:43.859"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170711 20:39:44.145" level="INFO">${logpath} = /home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170711 20:39:44.145" starttime="20170711 20:39:44.144"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:39:44.150" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:39:44.151" starttime="20170711 20:39:44.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:39:44.151" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:39:44.151" starttime="20170711 20:39:44.151"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:39:44.152" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:39:44.152" starttime="20170711 20:39:44.152"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:39:44.153" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:39:44.154" starttime="20170711 20:39:44.153"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:39:44.402" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:39:44.402" starttime="20170711 20:39:44.155"></status>
</kw>
<msg timestamp="20170711 20:39:44.402" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:44.402" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.402" starttime="20170711 20:39:44.154"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:39:44.403" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.403" starttime="20170711 20:39:44.403"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:44.404" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.404" starttime="20170711 20:39:44.403"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:44.404" starttime="20170711 20:39:44.148"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:44.404" starttime="20170711 20:39:44.147"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:44.404" starttime="20170711 20:39:44.146"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:39:44.405" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170711 20:39:44.405" starttime="20170711 20:39:44.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:44.405" starttime="20170711 20:39:44.405"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170711 20:39:44.623" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170711 20:39:44.623" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.623" starttime="20170711 20:39:44.406"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:44.624" starttime="20170711 20:39:44.624"></status>
</kw>
<msg timestamp="20170711 20:39:44.624" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.624" starttime="20170711 20:39:44.145"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:44.626" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.626" starttime="20170711 20:39:44.625"></status>
</kw>
<msg timestamp="20170711 20:39:44.626" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170711 20:39:44.626" starttime="20170711 20:39:44.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:44.627" starttime="20170711 20:39:44.626"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170711 20:39:44.628" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170711 20:39:44.628" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170711 20:39:44.628" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170711 20:39:44.628" starttime="20170711 20:39:44.627"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:44.630" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:44.630" starttime="20170711 20:39:44.629"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:44.630" starttime="20170711 20:39:44.629"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:44.630" starttime="20170711 20:39:44.144"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170711 20:39:44.631" level="INFO">${logpath} = /home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170711 20:39:44.631" starttime="20170711 20:39:44.631"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:39:44.634" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:39:44.635" starttime="20170711 20:39:44.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:39:44.635" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:39:44.635" starttime="20170711 20:39:44.635"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:39:44.636" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:39:44.636" starttime="20170711 20:39:44.636"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:39:44.637" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:39:44.637" starttime="20170711 20:39:44.636"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:39:44.816" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:39:44.816" starttime="20170711 20:39:44.637"></status>
</kw>
<msg timestamp="20170711 20:39:44.816" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:44.817" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.817" starttime="20170711 20:39:44.637"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:39:44.817" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.817" starttime="20170711 20:39:44.817"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:44.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.818" starttime="20170711 20:39:44.818"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:44.818" starttime="20170711 20:39:44.633"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:44.818" starttime="20170711 20:39:44.633"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:44.818" starttime="20170711 20:39:44.632"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:39:44.819" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170711 20:39:44.819" starttime="20170711 20:39:44.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:44.820" starttime="20170711 20:39:44.819"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170711 20:39:44.979" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170711 20:39:44.979" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.979" starttime="20170711 20:39:44.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:44.980" starttime="20170711 20:39:44.980"></status>
</kw>
<msg timestamp="20170711 20:39:44.980" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.980" starttime="20170711 20:39:44.631"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:44.982" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:44.982" starttime="20170711 20:39:44.981"></status>
</kw>
<msg timestamp="20170711 20:39:44.982" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170711 20:39:44.982" starttime="20170711 20:39:44.981"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:44.982" starttime="20170711 20:39:44.982"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170711 20:39:44.983" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170711 20:39:44.983" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170711 20:39:44.983" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170711 20:39:44.983" starttime="20170711 20:39:44.983"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:44.985" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:44.985" starttime="20170711 20:39:44.984"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:44.985" starttime="20170711 20:39:44.984"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:44.985" starttime="20170711 20:39:44.630"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170711 20:39:44.986" level="INFO">${logpath} = /home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_led.txt</msg>
<status status="PASS" endtime="20170711 20:39:44.986" starttime="20170711 20:39:44.985"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:39:44.990" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:39:44.991" starttime="20170711 20:39:44.990"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:39:44.992" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:39:44.992" starttime="20170711 20:39:44.991"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:39:44.992" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:39:44.993" starttime="20170711 20:39:44.992"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:39:44.993" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:39:44.993" starttime="20170711 20:39:44.993"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:39:45.206" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:39:45.206" starttime="20170711 20:39:44.994"></status>
</kw>
<msg timestamp="20170711 20:39:45.206" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:45.206" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:45.206" starttime="20170711 20:39:44.994"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:39:45.207" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:45.207" starttime="20170711 20:39:45.207"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:45.208" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:45.208" starttime="20170711 20:39:45.208"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.208" starttime="20170711 20:39:44.989"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.208" starttime="20170711 20:39:44.988"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.208" starttime="20170711 20:39:44.987"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:39:45.209" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170711 20:39:45.209" starttime="20170711 20:39:45.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:45.210" starttime="20170711 20:39:45.209"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170711 20:39:45.264" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170711 20:39:45.264" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:45.264" starttime="20170711 20:39:45.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:45.265" starttime="20170711 20:39:45.265"></status>
</kw>
<msg timestamp="20170711 20:39:45.265" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:45.265" starttime="20170711 20:39:44.986"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:45.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170711 20:39:45.267" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170711 20:39:45.267" starttime="20170711 20:39:45.266"></status>
</kw>
<msg timestamp="20170711 20:39:45.267" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170711 20:39:45.267" starttime="20170711 20:39:45.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170711 20:39:45.268" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170711 20:39:45.268" starttime="20170711 20:39:45.268"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.268" starttime="20170711 20:39:45.267"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.268" starttime="20170711 20:39:44.985"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170711 20:39:45.269" level="INFO">${logpath} = /home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170711 20:39:45.269" starttime="20170711 20:39:45.268"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:39:45.272" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:39:45.272" starttime="20170711 20:39:45.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:39:45.273" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:39:45.273" starttime="20170711 20:39:45.273"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:39:45.274" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:39:45.274" starttime="20170711 20:39:45.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:39:45.274" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:39:45.274" starttime="20170711 20:39:45.274"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:39:45.537" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:39:45.537" starttime="20170711 20:39:45.275"></status>
</kw>
<msg timestamp="20170711 20:39:45.538" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:45.538" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:45.538" starttime="20170711 20:39:45.275"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:39:45.538" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:45.538" starttime="20170711 20:39:45.538"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:45.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:45.539" starttime="20170711 20:39:45.539"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.539" starttime="20170711 20:39:45.271"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.539" starttime="20170711 20:39:45.271"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.540" starttime="20170711 20:39:45.270"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:39:45.540" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170711 20:39:45.540" starttime="20170711 20:39:45.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:45.541" starttime="20170711 20:39:45.541"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170711 20:39:45.583" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170711 20:39:45.583" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:45.583" starttime="20170711 20:39:45.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:45.584" starttime="20170711 20:39:45.583"></status>
</kw>
<msg timestamp="20170711 20:39:45.584" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:45.584" starttime="20170711 20:39:45.269"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:45.585" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170711 20:39:45.585" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170711 20:39:45.585" starttime="20170711 20:39:45.585"></status>
</kw>
<msg timestamp="20170711 20:39:45.585" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170711 20:39:45.585" starttime="20170711 20:39:45.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170711 20:39:45.586" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170711 20:39:45.587" starttime="20170711 20:39:45.586"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.587" starttime="20170711 20:39:45.586"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.587" starttime="20170711 20:39:45.268"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.587" starttime="20170711 20:39:43.859"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.587" starttime="20170711 20:39:43.857"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.587" starttime="20170711 20:39:43.857"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.587" starttime="20170711 20:39:43.857"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.587" starttime="20170711 20:39:42.153"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.587" starttime="20170711 20:39:42.133"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.587" starttime="20170711 20:39:42.130"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.587" starttime="20170711 20:39:42.130"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:45.589" starttime="20170711 20:39:45.589"></status>
</kw>
<msg timestamp="20170711 20:39:45.589" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:45.589" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170711 20:39:45.589" starttime="20170711 20:39:45.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:45.590" starttime="20170711 20:39:45.590"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170711 20:39:45.615" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170711 20:39:45.615" starttime="20170711 20:39:45.615"></status>
</kw>
<msg timestamp="20170711 20:39:45.615" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170711 20:39:45.615" starttime="20170711 20:39:45.614"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:45.617" starttime="20170711 20:39:45.616"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.617" starttime="20170711 20:39:45.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:45.618" starttime="20170711 20:39:45.617"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170711 20:39:45.619" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170711 20:39:45.619" starttime="20170711 20:39:45.618"></status>
</kw>
<msg timestamp="20170711 20:39:45.619" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170711 20:39:45.619" starttime="20170711 20:39:45.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:45.621" starttime="20170711 20:39:45.620"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.621" starttime="20170711 20:39:45.620"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:45.621" starttime="20170711 20:39:45.619"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170711 20:39:45.621" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170711 20:39:47.305" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170711 20:39:47.305" starttime="20170711 20:39:45.621"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:47.305" starttime="20170711 20:39:45.613"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170711 20:39:47.306" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170711 20:39:47.374" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170711 20:39:47.374" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170711 20:39:47.374" starttime="20170711 20:39:47.306"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170711 20:39:47.375" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170711 20:39:47.375" starttime="20170711 20:39:47.374"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:47.378" starttime="20170711 20:39:47.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:48.077" starttime="20170711 20:39:47.379"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:48.077" starttime="20170711 20:39:47.378"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:48.077" starttime="20170711 20:39:47.375"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170711 20:39:48.077" starttime="20170711 20:39:48.077"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:48.077" starttime="20170711 20:39:45.613"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:48.077" starttime="20170711 20:39:45.590"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:48.078" starttime="20170711 20:39:45.588"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:48.078" starttime="20170711 20:39:45.587"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:48.080" starttime="20170711 20:39:48.080"></status>
</kw>
<msg timestamp="20170711 20:39:48.081" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:48.081" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170711 20:39:48.081" starttime="20170711 20:39:48.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:48.081" starttime="20170711 20:39:48.081"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170711 20:39:48.106" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170711 20:39:48.106" starttime="20170711 20:39:48.105"></status>
</kw>
<msg timestamp="20170711 20:39:48.106" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170711 20:39:48.106" starttime="20170711 20:39:48.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:48.108" starttime="20170711 20:39:48.107"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:48.108" starttime="20170711 20:39:48.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:48.108" starttime="20170711 20:39:48.108"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170711 20:39:48.110" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170711 20:39:48.110" starttime="20170711 20:39:48.109"></status>
</kw>
<msg timestamp="20170711 20:39:48.110" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170711 20:39:48.110" starttime="20170711 20:39:48.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:48.112" starttime="20170711 20:39:48.111"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:48.112" starttime="20170711 20:39:48.111"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:48.112" starttime="20170711 20:39:48.110"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170711 20:39:48.113" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170711 20:39:49.867" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170711 20:39:49.867" starttime="20170711 20:39:48.112"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:49.867" starttime="20170711 20:39:48.103"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170711 20:39:49.868" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170711 20:39:49.868" starttime="20170711 20:39:49.867"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170711 20:39:49.869" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170711 20:39:49.869" starttime="20170711 20:39:49.869"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170711 20:39:49.870" level="INFO">${logpath} = /home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170711 20:39:49.871" starttime="20170711 20:39:49.870"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:49.873" starttime="20170711 20:39:49.872"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170711 20:39:49.873" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170711 20:39:50.252" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170711 20:39:50.253" level="INFO">${stdout} = Mem: 176168K used, 256132K free, 38364K shrd, 10828K buff, 74004K cached
CPU:  27% usr  18% sys   0% nic  54% idle   0% io   0% irq   0% sirq
Load average: 3.25 1.60 0.61 2/152 1172
  PID  PPID USER  ...</msg>
<msg timestamp="20170711 20:39:50.253" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170711 20:39:50.253" starttime="20170711 20:39:49.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:50.260" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:50.260" starttime="20170711 20:39:50.259"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:50.260" starttime="20170711 20:39:50.258"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:50.260" starttime="20170711 20:39:50.253"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:50.260" starttime="20170711 20:39:49.871"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:50.260" starttime="20170711 20:39:49.869"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170711 20:39:50.261" level="INFO">${logpath} = /home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170711 20:39:50.261" starttime="20170711 20:39:50.261"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:50.262" starttime="20170711 20:39:50.262"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170711 20:39:50.263" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170711 20:39:50.349" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170711 20:39:50.349" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-7858cdff46b6d8aa4a4f88884a0623ff50fb78c9 (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Tue Jul 11 20:04:48 UTC 20...</msg>
<msg timestamp="20170711 20:39:50.349" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170711 20:39:50.349" starttime="20170711 20:39:50.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:50.356" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:50.356" starttime="20170711 20:39:50.355"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:50.356" starttime="20170711 20:39:50.354"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:50.356" starttime="20170711 20:39:50.349"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:50.356" starttime="20170711 20:39:50.261"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:50.356" starttime="20170711 20:39:50.260"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170711 20:39:50.357" level="INFO">${logpath} = /home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170711 20:39:50.357" starttime="20170711 20:39:50.357"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:50.359" starttime="20170711 20:39:50.358"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170711 20:39:50.359" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170711 20:39:50.454" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170711 20:39:50.454" level="INFO">${stdout} = MemTotal:         432300 kB
MemFree:          255976 kB
MemAvailable:     299456 kB
Buffers:           10828 kB
Cached:            74008 kB
SwapCached:            0 kB
Active:           109684 kB
Inac...</msg>
<msg timestamp="20170711 20:39:50.454" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170711 20:39:50.454" starttime="20170711 20:39:50.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:50.460" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:50.461" starttime="20170711 20:39:50.460"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:50.461" starttime="20170711 20:39:50.459"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:50.461" starttime="20170711 20:39:50.454"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:50.461" starttime="20170711 20:39:50.357"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:50.461" starttime="20170711 20:39:50.357"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170711 20:39:50.462" level="INFO">${logpath} = /home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170711 20:39:50.462" starttime="20170711 20:39:50.461"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:50.463" starttime="20170711 20:39:50.463"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170711 20:39:50.464" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170711 20:39:50.582" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170711 20:39:50.582" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170711 20:39:50.582" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170711 20:39:50.582" starttime="20170711 20:39:50.463"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:50.592" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:50.592" starttime="20170711 20:39:50.591"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:50.592" starttime="20170711 20:39:50.590"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:50.592" starttime="20170711 20:39:50.582"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:50.592" starttime="20170711 20:39:50.462"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:50.592" starttime="20170711 20:39:50.461"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170711 20:39:50.593" level="INFO">${logpath} = /home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170711 20:39:50.593" starttime="20170711 20:39:50.593"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:50.595" starttime="20170711 20:39:50.594"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170711 20:39:50.596" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170711 20:39:51.711" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170711 20:39:51.712" level="INFO">${stdout} = -- Logs begin at Fri 2017-04-28 02:20:17 UTC, end at Fri 2017-04-28 02:22:13 UTC. --
Apr 28 02:20:17 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 28 02:20:17 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170711 20:39:51.712" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170711 20:39:51.712" starttime="20170711 20:39:50.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170711 20:39:51.720" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/20170711203936295611_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:51.720" starttime="20170711 20:39:51.719"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.720" starttime="20170711 20:39:51.718"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.720" starttime="20170711 20:39:51.713"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.720" starttime="20170711 20:39:50.593"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.720" starttime="20170711 20:39:50.592"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.720" starttime="20170711 20:39:49.869"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.720" starttime="20170711 20:39:49.868"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.720" starttime="20170711 20:39:49.868"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.721" starttime="20170711 20:39:49.868"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.721" starttime="20170711 20:39:48.102"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.721" starttime="20170711 20:39:48.082"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.721" starttime="20170711 20:39:48.078"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.721" starttime="20170711 20:39:48.078"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:51.723" starttime="20170711 20:39:51.723"></status>
</kw>
<msg timestamp="20170711 20:39:51.723" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:51.723" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170711 20:39:51.723" starttime="20170711 20:39:51.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:51.724" starttime="20170711 20:39:51.723"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170711 20:39:51.749" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170711 20:39:51.750" starttime="20170711 20:39:51.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170711 20:39:51.750" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170711 20:39:51.750" starttime="20170711 20:39:51.750"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170711 20:39:51.751" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170711 20:39:51.751" starttime="20170711 20:39:51.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170711 20:39:51.752" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170711 20:39:51.752" starttime="20170711 20:39:51.751"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170711 20:39:51.935" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170711 20:39:51.935" starttime="20170711 20:39:51.752"></status>
</kw>
<msg timestamp="20170711 20:39:51.936" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:51.936" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:51.936" starttime="20170711 20:39:51.752"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170711 20:39:51.936" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:51.937" starttime="20170711 20:39:51.936"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:51.937" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170711 20:39:51.937" starttime="20170711 20:39:51.937"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.937" starttime="20170711 20:39:51.747"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.938" starttime="20170711 20:39:51.747"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.938" starttime="20170711 20:39:51.746"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170711 20:39:51.939" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170711 20:39:51.939" starttime="20170711 20:39:51.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:51.940" starttime="20170711 20:39:51.939"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170711 20:39:51.983" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170711 20:39:51.983" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:51.983" starttime="20170711 20:39:51.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:51.984" starttime="20170711 20:39:51.984"></status>
</kw>
<msg timestamp="20170711 20:39:51.984" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170711 20:39:51.984" starttime="20170711 20:39:51.745"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170711 20:39:51.985" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170711 20:39:51.986" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170711 20:39:51.986" starttime="20170711 20:39:51.985"></status>
</kw>
<msg timestamp="20170711 20:39:51.986" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170711 20:39:51.986" starttime="20170711 20:39:51.985"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170711 20:39:51.986" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170711 20:39:51.986" starttime="20170711 20:39:51.986"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.987" starttime="20170711 20:39:51.745"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.987" starttime="20170711 20:39:51.724"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.987" starttime="20170711 20:39:51.721"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:51.987" starttime="20170711 20:39:51.721"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:51.989" starttime="20170711 20:39:51.988"></status>
</kw>
<msg timestamp="20170711 20:39:51.989" level="INFO">${status} = PASS</msg>
<msg timestamp="20170711 20:39:51.989" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170711 20:39:51.989" starttime="20170711 20:39:51.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:51.989" starttime="20170711 20:39:51.989"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170711 20:39:52.014" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170711 20:39:52.014" starttime="20170711 20:39:52.013"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:52.014" starttime="20170711 20:39:52.012"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:52.014" starttime="20170711 20:39:51.990"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:52.014" starttime="20170711 20:39:51.987"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:52.014" starttime="20170711 20:39:51.987"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:52.014" starttime="20170711 20:39:38.197"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:52.014" starttime="20170711 20:39:38.194"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:52.014" starttime="20170711 20:39:38.194"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:52.014" starttime="20170711 20:39:38.194"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170711 20:39:52.243" starttime="20170711 20:39:52.015"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:52.244" starttime="20170711 20:39:38.192"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:52.244" starttime="20170711 20:39:33.237"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:52.244" starttime="20170711 20:39:33.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:52.245" starttime="20170711 20:39:52.245"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170711 20:39:52.247" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170711 20:39:52.247" starttime="20170711 20:39:52.246"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170711 20:39:52.247" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170711203936295611_UpdateBmc/20170711203936295611_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170711 20:39:52.247" starttime="20170711 20:39:52.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:52.248" starttime="20170711 20:39:52.248"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:52.249" starttime="20170711 20:39:52.248"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170711 20:39:52.249" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170711 20:39:52.249" starttime="20170711 20:39:52.249"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170711 20:39:52.250" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170711 20:39:52.250" starttime="20170711 20:39:52.250"></status>
</kw>
<msg timestamp="20170711 20:39:52.250" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170711 20:39:52.250" starttime="20170711 20:39:52.250"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:52.251" starttime="20170711 20:39:52.251"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170711 20:39:52.252" starttime="20170711 20:39:52.251"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170711 20:39:52.253" level="INFO">${cur_time} = 2017-07-11 20:39:52:252673</msg>
<status status="PASS" endtime="20170711 20:39:52.253" starttime="20170711 20:39:52.252"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170711 20:39:52.253" level="INFO">${cur_time} = 20170711203952252673</msg>
<status status="PASS" endtime="20170711 20:39:52.253" starttime="20170711 20:39:52.253"></status>
</kw>
<msg timestamp="20170711 20:39:52.254" level="INFO">${cur_time} = 20170711203952252673</msg>
<status status="PASS" endtime="20170711 20:39:52.254" starttime="20170711 20:39:52.252"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170711 20:39:52.255" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170711 20:39:52.255" starttime="20170711 20:39:52.254"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:52.255" starttime="20170711 20:39:52.245"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:52.255" starttime="20170711 20:39:32.978"></status>
</kw>
<status status="PASS" endtime="20170711 20:39:52.255" starttime="20170711 20:39:32.970"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170711 20:39:52.255" critical="yes" starttime="20170711 20:36:50.016">timeout</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170711 20:39:52.256" starttime="20170711 20:36:48.971"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170711 20:37:09.863" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff864f6150&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170711 20:37:10.064" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff864eb950&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170711 20:37:10.466" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff864eb510&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /login</msg>
<msg timestamp="20170711 20:37:48.497" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff86dc9210&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170711 20:37:51.697" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8974c690&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
<msg timestamp="20170711 20:37:54.897" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8974ca10&gt;: Failed to establish a new connection: [Errno 113] No route to host',)': /login</msg>
</errors>
</robot>
