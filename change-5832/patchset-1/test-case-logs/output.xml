<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170807 22:47:37.550">
<suite id="s1" source="/tmp/fspcibld/20353/obmc-robot/tests" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:47:38.228">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 22:47:38.228" starttime="20170807 22:47:38.227"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:38.228">${has_host} = False</msg>
<status status="PASS" endtime="20170807 22:47:38.228" starttime="20170807 22:47:38.227"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:38.229" starttime="20170807 22:47:38.229"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:38.229" starttime="20170807 22:47:38.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:38.231">${port_num} = 22</msg>
<status status="PASS" endtime="20170807 22:47:38.231" starttime="20170807 22:47:38.230"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:38.231">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170807 22:47:38.231" starttime="20170807 22:47:38.231"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:38.232">${https_num} = 443</msg>
<status status="PASS" endtime="20170807 22:47:38.232" starttime="20170807 22:47:38.232"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:38.233">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170807 22:47:38.233" starttime="20170807 22:47:38.232"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:38.233" starttime="20170807 22:47:38.230"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:38.233" starttime="20170807 22:47:38.230"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:47:38.234">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 22:47:38.234" starttime="20170807 22:47:38.233"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:38.234">${has_port} = False</msg>
<status status="PASS" endtime="20170807 22:47:38.234" starttime="20170807 22:47:38.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:38.235" starttime="20170807 22:47:38.235"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:38.236" starttime="20170807 22:47:38.236"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:38.236" starttime="20170807 22:47:38.235"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:38.236" starttime="20170807 22:47:38.234"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:38.237">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170807 22:47:39.998">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 22:47:39.998" starttime="20170807 22:47:38.237"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:39.998" starttime="20170807 22:47:38.226"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:40.000">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170807 22:47:40.077">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170807 22:47:40.077">${output} = VERSION_ID="v1.99.8-191-g5adf966"</msg>
<msg level="INFO" timestamp="20170807 22:47:40.077">${stderr} = </msg>
<status status="PASS" endtime="20170807 22:47:40.077" starttime="20170807 22:47:39.999"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:40.078">Length is 0</msg>
<status status="PASS" endtime="20170807 22:47:40.078" starttime="20170807 22:47:40.077"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:40.078">VERSION_ID="v1.99.8-191-g5adf966"</msg>
<status status="PASS" endtime="20170807 22:47:40.078" starttime="20170807 22:47:40.078"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:40.078" starttime="20170807 22:47:39.999"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:40.078" starttime="20170807 22:47:39.999"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:40.080">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170807 22:47:40.199">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170807 22:47:40.199">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg level="INFO" timestamp="20170807 22:47:40.199">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status status="PASS" endtime="20170807 22:47:40.199" starttime="20170807 22:47:40.080"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:40.199">Length is 81</msg>
<msg level="FAIL" timestamp="20170807 22:47:40.200">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status status="FAIL" endtime="20170807 22:47:40.200" starttime="20170807 22:47:40.199"></status>
</kw>
<status status="FAIL" endtime="20170807 22:47:40.200" starttime="20170807 22:47:40.079"></status>
</kw>
<status status="FAIL" endtime="20170807 22:47:40.200" starttime="20170807 22:47:40.079"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:40.200" starttime="20170807 22:47:40.079"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:40.603">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20170807 22:47:40.603">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170807 22:47:41.394">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170807 22:47:41.394">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170807 22:47:41.462">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170807 22:47:41.473">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170807 22:47:41.473">${stderr} = </msg>
<msg level="INFO" timestamp="20170807 22:47:41.473">${rc} = 0</msg>
<status status="PASS" endtime="20170807 22:47:41.473" starttime="20170807 22:47:40.201"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:41.473">Length is 0</msg>
<status status="PASS" endtime="20170807 22:47:41.473" starttime="20170807 22:47:41.473"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:41.474">Length is 11</msg>
<status status="PASS" endtime="20170807 22:47:41.474" starttime="20170807 22:47:41.474"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:41.474">${bmc_model} = Witherspoon</msg>
<status status="PASS" endtime="20170807 22:47:41.474" starttime="20170807 22:47:40.201"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:41.474">BMC Model=Witherspoon</msg>
<status status="PASS" endtime="20170807 22:47:41.475" starttime="20170807 22:47:41.474"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:41.475" starttime="20170807 22:47:40.201"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:41.475" starttime="20170807 22:47:40.200"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:47:41.477">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170807 22:47:41.477" starttime="20170807 22:47:41.477"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:41.477">${has_host} = False</msg>
<status status="PASS" endtime="20170807 22:47:41.477" starttime="20170807 22:47:41.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:41.478" starttime="20170807 22:47:41.478"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:41.478" starttime="20170807 22:47:41.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:41.480">${port_num} = 22</msg>
<status status="PASS" endtime="20170807 22:47:41.480" starttime="20170807 22:47:41.480"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:41.481">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170807 22:47:41.481" starttime="20170807 22:47:41.480"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:41.481">${https_num} = 443</msg>
<status status="PASS" endtime="20170807 22:47:41.481" starttime="20170807 22:47:41.481"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:41.482">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170807 22:47:41.482" starttime="20170807 22:47:41.481"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:41.482" starttime="20170807 22:47:41.480"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:41.482" starttime="20170807 22:47:41.479"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:47:41.483">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170807 22:47:41.483" starttime="20170807 22:47:41.483"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:41.483">${has_port} = False</msg>
<status status="PASS" endtime="20170807 22:47:41.483" starttime="20170807 22:47:41.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:41.485" starttime="20170807 22:47:41.485"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:41.486" starttime="20170807 22:47:41.485"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:41.486" starttime="20170807 22:47:41.484"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:41.486" starttime="20170807 22:47:41.483"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:41.486">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170807 22:47:43.163">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170807 22:47:43.163" starttime="20170807 22:47:41.486"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.163" starttime="20170807 22:47:41.476"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.165">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170807 22:47:43.263">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170807 22:47:43.263">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170807 22:47:43.263">${stderr} = </msg>
<status status="PASS" endtime="20170807 22:47:43.263" starttime="20170807 22:47:43.164"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:43.263">Length is 0</msg>
<status status="PASS" endtime="20170807 22:47:43.263" starttime="20170807 22:47:43.263"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:43.264">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" endtime="20170807 22:47:43.264" starttime="20170807 22:47:43.163"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:43.264" starttime="20170807 22:47:43.264"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.264" starttime="20170807 22:47:41.475"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.264" starttime="20170807 22:47:41.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:43.265" starttime="20170807 22:47:43.265"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.265" starttime="20170807 22:47:38.226"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/20353/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/20353/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:43.347">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:47:43.348" starttime="20170807 22:47:43.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.348">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:47:43.348" starttime="20170807 22:47:43.348"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.349">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:47:43.349" starttime="20170807 22:47:43.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.350">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:47:43.350" starttime="20170807 22:47:43.349"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:43.533">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:47:43.533" starttime="20170807 22:47:43.350"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:43.534">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:47:43.534">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:43.534" starttime="20170807 22:47:43.350"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:43.534">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:43.534" starttime="20170807 22:47:43.534"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:43.535">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:43.535" starttime="20170807 22:47:43.535"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.535" starttime="20170807 22:47:43.346"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.535" starttime="20170807 22:47:43.346"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.535" starttime="20170807 22:47:43.345"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:43.540">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:47:43.541" starttime="20170807 22:47:43.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.541">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:47:43.541" starttime="20170807 22:47:43.541"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.542">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:47:43.542" starttime="20170807 22:47:43.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.542">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:47:43.542" starttime="20170807 22:47:43.542"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:43.735">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:47:43.736" starttime="20170807 22:47:43.543"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:43.736">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:47:43.736">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:43.736" starttime="20170807 22:47:43.543"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:43.736">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:43.737" starttime="20170807 22:47:43.736"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:43.737">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:43.737" starttime="20170807 22:47:43.737"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.737" starttime="20170807 22:47:43.539"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.737" starttime="20170807 22:47:43.539"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.738" starttime="20170807 22:47:43.538"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.738">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170807 22:47:43.738" starttime="20170807 22:47:43.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.740">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:47:43.740" starttime="20170807 22:47:43.740"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:43.741">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:47:43.741" starttime="20170807 22:47:43.741"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.741" starttime="20170807 22:47:43.740"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.742" starttime="20170807 22:47:43.739"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.742" starttime="20170807 22:47:43.738"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.830">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:47:43.830">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:43.830" starttime="20170807 22:47:43.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.832">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:47:43.832" starttime="20170807 22:47:43.831"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:43.833">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:47:43.833" starttime="20170807 22:47:43.833"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.833" starttime="20170807 22:47:43.832"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.833" starttime="20170807 22:47:43.831"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.833" starttime="20170807 22:47:43.830"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:47:43.834">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:47:43.834" starttime="20170807 22:47:43.834"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:43.834">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:43.834" starttime="20170807 22:47:43.538"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:43.835">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:43.835" starttime="20170807 22:47:43.834"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.835">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:47:43.836">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:47:43.836">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:47:43.836" starttime="20170807 22:47:43.835"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:43.836">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170807 22:47:43.836" starttime="20170807 22:47:43.537"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:43.836">${host_state} = Off</msg>
<status status="PASS" endtime="20170807 22:47:43.836" starttime="20170807 22:47:43.537"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:47:43.837">Off != Quiesced</msg>
<status status="FAIL" endtime="20170807 22:47:43.837" starttime="20170807 22:47:43.837"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:43.838">${status} = False</msg>
<status status="PASS" endtime="20170807 22:47:43.838" starttime="20170807 22:47:43.837"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:43.838">${status} = False</msg>
<status status="PASS" endtime="20170807 22:47:43.838" starttime="20170807 22:47:43.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:43.838" starttime="20170807 22:47:43.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:43.839" starttime="20170807 22:47:43.839"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.848">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170807 22:47:43.848" starttime="20170807 22:47:43.840"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.857">${FFDC_DIR_PATH} = </msg>
<status status="PASS" endtime="20170807 22:47:43.857" starttime="20170807 22:47:43.849"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.859">${cur_time} = 2017-08-07 22:47:43:858927</msg>
<status status="PASS" endtime="20170807 22:47:43.859" starttime="20170807 22:47:43.859"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.860">${cur_time} = 20170807224743858927</msg>
<status status="PASS" endtime="20170807 22:47:43.860" starttime="20170807 22:47:43.859"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.860" starttime="20170807 22:47:43.858"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:43.865">${FFDC_TIME} = 20170807224743858927</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.866">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" endtime="20170807 22:47:43.866" starttime="20170807 22:47:43.866"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.867">${suite_name} = 20170807224743858927_TestsSecurityTestSsl</msg>
<status status="PASS" endtime="20170807 22:47:43.867" starttime="20170807 22:47:43.866"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.868">${test_name} = TestSSLConnection</msg>
<status status="PASS" endtime="20170807 22:47:43.868" starttime="20170807 22:47:43.867"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.869">${test_name} = 20170807224743858927_TestSSLConnection</msg>
<status status="PASS" endtime="20170807 22:47:43.869" starttime="20170807 22:47:43.868"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.869" starttime="20170807 22:47:43.865"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:43.870">${FFDC_DIR_PATH} = /tmp/fspcibld/20353/obmc-robot/logs/20170807224743858927_TestsSecurityTestSsl/20170807224743858927_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170807 22:47:43.877">${FFDC_PREFIX} = 20170807224743858927_</msg>
<status status="PASS" endtime="20170807 22:47:43.877" starttime="20170807 22:47:43.858"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.877" starttime="20170807 22:47:43.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:43.878" starttime="20170807 22:47:43.877"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:43.879" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs"&gt;/tmp/fspcibld/20353/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:47:43.879" starttime="20170807 22:47:43.878"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:47:43.880">File '/tmp/fspcibld/20353/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170807 22:47:43.880" starttime="20170807 22:47:43.880"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:43.880">${exist} = False</msg>
<status status="PASS" endtime="20170807 22:47:43.880" starttime="20170807 22:47:43.879"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:43.881" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:47:43.881" starttime="20170807 22:47:43.881"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.882" starttime="20170807 22:47:43.881"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:43.882" starttime="20170807 22:47:43.882"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.883">${cur_time} = 2017-08-07 22:47:43:882817</msg>
<status status="PASS" endtime="20170807 22:47:43.883" starttime="20170807 22:47:43.883"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.884">${cur_time} = 20170807224743882817</msg>
<status status="PASS" endtime="20170807 22:47:43.884" starttime="20170807 22:47:43.883"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:43.884">${cur_time} = 20170807224743882817</msg>
<status status="PASS" endtime="20170807 22:47:43.884" starttime="20170807 22:47:43.882"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:43.885" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:47:43.885" starttime="20170807 22:47:43.884"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.885" starttime="20170807 22:47:43.839"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:43.885" starttime="20170807 22:47:43.536"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" critical="yes" endtime="20170807 22:47:43.885" starttime="20170807 22:47:43.345"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:47:43.886">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:47:43.886" starttime="20170807 22:47:43.886"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" endtime="20170807 22:47:43.886" starttime="20170807 22:47:43.268"></status>
</suite>
<status status="PASS" endtime="20170807 22:47:43.887" starttime="20170807 22:47:43.265"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/20353/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.925">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170807 22:47:43.925" starttime="20170807 22:47:43.925"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.926">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170807 22:47:43.926" starttime="20170807 22:47:43.925"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:43.926">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170807 22:47:43.926" starttime="20170807 22:47:43.924"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.928">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170807 22:47:43.928" starttime="20170807 22:47:43.927"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.928">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170807 22:47:43.928" starttime="20170807 22:47:43.928"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:43.929">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170807 22:47:43.929" starttime="20170807 22:47:43.927"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.929">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170807 22:47:43.930" starttime="20170807 22:47:43.929"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:43.930" starttime="20170807 22:47:43.930"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.935">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170807 22:47:43.945">${rc} = 0</msg>
<msg level="INFO" timestamp="20170807 22:47:43.945">${output} = /tmp/fspcibld/20353/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20170807 22:47:43.945" starttime="20170807 22:47:43.930"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:43.957" starttime="20170807 22:47:43.953"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:43.958" starttime="20170807 22:47:43.957"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.959">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170807 22:47:43.959" starttime="20170807 22:47:43.959"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:43.961">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170807 22:47:43.961" starttime="20170807 22:47:43.929"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.961">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170807 22:47:43.961" starttime="20170807 22:47:43.961"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:43.962" starttime="20170807 22:47:43.962"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:43.966">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170807 22:47:43.985">${rc} = 0</msg>
<msg level="INFO" timestamp="20170807 22:47:43.985">${os_con_pid} = </msg>
<status status="PASS" endtime="20170807 22:47:43.986" starttime="20170807 22:47:43.962"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:43.998" starttime="20170807 22:47:43.995"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.000">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170807 22:47:44.000" starttime="20170807 22:47:43.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:44.004" starttime="20170807 22:47:44.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.005">${rc} = None</msg>
<msg level="INFO" timestamp="20170807 22:47:44.005">${output} = None</msg>
<status status="PASS" endtime="20170807 22:47:44.005" starttime="20170807 22:47:44.004"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:44.006" starttime="20170807 22:47:44.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:47:44.028">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status status="FAIL" endtime="20170807 22:47:44.028" starttime="20170807 22:47:44.008"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:44.028" starttime="20170807 22:47:44.008"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:44.028" starttime="20170807 22:47:44.007"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.028">${output} = </msg>
<status status="PASS" endtime="20170807 22:47:44.029" starttime="20170807 22:47:44.028"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.029">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170807 22:47:44.029" starttime="20170807 22:47:44.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:44.100" starttime="20170807 22:47:44.030"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:44.101">${rc} = 1</msg>
<msg level="INFO" timestamp="20170807 22:47:44.101">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status status="PASS" endtime="20170807 22:47:44.101" starttime="20170807 22:47:44.029"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:44.101">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status status="PASS" endtime="20170807 22:47:44.101" starttime="20170807 22:47:43.926"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:44.103" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:47:44.103" starttime="20170807 22:47:44.103"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.104">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170807 22:47:44.104" starttime="20170807 22:47:44.104"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:44.105" starttime="20170807 22:47:44.104"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.108">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170807 22:47:44.111">${rc} = 0</msg>
<msg level="INFO" timestamp="20170807 22:47:44.111">${output} = /tmp/fspcibld/20353/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20170807 22:47:44.111" starttime="20170807 22:47:44.105"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:44.114" starttime="20170807 22:47:44.113"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:44.115" starttime="20170807 22:47:44.114"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.116">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170807 22:47:44.116" starttime="20170807 22:47:44.115"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:44.116">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170807 22:47:44.116" starttime="20170807 22:47:44.103"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.117">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" endtime="20170807 22:47:44.117" starttime="20170807 22:47:44.117"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:44.118" starttime="20170807 22:47:44.118"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.121">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170807 22:47:44.135">${rc} = 0</msg>
<msg level="INFO" timestamp="20170807 22:47:44.135">${output} = </msg>
<status status="PASS" endtime="20170807 22:47:44.136" starttime="20170807 22:47:44.118"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:44.148" starttime="20170807 22:47:44.146"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:44.149" starttime="20170807 22:47:43.924"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:44.150">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.154">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170807 22:47:44.154" starttime="20170807 22:47:44.153"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.156">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170807 22:47:44.156" starttime="20170807 22:47:44.155"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:44.164">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:47:44.167" starttime="20170807 22:47:44.163"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.168">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:47:44.168" starttime="20170807 22:47:44.167"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.168">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:47:44.168" starttime="20170807 22:47:44.168"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.169">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:47:44.169" starttime="20170807 22:47:44.169"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:44.657">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:47:44.657" starttime="20170807 22:47:44.170"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:44.657">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:47:44.657">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:44.657" starttime="20170807 22:47:44.169"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:44.658">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:44.658" starttime="20170807 22:47:44.658"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:44.659">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:44.659" starttime="20170807 22:47:44.658"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:44.659" starttime="20170807 22:47:44.162"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:44.659" starttime="20170807 22:47:44.160"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:44.659" starttime="20170807 22:47:44.157"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.660">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170807 22:47:44.660" starttime="20170807 22:47:44.659"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.660">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:47:44.660" starttime="20170807 22:47:44.660"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:44.661" starttime="20170807 22:47:44.661"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:44.663">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" endtime="20170807 22:47:44.663" starttime="20170807 22:47:44.662"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:44.663">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170807 22:47:44.664" starttime="20170807 22:47:44.663"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:44.664" starttime="20170807 22:47:44.663"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:44.664" starttime="20170807 22:47:44.661"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:45.687">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170807 22:47:45.688">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:45.688" starttime="20170807 22:47:44.664"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:45.689">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:47:45.689" starttime="20170807 22:47:45.688"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:45.691">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:47:45.691" starttime="20170807 22:47:45.690"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:45.691" starttime="20170807 22:47:45.689"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:45.691" starttime="20170807 22:47:45.688"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:47:45.692">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:47:45.692" starttime="20170807 22:47:45.691"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:45.692">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:45.692" starttime="20170807 22:47:44.156"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:45.693">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:45.693" starttime="20170807 22:47:45.692"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:45.694">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:47:45.694">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:47:45.694">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:47:45.694" starttime="20170807 22:47:45.693"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:45.694" starttime="20170807 22:47:44.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:45.695" starttime="20170807 22:47:45.695"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:45.702">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:47:45.703" starttime="20170807 22:47:45.702"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:45.704">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:47:45.704" starttime="20170807 22:47:45.703"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:45.704">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:47:45.704" starttime="20170807 22:47:45.704"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:45.705">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:47:45.705" starttime="20170807 22:47:45.705"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:47.211">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:47:47.211" starttime="20170807 22:47:45.706"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:47.211">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:47:47.211">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:47.211" starttime="20170807 22:47:45.706"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:47.212">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:47.212" starttime="20170807 22:47:47.212"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:47.213">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:47.213" starttime="20170807 22:47:47.212"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:47.213" starttime="20170807 22:47:45.701"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:47.213" starttime="20170807 22:47:45.701"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:47.213" starttime="20170807 22:47:45.700"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:47.214">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:47:47.214" starttime="20170807 22:47:47.213"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:47.216">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:47:47.216" starttime="20170807 22:47:47.215"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:47.217">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:47:47.217" starttime="20170807 22:47:47.217"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:47.217" starttime="20170807 22:47:47.216"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:47.217" starttime="20170807 22:47:47.215"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:47.217" starttime="20170807 22:47:47.214"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:51.153">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:47:51.153">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:51.153" starttime="20170807 22:47:47.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:51.155">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:47:51.155" starttime="20170807 22:47:51.154"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:51.156">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:47:51.156" starttime="20170807 22:47:51.156"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:51.156" starttime="20170807 22:47:51.155"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:51.156" starttime="20170807 22:47:51.154"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:51.156" starttime="20170807 22:47:51.153"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:47:51.157">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:47:51.157" starttime="20170807 22:47:51.157"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:51.157">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:51.157" starttime="20170807 22:47:45.699"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:51.158">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:51.158" starttime="20170807 22:47:51.157"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:51.158">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:47:51.158">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:47:51.158">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:47:51.158" starttime="20170807 22:47:51.158"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:51.159">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:47:51.159" starttime="20170807 22:47:45.698"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:51.159">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:47:51.159" starttime="20170807 22:47:45.697"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:51.160" starttime="20170807 22:47:51.159"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:51.160" starttime="20170807 22:47:45.697"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:51.164">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:47:51.164" starttime="20170807 22:47:51.163"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:51.164">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:47:51.165" starttime="20170807 22:47:51.164"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:51.165">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:47:51.165" starttime="20170807 22:47:51.165"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:51.166">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:47:51.166" starttime="20170807 22:47:51.165"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:51.941">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:47:51.942" starttime="20170807 22:47:51.167"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:51.942">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:47:51.942">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:51.942" starttime="20170807 22:47:51.166"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:51.942">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:51.943" starttime="20170807 22:47:51.942"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:51.943">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:51.943" starttime="20170807 22:47:51.943"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:51.943" starttime="20170807 22:47:51.163"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:51.943" starttime="20170807 22:47:51.162"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:51.944" starttime="20170807 22:47:51.161"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:51.944">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170807 22:47:51.944" starttime="20170807 22:47:51.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:51.946">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:47:51.946" starttime="20170807 22:47:51.945"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:51.947">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:47:51.947" starttime="20170807 22:47:51.947"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:51.947" starttime="20170807 22:47:51.946"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:51.948" starttime="20170807 22:47:51.945"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:51.948" starttime="20170807 22:47:51.944"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.193">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:47:52.194">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:52.194" starttime="20170807 22:47:51.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.196">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:47:52.196" starttime="20170807 22:47:52.195"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:52.197">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:47:52.197" starttime="20170807 22:47:52.197"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:52.197" starttime="20170807 22:47:52.196"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:52.197" starttime="20170807 22:47:52.195"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:52.197" starttime="20170807 22:47:52.194"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:47:52.198">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:47:52.198" starttime="20170807 22:47:52.198"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:52.198">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:52.198" starttime="20170807 22:47:51.161"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:52.199">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:52.199" starttime="20170807 22:47:52.198"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.199">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:47:52.199">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:47:52.199">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:47:52.200" starttime="20170807 22:47:52.199"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:52.200">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170807 22:47:52.200" starttime="20170807 22:47:51.160"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:52.200">${host_state} = Off</msg>
<status status="PASS" endtime="20170807 22:47:52.201" starttime="20170807 22:47:51.160"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:52.201" starttime="20170807 22:47:52.201"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:52.201" starttime="20170807 22:47:45.696"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:52.202" starttime="20170807 22:47:45.696"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:52.202" starttime="20170807 22:47:44.153"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.203">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" endtime="20170807 22:47:52.203" starttime="20170807 22:47:52.203"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.205">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170807 22:47:52.205" starttime="20170807 22:47:52.204"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:52.209">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:47:52.209" starttime="20170807 22:47:52.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.210">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:47:52.210" starttime="20170807 22:47:52.210"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.211">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:47:52.211" starttime="20170807 22:47:52.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.212">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:47:52.212" starttime="20170807 22:47:52.211"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:52.389">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:47:52.389" starttime="20170807 22:47:52.213"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:52.389">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:47:52.389">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:52.390" starttime="20170807 22:47:52.212"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:52.390">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:52.390" starttime="20170807 22:47:52.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:52.391">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:52.391" starttime="20170807 22:47:52.390"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:52.391" starttime="20170807 22:47:52.208"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:52.391" starttime="20170807 22:47:52.207"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:52.391" starttime="20170807 22:47:52.206"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.392">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170807 22:47:52.392" starttime="20170807 22:47:52.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.393">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:47:52.393" starttime="20170807 22:47:52.392"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:52.393" starttime="20170807 22:47:52.393"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.395">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status status="PASS" endtime="20170807 22:47:52.395" starttime="20170807 22:47:52.394"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:52.396">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170807 22:47:52.396" starttime="20170807 22:47:52.396"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:52.396" starttime="20170807 22:47:52.395"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:52.396" starttime="20170807 22:47:52.393"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.823">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170807 22:47:52.823">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:52.823" starttime="20170807 22:47:52.397"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.824">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:47:52.825" starttime="20170807 22:47:52.824"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:52.825">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:47:52.826" starttime="20170807 22:47:52.825"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:52.826" starttime="20170807 22:47:52.825"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:52.826" starttime="20170807 22:47:52.823"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:47:52.826">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:47:52.826" starttime="20170807 22:47:52.826"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:52.826">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:52.827" starttime="20170807 22:47:52.205"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:52.827">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:52.827" starttime="20170807 22:47:52.827"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.828">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:47:52.828">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:47:52.828">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:47:52.828" starttime="20170807 22:47:52.828"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:52.828" starttime="20170807 22:47:52.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 22:47:52.829" starttime="20170807 22:47:52.828"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:52.834">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:47:52.834" starttime="20170807 22:47:52.833"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.835">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:47:52.835" starttime="20170807 22:47:52.834"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.835">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:47:52.835" starttime="20170807 22:47:52.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:52.836">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:47:52.836" starttime="20170807 22:47:52.835"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:55.023">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:47:55.023" starttime="20170807 22:47:52.837"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:55.023">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:47:55.023">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:55.023" starttime="20170807 22:47:52.837"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:55.024">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:55.024" starttime="20170807 22:47:55.024"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:55.025">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:55.025" starttime="20170807 22:47:55.024"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:55.025" starttime="20170807 22:47:52.832"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:55.025" starttime="20170807 22:47:52.832"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:55.025" starttime="20170807 22:47:52.832"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:55.026">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:47:55.026" starttime="20170807 22:47:55.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:55.028">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:47:55.028" starttime="20170807 22:47:55.027"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:55.029">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:47:55.029" starttime="20170807 22:47:55.029"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:55.029" starttime="20170807 22:47:55.028"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:55.029" starttime="20170807 22:47:55.026"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:55.030" starttime="20170807 22:47:55.026"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:58.701">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:47:58.701">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:58.701" starttime="20170807 22:47:55.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:58.703">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:47:58.703" starttime="20170807 22:47:58.702"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:58.704">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:47:58.704" starttime="20170807 22:47:58.704"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:58.704" starttime="20170807 22:47:58.703"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:58.704" starttime="20170807 22:47:58.702"></status>
</kw>
<status status="PASS" endtime="20170807 22:47:58.704" starttime="20170807 22:47:58.701"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:47:58.705">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:47:58.705" starttime="20170807 22:47:58.704"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:58.705">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:47:58.705" starttime="20170807 22:47:52.831"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:47:58.705">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:47:58.706" starttime="20170807 22:47:58.705"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:47:58.706">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:47:58.706">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:47:58.706">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:47:58.706" starttime="20170807 22:47:58.706"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:58.707">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:47:58.707" starttime="20170807 22:47:52.830"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:47:58.707">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:47:58.707" starttime="20170807 22:47:52.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:47:58.708">On != Off</msg>
<status status="FAIL" endtime="20170807 22:47:58.708" starttime="20170807 22:47:58.707"></status>
</kw>
<status status="FAIL" endtime="20170807 22:47:58.708" starttime="20170807 22:47:52.830"></status>
</kw>
<status status="FAIL" endtime="20170807 22:47:58.708" starttime="20170807 22:47:52.829"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:08.713">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:48:08.714" starttime="20170807 22:48:08.713"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:08.714">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:48:08.714" starttime="20170807 22:48:08.714"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:08.715">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:48:08.715" starttime="20170807 22:48:08.715"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:08.716">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:48:08.716" starttime="20170807 22:48:08.715"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:08.895">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:48:08.895" starttime="20170807 22:48:08.716"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:08.895">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:48:08.896">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:48:08.896" starttime="20170807 22:48:08.716"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:08.896">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:48:08.896" starttime="20170807 22:48:08.896"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:08.897">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:48:08.897" starttime="20170807 22:48:08.897"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:08.897" starttime="20170807 22:48:08.712"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:08.897" starttime="20170807 22:48:08.712"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:08.897" starttime="20170807 22:48:08.711"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:08.898">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:48:08.898" starttime="20170807 22:48:08.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:08.900">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:48:08.901" starttime="20170807 22:48:08.899"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:08.901">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:48:08.902" starttime="20170807 22:48:08.901"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:08.902" starttime="20170807 22:48:08.901"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:08.902" starttime="20170807 22:48:08.899"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:08.902" starttime="20170807 22:48:08.898"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:08.967">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:48:08.967">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:48:08.967" starttime="20170807 22:48:08.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:08.969">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:48:08.969" starttime="20170807 22:48:08.969"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:08.970">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:48:08.970" starttime="20170807 22:48:08.970"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:08.971" starttime="20170807 22:48:08.970"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:08.971" starttime="20170807 22:48:08.968"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:08.971" starttime="20170807 22:48:08.968"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:48:08.971">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:48:08.971" starttime="20170807 22:48:08.971"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:08.971">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:48:08.971" starttime="20170807 22:48:08.711"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:08.972">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:48:08.972" starttime="20170807 22:48:08.972"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:08.973">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:48:08.973">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:48:08.973">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:48:08.973" starttime="20170807 22:48:08.972"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:08.973">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:48:08.973" starttime="20170807 22:48:08.710"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:08.973">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:48:08.973" starttime="20170807 22:48:08.710"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:48:08.974">On != Off</msg>
<status status="FAIL" endtime="20170807 22:48:08.974" starttime="20170807 22:48:08.974"></status>
</kw>
<status status="FAIL" endtime="20170807 22:48:08.974" starttime="20170807 22:48:08.709"></status>
</kw>
<status status="FAIL" endtime="20170807 22:48:08.974" starttime="20170807 22:48:08.708"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:18.979">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:48:18.980" starttime="20170807 22:48:18.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:18.980">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:48:18.980" starttime="20170807 22:48:18.980"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:18.981">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:48:18.981" starttime="20170807 22:48:18.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:18.982">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:48:18.982" starttime="20170807 22:48:18.981"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:19.182">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:48:19.182" starttime="20170807 22:48:18.983"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:19.182">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:48:19.182">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:48:19.182" starttime="20170807 22:48:18.982"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:19.183">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:48:19.183" starttime="20170807 22:48:19.182"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:19.183">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:48:19.183" starttime="20170807 22:48:19.183"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:19.184" starttime="20170807 22:48:18.978"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:19.184" starttime="20170807 22:48:18.978"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:19.184" starttime="20170807 22:48:18.977"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:19.184">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:48:19.184" starttime="20170807 22:48:19.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:19.187">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:48:19.187" starttime="20170807 22:48:19.186"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:19.187">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:48:19.188" starttime="20170807 22:48:19.187"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:19.188" starttime="20170807 22:48:19.187"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:19.188" starttime="20170807 22:48:19.185"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:19.188" starttime="20170807 22:48:19.185"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:19.280">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:48:19.280">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:48:19.280" starttime="20170807 22:48:19.188"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:19.282">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:48:19.282" starttime="20170807 22:48:19.281"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:19.283">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:48:19.283" starttime="20170807 22:48:19.283"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:19.283" starttime="20170807 22:48:19.282"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:19.283" starttime="20170807 22:48:19.281"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:19.283" starttime="20170807 22:48:19.280"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:48:19.284">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:48:19.284" starttime="20170807 22:48:19.283"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:19.284">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:48:19.284" starttime="20170807 22:48:18.977"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:19.284">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:48:19.285" starttime="20170807 22:48:19.284"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:19.285">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:48:19.285">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:48:19.285">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:48:19.285" starttime="20170807 22:48:19.285"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:19.286">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:48:19.286" starttime="20170807 22:48:18.976"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:19.286">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:48:19.286" starttime="20170807 22:48:18.976"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:48:19.287">On != Off</msg>
<status status="FAIL" endtime="20170807 22:48:19.287" starttime="20170807 22:48:19.287"></status>
</kw>
<status status="FAIL" endtime="20170807 22:48:19.287" starttime="20170807 22:48:18.975"></status>
</kw>
<status status="FAIL" endtime="20170807 22:48:19.287" starttime="20170807 22:48:18.975"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:29.293">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:48:29.293" starttime="20170807 22:48:29.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:29.294">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:48:29.294" starttime="20170807 22:48:29.293"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:29.294">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:48:29.294" starttime="20170807 22:48:29.294"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:29.295">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:48:29.295" starttime="20170807 22:48:29.295"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:29.879">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:48:29.879" starttime="20170807 22:48:29.296"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:29.879">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:48:29.879">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:48:29.879" starttime="20170807 22:48:29.295"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:29.880">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:48:29.880" starttime="20170807 22:48:29.879"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:29.880">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:48:29.880" starttime="20170807 22:48:29.880"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:29.880" starttime="20170807 22:48:29.292"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:29.881" starttime="20170807 22:48:29.291"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:29.881" starttime="20170807 22:48:29.291"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:29.881">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:48:29.881" starttime="20170807 22:48:29.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:29.883">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:48:29.883" starttime="20170807 22:48:29.883"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:29.884">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:48:29.884" starttime="20170807 22:48:29.884"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:29.884" starttime="20170807 22:48:29.883"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:29.885" starttime="20170807 22:48:29.882"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:29.885" starttime="20170807 22:48:29.881"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:30.164">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:48:30.165">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:48:30.165" starttime="20170807 22:48:29.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:30.169">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:48:30.169" starttime="20170807 22:48:30.169"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:30.170">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:48:30.170" starttime="20170807 22:48:30.170"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:30.170" starttime="20170807 22:48:30.169"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:30.170" starttime="20170807 22:48:30.168"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:30.170" starttime="20170807 22:48:30.165"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:48:30.171">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:48:30.171" starttime="20170807 22:48:30.171"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:30.171">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:48:30.171" starttime="20170807 22:48:29.290"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:30.172">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:48:30.172" starttime="20170807 22:48:30.171"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:30.172">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:48:30.172">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:48:30.173">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:48:30.173" starttime="20170807 22:48:30.172"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:30.173">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:48:30.173" starttime="20170807 22:48:29.289"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:30.173">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:48:30.173" starttime="20170807 22:48:29.289"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:48:30.174">On != Off</msg>
<status status="FAIL" endtime="20170807 22:48:30.174" starttime="20170807 22:48:30.174"></status>
</kw>
<status status="FAIL" endtime="20170807 22:48:30.174" starttime="20170807 22:48:29.288"></status>
</kw>
<status status="FAIL" endtime="20170807 22:48:30.174" starttime="20170807 22:48:29.288"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:40.179">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:48:40.179" starttime="20170807 22:48:40.179"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:40.180">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:48:40.180" starttime="20170807 22:48:40.179"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:40.180">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:48:40.180" starttime="20170807 22:48:40.180"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:40.181">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:48:40.181" starttime="20170807 22:48:40.181"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:40.374">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:48:40.375" starttime="20170807 22:48:40.182"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:40.375">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:48:40.375">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:48:40.375" starttime="20170807 22:48:40.181"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:40.376">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:48:40.376" starttime="20170807 22:48:40.375"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:40.377">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:48:40.377" starttime="20170807 22:48:40.376"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:40.377" starttime="20170807 22:48:40.178"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:40.377" starttime="20170807 22:48:40.178"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:40.377" starttime="20170807 22:48:40.177"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:40.378">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:48:40.378" starttime="20170807 22:48:40.378"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:40.381">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:48:40.381" starttime="20170807 22:48:40.380"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:40.383">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:48:40.383" starttime="20170807 22:48:40.382"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:40.383" starttime="20170807 22:48:40.382"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:40.383" starttime="20170807 22:48:40.379"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:40.383" starttime="20170807 22:48:40.379"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:40.463">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:48:40.463">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:48:40.463" starttime="20170807 22:48:40.383"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:40.465">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:48:40.465" starttime="20170807 22:48:40.464"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:40.466">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:48:40.466" starttime="20170807 22:48:40.465"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:40.466" starttime="20170807 22:48:40.465"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:40.466" starttime="20170807 22:48:40.464"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:40.466" starttime="20170807 22:48:40.463"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:48:40.466">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:48:40.466" starttime="20170807 22:48:40.466"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:40.467">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:48:40.467" starttime="20170807 22:48:40.176"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:40.467">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:48:40.467" starttime="20170807 22:48:40.467"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:40.468">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:48:40.468">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:48:40.468">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:48:40.468" starttime="20170807 22:48:40.468"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:40.468">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:48:40.469" starttime="20170807 22:48:40.176"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:40.469">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:48:40.469" starttime="20170807 22:48:40.175"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:48:40.469">On != Off</msg>
<status status="FAIL" endtime="20170807 22:48:40.470" starttime="20170807 22:48:40.469"></status>
</kw>
<status status="FAIL" endtime="20170807 22:48:40.470" starttime="20170807 22:48:40.175"></status>
</kw>
<status status="FAIL" endtime="20170807 22:48:40.470" starttime="20170807 22:48:40.175"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:50.476">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:48:50.476" starttime="20170807 22:48:50.475"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:50.476">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:48:50.477" starttime="20170807 22:48:50.476"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:50.477">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:48:50.477" starttime="20170807 22:48:50.477"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:50.478">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:48:50.478" starttime="20170807 22:48:50.477"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:50.664">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:48:50.664" starttime="20170807 22:48:50.479"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:50.664">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:48:50.664">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:48:50.665" starttime="20170807 22:48:50.478"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:50.665">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:48:50.665" starttime="20170807 22:48:50.665"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:50.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:48:50.666" starttime="20170807 22:48:50.665"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:50.666" starttime="20170807 22:48:50.474"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:50.666" starttime="20170807 22:48:50.474"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:50.666" starttime="20170807 22:48:50.473"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:50.667">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:48:50.667" starttime="20170807 22:48:50.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:50.669">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:48:50.669" starttime="20170807 22:48:50.668"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:50.670">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:48:50.670" starttime="20170807 22:48:50.670"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:50.670" starttime="20170807 22:48:50.669"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:50.670" starttime="20170807 22:48:50.668"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:50.670" starttime="20170807 22:48:50.667"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:50.757">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:48:50.757">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:48:50.757" starttime="20170807 22:48:50.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:50.759">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:48:50.759" starttime="20170807 22:48:50.758"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:50.760">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:48:50.760" starttime="20170807 22:48:50.759"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:50.760" starttime="20170807 22:48:50.759"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:50.760" starttime="20170807 22:48:50.758"></status>
</kw>
<status status="PASS" endtime="20170807 22:48:50.760" starttime="20170807 22:48:50.757"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:48:50.761">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:48:50.761" starttime="20170807 22:48:50.761"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:50.761">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:48:50.761" starttime="20170807 22:48:50.472"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:48:50.762">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:48:50.762" starttime="20170807 22:48:50.761"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:48:50.762">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:48:50.762">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:48:50.762">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:48:50.762" starttime="20170807 22:48:50.762"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:50.763">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:48:50.763" starttime="20170807 22:48:50.472"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:48:50.763">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:48:50.763" starttime="20170807 22:48:50.471"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:48:50.764">On != Off</msg>
<status status="FAIL" endtime="20170807 22:48:50.764" starttime="20170807 22:48:50.763"></status>
</kw>
<status status="FAIL" endtime="20170807 22:48:50.764" starttime="20170807 22:48:50.471"></status>
</kw>
<status status="FAIL" endtime="20170807 22:48:50.764" starttime="20170807 22:48:50.470"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:00.769">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:49:00.769" starttime="20170807 22:49:00.769"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:00.770">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:49:00.770" starttime="20170807 22:49:00.770"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:00.771">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:49:00.771" starttime="20170807 22:49:00.770"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:00.771">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:49:00.771" starttime="20170807 22:49:00.771"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:00.989">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:49:00.989" starttime="20170807 22:49:00.772"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:00.989">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:49:00.989">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:00.989" starttime="20170807 22:49:00.772"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:00.990">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:00.990" starttime="20170807 22:49:00.990"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:00.991">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:00.991" starttime="20170807 22:49:00.990"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:00.991" starttime="20170807 22:49:00.768"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:00.991" starttime="20170807 22:49:00.768"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:00.991" starttime="20170807 22:49:00.767"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:00.992">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:49:00.992" starttime="20170807 22:49:00.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:00.994">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:49:00.994" starttime="20170807 22:49:00.993"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:00.995">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:49:00.995" starttime="20170807 22:49:00.994"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:00.995" starttime="20170807 22:49:00.994"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:00.995" starttime="20170807 22:49:00.992"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:00.995" starttime="20170807 22:49:00.992"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:01.074">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:49:01.074">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:01.074" starttime="20170807 22:49:00.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:01.076">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:49:01.076" starttime="20170807 22:49:01.076"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:01.077">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:49:01.077" starttime="20170807 22:49:01.077"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:01.077" starttime="20170807 22:49:01.076"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:01.078" starttime="20170807 22:49:01.075"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:01.078" starttime="20170807 22:49:01.075"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:49:01.078">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:49:01.078" starttime="20170807 22:49:01.078"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:01.078">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:01.078" starttime="20170807 22:49:00.766"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:01.079">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:01.079" starttime="20170807 22:49:01.079"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:01.080">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:49:01.080">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:49:01.080">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:49:01.080" starttime="20170807 22:49:01.079"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:01.080">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:49:01.080" starttime="20170807 22:49:00.766"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:01.080">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:49:01.080" starttime="20170807 22:49:00.765"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:49:01.081">On != Off</msg>
<status status="FAIL" endtime="20170807 22:49:01.081" starttime="20170807 22:49:01.081"></status>
</kw>
<status status="FAIL" endtime="20170807 22:49:01.081" starttime="20170807 22:49:00.765"></status>
</kw>
<status status="FAIL" endtime="20170807 22:49:01.081" starttime="20170807 22:49:00.765"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:11.087">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:49:11.087" starttime="20170807 22:49:11.087"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:11.088">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:49:11.088" starttime="20170807 22:49:11.087"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:11.089">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:49:11.089" starttime="20170807 22:49:11.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:11.089">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:49:11.089" starttime="20170807 22:49:11.089"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:11.326">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:49:11.326" starttime="20170807 22:49:11.090"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:11.326">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:49:11.326">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:11.326" starttime="20170807 22:49:11.089"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:11.326">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:11.327" starttime="20170807 22:49:11.326"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:11.327">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:11.327" starttime="20170807 22:49:11.327"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:11.327" starttime="20170807 22:49:11.086"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:11.327" starttime="20170807 22:49:11.085"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:11.328" starttime="20170807 22:49:11.085"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:11.328">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:49:11.328" starttime="20170807 22:49:11.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:11.330">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:49:11.330" starttime="20170807 22:49:11.330"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:11.331">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:49:11.331" starttime="20170807 22:49:11.331"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:11.331" starttime="20170807 22:49:11.331"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:11.332" starttime="20170807 22:49:11.329"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:11.332" starttime="20170807 22:49:11.329"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:11.442">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:49:11.442">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:11.442" starttime="20170807 22:49:11.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:11.444">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:49:11.444" starttime="20170807 22:49:11.444"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:11.445">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:49:11.445" starttime="20170807 22:49:11.445"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:11.446" starttime="20170807 22:49:11.444"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:11.446" starttime="20170807 22:49:11.443"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:11.446" starttime="20170807 22:49:11.443"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:49:11.446">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:49:11.446" starttime="20170807 22:49:11.446"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:11.446">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:11.446" starttime="20170807 22:49:11.084"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:11.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:11.447" starttime="20170807 22:49:11.447"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:11.448">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:49:11.448">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:49:11.448">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:49:11.448" starttime="20170807 22:49:11.447"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:11.448">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:49:11.448" starttime="20170807 22:49:11.083"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:11.448">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:49:11.449" starttime="20170807 22:49:11.083"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:49:11.449">On != Off</msg>
<status status="FAIL" endtime="20170807 22:49:11.449" starttime="20170807 22:49:11.449"></status>
</kw>
<status status="FAIL" endtime="20170807 22:49:11.449" starttime="20170807 22:49:11.082"></status>
</kw>
<status status="FAIL" endtime="20170807 22:49:11.449" starttime="20170807 22:49:11.082"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:21.455">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:49:21.456" starttime="20170807 22:49:21.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:21.457">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:49:21.457" starttime="20170807 22:49:21.456"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:21.458">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:49:21.458" starttime="20170807 22:49:21.457"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:21.458">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:49:21.459" starttime="20170807 22:49:21.458"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:21.639">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:49:21.639" starttime="20170807 22:49:21.460"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:21.639">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:49:21.639">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:21.639" starttime="20170807 22:49:21.459"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:21.640">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:21.640" starttime="20170807 22:49:21.640"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:21.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:21.641" starttime="20170807 22:49:21.640"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:21.641" starttime="20170807 22:49:21.454"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:21.641" starttime="20170807 22:49:21.453"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:21.641" starttime="20170807 22:49:21.452"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:21.642">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:49:21.642" starttime="20170807 22:49:21.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:21.644">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:49:21.644" starttime="20170807 22:49:21.643"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:21.645">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:49:21.645" starttime="20170807 22:49:21.644"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:21.645" starttime="20170807 22:49:21.644"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:21.645" starttime="20170807 22:49:21.642"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:21.645" starttime="20170807 22:49:21.642"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:21.730">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:49:21.730">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:21.730" starttime="20170807 22:49:21.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:21.732">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:49:21.732" starttime="20170807 22:49:21.731"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:21.733">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:49:21.733" starttime="20170807 22:49:21.733"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:21.733" starttime="20170807 22:49:21.732"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:21.733" starttime="20170807 22:49:21.731"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:21.733" starttime="20170807 22:49:21.730"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:49:21.734">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:49:21.734" starttime="20170807 22:49:21.733"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:21.734">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:21.734" starttime="20170807 22:49:21.452"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:21.734">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:21.735" starttime="20170807 22:49:21.734"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:21.735">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:49:21.735">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:49:21.735">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:49:21.735" starttime="20170807 22:49:21.735"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:21.736">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:49:21.736" starttime="20170807 22:49:21.451"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:21.736">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:49:21.736" starttime="20170807 22:49:21.451"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:49:21.737">On != Off</msg>
<status status="FAIL" endtime="20170807 22:49:21.737" starttime="20170807 22:49:21.736"></status>
</kw>
<status status="FAIL" endtime="20170807 22:49:21.737" starttime="20170807 22:49:21.451"></status>
</kw>
<status status="FAIL" endtime="20170807 22:49:21.737" starttime="20170807 22:49:21.450"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:31.742">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:49:31.743" starttime="20170807 22:49:31.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:31.744">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:49:31.744" starttime="20170807 22:49:31.743"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:31.744">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:49:31.744" starttime="20170807 22:49:31.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:31.745">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:49:31.745" starttime="20170807 22:49:31.745"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:31.922">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:49:31.922" starttime="20170807 22:49:31.746"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:31.922">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:49:31.923">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:31.923" starttime="20170807 22:49:31.745"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:31.923">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:31.923" starttime="20170807 22:49:31.923"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:31.924">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:31.924" starttime="20170807 22:49:31.924"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:31.924" starttime="20170807 22:49:31.741"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:31.924" starttime="20170807 22:49:31.741"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:31.924" starttime="20170807 22:49:31.740"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:31.925">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:49:31.925" starttime="20170807 22:49:31.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:31.927">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:49:31.927" starttime="20170807 22:49:31.926"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:31.928">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:49:31.928" starttime="20170807 22:49:31.928"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:31.928" starttime="20170807 22:49:31.927"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:31.928" starttime="20170807 22:49:31.926"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:31.928" starttime="20170807 22:49:31.925"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:31.991">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:49:31.991">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:31.992" starttime="20170807 22:49:31.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:31.993">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:49:31.993" starttime="20170807 22:49:31.993"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:31.994">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:49:31.995" starttime="20170807 22:49:31.994"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:31.995" starttime="20170807 22:49:31.993"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:31.995" starttime="20170807 22:49:31.992"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:31.995" starttime="20170807 22:49:31.992"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:49:31.995">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:49:31.995" starttime="20170807 22:49:31.995"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:31.996">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:31.996" starttime="20170807 22:49:31.740"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:31.996">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:31.996" starttime="20170807 22:49:31.996"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:31.997">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:49:31.997">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:49:31.997">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:49:31.997" starttime="20170807 22:49:31.996"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:31.997">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:49:31.997" starttime="20170807 22:49:31.739"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:31.998">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:49:31.998" starttime="20170807 22:49:31.739"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:49:31.998">On != Off</msg>
<status status="FAIL" endtime="20170807 22:49:31.998" starttime="20170807 22:49:31.998"></status>
</kw>
<status status="FAIL" endtime="20170807 22:49:31.998" starttime="20170807 22:49:31.738"></status>
</kw>
<status status="FAIL" endtime="20170807 22:49:31.999" starttime="20170807 22:49:31.738"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:42.003">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:49:42.004" starttime="20170807 22:49:42.003"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:42.004">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:49:42.004" starttime="20170807 22:49:42.004"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:42.005">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:49:42.005" starttime="20170807 22:49:42.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:42.006">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:49:42.006" starttime="20170807 22:49:42.005"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:42.184">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:49:42.185" starttime="20170807 22:49:42.006"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:42.185">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:49:42.185">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:42.185" starttime="20170807 22:49:42.006"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:42.185">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:42.186" starttime="20170807 22:49:42.185"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:42.186">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:42.186" starttime="20170807 22:49:42.186"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:42.186" starttime="20170807 22:49:42.003"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:42.187" starttime="20170807 22:49:42.002"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:42.187" starttime="20170807 22:49:42.002"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:42.188">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:49:42.188" starttime="20170807 22:49:42.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:42.191">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:49:42.191" starttime="20170807 22:49:42.190"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:42.192">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:49:42.192" starttime="20170807 22:49:42.192"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:42.193" starttime="20170807 22:49:42.191"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:42.193" starttime="20170807 22:49:42.189"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:42.193" starttime="20170807 22:49:42.188"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:42.256">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:49:42.256">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:42.256" starttime="20170807 22:49:42.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:42.258">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:49:42.258" starttime="20170807 22:49:42.257"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:42.259">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:49:42.259" starttime="20170807 22:49:42.258"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:42.259" starttime="20170807 22:49:42.258"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:42.259" starttime="20170807 22:49:42.257"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:42.259" starttime="20170807 22:49:42.256"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:49:42.259">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:49:42.259" starttime="20170807 22:49:42.259"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:42.260">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:42.260" starttime="20170807 22:49:42.001"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:42.260">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:42.260" starttime="20170807 22:49:42.260"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:42.261">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:49:42.261">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:49:42.261">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:49:42.261" starttime="20170807 22:49:42.261"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:42.261">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:49:42.261" starttime="20170807 22:49:42.000"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:42.262">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:49:42.262" starttime="20170807 22:49:42.000"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:49:42.262">On != Off</msg>
<status status="FAIL" endtime="20170807 22:49:42.263" starttime="20170807 22:49:42.262"></status>
</kw>
<status status="FAIL" endtime="20170807 22:49:42.264" starttime="20170807 22:49:42.000"></status>
</kw>
<status status="FAIL" endtime="20170807 22:49:42.264" starttime="20170807 22:49:41.999"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:52.269">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:49:52.270" starttime="20170807 22:49:52.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:52.270">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:49:52.270" starttime="20170807 22:49:52.270"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:52.271">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:49:52.271" starttime="20170807 22:49:52.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:52.272">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:49:52.272" starttime="20170807 22:49:52.271"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:52.469">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:49:52.469" starttime="20170807 22:49:52.272"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:52.469">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:49:52.469">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:52.469" starttime="20170807 22:49:52.272"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:52.470">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:52.470" starttime="20170807 22:49:52.469"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:52.470">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:52.471" starttime="20170807 22:49:52.470"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:52.471" starttime="20170807 22:49:52.268"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:52.471" starttime="20170807 22:49:52.268"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:52.471" starttime="20170807 22:49:52.267"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:52.471">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:49:52.471" starttime="20170807 22:49:52.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:52.474">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:49:52.474" starttime="20170807 22:49:52.473"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:52.474">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:49:52.475" starttime="20170807 22:49:52.474"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:52.475" starttime="20170807 22:49:52.474"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:52.475" starttime="20170807 22:49:52.472"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:52.475" starttime="20170807 22:49:52.472"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:52.537">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:49:52.537">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:52.537" starttime="20170807 22:49:52.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:52.539">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:49:52.539" starttime="20170807 22:49:52.539"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:52.543">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:49:52.543" starttime="20170807 22:49:52.540"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:52.543" starttime="20170807 22:49:52.539"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:52.543" starttime="20170807 22:49:52.538"></status>
</kw>
<status status="PASS" endtime="20170807 22:49:52.544" starttime="20170807 22:49:52.538"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:49:52.544">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:49:52.544" starttime="20170807 22:49:52.544"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:52.544">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:49:52.544" starttime="20170807 22:49:52.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:49:52.545">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:49:52.545" starttime="20170807 22:49:52.545"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:49:52.546">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:49:52.546">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:49:52.546">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:49:52.546" starttime="20170807 22:49:52.545"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:52.546">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:49:52.546" starttime="20170807 22:49:52.266"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:49:52.546">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:49:52.546" starttime="20170807 22:49:52.265"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:49:52.547">On != Off</msg>
<status status="FAIL" endtime="20170807 22:49:52.547" starttime="20170807 22:49:52.547"></status>
</kw>
<status status="FAIL" endtime="20170807 22:49:52.547" starttime="20170807 22:49:52.265"></status>
</kw>
<status status="FAIL" endtime="20170807 22:49:52.547" starttime="20170807 22:49:52.264"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:02.553">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:50:02.553" starttime="20170807 22:50:02.552"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:02.553">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:50:02.554" starttime="20170807 22:50:02.553"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:02.554">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:50:02.554" starttime="20170807 22:50:02.554"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:02.555">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:50:02.555" starttime="20170807 22:50:02.554"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:02.759">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:50:02.759" starttime="20170807 22:50:02.555"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:02.760">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:50:02.760">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:02.760" starttime="20170807 22:50:02.555"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:02.761">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:02.761" starttime="20170807 22:50:02.760"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:02.762">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:02.762" starttime="20170807 22:50:02.761"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:02.762" starttime="20170807 22:50:02.552"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:02.762" starttime="20170807 22:50:02.551"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:02.762" starttime="20170807 22:50:02.551"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:02.762">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:50:02.763" starttime="20170807 22:50:02.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:02.765">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:50:02.765" starttime="20170807 22:50:02.764"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:02.766">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:50:02.766" starttime="20170807 22:50:02.765"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:02.766" starttime="20170807 22:50:02.765"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:02.766" starttime="20170807 22:50:02.763"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:02.766" starttime="20170807 22:50:02.763"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:02.855">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:50:02.855">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:02.855" starttime="20170807 22:50:02.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:02.857">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:50:02.857" starttime="20170807 22:50:02.856"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:02.858">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:50:02.858" starttime="20170807 22:50:02.858"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:02.858" starttime="20170807 22:50:02.857"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:02.858" starttime="20170807 22:50:02.856"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:02.858" starttime="20170807 22:50:02.856"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:50:02.859">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:50:02.859" starttime="20170807 22:50:02.858"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:02.859">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:02.859" starttime="20170807 22:50:02.550"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:02.859">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:02.860" starttime="20170807 22:50:02.859"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:02.860">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:50:02.860">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:50:02.860">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:50:02.860" starttime="20170807 22:50:02.860"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:02.861">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:50:02.861" starttime="20170807 22:50:02.549"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:02.861">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:50:02.861" starttime="20170807 22:50:02.549"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:50:02.862">On != Off</msg>
<status status="FAIL" endtime="20170807 22:50:02.862" starttime="20170807 22:50:02.861"></status>
</kw>
<status status="FAIL" endtime="20170807 22:50:02.862" starttime="20170807 22:50:02.549"></status>
</kw>
<status status="FAIL" endtime="20170807 22:50:02.862" starttime="20170807 22:50:02.548"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:12.867">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:50:12.868" starttime="20170807 22:50:12.867"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:12.868">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:50:12.868" starttime="20170807 22:50:12.868"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:12.869">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:50:12.869" starttime="20170807 22:50:12.869"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:12.870">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:50:12.870" starttime="20170807 22:50:12.869"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:13.047">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:50:13.048" starttime="20170807 22:50:12.870"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:13.048">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:50:13.048">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:13.048" starttime="20170807 22:50:12.870"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:13.048">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:13.049" starttime="20170807 22:50:13.048"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:13.049">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:13.049" starttime="20170807 22:50:13.049"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:13.049" starttime="20170807 22:50:12.867"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:13.049" starttime="20170807 22:50:12.866"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:13.050" starttime="20170807 22:50:12.865"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:13.050">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:50:13.050" starttime="20170807 22:50:13.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:13.052">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:50:13.052" starttime="20170807 22:50:13.052"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:13.053">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:50:13.053" starttime="20170807 22:50:13.053"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:13.053" starttime="20170807 22:50:13.052"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:13.053" starttime="20170807 22:50:13.051"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:13.054" starttime="20170807 22:50:13.050"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:13.117">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:50:13.117">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:13.117" starttime="20170807 22:50:13.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:13.119">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:50:13.119" starttime="20170807 22:50:13.119"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:13.120">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:50:13.120" starttime="20170807 22:50:13.120"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:13.120" starttime="20170807 22:50:13.119"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:13.121" starttime="20170807 22:50:13.118"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:13.121" starttime="20170807 22:50:13.117"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:50:13.121">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:50:13.121" starttime="20170807 22:50:13.121"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:13.121">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:13.121" starttime="20170807 22:50:12.864"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:13.122">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:13.122" starttime="20170807 22:50:13.122"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:13.122">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:50:13.122">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:50:13.123">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:50:13.123" starttime="20170807 22:50:13.122"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:13.123">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:50:13.123" starttime="20170807 22:50:12.864"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:13.123">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:50:13.123" starttime="20170807 22:50:12.864"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:50:13.124">On != Off</msg>
<status status="FAIL" endtime="20170807 22:50:13.124" starttime="20170807 22:50:13.123"></status>
</kw>
<status status="FAIL" endtime="20170807 22:50:13.124" starttime="20170807 22:50:12.863"></status>
</kw>
<status status="FAIL" endtime="20170807 22:50:13.124" starttime="20170807 22:50:12.863"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:23.129">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:50:23.130" starttime="20170807 22:50:23.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:23.130">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:50:23.130" starttime="20170807 22:50:23.130"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:23.131">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:50:23.131" starttime="20170807 22:50:23.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:23.132">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:50:23.132" starttime="20170807 22:50:23.131"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:23.322">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:50:23.323" starttime="20170807 22:50:23.132"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:23.323">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:50:23.323">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:23.323" starttime="20170807 22:50:23.132"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:23.323">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:23.324" starttime="20170807 22:50:23.323"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:23.324">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:23.324" starttime="20170807 22:50:23.324"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:23.324" starttime="20170807 22:50:23.128"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:23.325" starttime="20170807 22:50:23.128"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:23.325" starttime="20170807 22:50:23.127"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:23.325">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:50:23.325" starttime="20170807 22:50:23.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:23.327">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:50:23.327" starttime="20170807 22:50:23.327"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:23.328">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:50:23.328" starttime="20170807 22:50:23.328"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:23.328" starttime="20170807 22:50:23.327"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:23.328" starttime="20170807 22:50:23.326"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:23.329" starttime="20170807 22:50:23.325"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:23.391">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:50:23.391">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:23.391" starttime="20170807 22:50:23.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:23.393">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:50:23.393" starttime="20170807 22:50:23.392"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:23.394">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:50:23.394" starttime="20170807 22:50:23.393"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:23.394" starttime="20170807 22:50:23.393"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:23.394" starttime="20170807 22:50:23.392"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:23.394" starttime="20170807 22:50:23.391"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:50:23.394">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:50:23.394" starttime="20170807 22:50:23.394"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:23.395">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:23.395" starttime="20170807 22:50:23.127"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:23.395">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:23.395" starttime="20170807 22:50:23.395"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:23.396">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:50:23.396">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:50:23.396">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:50:23.396" starttime="20170807 22:50:23.396"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:23.396">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:50:23.396" starttime="20170807 22:50:23.126"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:23.397">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:50:23.397" starttime="20170807 22:50:23.126"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:50:23.397">On != Off</msg>
<status status="FAIL" endtime="20170807 22:50:23.397" starttime="20170807 22:50:23.397"></status>
</kw>
<status status="FAIL" endtime="20170807 22:50:23.398" starttime="20170807 22:50:23.125"></status>
</kw>
<status status="FAIL" endtime="20170807 22:50:23.398" starttime="20170807 22:50:23.125"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:33.403">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:50:33.404" starttime="20170807 22:50:33.403"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:33.404">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:50:33.404" starttime="20170807 22:50:33.404"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:33.405">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:50:33.405" starttime="20170807 22:50:33.404"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:33.405">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:50:33.405" starttime="20170807 22:50:33.405"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:33.594">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:50:33.594" starttime="20170807 22:50:33.406"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:33.594">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:50:33.595">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:33.595" starttime="20170807 22:50:33.406"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:33.595">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:33.595" starttime="20170807 22:50:33.595"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:33.596">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:33.596" starttime="20170807 22:50:33.596"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:33.596" starttime="20170807 22:50:33.402"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:33.596" starttime="20170807 22:50:33.401"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:33.596" starttime="20170807 22:50:33.401"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:33.597">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:50:33.597" starttime="20170807 22:50:33.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:33.599">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:50:33.599" starttime="20170807 22:50:33.598"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:33.600">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:50:33.600" starttime="20170807 22:50:33.600"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:33.600" starttime="20170807 22:50:33.599"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:33.600" starttime="20170807 22:50:33.598"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:33.600" starttime="20170807 22:50:33.597"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:33.663">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:50:33.663">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:33.663" starttime="20170807 22:50:33.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:33.665">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:50:33.665" starttime="20170807 22:50:33.664"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:33.666">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:50:33.666" starttime="20170807 22:50:33.666"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:33.666" starttime="20170807 22:50:33.665"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:33.666" starttime="20170807 22:50:33.664"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:33.666" starttime="20170807 22:50:33.663"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:50:33.667">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:50:33.667" starttime="20170807 22:50:33.667"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:33.667">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:33.667" starttime="20170807 22:50:33.400"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:33.668">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:33.668" starttime="20170807 22:50:33.667"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:33.668">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:50:33.668">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:50:33.668">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:50:33.668" starttime="20170807 22:50:33.668"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:33.669">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:50:33.669" starttime="20170807 22:50:33.400"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:33.669">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:50:33.669" starttime="20170807 22:50:33.399"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:50:33.670">On != Off</msg>
<status status="FAIL" endtime="20170807 22:50:33.670" starttime="20170807 22:50:33.669"></status>
</kw>
<status status="FAIL" endtime="20170807 22:50:33.670" starttime="20170807 22:50:33.399"></status>
</kw>
<status status="FAIL" endtime="20170807 22:50:33.670" starttime="20170807 22:50:33.398"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:43.675">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:50:43.676" starttime="20170807 22:50:43.675"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:43.676">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:50:43.676" starttime="20170807 22:50:43.676"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:43.677">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:50:43.677" starttime="20170807 22:50:43.676"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:43.677">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:50:43.677" starttime="20170807 22:50:43.677"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:43.878">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:50:43.878" starttime="20170807 22:50:43.678"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:43.879">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:50:43.879">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:43.879" starttime="20170807 22:50:43.678"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:43.879">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:43.879" starttime="20170807 22:50:43.879"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:43.880">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:43.880" starttime="20170807 22:50:43.880"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:43.880" starttime="20170807 22:50:43.674"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:43.880" starttime="20170807 22:50:43.674"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:43.880" starttime="20170807 22:50:43.673"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:43.881">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:50:43.881" starttime="20170807 22:50:43.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:43.883">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:50:43.883" starttime="20170807 22:50:43.882"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:43.884">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:50:43.884" starttime="20170807 22:50:43.884"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:43.884" starttime="20170807 22:50:43.883"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:43.884" starttime="20170807 22:50:43.882"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:43.884" starttime="20170807 22:50:43.881"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:43.947">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:50:43.947">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:43.947" starttime="20170807 22:50:43.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:43.949">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:50:43.949" starttime="20170807 22:50:43.948"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:43.950">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:50:43.950" starttime="20170807 22:50:43.950"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:43.951" starttime="20170807 22:50:43.949"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:43.951" starttime="20170807 22:50:43.948"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:43.951" starttime="20170807 22:50:43.948"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:50:43.951">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:50:43.951" starttime="20170807 22:50:43.951"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:43.952">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:43.952" starttime="20170807 22:50:43.672"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:43.952">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:43.952" starttime="20170807 22:50:43.952"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:43.953">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:50:43.953">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:50:43.953">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:50:43.953" starttime="20170807 22:50:43.952"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:43.953">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:50:43.953" starttime="20170807 22:50:43.672"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:43.954">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:50:43.954" starttime="20170807 22:50:43.671"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:50:43.954">On != Off</msg>
<status status="FAIL" endtime="20170807 22:50:43.954" starttime="20170807 22:50:43.954"></status>
</kw>
<status status="FAIL" endtime="20170807 22:50:43.954" starttime="20170807 22:50:43.671"></status>
</kw>
<status status="FAIL" endtime="20170807 22:50:43.955" starttime="20170807 22:50:43.670"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:53.961">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:50:53.961" starttime="20170807 22:50:53.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:53.962">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:50:53.962" starttime="20170807 22:50:53.961"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:53.962">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:50:53.962" starttime="20170807 22:50:53.962"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:53.963">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:50:53.963" starttime="20170807 22:50:53.963"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:54.138">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:50:54.138" starttime="20170807 22:50:53.964"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:54.138">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:50:54.138">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:54.139" starttime="20170807 22:50:53.963"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:54.139">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:54.139" starttime="20170807 22:50:54.139"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:54.140">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:54.140" starttime="20170807 22:50:54.139"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:54.140" starttime="20170807 22:50:53.959"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:54.140" starttime="20170807 22:50:53.959"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:54.140" starttime="20170807 22:50:53.958"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:54.141">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:50:54.141" starttime="20170807 22:50:54.140"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:54.143">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:50:54.143" starttime="20170807 22:50:54.142"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:54.144">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:50:54.144" starttime="20170807 22:50:54.144"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:54.144" starttime="20170807 22:50:54.143"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:54.144" starttime="20170807 22:50:54.142"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:54.144" starttime="20170807 22:50:54.141"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:54.213">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:50:54.214">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:54.214" starttime="20170807 22:50:54.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:54.215">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:50:54.215" starttime="20170807 22:50:54.215"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:54.217">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:50:54.217" starttime="20170807 22:50:54.216"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:54.217" starttime="20170807 22:50:54.216"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:54.217" starttime="20170807 22:50:54.214"></status>
</kw>
<status status="PASS" endtime="20170807 22:50:54.217" starttime="20170807 22:50:54.214"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:50:54.217">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:50:54.217" starttime="20170807 22:50:54.217"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:54.218">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:50:54.218" starttime="20170807 22:50:53.958"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:50:54.218">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:50:54.218" starttime="20170807 22:50:54.218"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:50:54.219">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:50:54.219">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:50:54.219">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:50:54.219" starttime="20170807 22:50:54.219"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:54.219">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:50:54.219" starttime="20170807 22:50:53.957"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:50:54.220">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:50:54.220" starttime="20170807 22:50:53.956"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:50:54.220">On != Off</msg>
<status status="FAIL" endtime="20170807 22:50:54.220" starttime="20170807 22:50:54.220"></status>
</kw>
<status status="FAIL" endtime="20170807 22:50:54.221" starttime="20170807 22:50:53.956"></status>
</kw>
<status status="FAIL" endtime="20170807 22:50:54.221" starttime="20170807 22:50:53.955"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:04.226">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:51:04.226" starttime="20170807 22:51:04.225"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:04.227">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:51:04.227" starttime="20170807 22:51:04.226"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:04.227">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:51:04.227" starttime="20170807 22:51:04.227"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:04.228">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:51:04.228" starttime="20170807 22:51:04.228"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:04.421">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:51:04.422" starttime="20170807 22:51:04.229"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:04.422">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:51:04.422">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:04.422" starttime="20170807 22:51:04.228"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:04.422">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:04.423" starttime="20170807 22:51:04.422"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:04.423">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:04.423" starttime="20170807 22:51:04.423"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:04.423" starttime="20170807 22:51:04.225"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:04.423" starttime="20170807 22:51:04.224"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:04.424" starttime="20170807 22:51:04.224"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:04.424">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:51:04.424" starttime="20170807 22:51:04.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:04.426">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:51:04.426" starttime="20170807 22:51:04.425"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:04.427">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:51:04.427" starttime="20170807 22:51:04.427"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:04.427" starttime="20170807 22:51:04.426"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:04.427" starttime="20170807 22:51:04.425"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:04.427" starttime="20170807 22:51:04.424"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:04.496">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:51:04.496">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:04.496" starttime="20170807 22:51:04.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:04.498">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:51:04.498" starttime="20170807 22:51:04.497"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:04.498">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:51:04.499" starttime="20170807 22:51:04.498"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:04.499" starttime="20170807 22:51:04.498"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:04.499" starttime="20170807 22:51:04.497"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:04.499" starttime="20170807 22:51:04.496"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:51:04.499">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:51:04.499" starttime="20170807 22:51:04.499"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:04.500">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:04.500" starttime="20170807 22:51:04.223"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:04.500">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:04.500" starttime="20170807 22:51:04.500"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:04.501">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:51:04.501">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:51:04.501">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:51:04.501" starttime="20170807 22:51:04.501"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:04.501">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:51:04.502" starttime="20170807 22:51:04.223"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:04.502">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:51:04.502" starttime="20170807 22:51:04.222"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:51:04.503">On != Off</msg>
<status status="FAIL" endtime="20170807 22:51:04.503" starttime="20170807 22:51:04.502"></status>
</kw>
<status status="FAIL" endtime="20170807 22:51:04.503" starttime="20170807 22:51:04.222"></status>
</kw>
<status status="FAIL" endtime="20170807 22:51:04.503" starttime="20170807 22:51:04.221"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:14.509">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:51:14.509" starttime="20170807 22:51:14.508"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:14.510">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:51:14.510" starttime="20170807 22:51:14.509"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:14.510">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:51:14.510" starttime="20170807 22:51:14.510"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:14.511">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:51:14.511" starttime="20170807 22:51:14.510"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:14.703">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:51:14.703" starttime="20170807 22:51:14.511"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:14.703">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:51:14.703">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:14.703" starttime="20170807 22:51:14.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:14.704">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:14.704" starttime="20170807 22:51:14.704"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:14.705">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:14.705" starttime="20170807 22:51:14.704"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:14.705" starttime="20170807 22:51:14.507"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:14.705" starttime="20170807 22:51:14.507"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:14.705" starttime="20170807 22:51:14.506"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:14.706">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:51:14.706" starttime="20170807 22:51:14.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:14.708">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:51:14.708" starttime="20170807 22:51:14.707"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:14.709">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:51:14.710" starttime="20170807 22:51:14.709"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:14.710" starttime="20170807 22:51:14.708"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:14.710" starttime="20170807 22:51:14.706"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:14.710" starttime="20170807 22:51:14.706"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:14.774">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:51:14.774">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:14.774" starttime="20170807 22:51:14.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:14.776">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:51:14.776" starttime="20170807 22:51:14.775"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:14.777">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:51:14.777" starttime="20170807 22:51:14.777"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:14.777" starttime="20170807 22:51:14.776"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:14.777" starttime="20170807 22:51:14.775"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:14.777" starttime="20170807 22:51:14.774"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:51:14.778">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:51:14.778" starttime="20170807 22:51:14.778"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:14.778">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:14.778" starttime="20170807 22:51:14.505"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:14.779">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:14.779" starttime="20170807 22:51:14.778"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:14.779">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:51:14.779">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:51:14.779">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:51:14.779" starttime="20170807 22:51:14.779"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:14.780">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:51:14.780" starttime="20170807 22:51:14.505"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:14.780">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:51:14.780" starttime="20170807 22:51:14.505"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:51:14.781">On != Off</msg>
<status status="FAIL" endtime="20170807 22:51:14.781" starttime="20170807 22:51:14.780"></status>
</kw>
<status status="FAIL" endtime="20170807 22:51:14.781" starttime="20170807 22:51:14.504"></status>
</kw>
<status status="FAIL" endtime="20170807 22:51:14.781" starttime="20170807 22:51:14.504"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:24.786">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:51:24.787" starttime="20170807 22:51:24.786"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:24.787">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:51:24.787" starttime="20170807 22:51:24.787"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:24.788">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:51:24.788" starttime="20170807 22:51:24.787"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:24.788">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:51:24.788" starttime="20170807 22:51:24.788"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:25.008">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:51:25.008" starttime="20170807 22:51:24.789"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:25.008">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:51:25.008">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:25.008" starttime="20170807 22:51:24.789"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:25.009">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:25.009" starttime="20170807 22:51:25.009"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:25.010">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:25.010" starttime="20170807 22:51:25.010"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:25.010" starttime="20170807 22:51:24.785"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:25.010" starttime="20170807 22:51:24.785"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:25.011" starttime="20170807 22:51:24.784"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:25.011">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:51:25.011" starttime="20170807 22:51:25.011"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:25.015">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:51:25.015" starttime="20170807 22:51:25.014"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:25.016">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:51:25.016" starttime="20170807 22:51:25.016"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:25.017" starttime="20170807 22:51:25.015"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:25.017" starttime="20170807 22:51:25.013"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:25.017" starttime="20170807 22:51:25.012"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:25.114">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:51:25.115">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:25.115" starttime="20170807 22:51:25.017"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:25.116">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:51:25.116" starttime="20170807 22:51:25.116"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:25.118">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:51:25.118" starttime="20170807 22:51:25.117"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:25.118" starttime="20170807 22:51:25.117"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:25.118" starttime="20170807 22:51:25.115"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:25.118" starttime="20170807 22:51:25.115"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:51:25.119">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:51:25.119" starttime="20170807 22:51:25.118"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:25.119">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:25.119" starttime="20170807 22:51:24.783"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:25.119">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:25.120" starttime="20170807 22:51:25.119"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:25.120">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:51:25.120">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:51:25.120">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:51:25.120" starttime="20170807 22:51:25.120"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:25.121">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:51:25.121" starttime="20170807 22:51:24.783"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:25.121">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:51:25.121" starttime="20170807 22:51:24.782"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:51:25.121">On != Off</msg>
<status status="FAIL" endtime="20170807 22:51:25.122" starttime="20170807 22:51:25.121"></status>
</kw>
<status status="FAIL" endtime="20170807 22:51:25.122" starttime="20170807 22:51:24.782"></status>
</kw>
<status status="FAIL" endtime="20170807 22:51:25.122" starttime="20170807 22:51:24.781"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:35.128">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:51:35.128" starttime="20170807 22:51:35.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:35.129">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:51:35.129" starttime="20170807 22:51:35.128"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:35.129">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:51:35.129" starttime="20170807 22:51:35.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:35.130">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:51:35.130" starttime="20170807 22:51:35.130"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:35.327">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:51:35.327" starttime="20170807 22:51:35.131"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:35.327">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:51:35.327">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:35.327" starttime="20170807 22:51:35.130"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:35.328">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:35.328" starttime="20170807 22:51:35.327"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:35.328">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:35.328" starttime="20170807 22:51:35.328"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:35.328" starttime="20170807 22:51:35.126"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:35.329" starttime="20170807 22:51:35.126"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:35.329" starttime="20170807 22:51:35.125"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:35.329">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:51:35.329" starttime="20170807 22:51:35.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:35.331">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:51:35.331" starttime="20170807 22:51:35.331"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:35.332">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:51:35.333" starttime="20170807 22:51:35.332"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:35.333" starttime="20170807 22:51:35.331"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:35.333" starttime="20170807 22:51:35.330"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:35.333" starttime="20170807 22:51:35.330"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:35.425">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:51:35.425">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:35.425" starttime="20170807 22:51:35.333"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:35.426">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:51:35.427" starttime="20170807 22:51:35.426"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:35.428">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:51:35.428" starttime="20170807 22:51:35.427"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:35.428" starttime="20170807 22:51:35.427"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:35.428" starttime="20170807 22:51:35.426"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:35.428" starttime="20170807 22:51:35.425"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:51:35.428">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:51:35.429" starttime="20170807 22:51:35.428"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:35.429">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:35.429" starttime="20170807 22:51:35.125"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:35.429">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:35.429" starttime="20170807 22:51:35.429"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:35.430">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:51:35.430">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:51:35.430">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:51:35.430" starttime="20170807 22:51:35.430"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:35.431">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:51:35.431" starttime="20170807 22:51:35.124"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:35.431">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:51:35.431" starttime="20170807 22:51:35.123"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:51:35.431">On != Off</msg>
<status status="FAIL" endtime="20170807 22:51:35.432" starttime="20170807 22:51:35.431"></status>
</kw>
<status status="FAIL" endtime="20170807 22:51:35.432" starttime="20170807 22:51:35.123"></status>
</kw>
<status status="FAIL" endtime="20170807 22:51:35.432" starttime="20170807 22:51:35.122"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:45.436">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:51:45.437" starttime="20170807 22:51:45.436"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:45.437">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:51:45.437" starttime="20170807 22:51:45.437"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:45.438">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:51:45.438" starttime="20170807 22:51:45.438"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:45.439">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:51:45.439" starttime="20170807 22:51:45.438"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:45.628">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:51:45.628" starttime="20170807 22:51:45.439"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:45.628">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:51:45.629">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:45.629" starttime="20170807 22:51:45.439"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:45.629">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:45.629" starttime="20170807 22:51:45.629"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:45.630">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:45.630" starttime="20170807 22:51:45.630"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:45.630" starttime="20170807 22:51:45.436"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:45.630" starttime="20170807 22:51:45.435"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:45.630" starttime="20170807 22:51:45.435"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:45.631">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:51:45.631" starttime="20170807 22:51:45.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:45.633">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:51:45.633" starttime="20170807 22:51:45.632"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:45.634">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:51:45.634" starttime="20170807 22:51:45.634"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:45.634" starttime="20170807 22:51:45.633"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:45.634" starttime="20170807 22:51:45.632"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:45.634" starttime="20170807 22:51:45.631"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:45.715">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:51:45.715">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:45.715" starttime="20170807 22:51:45.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:45.716">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:51:45.716" starttime="20170807 22:51:45.716"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:45.717">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:51:45.717" starttime="20170807 22:51:45.717"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:45.718" starttime="20170807 22:51:45.717"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:45.718" starttime="20170807 22:51:45.715"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:45.718" starttime="20170807 22:51:45.715"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:51:45.718">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:51:45.718" starttime="20170807 22:51:45.718"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:45.718">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:45.718" starttime="20170807 22:51:45.434"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:45.719">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:45.719" starttime="20170807 22:51:45.719"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:45.720">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:51:45.720">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:51:45.720">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:51:45.720" starttime="20170807 22:51:45.719"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:45.720">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:51:45.720" starttime="20170807 22:51:45.433"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:45.720">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:51:45.720" starttime="20170807 22:51:45.433"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:51:45.721">On != Off</msg>
<status status="FAIL" endtime="20170807 22:51:45.721" starttime="20170807 22:51:45.721"></status>
</kw>
<status status="FAIL" endtime="20170807 22:51:45.721" starttime="20170807 22:51:45.433"></status>
</kw>
<status status="FAIL" endtime="20170807 22:51:45.721" starttime="20170807 22:51:45.432"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:55.727">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:51:55.727" starttime="20170807 22:51:55.726"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:55.728">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:51:55.728" starttime="20170807 22:51:55.727"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:55.728">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:51:55.728" starttime="20170807 22:51:55.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:55.729">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:51:55.729" starttime="20170807 22:51:55.729"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:55.907">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:51:55.907" starttime="20170807 22:51:55.730"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:55.907">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:51:55.907">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:55.907" starttime="20170807 22:51:55.729"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:55.908">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:55.908" starttime="20170807 22:51:55.907"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:55.908">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:55.909" starttime="20170807 22:51:55.908"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:55.909" starttime="20170807 22:51:55.725"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:55.909" starttime="20170807 22:51:55.725"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:55.909" starttime="20170807 22:51:55.724"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:55.909">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:51:55.909" starttime="20170807 22:51:55.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:55.912">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:51:55.912" starttime="20170807 22:51:55.911"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:55.912">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:51:55.913" starttime="20170807 22:51:55.912"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:55.913" starttime="20170807 22:51:55.912"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:55.913" starttime="20170807 22:51:55.910"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:55.913" starttime="20170807 22:51:55.910"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:55.976">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:51:55.976">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:55.976" starttime="20170807 22:51:55.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:55.977">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:51:55.977" starttime="20170807 22:51:55.977"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:55.979">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:51:55.979" starttime="20170807 22:51:55.978"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:55.979" starttime="20170807 22:51:55.978"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:55.979" starttime="20170807 22:51:55.976"></status>
</kw>
<status status="PASS" endtime="20170807 22:51:55.979" starttime="20170807 22:51:55.976"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:51:55.980">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:51:55.980" starttime="20170807 22:51:55.979"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:55.980">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:51:55.980" starttime="20170807 22:51:55.724"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:51:55.980">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:51:55.981" starttime="20170807 22:51:55.980"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:51:55.981">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:51:55.981">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:51:55.981">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:51:55.981" starttime="20170807 22:51:55.981"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:55.982">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:51:55.982" starttime="20170807 22:51:55.723"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:51:55.982">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:51:55.982" starttime="20170807 22:51:55.723"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:51:55.983">On != Off</msg>
<status status="FAIL" endtime="20170807 22:51:55.983" starttime="20170807 22:51:55.982"></status>
</kw>
<status status="FAIL" endtime="20170807 22:51:55.983" starttime="20170807 22:51:55.722"></status>
</kw>
<status status="FAIL" endtime="20170807 22:51:55.983" starttime="20170807 22:51:55.722"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:05.988">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:52:05.989" starttime="20170807 22:52:05.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:05.989">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:52:05.989" starttime="20170807 22:52:05.989"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:05.990">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:52:05.990" starttime="20170807 22:52:05.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:05.990">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:52:05.990" starttime="20170807 22:52:05.990"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:06.170">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:52:06.170" starttime="20170807 22:52:05.991"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:06.170">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:52:06.170">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:06.170" starttime="20170807 22:52:05.991"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:06.171">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:06.171" starttime="20170807 22:52:06.170"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:06.171">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:06.171" starttime="20170807 22:52:06.171"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:06.172" starttime="20170807 22:52:05.987"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:06.172" starttime="20170807 22:52:05.987"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:06.172" starttime="20170807 22:52:05.986"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:06.172">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:52:06.172" starttime="20170807 22:52:06.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:06.175">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:52:06.176" starttime="20170807 22:52:06.174"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:06.177">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:52:06.177" starttime="20170807 22:52:06.176"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:06.177" starttime="20170807 22:52:06.176"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:06.177" starttime="20170807 22:52:06.173"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:06.177" starttime="20170807 22:52:06.173"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:06.239">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:52:06.240">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:06.240" starttime="20170807 22:52:06.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:06.241">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:52:06.241" starttime="20170807 22:52:06.241"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:06.242">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:52:06.242" starttime="20170807 22:52:06.242"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:06.242" starttime="20170807 22:52:06.241"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:06.243" starttime="20170807 22:52:06.240"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:06.243" starttime="20170807 22:52:06.240"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:52:06.243">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:52:06.243" starttime="20170807 22:52:06.243"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:06.243">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:06.243" starttime="20170807 22:52:05.986"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:06.244">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:06.244" starttime="20170807 22:52:06.244"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:06.245">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:52:06.245">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:52:06.245">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:52:06.245" starttime="20170807 22:52:06.244"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:06.245">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:52:06.245" starttime="20170807 22:52:05.985"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:06.245">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:52:06.245" starttime="20170807 22:52:05.985"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:52:06.246">On != Off</msg>
<status status="FAIL" endtime="20170807 22:52:06.246" starttime="20170807 22:52:06.246"></status>
</kw>
<status status="FAIL" endtime="20170807 22:52:06.246" starttime="20170807 22:52:05.984"></status>
</kw>
<status status="FAIL" endtime="20170807 22:52:06.246" starttime="20170807 22:52:05.984"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:16.252">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:52:16.253" starttime="20170807 22:52:16.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:16.253">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:52:16.253" starttime="20170807 22:52:16.253"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:16.254">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:52:16.254" starttime="20170807 22:52:16.253"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:16.255">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:52:16.255" starttime="20170807 22:52:16.254"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:16.490">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:52:16.490" starttime="20170807 22:52:16.255"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:16.490">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:52:16.490">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:16.490" starttime="20170807 22:52:16.255"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:16.491">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:16.491" starttime="20170807 22:52:16.491"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:16.492">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:16.492" starttime="20170807 22:52:16.492"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:16.493" starttime="20170807 22:52:16.251"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:16.493" starttime="20170807 22:52:16.250"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:16.493" starttime="20170807 22:52:16.249"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:16.494">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:52:16.494" starttime="20170807 22:52:16.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:16.497">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:52:16.497" starttime="20170807 22:52:16.496"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:16.498">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:52:16.498" starttime="20170807 22:52:16.498"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:16.499" starttime="20170807 22:52:16.497"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:16.499" starttime="20170807 22:52:16.495"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:16.499" starttime="20170807 22:52:16.494"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:16.567">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:52:16.567">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:16.567" starttime="20170807 22:52:16.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:16.569">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:52:16.569" starttime="20170807 22:52:16.568"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:16.570">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:52:16.570" starttime="20170807 22:52:16.570"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:16.570" starttime="20170807 22:52:16.569"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:16.571" starttime="20170807 22:52:16.568"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:16.571" starttime="20170807 22:52:16.568"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:52:16.571">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:52:16.571" starttime="20170807 22:52:16.571"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:16.571">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:16.571" starttime="20170807 22:52:16.249"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:16.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:16.572" starttime="20170807 22:52:16.572"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:16.572">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:52:16.573">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:52:16.573">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:52:16.573" starttime="20170807 22:52:16.572"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:16.573">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:52:16.573" starttime="20170807 22:52:16.248"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:16.573">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:52:16.573" starttime="20170807 22:52:16.248"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:52:16.574">On != Off</msg>
<status status="FAIL" endtime="20170807 22:52:16.574" starttime="20170807 22:52:16.574"></status>
</kw>
<status status="FAIL" endtime="20170807 22:52:16.574" starttime="20170807 22:52:16.247"></status>
</kw>
<status status="FAIL" endtime="20170807 22:52:16.574" starttime="20170807 22:52:16.247"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:26.579">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:52:26.580" starttime="20170807 22:52:26.579"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:26.580">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:52:26.580" starttime="20170807 22:52:26.580"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:26.581">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:52:26.581" starttime="20170807 22:52:26.580"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:26.581">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:52:26.581" starttime="20170807 22:52:26.581"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:26.814">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:52:26.814" starttime="20170807 22:52:26.582"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:26.814">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:52:26.814">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:26.814" starttime="20170807 22:52:26.582"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:26.815">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:26.815" starttime="20170807 22:52:26.814"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:26.815">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:26.815" starttime="20170807 22:52:26.815"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:26.815" starttime="20170807 22:52:26.578"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:26.816" starttime="20170807 22:52:26.578"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:26.816" starttime="20170807 22:52:26.577"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:26.816">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:52:26.816" starttime="20170807 22:52:26.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:26.818">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:52:26.818" starttime="20170807 22:52:26.818"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:26.819">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:52:26.819" starttime="20170807 22:52:26.819"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:26.819" starttime="20170807 22:52:26.818"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:26.819" starttime="20170807 22:52:26.817"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:26.820" starttime="20170807 22:52:26.817"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:26.922">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:52:26.922">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:26.922" starttime="20170807 22:52:26.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:26.924">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:52:26.924" starttime="20170807 22:52:26.923"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:26.925">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:52:26.925" starttime="20170807 22:52:26.924"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:26.925" starttime="20170807 22:52:26.924"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:26.925" starttime="20170807 22:52:26.923"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:26.925" starttime="20170807 22:52:26.922"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:52:26.925">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:52:26.926" starttime="20170807 22:52:26.925"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:26.926">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:26.926" starttime="20170807 22:52:26.577"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:26.926">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:26.926" starttime="20170807 22:52:26.926"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:26.927">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:52:26.927">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:52:26.927">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:52:26.927" starttime="20170807 22:52:26.927"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:26.927">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:52:26.927" starttime="20170807 22:52:26.576"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:26.928">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:52:26.928" starttime="20170807 22:52:26.576"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:52:26.928">On != Off</msg>
<status status="FAIL" endtime="20170807 22:52:26.929" starttime="20170807 22:52:26.928"></status>
</kw>
<status status="FAIL" endtime="20170807 22:52:26.929" starttime="20170807 22:52:26.575"></status>
</kw>
<status status="FAIL" endtime="20170807 22:52:26.929" starttime="20170807 22:52:26.575"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:36.934">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:52:36.934" starttime="20170807 22:52:36.934"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:36.935">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:52:36.935" starttime="20170807 22:52:36.935"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:36.936">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:52:36.936" starttime="20170807 22:52:36.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:36.936">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:52:36.936" starttime="20170807 22:52:36.936"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:37.112">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:52:37.112" starttime="20170807 22:52:36.937"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:37.112">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:52:37.112">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:37.112" starttime="20170807 22:52:36.937"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:37.113">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:37.113" starttime="20170807 22:52:37.113"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:37.114">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:37.114" starttime="20170807 22:52:37.113"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:37.114" starttime="20170807 22:52:36.933"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:37.114" starttime="20170807 22:52:36.932"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:37.114" starttime="20170807 22:52:36.932"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:37.115">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:52:37.115" starttime="20170807 22:52:37.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:37.117">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:52:37.117" starttime="20170807 22:52:37.116"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:37.118">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:52:37.118" starttime="20170807 22:52:37.118"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:37.118" starttime="20170807 22:52:37.117"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:37.118" starttime="20170807 22:52:37.116"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:37.118" starttime="20170807 22:52:37.115"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:37.188">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:52:37.188">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:37.188" starttime="20170807 22:52:37.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:37.190">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:52:37.190" starttime="20170807 22:52:37.190"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:37.191">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:52:37.191" starttime="20170807 22:52:37.191"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:37.192" starttime="20170807 22:52:37.190"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:37.192" starttime="20170807 22:52:37.189"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:37.192" starttime="20170807 22:52:37.189"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:52:37.192">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:52:37.192" starttime="20170807 22:52:37.192"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:37.192">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:37.192" starttime="20170807 22:52:36.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:37.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:37.193" starttime="20170807 22:52:37.193"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:37.194">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:52:37.194">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:52:37.194">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:52:37.194" starttime="20170807 22:52:37.193"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:37.194">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:52:37.194" starttime="20170807 22:52:36.931"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:37.194">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:52:37.194" starttime="20170807 22:52:36.930"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:52:37.195">On != Off</msg>
<status status="FAIL" endtime="20170807 22:52:37.195" starttime="20170807 22:52:37.195"></status>
</kw>
<status status="FAIL" endtime="20170807 22:52:37.195" starttime="20170807 22:52:36.930"></status>
</kw>
<status status="FAIL" endtime="20170807 22:52:37.196" starttime="20170807 22:52:36.929"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:47.200">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:52:47.201" starttime="20170807 22:52:47.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:47.201">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:52:47.201" starttime="20170807 22:52:47.201"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:47.202">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:52:47.202" starttime="20170807 22:52:47.202"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:47.203">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:52:47.203" starttime="20170807 22:52:47.202"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:47.392">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:52:47.392" starttime="20170807 22:52:47.203"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:47.392">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:52:47.392">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:47.392" starttime="20170807 22:52:47.203"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:47.393">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:47.393" starttime="20170807 22:52:47.392"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:47.393">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:47.393" starttime="20170807 22:52:47.393"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:47.394" starttime="20170807 22:52:47.199"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:47.394" starttime="20170807 22:52:47.199"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:47.394" starttime="20170807 22:52:47.198"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:47.394">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:52:47.394" starttime="20170807 22:52:47.394"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:47.397">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:52:47.397" starttime="20170807 22:52:47.396"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:47.397">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:52:47.398" starttime="20170807 22:52:47.397"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:47.398" starttime="20170807 22:52:47.397"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:47.398" starttime="20170807 22:52:47.395"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:47.398" starttime="20170807 22:52:47.395"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:47.480">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:52:47.480">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:47.480" starttime="20170807 22:52:47.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:47.482">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:52:47.482" starttime="20170807 22:52:47.481"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:47.483">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:52:47.483" starttime="20170807 22:52:47.483"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:47.483" starttime="20170807 22:52:47.482"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:47.483" starttime="20170807 22:52:47.481"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:47.483" starttime="20170807 22:52:47.481"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:52:47.484">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:52:47.484" starttime="20170807 22:52:47.484"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:47.484">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:47.484" starttime="20170807 22:52:47.198"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:47.485">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:47.485" starttime="20170807 22:52:47.484"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:47.485">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:52:47.485">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:52:47.485">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:52:47.486" starttime="20170807 22:52:47.485"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:47.486">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:52:47.486" starttime="20170807 22:52:47.197"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:47.486">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:52:47.486" starttime="20170807 22:52:47.197"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:52:47.487">On != Off</msg>
<status status="FAIL" endtime="20170807 22:52:47.487" starttime="20170807 22:52:47.486"></status>
</kw>
<status status="FAIL" endtime="20170807 22:52:47.487" starttime="20170807 22:52:47.197"></status>
</kw>
<status status="FAIL" endtime="20170807 22:52:47.487" starttime="20170807 22:52:47.196"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:57.493">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:52:57.493" starttime="20170807 22:52:57.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:57.493">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:52:57.494" starttime="20170807 22:52:57.493"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:57.494">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:52:57.494" starttime="20170807 22:52:57.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:57.495">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:52:57.495" starttime="20170807 22:52:57.494"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:57.675">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:52:57.675" starttime="20170807 22:52:57.495"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:57.676">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:52:57.676">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:57.676" starttime="20170807 22:52:57.495"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:57.676">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:57.677" starttime="20170807 22:52:57.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:57.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:57.677" starttime="20170807 22:52:57.677"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:57.677" starttime="20170807 22:52:57.491"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:57.677" starttime="20170807 22:52:57.491"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:57.678" starttime="20170807 22:52:57.490"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:57.678">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:52:57.678" starttime="20170807 22:52:57.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:57.680">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:52:57.680" starttime="20170807 22:52:57.680"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:57.681">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:52:57.681" starttime="20170807 22:52:57.681"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:57.681" starttime="20170807 22:52:57.680"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:57.682" starttime="20170807 22:52:57.679"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:57.682" starttime="20170807 22:52:57.678"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:57.744">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:52:57.745">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:57.745" starttime="20170807 22:52:57.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:57.747">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:52:57.747" starttime="20170807 22:52:57.746"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:57.748">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:52:57.748" starttime="20170807 22:52:57.747"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:57.748" starttime="20170807 22:52:57.747"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:57.748" starttime="20170807 22:52:57.746"></status>
</kw>
<status status="PASS" endtime="20170807 22:52:57.748" starttime="20170807 22:52:57.745"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:52:57.749">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:52:57.749" starttime="20170807 22:52:57.749"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:57.749">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:52:57.749" starttime="20170807 22:52:57.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:52:57.750">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:52:57.750" starttime="20170807 22:52:57.749"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:52:57.750">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:52:57.750">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:52:57.750">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:52:57.750" starttime="20170807 22:52:57.750"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:57.751">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:52:57.751" starttime="20170807 22:52:57.489"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:52:57.751">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:52:57.751" starttime="20170807 22:52:57.489"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:52:57.752">On != Off</msg>
<status status="FAIL" endtime="20170807 22:52:57.752" starttime="20170807 22:52:57.751"></status>
</kw>
<status status="FAIL" endtime="20170807 22:52:57.752" starttime="20170807 22:52:57.488"></status>
</kw>
<status status="FAIL" endtime="20170807 22:52:57.752" starttime="20170807 22:52:57.488"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:07.757">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:53:07.758" starttime="20170807 22:53:07.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:07.758">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:53:07.758" starttime="20170807 22:53:07.758"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:07.759">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:53:07.759" starttime="20170807 22:53:07.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:07.760">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:53:07.760" starttime="20170807 22:53:07.759"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:07.936">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:53:07.936" starttime="20170807 22:53:07.760"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:07.936">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:53:07.936">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:07.936" starttime="20170807 22:53:07.760"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:07.937">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:07.937" starttime="20170807 22:53:07.937"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:07.938">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:07.938" starttime="20170807 22:53:07.937"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:07.938" starttime="20170807 22:53:07.757"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:07.938" starttime="20170807 22:53:07.756"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:07.938" starttime="20170807 22:53:07.755"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:07.939">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:53:07.939" starttime="20170807 22:53:07.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:07.941">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:53:07.941" starttime="20170807 22:53:07.940"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:07.942">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:53:07.942" starttime="20170807 22:53:07.941"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:07.942" starttime="20170807 22:53:07.941"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:07.942" starttime="20170807 22:53:07.939"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:07.942" starttime="20170807 22:53:07.939"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:08.006">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:53:08.006">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:08.006" starttime="20170807 22:53:07.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:08.008">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:53:08.008" starttime="20170807 22:53:08.008"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:08.009">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:53:08.009" starttime="20170807 22:53:08.009"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:08.010" starttime="20170807 22:53:08.009"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:08.010" starttime="20170807 22:53:08.007"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:08.010" starttime="20170807 22:53:08.007"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:53:08.010">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:53:08.010" starttime="20170807 22:53:08.010"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:08.010">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:08.010" starttime="20170807 22:53:07.755"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:08.011">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:08.011" starttime="20170807 22:53:08.011"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:08.012">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:53:08.012">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:53:08.012">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:53:08.012" starttime="20170807 22:53:08.011"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:08.012">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:53:08.012" starttime="20170807 22:53:07.754"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:08.012">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:53:08.012" starttime="20170807 22:53:07.754"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:53:08.013">On != Off</msg>
<status status="FAIL" endtime="20170807 22:53:08.013" starttime="20170807 22:53:08.013"></status>
</kw>
<status status="FAIL" endtime="20170807 22:53:08.013" starttime="20170807 22:53:07.753"></status>
</kw>
<status status="FAIL" endtime="20170807 22:53:08.013" starttime="20170807 22:53:07.753"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:18.019">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:53:18.019" starttime="20170807 22:53:18.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:18.020">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:53:18.020" starttime="20170807 22:53:18.020"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:18.021">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:53:18.021" starttime="20170807 22:53:18.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:18.021">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:53:18.021" starttime="20170807 22:53:18.021"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:18.244">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:53:18.245" starttime="20170807 22:53:18.022"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:18.245">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:53:18.245">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:18.245" starttime="20170807 22:53:18.022"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:18.246">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:18.246" starttime="20170807 22:53:18.245"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:18.246">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:18.246" starttime="20170807 22:53:18.246"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:18.247" starttime="20170807 22:53:18.018"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:18.247" starttime="20170807 22:53:18.017"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:18.247" starttime="20170807 22:53:18.017"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:18.247">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:53:18.247" starttime="20170807 22:53:18.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:18.249">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:53:18.249" starttime="20170807 22:53:18.249"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:18.250">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:53:18.250" starttime="20170807 22:53:18.250"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:18.251" starttime="20170807 22:53:18.250"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:18.251" starttime="20170807 22:53:18.248"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:18.251" starttime="20170807 22:53:18.248"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:18.314">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:53:18.315">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:18.315" starttime="20170807 22:53:18.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:18.317">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:53:18.317" starttime="20170807 22:53:18.316"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:18.318">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:53:18.318" starttime="20170807 22:53:18.317"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:18.318" starttime="20170807 22:53:18.317"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:18.318" starttime="20170807 22:53:18.316"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:18.318" starttime="20170807 22:53:18.315"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:53:18.319">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:53:18.319" starttime="20170807 22:53:18.319"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:18.319">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:18.319" starttime="20170807 22:53:18.016"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:18.320">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:18.320" starttime="20170807 22:53:18.319"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:18.320">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:53:18.320">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:53:18.320">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:53:18.320" starttime="20170807 22:53:18.320"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:18.321">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:53:18.321" starttime="20170807 22:53:18.015"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:18.321">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:53:18.321" starttime="20170807 22:53:18.015"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:53:18.322">On != Off</msg>
<status status="FAIL" endtime="20170807 22:53:18.322" starttime="20170807 22:53:18.321"></status>
</kw>
<status status="FAIL" endtime="20170807 22:53:18.322" starttime="20170807 22:53:18.015"></status>
</kw>
<status status="FAIL" endtime="20170807 22:53:18.322" starttime="20170807 22:53:18.014"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:28.327">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:53:28.327" starttime="20170807 22:53:28.327"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:28.328">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:53:28.328" starttime="20170807 22:53:28.328"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:28.329">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:53:28.329" starttime="20170807 22:53:28.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:28.329">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:53:28.329" starttime="20170807 22:53:28.329"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:28.529">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:53:28.529" starttime="20170807 22:53:28.330"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:28.529">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:53:28.529">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:28.529" starttime="20170807 22:53:28.330"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:28.530">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:28.530" starttime="20170807 22:53:28.530"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:28.531">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:28.531" starttime="20170807 22:53:28.530"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:28.531" starttime="20170807 22:53:28.326"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:28.531" starttime="20170807 22:53:28.326"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:28.531" starttime="20170807 22:53:28.325"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:28.531">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:53:28.532" starttime="20170807 22:53:28.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:28.534">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:53:28.534" starttime="20170807 22:53:28.533"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:28.534">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:53:28.535" starttime="20170807 22:53:28.534"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:28.535" starttime="20170807 22:53:28.534"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:28.535" starttime="20170807 22:53:28.532"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:28.535" starttime="20170807 22:53:28.532"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:28.599">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:53:28.599">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:28.599" starttime="20170807 22:53:28.535"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:28.601">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:53:28.601" starttime="20170807 22:53:28.600"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:28.602">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:53:28.602" starttime="20170807 22:53:28.601"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:28.602" starttime="20170807 22:53:28.601"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:28.602" starttime="20170807 22:53:28.600"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:28.602" starttime="20170807 22:53:28.599"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:53:28.602">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:53:28.603" starttime="20170807 22:53:28.602"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:28.603">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:28.603" starttime="20170807 22:53:28.324"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:28.603">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:28.603" starttime="20170807 22:53:28.603"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:28.604">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:53:28.604">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:53:28.604">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:53:28.604" starttime="20170807 22:53:28.604"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:28.604">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:53:28.604" starttime="20170807 22:53:28.324"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:28.605">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:53:28.605" starttime="20170807 22:53:28.323"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:53:28.605">On != Off</msg>
<status status="FAIL" endtime="20170807 22:53:28.605" starttime="20170807 22:53:28.605"></status>
</kw>
<status status="FAIL" endtime="20170807 22:53:28.606" starttime="20170807 22:53:28.323"></status>
</kw>
<status status="FAIL" endtime="20170807 22:53:28.606" starttime="20170807 22:53:28.323"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:38.611">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:53:38.612" starttime="20170807 22:53:38.611"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:38.612">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:53:38.612" starttime="20170807 22:53:38.612"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:38.613">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:53:38.613" starttime="20170807 22:53:38.612"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:38.613">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:53:38.613" starttime="20170807 22:53:38.613"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:38.824">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:53:38.824" starttime="20170807 22:53:38.614"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:38.824">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:53:38.824">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:38.824" starttime="20170807 22:53:38.614"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:38.825">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:38.825" starttime="20170807 22:53:38.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:38.826">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:38.826" starttime="20170807 22:53:38.825"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:38.826" starttime="20170807 22:53:38.610"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:38.826" starttime="20170807 22:53:38.609"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:38.826" starttime="20170807 22:53:38.609"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:38.827">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:53:38.827" starttime="20170807 22:53:38.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:38.829">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:53:38.829" starttime="20170807 22:53:38.828"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:38.830">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:53:38.830" starttime="20170807 22:53:38.829"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:38.830" starttime="20170807 22:53:38.829"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:38.830" starttime="20170807 22:53:38.827"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:38.830" starttime="20170807 22:53:38.827"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:38.893">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:53:38.894">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:38.894" starttime="20170807 22:53:38.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:38.896">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:53:38.896" starttime="20170807 22:53:38.895"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:38.897">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:53:38.897" starttime="20170807 22:53:38.896"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:38.897" starttime="20170807 22:53:38.896"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:38.897" starttime="20170807 22:53:38.895"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:38.897" starttime="20170807 22:53:38.894"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:53:38.898">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:53:38.898" starttime="20170807 22:53:38.898"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:38.898">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:38.898" starttime="20170807 22:53:38.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:38.899">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:38.899" starttime="20170807 22:53:38.898"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:38.899">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:53:38.899">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:53:38.900">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:53:38.900" starttime="20170807 22:53:38.899"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:38.900">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:53:38.900" starttime="20170807 22:53:38.608"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:38.900">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:53:38.900" starttime="20170807 22:53:38.607"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:53:38.901">On != Off</msg>
<status status="FAIL" endtime="20170807 22:53:38.901" starttime="20170807 22:53:38.901"></status>
</kw>
<status status="FAIL" endtime="20170807 22:53:38.901" starttime="20170807 22:53:38.607"></status>
</kw>
<status status="FAIL" endtime="20170807 22:53:38.901" starttime="20170807 22:53:38.606"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:48.906">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:53:48.907" starttime="20170807 22:53:48.906"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:48.907">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:53:48.907" starttime="20170807 22:53:48.907"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:48.908">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:53:48.908" starttime="20170807 22:53:48.908"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:48.909">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:53:48.909" starttime="20170807 22:53:48.908"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:49.105">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:53:49.105" starttime="20170807 22:53:48.909"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:49.105">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:53:49.105">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:49.105" starttime="20170807 22:53:48.909"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:49.106">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:49.106" starttime="20170807 22:53:49.106"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:49.107">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:49.107" starttime="20170807 22:53:49.106"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:49.107" starttime="20170807 22:53:48.905"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:49.107" starttime="20170807 22:53:48.905"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:49.107" starttime="20170807 22:53:48.904"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:49.108">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:53:49.108" starttime="20170807 22:53:49.108"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:49.110">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:53:49.110" starttime="20170807 22:53:49.109"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:49.111">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:53:49.111" starttime="20170807 22:53:49.111"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:49.111" starttime="20170807 22:53:49.110"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:49.111" starttime="20170807 22:53:49.109"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:49.111" starttime="20170807 22:53:49.108"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:49.183">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:53:49.183">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:49.183" starttime="20170807 22:53:49.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:49.185">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:53:49.185" starttime="20170807 22:53:49.184"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:49.186">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:53:49.186" starttime="20170807 22:53:49.186"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:49.186" starttime="20170807 22:53:49.185"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:49.186" starttime="20170807 22:53:49.184"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:49.186" starttime="20170807 22:53:49.184"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:53:49.187">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:53:49.187" starttime="20170807 22:53:49.187"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:49.187">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:49.187" starttime="20170807 22:53:48.904"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:49.188">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:49.188" starttime="20170807 22:53:49.187"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:49.188">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:53:49.188">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:53:49.188">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:53:49.188" starttime="20170807 22:53:49.188"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:49.189">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:53:49.189" starttime="20170807 22:53:48.903"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:49.189">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:53:49.189" starttime="20170807 22:53:48.903"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:53:49.190">On != Off</msg>
<status status="FAIL" endtime="20170807 22:53:49.190" starttime="20170807 22:53:49.189"></status>
</kw>
<status status="FAIL" endtime="20170807 22:53:49.190" starttime="20170807 22:53:48.902"></status>
</kw>
<status status="FAIL" endtime="20170807 22:53:49.190" starttime="20170807 22:53:48.902"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:59.195">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:53:59.196" starttime="20170807 22:53:59.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:59.196">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:53:59.196" starttime="20170807 22:53:59.196"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:59.197">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:53:59.197" starttime="20170807 22:53:59.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:59.197">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:53:59.198" starttime="20170807 22:53:59.197"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:59.395">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:53:59.395" starttime="20170807 22:53:59.198"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:59.395">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:53:59.395">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:59.395" starttime="20170807 22:53:59.198"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:59.396">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:59.396" starttime="20170807 22:53:59.396"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:59.397">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:59.397" starttime="20170807 22:53:59.396"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:59.397" starttime="20170807 22:53:59.194"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:59.397" starttime="20170807 22:53:59.193"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:59.397" starttime="20170807 22:53:59.193"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:59.398">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:53:59.398" starttime="20170807 22:53:59.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:59.400">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:53:59.400" starttime="20170807 22:53:59.399"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:59.401">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:53:59.401" starttime="20170807 22:53:59.401"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:59.401" starttime="20170807 22:53:59.400"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:59.401" starttime="20170807 22:53:59.399"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:59.401" starttime="20170807 22:53:59.398"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:59.464">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:53:59.464">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:59.464" starttime="20170807 22:53:59.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:59.466">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:53:59.466" starttime="20170807 22:53:59.465"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:59.467">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:53:59.467" starttime="20170807 22:53:59.467"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:59.468" starttime="20170807 22:53:59.466"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:59.468" starttime="20170807 22:53:59.465"></status>
</kw>
<status status="PASS" endtime="20170807 22:53:59.468" starttime="20170807 22:53:59.465"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:53:59.468">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:53:59.468" starttime="20170807 22:53:59.468"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:59.468">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:53:59.468" starttime="20170807 22:53:59.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:53:59.469">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:53:59.469" starttime="20170807 22:53:59.469"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:53:59.470">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:53:59.470">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:53:59.470">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:53:59.470" starttime="20170807 22:53:59.469"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:59.470">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:53:59.470" starttime="20170807 22:53:59.192"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:53:59.470">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:53:59.470" starttime="20170807 22:53:59.191"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:53:59.471">On != Off</msg>
<status status="FAIL" endtime="20170807 22:53:59.471" starttime="20170807 22:53:59.471"></status>
</kw>
<status status="FAIL" endtime="20170807 22:53:59.471" starttime="20170807 22:53:59.191"></status>
</kw>
<status status="FAIL" endtime="20170807 22:53:59.471" starttime="20170807 22:53:59.190"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:09.476">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:54:09.477" starttime="20170807 22:54:09.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:09.477">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:54:09.477" starttime="20170807 22:54:09.477"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:09.478">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:54:09.478" starttime="20170807 22:54:09.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:09.479">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:54:09.479" starttime="20170807 22:54:09.478"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:09.695">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:54:09.696" starttime="20170807 22:54:09.479"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:09.696">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:54:09.696">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:54:09.696" starttime="20170807 22:54:09.479"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:09.696">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:54:09.697" starttime="20170807 22:54:09.696"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:09.697">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:54:09.697" starttime="20170807 22:54:09.697"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:09.697" starttime="20170807 22:54:09.475"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:09.698" starttime="20170807 22:54:09.475"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:09.698" starttime="20170807 22:54:09.474"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:09.698">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:54:09.698" starttime="20170807 22:54:09.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:09.700">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:54:09.700" starttime="20170807 22:54:09.700"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:09.701">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:54:09.701" starttime="20170807 22:54:09.701"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:09.701" starttime="20170807 22:54:09.701"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:09.702" starttime="20170807 22:54:09.699"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:09.702" starttime="20170807 22:54:09.699"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:09.781">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:54:09.781">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:54:09.781" starttime="20170807 22:54:09.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:09.783">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:54:09.783" starttime="20170807 22:54:09.783"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:09.784">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:54:09.784" starttime="20170807 22:54:09.784"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:09.784" starttime="20170807 22:54:09.783"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:09.784" starttime="20170807 22:54:09.782"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:09.784" starttime="20170807 22:54:09.782"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:54:09.785">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:54:09.785" starttime="20170807 22:54:09.785"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:09.785">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:54:09.785" starttime="20170807 22:54:09.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:09.786">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:54:09.786" starttime="20170807 22:54:09.785"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:09.786">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:54:09.786">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:54:09.787">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:54:09.787" starttime="20170807 22:54:09.786"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:09.787">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:54:09.787" starttime="20170807 22:54:09.473"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:09.787">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:54:09.787" starttime="20170807 22:54:09.473"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:54:09.788">On != Off</msg>
<status status="FAIL" endtime="20170807 22:54:09.788" starttime="20170807 22:54:09.787"></status>
</kw>
<status status="FAIL" endtime="20170807 22:54:09.788" starttime="20170807 22:54:09.472"></status>
</kw>
<status status="FAIL" endtime="20170807 22:54:09.788" starttime="20170807 22:54:09.472"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:19.794">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:54:19.794" starttime="20170807 22:54:19.793"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:19.794">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:54:19.795" starttime="20170807 22:54:19.794"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:19.795">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:54:19.795" starttime="20170807 22:54:19.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:19.796">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:54:19.796" starttime="20170807 22:54:19.795"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:20.023">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:54:20.023" starttime="20170807 22:54:19.796"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:20.023">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:54:20.023">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:54:20.023" starttime="20170807 22:54:19.796"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:20.024">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:54:20.024" starttime="20170807 22:54:20.024"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:20.025">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:54:20.025" starttime="20170807 22:54:20.024"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:20.025" starttime="20170807 22:54:19.792"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:20.025" starttime="20170807 22:54:19.792"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:20.025" starttime="20170807 22:54:19.791"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:20.026">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:54:20.026" starttime="20170807 22:54:20.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:20.028">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:54:20.028" starttime="20170807 22:54:20.027"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:20.029">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:54:20.029" starttime="20170807 22:54:20.028"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:20.029" starttime="20170807 22:54:20.028"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:20.029" starttime="20170807 22:54:20.026"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:20.029" starttime="20170807 22:54:20.026"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:20.099">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:54:20.099">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:54:20.099" starttime="20170807 22:54:20.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:20.101">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:54:20.101" starttime="20170807 22:54:20.101"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:20.102">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:54:20.103" starttime="20170807 22:54:20.102"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:20.103" starttime="20170807 22:54:20.101"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:20.103" starttime="20170807 22:54:20.100"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:20.103" starttime="20170807 22:54:20.100"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:54:20.103">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:54:20.103" starttime="20170807 22:54:20.103"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:20.104">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:54:20.104" starttime="20170807 22:54:19.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:20.104">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:54:20.104" starttime="20170807 22:54:20.104"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:20.105">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:54:20.105">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:54:20.105">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:54:20.105" starttime="20170807 22:54:20.104"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:20.105">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:54:20.105" starttime="20170807 22:54:19.790"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:20.106">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:54:20.106" starttime="20170807 22:54:19.790"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:54:20.106">On != Off</msg>
<status status="FAIL" endtime="20170807 22:54:20.106" starttime="20170807 22:54:20.106"></status>
</kw>
<status status="FAIL" endtime="20170807 22:54:20.106" starttime="20170807 22:54:19.789"></status>
</kw>
<status status="FAIL" endtime="20170807 22:54:20.107" starttime="20170807 22:54:19.789"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:30.111">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:54:30.112" starttime="20170807 22:54:30.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:30.112">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:54:30.112" starttime="20170807 22:54:30.112"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:30.113">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:54:30.113" starttime="20170807 22:54:30.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:30.114">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:54:30.114" starttime="20170807 22:54:30.113"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:30.313">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:54:30.313" starttime="20170807 22:54:30.114"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:30.313">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:54:30.313">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:54:30.313" starttime="20170807 22:54:30.114"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:30.314">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:54:30.314" starttime="20170807 22:54:30.314"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:30.315">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:54:30.315" starttime="20170807 22:54:30.314"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:30.315" starttime="20170807 22:54:30.111"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:30.315" starttime="20170807 22:54:30.110"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:30.315" starttime="20170807 22:54:30.110"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:30.316">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:54:30.316" starttime="20170807 22:54:30.315"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:30.318">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:54:30.318" starttime="20170807 22:54:30.317"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:30.319">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:54:30.319" starttime="20170807 22:54:30.318"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:30.319" starttime="20170807 22:54:30.318"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:30.319" starttime="20170807 22:54:30.316"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:30.319" starttime="20170807 22:54:30.316"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:30.397">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:54:30.397">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:54:30.397" starttime="20170807 22:54:30.319"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:30.399">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:54:30.399" starttime="20170807 22:54:30.398"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:30.400">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:54:30.400" starttime="20170807 22:54:30.399"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:30.400" starttime="20170807 22:54:30.399"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:30.400" starttime="20170807 22:54:30.398"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:30.400" starttime="20170807 22:54:30.397"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:54:30.401">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:54:30.401" starttime="20170807 22:54:30.400"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:30.401">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:54:30.401" starttime="20170807 22:54:30.109"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:30.401">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:54:30.402" starttime="20170807 22:54:30.401"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:30.402">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:54:30.402">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:54:30.402">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:54:30.402" starttime="20170807 22:54:30.402"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:30.403">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:54:30.403" starttime="20170807 22:54:30.108"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:30.403">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:54:30.403" starttime="20170807 22:54:30.108"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:54:30.404">On != Off</msg>
<status status="FAIL" endtime="20170807 22:54:30.404" starttime="20170807 22:54:30.403"></status>
</kw>
<status status="FAIL" endtime="20170807 22:54:30.404" starttime="20170807 22:54:30.108"></status>
</kw>
<status status="FAIL" endtime="20170807 22:54:30.404" starttime="20170807 22:54:30.107"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:40.409">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:54:40.410" starttime="20170807 22:54:40.409"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:40.410">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:54:40.410" starttime="20170807 22:54:40.410"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:40.411">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:54:40.411" starttime="20170807 22:54:40.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:40.412">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:54:40.412" starttime="20170807 22:54:40.411"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:40.617">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:54:40.617" starttime="20170807 22:54:40.412"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:40.618">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:54:40.618">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:54:40.618" starttime="20170807 22:54:40.412"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:40.618">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:54:40.618" starttime="20170807 22:54:40.618"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:40.619">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:54:40.619" starttime="20170807 22:54:40.619"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:40.619" starttime="20170807 22:54:40.408"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:40.619" starttime="20170807 22:54:40.407"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:40.619" starttime="20170807 22:54:40.407"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:40.620">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:54:40.620" starttime="20170807 22:54:40.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:40.622">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:54:40.622" starttime="20170807 22:54:40.621"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:40.623">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:54:40.623" starttime="20170807 22:54:40.623"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:40.623" starttime="20170807 22:54:40.622"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:40.623" starttime="20170807 22:54:40.621"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:40.623" starttime="20170807 22:54:40.620"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:40.686">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:54:40.687">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:54:40.687" starttime="20170807 22:54:40.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:40.688">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:54:40.688" starttime="20170807 22:54:40.688"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:40.690">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:54:40.690" starttime="20170807 22:54:40.689"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:40.690" starttime="20170807 22:54:40.688"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:40.690" starttime="20170807 22:54:40.687"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:40.690" starttime="20170807 22:54:40.687"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:54:40.690">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:54:40.690" starttime="20170807 22:54:40.690"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:40.691">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:54:40.691" starttime="20170807 22:54:40.406"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:40.692">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:54:40.692" starttime="20170807 22:54:40.691"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:40.692">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:54:40.692">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:54:40.692">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:54:40.692" starttime="20170807 22:54:40.692"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:40.693">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:54:40.693" starttime="20170807 22:54:40.406"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:40.693">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:54:40.693" starttime="20170807 22:54:40.405"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:54:40.694">On != Off</msg>
<status status="FAIL" endtime="20170807 22:54:40.694" starttime="20170807 22:54:40.693"></status>
</kw>
<status status="FAIL" endtime="20170807 22:54:40.694" starttime="20170807 22:54:40.405"></status>
</kw>
<status status="FAIL" endtime="20170807 22:54:40.694" starttime="20170807 22:54:40.404"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:50.699">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:54:50.699" starttime="20170807 22:54:50.698"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:50.700">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:54:50.700" starttime="20170807 22:54:50.699"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:50.700">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:54:50.700" starttime="20170807 22:54:50.700"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:50.701">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:54:50.701" starttime="20170807 22:54:50.701"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:50.885">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:54:50.885" starttime="20170807 22:54:50.702"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:50.885">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:54:50.885">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:54:50.885" starttime="20170807 22:54:50.701"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:50.886">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:54:50.886" starttime="20170807 22:54:50.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:50.886">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:54:50.886" starttime="20170807 22:54:50.886"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:50.887" starttime="20170807 22:54:50.698"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:50.887" starttime="20170807 22:54:50.697"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:50.887" starttime="20170807 22:54:50.697"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:50.887">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:54:50.887" starttime="20170807 22:54:50.887"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:50.889">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:54:50.889" starttime="20170807 22:54:50.889"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:50.890">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:54:50.890" starttime="20170807 22:54:50.890"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:50.891" starttime="20170807 22:54:50.890"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:50.891" starttime="20170807 22:54:50.888"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:50.891" starttime="20170807 22:54:50.888"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:51.111">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:54:51.112">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:54:51.112" starttime="20170807 22:54:50.891"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:51.114">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:54:51.114" starttime="20170807 22:54:51.113"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:51.116">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:54:51.116" starttime="20170807 22:54:51.115"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:51.116" starttime="20170807 22:54:51.114"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:51.116" starttime="20170807 22:54:51.113"></status>
</kw>
<status status="PASS" endtime="20170807 22:54:51.116" starttime="20170807 22:54:51.112"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:54:51.117">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:54:51.117" starttime="20170807 22:54:51.116"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:51.117">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:54:51.117" starttime="20170807 22:54:50.696"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:54:51.117">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:54:51.118" starttime="20170807 22:54:51.117"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:54:51.118">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:54:51.118">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:54:51.118">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:54:51.118" starttime="20170807 22:54:51.118"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:51.119">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:54:51.119" starttime="20170807 22:54:50.696"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:54:51.119">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:54:51.119" starttime="20170807 22:54:50.695"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:54:51.120">On != Off</msg>
<status status="FAIL" endtime="20170807 22:54:51.120" starttime="20170807 22:54:51.119"></status>
</kw>
<status status="FAIL" endtime="20170807 22:54:51.120" starttime="20170807 22:54:50.695"></status>
</kw>
<status status="FAIL" endtime="20170807 22:54:51.120" starttime="20170807 22:54:50.694"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:01.125">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:55:01.126" starttime="20170807 22:55:01.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:01.126">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:55:01.127" starttime="20170807 22:55:01.126"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:01.127">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:55:01.127" starttime="20170807 22:55:01.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:01.128">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:55:01.129" starttime="20170807 22:55:01.128"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:01.305">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:55:01.305" starttime="20170807 22:55:01.130"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:01.305">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:55:01.305">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:01.305" starttime="20170807 22:55:01.129"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:01.306">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:01.306" starttime="20170807 22:55:01.305"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:01.306">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:01.306" starttime="20170807 22:55:01.306"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:01.307" starttime="20170807 22:55:01.124"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:01.307" starttime="20170807 22:55:01.124"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:01.307" starttime="20170807 22:55:01.123"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:01.307">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:55:01.307" starttime="20170807 22:55:01.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:01.310">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:55:01.310" starttime="20170807 22:55:01.309"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:01.311">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:55:01.311" starttime="20170807 22:55:01.310"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:01.311" starttime="20170807 22:55:01.310"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:01.311" starttime="20170807 22:55:01.308"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:01.311" starttime="20170807 22:55:01.308"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:01.411">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:55:01.411">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:01.411" starttime="20170807 22:55:01.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:01.413">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:55:01.413" starttime="20170807 22:55:01.413"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:01.414">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:55:01.414" starttime="20170807 22:55:01.414"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:01.415" starttime="20170807 22:55:01.413"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:01.415" starttime="20170807 22:55:01.412"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:01.415" starttime="20170807 22:55:01.412"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:55:01.415">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:55:01.415" starttime="20170807 22:55:01.415"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:01.415">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:01.415" starttime="20170807 22:55:01.122"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:01.416">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:01.416" starttime="20170807 22:55:01.416"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:01.417">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:55:01.417">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:55:01.417">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:55:01.417" starttime="20170807 22:55:01.416"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:01.417">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:55:01.417" starttime="20170807 22:55:01.122"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:01.417">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:55:01.417" starttime="20170807 22:55:01.121"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:55:01.418">On != Off</msg>
<status status="FAIL" endtime="20170807 22:55:01.418" starttime="20170807 22:55:01.418"></status>
</kw>
<status status="FAIL" endtime="20170807 22:55:01.418" starttime="20170807 22:55:01.121"></status>
</kw>
<status status="FAIL" endtime="20170807 22:55:01.418" starttime="20170807 22:55:01.120"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:11.424">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:55:11.424" starttime="20170807 22:55:11.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:11.425">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:55:11.425" starttime="20170807 22:55:11.424"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:11.425">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:55:11.425" starttime="20170807 22:55:11.425"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:11.426">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:55:11.426" starttime="20170807 22:55:11.425"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:11.641">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:55:11.641" starttime="20170807 22:55:11.427"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:11.641">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:55:11.641">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:11.641" starttime="20170807 22:55:11.426"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:11.642">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:11.642" starttime="20170807 22:55:11.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:11.643">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:11.643" starttime="20170807 22:55:11.642"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:11.643" starttime="20170807 22:55:11.423"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:11.643" starttime="20170807 22:55:11.422"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:11.643" starttime="20170807 22:55:11.421"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:11.644">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:55:11.644" starttime="20170807 22:55:11.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:11.647">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:55:11.647" starttime="20170807 22:55:11.646"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:11.649">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:55:11.649" starttime="20170807 22:55:11.648"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:11.649" starttime="20170807 22:55:11.648"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:11.649" starttime="20170807 22:55:11.645"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:11.649" starttime="20170807 22:55:11.645"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:11.735">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:55:11.736">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:11.736" starttime="20170807 22:55:11.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:11.738">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:55:11.738" starttime="20170807 22:55:11.737"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:11.738">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:55:11.739" starttime="20170807 22:55:11.738"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:11.739" starttime="20170807 22:55:11.738"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:11.739" starttime="20170807 22:55:11.736"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:11.739" starttime="20170807 22:55:11.736"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:55:11.739">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:55:11.739" starttime="20170807 22:55:11.739"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:11.740">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:11.740" starttime="20170807 22:55:11.421"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:11.740">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:11.740" starttime="20170807 22:55:11.740"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:11.741">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:55:11.741">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:55:11.741">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:55:11.741" starttime="20170807 22:55:11.741"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:11.741">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:55:11.741" starttime="20170807 22:55:11.420"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:11.742">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:55:11.742" starttime="20170807 22:55:11.420"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:55:11.742">On != Off</msg>
<status status="FAIL" endtime="20170807 22:55:11.742" starttime="20170807 22:55:11.742"></status>
</kw>
<status status="FAIL" endtime="20170807 22:55:11.742" starttime="20170807 22:55:11.419"></status>
</kw>
<status status="FAIL" endtime="20170807 22:55:11.743" starttime="20170807 22:55:11.419"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:21.748">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:55:21.748" starttime="20170807 22:55:21.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:21.749">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:55:21.749" starttime="20170807 22:55:21.749"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:21.750">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:55:21.750" starttime="20170807 22:55:21.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:21.750">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:55:21.750" starttime="20170807 22:55:21.750"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:21.967">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:55:21.968" starttime="20170807 22:55:21.751"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:21.968">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:55:21.968">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:21.968" starttime="20170807 22:55:21.751"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:21.968">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:21.969" starttime="20170807 22:55:21.968"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:21.969">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:21.969" starttime="20170807 22:55:21.969"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:21.969" starttime="20170807 22:55:21.747"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:21.970" starttime="20170807 22:55:21.746"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:21.970" starttime="20170807 22:55:21.746"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:21.970">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:55:21.970" starttime="20170807 22:55:21.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:21.972">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:55:21.972" starttime="20170807 22:55:21.972"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:21.973">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:55:21.973" starttime="20170807 22:55:21.973"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:21.974" starttime="20170807 22:55:21.973"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:21.974" starttime="20170807 22:55:21.971"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:21.974" starttime="20170807 22:55:21.971"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:22.055">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:55:22.055">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:22.055" starttime="20170807 22:55:21.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:22.057">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:55:22.057" starttime="20170807 22:55:22.056"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:22.058">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:55:22.058" starttime="20170807 22:55:22.057"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:22.058" starttime="20170807 22:55:22.057"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:22.058" starttime="20170807 22:55:22.056"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:22.058" starttime="20170807 22:55:22.055"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:55:22.059">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:55:22.059" starttime="20170807 22:55:22.058"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:22.059">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:22.059" starttime="20170807 22:55:21.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:22.059">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:22.060" starttime="20170807 22:55:22.059"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:22.060">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:55:22.060">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:55:22.060">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:55:22.060" starttime="20170807 22:55:22.060"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:22.061">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:55:22.061" starttime="20170807 22:55:21.745"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:22.061">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:55:22.061" starttime="20170807 22:55:21.744"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:55:22.062">On != Off</msg>
<status status="FAIL" endtime="20170807 22:55:22.062" starttime="20170807 22:55:22.061"></status>
</kw>
<status status="FAIL" endtime="20170807 22:55:22.062" starttime="20170807 22:55:21.744"></status>
</kw>
<status status="FAIL" endtime="20170807 22:55:22.062" starttime="20170807 22:55:21.743"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:32.067">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:55:32.067" starttime="20170807 22:55:32.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:32.068">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:55:32.068" starttime="20170807 22:55:32.068"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:32.069">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:55:32.069" starttime="20170807 22:55:32.068"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:32.069">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:55:32.069" starttime="20170807 22:55:32.069"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:32.285">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:55:32.285" starttime="20170807 22:55:32.070"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:32.285">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:55:32.285">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:32.285" starttime="20170807 22:55:32.069"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:32.286">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:32.286" starttime="20170807 22:55:32.286"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:32.287">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:32.287" starttime="20170807 22:55:32.286"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:32.287" starttime="20170807 22:55:32.066"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:32.287" starttime="20170807 22:55:32.066"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:32.287" starttime="20170807 22:55:32.065"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:32.288">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:55:32.288" starttime="20170807 22:55:32.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:32.290">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:55:32.290" starttime="20170807 22:55:32.289"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:32.291">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:55:32.291" starttime="20170807 22:55:32.290"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:32.291" starttime="20170807 22:55:32.290"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:32.291" starttime="20170807 22:55:32.288"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:32.291" starttime="20170807 22:55:32.288"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:32.402">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:55:32.402">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:32.402" starttime="20170807 22:55:32.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:32.404">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:55:32.404" starttime="20170807 22:55:32.404"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:32.405">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:55:32.405" starttime="20170807 22:55:32.405"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:32.405" starttime="20170807 22:55:32.404"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:32.405" starttime="20170807 22:55:32.403"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:32.406" starttime="20170807 22:55:32.403"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:55:32.406">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:55:32.406" starttime="20170807 22:55:32.406"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:32.406">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:32.406" starttime="20170807 22:55:32.064"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:32.407">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:32.407" starttime="20170807 22:55:32.406"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:32.407">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:55:32.407">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:55:32.408">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:55:32.408" starttime="20170807 22:55:32.407"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:32.408">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:55:32.408" starttime="20170807 22:55:32.064"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:32.408">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:55:32.408" starttime="20170807 22:55:32.063"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:55:32.409">On != Off</msg>
<status status="FAIL" endtime="20170807 22:55:32.409" starttime="20170807 22:55:32.408"></status>
</kw>
<status status="FAIL" endtime="20170807 22:55:32.409" starttime="20170807 22:55:32.063"></status>
</kw>
<status status="FAIL" endtime="20170807 22:55:32.409" starttime="20170807 22:55:32.062"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:42.414">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:55:42.415" starttime="20170807 22:55:42.414"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:42.415">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:55:42.415" starttime="20170807 22:55:42.415"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:42.416">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:55:42.416" starttime="20170807 22:55:42.416"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:42.417">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:55:42.417" starttime="20170807 22:55:42.416"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:42.617">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:55:42.617" starttime="20170807 22:55:42.417"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:42.617">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:55:42.617">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:42.617" starttime="20170807 22:55:42.417"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:42.618">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:42.618" starttime="20170807 22:55:42.617"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:42.618">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:42.619" starttime="20170807 22:55:42.618"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:42.619" starttime="20170807 22:55:42.413"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:42.619" starttime="20170807 22:55:42.413"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:42.619" starttime="20170807 22:55:42.412"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:42.619">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:55:42.619" starttime="20170807 22:55:42.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:42.622">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:55:42.622" starttime="20170807 22:55:42.621"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:42.623">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:55:42.623" starttime="20170807 22:55:42.622"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:42.623" starttime="20170807 22:55:42.622"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:42.623" starttime="20170807 22:55:42.620"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:42.623" starttime="20170807 22:55:42.620"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:42.709">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:55:42.709">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:42.710" starttime="20170807 22:55:42.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:42.711">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:55:42.712" starttime="20170807 22:55:42.711"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:42.713">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:55:42.713" starttime="20170807 22:55:42.712"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:42.713" starttime="20170807 22:55:42.712"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:42.713" starttime="20170807 22:55:42.710"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:42.713" starttime="20170807 22:55:42.710"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:55:42.714">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:55:42.714" starttime="20170807 22:55:42.713"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:42.714">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:42.714" starttime="20170807 22:55:42.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:42.715">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:42.715" starttime="20170807 22:55:42.714"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:42.715">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:55:42.715">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:55:42.715">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:55:42.715" starttime="20170807 22:55:42.715"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:42.716">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:55:42.716" starttime="20170807 22:55:42.411"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:42.716">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:55:42.716" starttime="20170807 22:55:42.410"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:55:42.717">On != Off</msg>
<status status="FAIL" endtime="20170807 22:55:42.717" starttime="20170807 22:55:42.716"></status>
</kw>
<status status="FAIL" endtime="20170807 22:55:42.717" starttime="20170807 22:55:42.410"></status>
</kw>
<status status="FAIL" endtime="20170807 22:55:42.717" starttime="20170807 22:55:42.410"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:52.722">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:55:52.722" starttime="20170807 22:55:52.722"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:52.723">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:55:52.723" starttime="20170807 22:55:52.723"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:52.724">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:55:52.724" starttime="20170807 22:55:52.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:52.724">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:55:52.724" starttime="20170807 22:55:52.724"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:52.920">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:55:52.921" starttime="20170807 22:55:52.725"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:52.921">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:55:52.921">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:52.921" starttime="20170807 22:55:52.725"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:52.921">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:52.922" starttime="20170807 22:55:52.921"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:52.922">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:52.922" starttime="20170807 22:55:52.922"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:52.922" starttime="20170807 22:55:52.721"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:52.922" starttime="20170807 22:55:52.721"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:52.923" starttime="20170807 22:55:52.720"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:52.923">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:55:52.923" starttime="20170807 22:55:52.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:52.925">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:55:52.925" starttime="20170807 22:55:52.925"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:52.926">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:55:52.926" starttime="20170807 22:55:52.926"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:52.926" starttime="20170807 22:55:52.925"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:52.927" starttime="20170807 22:55:52.924"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:52.927" starttime="20170807 22:55:52.923"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:52.990">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:55:52.990">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:52.990" starttime="20170807 22:55:52.927"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:52.992">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:55:52.992" starttime="20170807 22:55:52.991"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:52.993">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:55:52.993" starttime="20170807 22:55:52.992"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:52.993" starttime="20170807 22:55:52.992"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:52.993" starttime="20170807 22:55:52.991"></status>
</kw>
<status status="PASS" endtime="20170807 22:55:52.993" starttime="20170807 22:55:52.990"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:55:52.993">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:55:52.994" starttime="20170807 22:55:52.993"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:52.994">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:55:52.994" starttime="20170807 22:55:52.719"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:55:52.994">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:55:52.994" starttime="20170807 22:55:52.994"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:55:52.995">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:55:52.995">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:55:52.995">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:55:52.995" starttime="20170807 22:55:52.995"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:52.995">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:55:52.995" starttime="20170807 22:55:52.719"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:55:52.996">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:55:52.996" starttime="20170807 22:55:52.719"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:55:52.996">On != Off</msg>
<status status="FAIL" endtime="20170807 22:55:52.996" starttime="20170807 22:55:52.996"></status>
</kw>
<status status="FAIL" endtime="20170807 22:55:52.997" starttime="20170807 22:55:52.718"></status>
</kw>
<status status="FAIL" endtime="20170807 22:55:52.997" starttime="20170807 22:55:52.718"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:03.002">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:56:03.002" starttime="20170807 22:56:03.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:03.003">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:56:03.003" starttime="20170807 22:56:03.003"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:03.004">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:56:03.004" starttime="20170807 22:56:03.003"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:03.004">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:56:03.004" starttime="20170807 22:56:03.004"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:03.212">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:56:03.212" starttime="20170807 22:56:03.005"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:03.212">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:56:03.212">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:03.212" starttime="20170807 22:56:03.005"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:03.213">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:03.213" starttime="20170807 22:56:03.212"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:03.213">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:03.213" starttime="20170807 22:56:03.213"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:03.214" starttime="20170807 22:56:03.001"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:03.214" starttime="20170807 22:56:03.000"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:03.214" starttime="20170807 22:56:03.000"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:03.214">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:56:03.214" starttime="20170807 22:56:03.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:03.217">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:56:03.217" starttime="20170807 22:56:03.216"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:03.218">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:56:03.218" starttime="20170807 22:56:03.218"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:03.218" starttime="20170807 22:56:03.217"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:03.219" starttime="20170807 22:56:03.215"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:03.219" starttime="20170807 22:56:03.215"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:03.281">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:56:03.281">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:03.281" starttime="20170807 22:56:03.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:03.283">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:56:03.283" starttime="20170807 22:56:03.282"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:03.284">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:56:03.284" starttime="20170807 22:56:03.284"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:03.285" starttime="20170807 22:56:03.283"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:03.285" starttime="20170807 22:56:03.282"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:03.285" starttime="20170807 22:56:03.282"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:56:03.285">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:56:03.285" starttime="20170807 22:56:03.285"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:03.285">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:03.285" starttime="20170807 22:56:02.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:03.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:03.286" starttime="20170807 22:56:03.286"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:03.287">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:56:03.287">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:56:03.287">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:56:03.287" starttime="20170807 22:56:03.286"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:03.287">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:56:03.287" starttime="20170807 22:56:02.998"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:03.287">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:56:03.287" starttime="20170807 22:56:02.998"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:56:03.288">On != Off</msg>
<status status="FAIL" endtime="20170807 22:56:03.288" starttime="20170807 22:56:03.288"></status>
</kw>
<status status="FAIL" endtime="20170807 22:56:03.288" starttime="20170807 22:56:02.998"></status>
</kw>
<status status="FAIL" endtime="20170807 22:56:03.288" starttime="20170807 22:56:02.997"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:13.294">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:56:13.294" starttime="20170807 22:56:13.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:13.294">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:56:13.295" starttime="20170807 22:56:13.294"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:13.295">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:56:13.295" starttime="20170807 22:56:13.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:13.296">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:56:13.296" starttime="20170807 22:56:13.295"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:13.483">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:56:13.483" starttime="20170807 22:56:13.296"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:13.484">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:56:13.484">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:13.484" starttime="20170807 22:56:13.296"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:13.484">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:13.484" starttime="20170807 22:56:13.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:13.485">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:13.485" starttime="20170807 22:56:13.485"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:13.485" starttime="20170807 22:56:13.293"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:13.485" starttime="20170807 22:56:13.292"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:13.485" starttime="20170807 22:56:13.292"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:13.486">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:56:13.486" starttime="20170807 22:56:13.486"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:13.488">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:56:13.488" starttime="20170807 22:56:13.487"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:13.489">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:56:13.489" starttime="20170807 22:56:13.489"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:13.489" starttime="20170807 22:56:13.488"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:13.489" starttime="20170807 22:56:13.487"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:13.489" starttime="20170807 22:56:13.486"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:13.574">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:56:13.574">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:13.574" starttime="20170807 22:56:13.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:13.576">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:56:13.576" starttime="20170807 22:56:13.576"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:13.577">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:56:13.577" starttime="20170807 22:56:13.577"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:13.577" starttime="20170807 22:56:13.576"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:13.577" starttime="20170807 22:56:13.575"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:13.578" starttime="20170807 22:56:13.575"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:56:13.578">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:56:13.578" starttime="20170807 22:56:13.578"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:13.578">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:13.578" starttime="20170807 22:56:13.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:13.579">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:13.579" starttime="20170807 22:56:13.579"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:13.579">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:56:13.579">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:56:13.580">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:56:13.580" starttime="20170807 22:56:13.579"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:13.580">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:56:13.580" starttime="20170807 22:56:13.290"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:13.580">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:56:13.580" starttime="20170807 22:56:13.290"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:56:13.581">On != Off</msg>
<status status="FAIL" endtime="20170807 22:56:13.581" starttime="20170807 22:56:13.580"></status>
</kw>
<status status="FAIL" endtime="20170807 22:56:13.581" starttime="20170807 22:56:13.290"></status>
</kw>
<status status="FAIL" endtime="20170807 22:56:13.581" starttime="20170807 22:56:13.289"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:23.587">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:56:23.587" starttime="20170807 22:56:23.587"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:23.588">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:56:23.588" starttime="20170807 22:56:23.588"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:23.589">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:56:23.589" starttime="20170807 22:56:23.588"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:23.589">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:56:23.589" starttime="20170807 22:56:23.589"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:23.811">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:56:23.811" starttime="20170807 22:56:23.590"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:23.812">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:56:23.812">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:23.812" starttime="20170807 22:56:23.590"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:23.812">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:23.812" starttime="20170807 22:56:23.812"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:23.813">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:23.813" starttime="20170807 22:56:23.813"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:23.813" starttime="20170807 22:56:23.586"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:23.813" starttime="20170807 22:56:23.585"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:23.813" starttime="20170807 22:56:23.584"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:23.814">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:56:23.814" starttime="20170807 22:56:23.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:23.816">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:56:23.816" starttime="20170807 22:56:23.816"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:23.817">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:56:23.817" starttime="20170807 22:56:23.817"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:23.817" starttime="20170807 22:56:23.816"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:23.817" starttime="20170807 22:56:23.815"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:23.818" starttime="20170807 22:56:23.814"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:23.936">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:56:23.936">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:23.936" starttime="20170807 22:56:23.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:23.937">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:56:23.937" starttime="20170807 22:56:23.937"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:23.939">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:56:23.939" starttime="20170807 22:56:23.938"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:23.939" starttime="20170807 22:56:23.938"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:23.939" starttime="20170807 22:56:23.936"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:23.939" starttime="20170807 22:56:23.936"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:56:23.939">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:56:23.940" starttime="20170807 22:56:23.939"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:23.940">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:23.940" starttime="20170807 22:56:23.584"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:23.940">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:23.940" starttime="20170807 22:56:23.940"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:23.941">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:56:23.941">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:56:23.941">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:56:23.941" starttime="20170807 22:56:23.941"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:23.941">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:56:23.942" starttime="20170807 22:56:23.583"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:23.942">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:56:23.942" starttime="20170807 22:56:23.583"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:56:23.942">On != Off</msg>
<status status="FAIL" endtime="20170807 22:56:23.943" starttime="20170807 22:56:23.942"></status>
</kw>
<status status="FAIL" endtime="20170807 22:56:23.943" starttime="20170807 22:56:23.583"></status>
</kw>
<status status="FAIL" endtime="20170807 22:56:23.943" starttime="20170807 22:56:23.582"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:33.948">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:56:33.948" starttime="20170807 22:56:33.947"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:33.949">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:56:33.949" starttime="20170807 22:56:33.948"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:33.949">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:56:33.949" starttime="20170807 22:56:33.949"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:33.950">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:56:33.950" starttime="20170807 22:56:33.949"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:34.146">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:56:34.146" starttime="20170807 22:56:33.951"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:34.146">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:56:34.146">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:34.146" starttime="20170807 22:56:33.950"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:34.147">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:34.147" starttime="20170807 22:56:34.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:34.147">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:34.148" starttime="20170807 22:56:34.147"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:34.148" starttime="20170807 22:56:33.947"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:34.148" starttime="20170807 22:56:33.946"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:34.148" starttime="20170807 22:56:33.946"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:34.148">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:56:34.149" starttime="20170807 22:56:34.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:34.151">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:56:34.151" starttime="20170807 22:56:34.150"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:34.151">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:56:34.152" starttime="20170807 22:56:34.151"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:34.152" starttime="20170807 22:56:34.151"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:34.152" starttime="20170807 22:56:34.149"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:34.152" starttime="20170807 22:56:34.149"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:34.255">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:56:34.255">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:34.256" starttime="20170807 22:56:34.152"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:34.257">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:56:34.257" starttime="20170807 22:56:34.257"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:34.258">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:56:34.258" starttime="20170807 22:56:34.258"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:34.258" starttime="20170807 22:56:34.257"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:34.258" starttime="20170807 22:56:34.256"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:34.259" starttime="20170807 22:56:34.256"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:56:34.259">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:56:34.259" starttime="20170807 22:56:34.259"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:34.259">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:34.259" starttime="20170807 22:56:33.945"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:34.260">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:34.260" starttime="20170807 22:56:34.259"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:34.261">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:56:34.261">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:56:34.261">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:56:34.261" starttime="20170807 22:56:34.260"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:34.261">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:56:34.261" starttime="20170807 22:56:33.945"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:34.262">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:56:34.262" starttime="20170807 22:56:33.944"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:56:34.263">On != Off</msg>
<status status="FAIL" endtime="20170807 22:56:34.263" starttime="20170807 22:56:34.262"></status>
</kw>
<status status="FAIL" endtime="20170807 22:56:34.263" starttime="20170807 22:56:33.944"></status>
</kw>
<status status="FAIL" endtime="20170807 22:56:34.263" starttime="20170807 22:56:33.943"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:44.269">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:56:44.269" starttime="20170807 22:56:44.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:44.270">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:56:44.270" starttime="20170807 22:56:44.269"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:44.270">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:56:44.270" starttime="20170807 22:56:44.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:44.271">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:56:44.271" starttime="20170807 22:56:44.271"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:44.462">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:56:44.462" starttime="20170807 22:56:44.272"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:44.462">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:56:44.462">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:44.462" starttime="20170807 22:56:44.271"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:44.463">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:44.463" starttime="20170807 22:56:44.462"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:44.464">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:44.464" starttime="20170807 22:56:44.463"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:44.464" starttime="20170807 22:56:44.268"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:44.464" starttime="20170807 22:56:44.267"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:44.464" starttime="20170807 22:56:44.266"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:44.465">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:56:44.465" starttime="20170807 22:56:44.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:44.467">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:56:44.467" starttime="20170807 22:56:44.466"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:44.468">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:56:44.468" starttime="20170807 22:56:44.468"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:44.468" starttime="20170807 22:56:44.467"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:44.468" starttime="20170807 22:56:44.466"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:44.468" starttime="20170807 22:56:44.465"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:44.532">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:56:44.532">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:44.532" starttime="20170807 22:56:44.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:44.534">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:56:44.534" starttime="20170807 22:56:44.533"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:44.535">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:56:44.535" starttime="20170807 22:56:44.534"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:44.535" starttime="20170807 22:56:44.534"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:44.535" starttime="20170807 22:56:44.533"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:44.535" starttime="20170807 22:56:44.532"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:56:44.536">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:56:44.536" starttime="20170807 22:56:44.536"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:44.536">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:44.536" starttime="20170807 22:56:44.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:44.537">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:44.537" starttime="20170807 22:56:44.536"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:44.537">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:56:44.537">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:56:44.537">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:56:44.538" starttime="20170807 22:56:44.537"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:44.538">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:56:44.538" starttime="20170807 22:56:44.265"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:44.538">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:56:44.538" starttime="20170807 22:56:44.265"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:56:44.539">On != Off</msg>
<status status="FAIL" endtime="20170807 22:56:44.539" starttime="20170807 22:56:44.538"></status>
</kw>
<status status="FAIL" endtime="20170807 22:56:44.539" starttime="20170807 22:56:44.264"></status>
</kw>
<status status="FAIL" endtime="20170807 22:56:44.539" starttime="20170807 22:56:44.264"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:54.544">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:56:54.544" starttime="20170807 22:56:54.544"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:54.545">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:56:54.545" starttime="20170807 22:56:54.545"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:54.546">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:56:54.546" starttime="20170807 22:56:54.545"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:54.546">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:56:54.546" starttime="20170807 22:56:54.546"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:54.727">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:56:54.728" starttime="20170807 22:56:54.547"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:54.728">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:56:54.728">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:54.728" starttime="20170807 22:56:54.547"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:54.728">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:54.728" starttime="20170807 22:56:54.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:54.729">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:54.729" starttime="20170807 22:56:54.729"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:54.729" starttime="20170807 22:56:54.543"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:54.729" starttime="20170807 22:56:54.543"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:54.729" starttime="20170807 22:56:54.542"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:54.730">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:56:54.730" starttime="20170807 22:56:54.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:54.732">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:56:54.732" starttime="20170807 22:56:54.731"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:54.733">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:56:54.733" starttime="20170807 22:56:54.733"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:54.733" starttime="20170807 22:56:54.732"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:54.733" starttime="20170807 22:56:54.731"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:54.733" starttime="20170807 22:56:54.730"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:54.813">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:56:54.813">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:54.813" starttime="20170807 22:56:54.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:54.815">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:56:54.815" starttime="20170807 22:56:54.814"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:54.816">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:56:54.816" starttime="20170807 22:56:54.815"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:54.816" starttime="20170807 22:56:54.815"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:54.816" starttime="20170807 22:56:54.814"></status>
</kw>
<status status="PASS" endtime="20170807 22:56:54.816" starttime="20170807 22:56:54.813"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:56:54.817">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:56:54.817" starttime="20170807 22:56:54.816"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:54.817">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:56:54.817" starttime="20170807 22:56:54.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:56:54.817">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:56:54.818" starttime="20170807 22:56:54.817"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:56:54.818">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:56:54.818">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:56:54.818">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:56:54.818" starttime="20170807 22:56:54.818"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:54.819">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:56:54.819" starttime="20170807 22:56:54.541"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:56:54.819">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:56:54.819" starttime="20170807 22:56:54.540"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:56:54.820">On != Off</msg>
<status status="FAIL" endtime="20170807 22:56:54.820" starttime="20170807 22:56:54.819"></status>
</kw>
<status status="FAIL" endtime="20170807 22:56:54.820" starttime="20170807 22:56:54.540"></status>
</kw>
<status status="FAIL" endtime="20170807 22:56:54.820" starttime="20170807 22:56:54.540"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:04.825">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:57:04.826" starttime="20170807 22:57:04.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:04.826">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:57:04.826" starttime="20170807 22:57:04.826"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:04.827">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:57:04.827" starttime="20170807 22:57:04.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:04.827">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:57:04.827" starttime="20170807 22:57:04.827"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:05.018">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:57:05.018" starttime="20170807 22:57:04.828"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:05.018">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:57:05.018">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:05.019" starttime="20170807 22:57:04.828"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:05.019">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:05.019" starttime="20170807 22:57:05.019"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:05.020">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:05.020" starttime="20170807 22:57:05.019"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:05.020" starttime="20170807 22:57:04.824"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:05.020" starttime="20170807 22:57:04.823"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:05.020" starttime="20170807 22:57:04.823"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:05.021">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:57:05.021" starttime="20170807 22:57:05.021"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:05.023">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:57:05.023" starttime="20170807 22:57:05.022"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:05.024">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:57:05.024" starttime="20170807 22:57:05.024"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:05.024" starttime="20170807 22:57:05.023"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:05.024" starttime="20170807 22:57:05.022"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:05.024" starttime="20170807 22:57:05.021"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:05.094">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:57:05.094">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:05.094" starttime="20170807 22:57:05.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:05.096">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:57:05.096" starttime="20170807 22:57:05.095"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:05.097">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:57:05.097" starttime="20170807 22:57:05.096"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:05.097" starttime="20170807 22:57:05.096"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:05.097" starttime="20170807 22:57:05.095"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:05.097" starttime="20170807 22:57:05.094"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:57:05.098">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:57:05.098" starttime="20170807 22:57:05.098"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:05.098">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:05.098" starttime="20170807 22:57:04.822"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:05.099">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:05.099" starttime="20170807 22:57:05.098"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:05.099">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:57:05.099">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:57:05.099">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:57:05.099" starttime="20170807 22:57:05.099"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:05.100">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:57:05.100" starttime="20170807 22:57:04.822"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:05.100">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:57:05.100" starttime="20170807 22:57:04.821"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:57:05.101">On != Off</msg>
<status status="FAIL" endtime="20170807 22:57:05.101" starttime="20170807 22:57:05.100"></status>
</kw>
<status status="FAIL" endtime="20170807 22:57:05.101" starttime="20170807 22:57:04.821"></status>
</kw>
<status status="FAIL" endtime="20170807 22:57:05.101" starttime="20170807 22:57:04.820"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:15.106">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:57:15.107" starttime="20170807 22:57:15.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:15.107">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:57:15.107" starttime="20170807 22:57:15.107"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:15.108">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:57:15.108" starttime="20170807 22:57:15.107"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:15.108">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:57:15.108" starttime="20170807 22:57:15.108"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:15.323">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:57:15.324" starttime="20170807 22:57:15.109"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:15.324">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:57:15.324">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:15.324" starttime="20170807 22:57:15.109"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:15.324">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:15.325" starttime="20170807 22:57:15.324"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:15.325">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:15.325" starttime="20170807 22:57:15.325"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:15.325" starttime="20170807 22:57:15.105"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:15.325" starttime="20170807 22:57:15.105"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:15.326" starttime="20170807 22:57:15.104"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:15.326">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:57:15.326" starttime="20170807 22:57:15.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:15.328">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:57:15.328" starttime="20170807 22:57:15.327"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:15.329">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:57:15.329" starttime="20170807 22:57:15.329"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:15.329" starttime="20170807 22:57:15.328"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:15.329" starttime="20170807 22:57:15.327"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:15.329" starttime="20170807 22:57:15.326"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:15.394">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:57:15.394">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:15.394" starttime="20170807 22:57:15.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:15.396">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:57:15.396" starttime="20170807 22:57:15.396"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:15.397">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:57:15.397" starttime="20170807 22:57:15.397"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:15.397" starttime="20170807 22:57:15.396"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:15.397" starttime="20170807 22:57:15.395"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:15.397" starttime="20170807 22:57:15.395"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:57:15.398">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:57:15.398" starttime="20170807 22:57:15.398"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:15.398">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:15.398" starttime="20170807 22:57:15.104"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:15.399">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:15.399" starttime="20170807 22:57:15.398"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:15.399">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:57:15.399">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:57:15.399">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:57:15.400" starttime="20170807 22:57:15.399"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:15.400">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:57:15.400" starttime="20170807 22:57:15.103"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:15.400">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:57:15.400" starttime="20170807 22:57:15.103"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:57:15.401">On != Off</msg>
<status status="FAIL" endtime="20170807 22:57:15.401" starttime="20170807 22:57:15.400"></status>
</kw>
<status status="FAIL" endtime="20170807 22:57:15.401" starttime="20170807 22:57:15.102"></status>
</kw>
<status status="FAIL" endtime="20170807 22:57:15.401" starttime="20170807 22:57:15.101"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:25.407">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:57:25.407" starttime="20170807 22:57:25.406"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:25.408">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:57:25.408" starttime="20170807 22:57:25.407"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:25.408">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:57:25.408" starttime="20170807 22:57:25.408"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:25.409">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:57:25.409" starttime="20170807 22:57:25.408"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:25.584">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:57:25.585" starttime="20170807 22:57:25.410"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:25.585">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:57:25.585">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:25.585" starttime="20170807 22:57:25.409"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:25.586">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:25.586" starttime="20170807 22:57:25.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:25.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:25.586" starttime="20170807 22:57:25.586"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:25.586" starttime="20170807 22:57:25.405"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:25.587" starttime="20170807 22:57:25.405"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:25.587" starttime="20170807 22:57:25.404"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:25.587">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:57:25.587" starttime="20170807 22:57:25.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:25.589">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:57:25.589" starttime="20170807 22:57:25.589"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:25.590">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:57:25.590" starttime="20170807 22:57:25.590"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:25.590" starttime="20170807 22:57:25.589"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:25.591" starttime="20170807 22:57:25.588"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:25.591" starttime="20170807 22:57:25.588"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:25.653">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:57:25.653">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:25.653" starttime="20170807 22:57:25.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:25.655">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:57:25.655" starttime="20170807 22:57:25.654"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:25.656">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:57:25.656" starttime="20170807 22:57:25.655"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:25.656" starttime="20170807 22:57:25.655"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:25.656" starttime="20170807 22:57:25.654"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:25.656" starttime="20170807 22:57:25.653"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:57:25.657">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:57:25.657" starttime="20170807 22:57:25.657"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:25.657">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:25.657" starttime="20170807 22:57:25.404"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:25.658">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:25.658" starttime="20170807 22:57:25.657"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:25.658">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:57:25.658">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:57:25.658">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:57:25.659" starttime="20170807 22:57:25.658"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:25.659">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:57:25.659" starttime="20170807 22:57:25.403"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:25.659">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:57:25.659" starttime="20170807 22:57:25.403"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:57:25.660">On != Off</msg>
<status status="FAIL" endtime="20170807 22:57:25.660" starttime="20170807 22:57:25.659"></status>
</kw>
<status status="FAIL" endtime="20170807 22:57:25.660" starttime="20170807 22:57:25.402"></status>
</kw>
<status status="FAIL" endtime="20170807 22:57:25.660" starttime="20170807 22:57:25.402"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:35.665">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:57:35.666" starttime="20170807 22:57:35.665"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:35.666">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:57:35.666" starttime="20170807 22:57:35.666"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:35.667">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:57:35.667" starttime="20170807 22:57:35.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:35.667">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:57:35.667" starttime="20170807 22:57:35.667"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:35.858">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:57:35.859" starttime="20170807 22:57:35.668"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:35.859">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:57:35.859">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:35.859" starttime="20170807 22:57:35.668"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:35.859">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:35.859" starttime="20170807 22:57:35.859"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:35.860">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:35.860" starttime="20170807 22:57:35.860"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:35.860" starttime="20170807 22:57:35.664"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:35.860" starttime="20170807 22:57:35.664"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:35.861" starttime="20170807 22:57:35.663"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:35.861">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:57:35.861" starttime="20170807 22:57:35.861"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:35.863">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:57:35.863" starttime="20170807 22:57:35.862"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:35.864">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:57:35.864" starttime="20170807 22:57:35.864"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:35.864" starttime="20170807 22:57:35.863"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:35.865" starttime="20170807 22:57:35.862"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:35.865" starttime="20170807 22:57:35.861"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:35.928">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:57:35.928">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:35.928" starttime="20170807 22:57:35.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:35.930">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:57:35.930" starttime="20170807 22:57:35.929"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:35.931">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:57:35.931" starttime="20170807 22:57:35.930"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:35.931" starttime="20170807 22:57:35.930"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:35.931" starttime="20170807 22:57:35.929"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:35.931" starttime="20170807 22:57:35.928"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:57:35.931">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:57:35.931" starttime="20170807 22:57:35.931"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:35.932">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:35.932" starttime="20170807 22:57:35.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:35.932">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:35.932" starttime="20170807 22:57:35.932"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:35.933">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:57:35.933">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:57:35.933">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:57:35.933" starttime="20170807 22:57:35.933"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:35.933">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:57:35.933" starttime="20170807 22:57:35.662"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:35.934">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:57:35.934" starttime="20170807 22:57:35.662"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:57:35.934">On != Off</msg>
<status status="FAIL" endtime="20170807 22:57:35.934" starttime="20170807 22:57:35.934"></status>
</kw>
<status status="FAIL" endtime="20170807 22:57:35.935" starttime="20170807 22:57:35.661"></status>
</kw>
<status status="FAIL" endtime="20170807 22:57:35.935" starttime="20170807 22:57:35.661"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:45.940">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:57:45.941" starttime="20170807 22:57:45.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:45.941">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:57:45.941" starttime="20170807 22:57:45.941"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:45.942">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:57:45.942" starttime="20170807 22:57:45.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:45.943">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:57:45.943" starttime="20170807 22:57:45.942"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:46.125">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:57:46.125" starttime="20170807 22:57:45.944"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:46.125">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:57:46.125">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:46.125" starttime="20170807 22:57:45.943"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:46.126">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:46.126" starttime="20170807 22:57:46.126"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:46.127">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:46.127" starttime="20170807 22:57:46.126"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:46.127" starttime="20170807 22:57:45.939"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:46.127" starttime="20170807 22:57:45.939"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:46.127" starttime="20170807 22:57:45.938"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:46.128">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:57:46.128" starttime="20170807 22:57:46.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:46.130">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:57:46.130" starttime="20170807 22:57:46.129"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:46.131">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:57:46.131" starttime="20170807 22:57:46.130"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:46.131" starttime="20170807 22:57:46.130"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:46.131" starttime="20170807 22:57:46.128"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:46.131" starttime="20170807 22:57:46.128"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:46.194">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:57:46.194">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:46.194" starttime="20170807 22:57:46.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:46.196">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:57:46.196" starttime="20170807 22:57:46.195"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:46.197">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:57:46.197" starttime="20170807 22:57:46.197"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:46.197" starttime="20170807 22:57:46.196"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:46.198" starttime="20170807 22:57:46.195"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:46.198" starttime="20170807 22:57:46.194"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:57:46.198">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:57:46.198" starttime="20170807 22:57:46.198"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:46.198">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:46.198" starttime="20170807 22:57:45.937"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:46.199">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:46.199" starttime="20170807 22:57:46.199"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:46.200">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:57:46.200">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:57:46.200">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:57:46.200" starttime="20170807 22:57:46.199"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:46.200">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:57:46.200" starttime="20170807 22:57:45.937"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:46.200">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:57:46.200" starttime="20170807 22:57:45.936"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:57:46.201">On != Off</msg>
<status status="FAIL" endtime="20170807 22:57:46.201" starttime="20170807 22:57:46.201"></status>
</kw>
<status status="FAIL" endtime="20170807 22:57:46.201" starttime="20170807 22:57:45.936"></status>
</kw>
<status status="FAIL" endtime="20170807 22:57:46.201" starttime="20170807 22:57:45.935"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:56.206">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:57:56.207" starttime="20170807 22:57:56.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.207">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:57:56.207" starttime="20170807 22:57:56.207"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.208">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:57:56.208" starttime="20170807 22:57:56.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.209">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:57:56.209" starttime="20170807 22:57:56.208"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:56.415">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:57:56.416" starttime="20170807 22:57:56.209"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:56.416">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:57:56.416">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:56.416" starttime="20170807 22:57:56.209"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:56.416">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:56.417" starttime="20170807 22:57:56.416"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:56.417">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:56.417" starttime="20170807 22:57:56.417"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.417" starttime="20170807 22:57:56.205"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.417" starttime="20170807 22:57:56.205"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.418" starttime="20170807 22:57:56.204"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.418">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170807 22:57:56.418" starttime="20170807 22:57:56.418"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.420">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:57:56.420" starttime="20170807 22:57:56.420"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:56.421">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:57:56.421" starttime="20170807 22:57:56.421"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.421" starttime="20170807 22:57:56.420"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.422" starttime="20170807 22:57:56.419"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.422" starttime="20170807 22:57:56.419"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.485">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:57:56.485">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:56.485" starttime="20170807 22:57:56.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.487">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:57:56.487" starttime="20170807 22:57:56.486"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:56.488">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:57:56.488" starttime="20170807 22:57:56.487"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.488" starttime="20170807 22:57:56.487"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.488" starttime="20170807 22:57:56.486"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.488" starttime="20170807 22:57:56.485"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:57:56.488">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:57:56.489" starttime="20170807 22:57:56.488"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:56.489">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:56.489" starttime="20170807 22:57:56.204"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:56.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:56.489" starttime="20170807 22:57:56.489"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.490">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:57:56.490">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:57:56.490">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:57:56.490" starttime="20170807 22:57:56.490"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:56.490">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170807 22:57:56.490" starttime="20170807 22:57:56.203"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:56.491">${power_state} = Off</msg>
<status status="PASS" endtime="20170807 22:57:56.491" starttime="20170807 22:57:56.203"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:57:56.491">On != Off</msg>
<status status="FAIL" endtime="20170807 22:57:56.491" starttime="20170807 22:57:56.491"></status>
</kw>
<status status="FAIL" endtime="20170807 22:57:56.492" starttime="20170807 22:57:56.202"></status>
</kw>
<status status="FAIL" endtime="20170807 22:57:56.492" starttime="20170807 22:57:56.202"></status>
</kw>
<msg level="FAIL" timestamp="20170807 22:57:56.492">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</msg>
<status status="FAIL" endtime="20170807 22:57:56.492" starttime="20170807 22:47:52.829"></status>
</kw>
<status status="FAIL" endtime="20170807 22:57:56.492" starttime="20170807 22:47:52.202"></status>
</kw>
<status status="FAIL" endtime="20170807 22:57:56.492" starttime="20170807 22:47:44.150"></status>
</kw>
<status status="FAIL" endtime="20170807 22:57:56.492" starttime="20170807 22:47:44.150"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:56.498">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:57:56.498" starttime="20170807 22:57:56.497"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.499">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:57:56.499" starttime="20170807 22:57:56.498"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.499">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:57:56.499" starttime="20170807 22:57:56.499"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.500">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:57:56.500" starttime="20170807 22:57:56.500"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:56.680">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:57:56.680" starttime="20170807 22:57:56.501"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:56.680">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:57:56.680">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:56.680" starttime="20170807 22:57:56.500"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:56.681">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:56.681" starttime="20170807 22:57:56.681"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:56.682">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:56.682" starttime="20170807 22:57:56.681"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.682" starttime="20170807 22:57:56.496"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.682" starttime="20170807 22:57:56.496"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.682" starttime="20170807 22:57:56.495"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.683">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170807 22:57:56.683" starttime="20170807 22:57:56.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.685">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:57:56.685" starttime="20170807 22:57:56.684"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:56.686">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170807 22:57:56.686" starttime="20170807 22:57:56.685"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.686" starttime="20170807 22:57:56.685"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.686" starttime="20170807 22:57:56.683"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.686" starttime="20170807 22:57:56.683"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.787">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:57:56.788">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:56.788" starttime="20170807 22:57:56.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.789">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:57:56.789" starttime="20170807 22:57:56.789"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:56.790">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170807 22:57:56.790" starttime="20170807 22:57:56.790"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.791" starttime="20170807 22:57:56.790"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.791" starttime="20170807 22:57:56.788"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:56.791" starttime="20170807 22:57:56.788"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:57:56.791">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:57:56.791" starttime="20170807 22:57:56.791"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:56.791">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:57:56.791" starttime="20170807 22:57:56.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:56.792">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:57:56.792" starttime="20170807 22:57:56.792"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.793">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:57:56.793">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:57:56.793">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:57:56.793" starttime="20170807 22:57:56.792"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:56.793">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170807 22:57:56.793" starttime="20170807 22:57:56.494"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:56.793">${host_state} = Off</msg>
<status status="PASS" endtime="20170807 22:57:56.793" starttime="20170807 22:57:56.494"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:57:56.794">Off != Quiesced</msg>
<status status="FAIL" endtime="20170807 22:57:56.795" starttime="20170807 22:57:56.794"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:56.795">${status} = False</msg>
<status status="PASS" endtime="20170807 22:57:56.795" starttime="20170807 22:57:56.794"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:56.795">${status} = False</msg>
<status status="PASS" endtime="20170807 22:57:56.795" starttime="20170807 22:57:56.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:56.834">Length is 10</msg>
<status status="PASS" endtime="20170807 22:57:56.834" starttime="20170807 22:57:56.834"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:56.841">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170807 22:57:59.853">${RC} = 0</msg>
<msg level="INFO" timestamp="20170807 22:57:59.853">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.713 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.670 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170807 22:57:59.854" starttime="20170807 22:57:56.835"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:59.868">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.713 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.670 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.569 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.589 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.569/0.635/0.713/0.061 ms</msg>
<status status="PASS" endtime="20170807 22:57:59.868" starttime="20170807 22:57:59.865"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:57:59.870" starttime="20170807 22:57:59.869"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:59.871" starttime="20170807 22:57:56.834"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:59.916">${cur_time} = 2017-08-07 22:57:59:915053</msg>
<status status="PASS" endtime="20170807 22:57:59.916" starttime="20170807 22:57:59.915"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:59.917">${cur_time} = 20170807225759915053</msg>
<status status="PASS" endtime="20170807 22:57:59.917" starttime="20170807 22:57:59.917"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:59.918" starttime="20170807 22:57:59.914"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:59.918">${FFDC_TIME} = 20170807225759915053</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:59.933">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" endtime="20170807 22:57:59.933" starttime="20170807 22:57:59.933"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:59.934">${suite_name} = 20170807225759915053_TestsTestBasicPoweron</msg>
<status status="PASS" endtime="20170807 22:57:59.935" starttime="20170807 22:57:59.934"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:59.935">${test_name} = PowerOnTest</msg>
<status status="PASS" endtime="20170807 22:57:59.935" starttime="20170807 22:57:59.935"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:57:59.936">${test_name} = 20170807225759915053_PowerOnTest</msg>
<status status="PASS" endtime="20170807 22:57:59.936" starttime="20170807 22:57:59.935"></status>
</kw>
<status status="PASS" endtime="20170807 22:57:59.936" starttime="20170807 22:57:59.932"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:59.936">${FFDC_DIR_PATH} = /tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170807 22:57:59.937">${FFDC_PREFIX} = 20170807225759915053_</msg>
<msg level="INFO" timestamp="20170807 22:57:59.967">${LOG_PREFIX} = /tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:57:59.968" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:57:59.968" starttime="20170807 22:57:59.968"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:57:59.973">${FFDC_FILE_PATH} = /tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.005" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.005" starttime="20170807 22:58:00.005"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.006" starttime="20170807 22:58:00.004"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.007" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.007" starttime="20170807 22:58:00.006"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.007" starttime="20170807 22:58:00.006"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.010" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.010" starttime="20170807 22:58:00.008"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.011" starttime="20170807 22:58:00.007"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.012" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.012" starttime="20170807 22:58:00.011"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.012" starttime="20170807 22:58:00.011"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.013" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.013" starttime="20170807 22:58:00.013"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.014" starttime="20170807 22:58:00.012"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.015" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.015" starttime="20170807 22:58:00.014"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.015" starttime="20170807 22:58:00.014"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.016" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.016" starttime="20170807 22:58:00.016"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.016" starttime="20170807 22:58:00.015"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.018" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.018" starttime="20170807 22:58:00.017"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.018" starttime="20170807 22:58:00.017"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.019" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.019" starttime="20170807 22:58:00.019"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.019" starttime="20170807 22:58:00.018"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.021" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.021" starttime="20170807 22:58:00.021"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.021" starttime="20170807 22:58:00.020"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.022" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.022" starttime="20170807 22:58:00.022"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.023" starttime="20170807 22:58:00.021"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.024" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.024" starttime="20170807 22:58:00.023"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.024" starttime="20170807 22:58:00.023"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.025" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.025" starttime="20170807 22:58:00.025"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.026" starttime="20170807 22:58:00.024"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.070">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20170807 22:58:00.071">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170807 22:58:00.139">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170807 22:58:00.160">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170807 22:58:00.161">${stderr} = </msg>
<msg level="INFO" timestamp="20170807 22:58:00.161">${rc} = 0</msg>
<status status="PASS" endtime="20170807 22:58:00.161" starttime="20170807 22:58:00.026"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.161">Length is 0</msg>
<status status="PASS" endtime="20170807 22:58:00.161" starttime="20170807 22:58:00.161"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.162">Length is 11</msg>
<status status="PASS" endtime="20170807 22:58:00.162" starttime="20170807 22:58:00.162"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:00.162">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170807 22:58:00.162" starttime="20170807 22:58:00.026"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.163" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.163" starttime="20170807 22:58:00.163"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.164" starttime="20170807 22:58:00.162"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.164" starttime="20170807 22:58:00.019"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.165" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.165" starttime="20170807 22:58:00.165"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.165" starttime="20170807 22:58:00.164"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.166">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status status="PASS" endtime="20170807 22:58:00.166" starttime="20170807 22:58:00.166"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.167" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.167" starttime="20170807 22:58:00.167"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.168" starttime="20170807 22:58:00.166"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.169" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.169" starttime="20170807 22:58:00.168"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.169" starttime="20170807 22:58:00.168"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.169" starttime="20170807 22:58:00.166"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.170" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.171" starttime="20170807 22:58:00.170"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.171" starttime="20170807 22:58:00.169"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.172" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.172" starttime="20170807 22:58:00.171"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.172" starttime="20170807 22:58:00.171"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.172" starttime="20170807 22:58:00.169"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.173" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.173" starttime="20170807 22:58:00.173"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.173" starttime="20170807 22:58:00.172"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.174" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.175" starttime="20170807 22:58:00.174"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.175" starttime="20170807 22:58:00.174"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.175" starttime="20170807 22:58:00.172"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.175" starttime="20170807 22:58:00.166"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.176" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.176" starttime="20170807 22:58:00.175"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.179" starttime="20170807 22:58:00.175"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.179" starttime="20170807 22:58:00.004"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.194">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170807 22:58:00.194" starttime="20170807 22:58:00.194"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.195">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('Core Files', 'SCP Coredump ...</msg>
<status status="PASS" endtime="20170807 22:58:00.195" starttime="20170807 22:58:00.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:00.197" starttime="20170807 22:58:00.196"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:00.197">@{ffdc_function_list} = [ Get Request FFDC | FFDC Generic Report | OS FFDC | BMC Specific Files | Core Files | SEL Log ]</msg>
<status status="PASS" endtime="20170807 22:58:00.197" starttime="20170807 22:58:00.196"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:00.199" starttime="20170807 22:58:00.198"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:00.199">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:00.199">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 22:58:00.199" starttime="20170807 22:58:00.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:00.200" starttime="20170807 22:58:00.199"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.253">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170807 22:58:00.253" starttime="20170807 22:58:00.252"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.254">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_led', '/org/op...</msg>
<status status="PASS" endtime="20170807 22:58:00.254" starttime="20170807 22:58:00.254"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.255">${logpath} = /tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_elog.txt</msg>
<status status="PASS" endtime="20170807 22:58:00.255" starttime="20170807 22:58:00.255"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.258">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:58:00.258" starttime="20170807 22:58:00.258"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.259">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:58:00.259" starttime="20170807 22:58:00.259"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.260">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:58:00.260" starttime="20170807 22:58:00.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.260">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:58:00.260" starttime="20170807 22:58:00.260"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.449">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:58:00.450" starttime="20170807 22:58:00.261"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:00.450">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:00.450">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:00.450" starttime="20170807 22:58:00.261"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.450">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:00.450" starttime="20170807 22:58:00.450"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.451">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:00.451" starttime="20170807 22:58:00.451"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.451" starttime="20170807 22:58:00.257"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.451" starttime="20170807 22:58:00.257"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.452" starttime="20170807 22:58:00.256"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.452">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170807 22:58:00.452" starttime="20170807 22:58:00.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:00.453" starttime="20170807 22:58:00.453"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.640">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:58:00.640">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:00.640" starttime="20170807 22:58:00.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:00.640" starttime="20170807 22:58:00.640"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:58:00.641">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:58:00.641" starttime="20170807 22:58:00.641"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:00.641">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:00.641" starttime="20170807 22:58:00.255"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.642">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:00.642" starttime="20170807 22:58:00.642"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:00.642">${status} = True</msg>
<status status="PASS" endtime="20170807 22:58:00.642" starttime="20170807 22:58:00.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:00.643" starttime="20170807 22:58:00.643"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.644">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502145018183, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502145647534, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:58:00.644">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170807 22:58:00.644">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [],
            "Id": 2,
            "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFile...</msg>
<status status="PASS" endtime="20170807 22:58:00.644" starttime="20170807 22:58:00.643"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.646" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_elog.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:00.646" starttime="20170807 22:58:00.645"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.646" starttime="20170807 22:58:00.644"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.646" starttime="20170807 22:58:00.254"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.647">${logpath} = /tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170807 22:58:00.647" starttime="20170807 22:58:00.646"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.649">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:58:00.650" starttime="20170807 22:58:00.649"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.650">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:58:00.650" starttime="20170807 22:58:00.650"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.651">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:58:00.651" starttime="20170807 22:58:00.651"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.652">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:58:00.652" starttime="20170807 22:58:00.651"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.934">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:58:00.934" starttime="20170807 22:58:00.652"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:00.934">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:00.934">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:00.934" starttime="20170807 22:58:00.652"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.935">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:00.935" starttime="20170807 22:58:00.934"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:00.935">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:00.935" starttime="20170807 22:58:00.935"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.936" starttime="20170807 22:58:00.648"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.936" starttime="20170807 22:58:00.648"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:00.936" starttime="20170807 22:58:00.647"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:00.936">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170807 22:58:00.936" starttime="20170807 22:58:00.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:00.937" starttime="20170807 22:58:00.937"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.190">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:58:01.191">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:01.191" starttime="20170807 22:58:00.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:01.191" starttime="20170807 22:58:01.191"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:58:01.192">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:58:01.192" starttime="20170807 22:58:01.191"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:01.192">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:01.192" starttime="20170807 22:58:00.647"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:01.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:01.193" starttime="20170807 22:58:01.193"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:01.193">${status} = True</msg>
<status status="PASS" endtime="20170807 22:58:01.193" starttime="20170807 22:58:01.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:01.194" starttime="20170807 22:58:01.193"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.195">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:58:01.195">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170807 22:58:01.195">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170807 22:58:01.195" starttime="20170807 22:58:01.194"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:01.197" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_sensor_list.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:01.197" starttime="20170807 22:58:01.196"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:01.197" starttime="20170807 22:58:01.195"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:01.197" starttime="20170807 22:58:00.646"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.198">${logpath} = /tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170807 22:58:01.198" starttime="20170807 22:58:01.197"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:01.201">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:58:01.201" starttime="20170807 22:58:01.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.202">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:58:01.202" starttime="20170807 22:58:01.201"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.202">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:58:01.202" starttime="20170807 22:58:01.202"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.203">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:58:01.203" starttime="20170807 22:58:01.203"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:01.401">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:58:01.401" starttime="20170807 22:58:01.204"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:01.401">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:01.401">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:01.402" starttime="20170807 22:58:01.203"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:01.402">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:01.402" starttime="20170807 22:58:01.402"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:01.403">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:01.403" starttime="20170807 22:58:01.402"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:01.403" starttime="20170807 22:58:01.199"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:01.403" starttime="20170807 22:58:01.199"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:01.403" starttime="20170807 22:58:01.198"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.404">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170807 22:58:01.404" starttime="20170807 22:58:01.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:01.405" starttime="20170807 22:58:01.404"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.448">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:58:01.448">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:01.448" starttime="20170807 22:58:01.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:01.449" starttime="20170807 22:58:01.448"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:58:01.449">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:58:01.449" starttime="20170807 22:58:01.449"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:01.450">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:01.450" starttime="20170807 22:58:01.198"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:01.451">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170807 22:58:01.451">404 != 200</msg>
<status status="FAIL" endtime="20170807 22:58:01.451" starttime="20170807 22:58:01.450"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:01.451">${status} = False</msg>
<status status="PASS" endtime="20170807 22:58:01.451" starttime="20170807 22:58:01.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170807 22:58:01.452">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170807 22:58:01.452" starttime="20170807 22:58:01.452"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:01.452" starttime="20170807 22:58:01.451"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:01.452" starttime="20170807 22:58:01.197"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.453">${logpath} = /tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_led.txt</msg>
<status status="PASS" endtime="20170807 22:58:01.453" starttime="20170807 22:58:01.453"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:01.456">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:58:01.456" starttime="20170807 22:58:01.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.457">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:58:01.457" starttime="20170807 22:58:01.456"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.457">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:58:01.457" starttime="20170807 22:58:01.457"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.458">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:58:01.458" starttime="20170807 22:58:01.458"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:01.713">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:58:01.713" starttime="20170807 22:58:01.459"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:01.713">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:01.713">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:01.713" starttime="20170807 22:58:01.458"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:01.714">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:01.714" starttime="20170807 22:58:01.714"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:01.715">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:01.715" starttime="20170807 22:58:01.714"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:01.715" starttime="20170807 22:58:01.455"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:01.715" starttime="20170807 22:58:01.454"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:01.715" starttime="20170807 22:58:01.454"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.716">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170807 22:58:01.716" starttime="20170807 22:58:01.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:01.717" starttime="20170807 22:58:01.716"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.761">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:58:01.761">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:01.761" starttime="20170807 22:58:01.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:01.762" starttime="20170807 22:58:01.762"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:58:01.762">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:58:01.762" starttime="20170807 22:58:01.762"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:01.763">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:01.763" starttime="20170807 22:58:01.453"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:01.764">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170807 22:58:01.764">404 != 200</msg>
<status status="FAIL" endtime="20170807 22:58:01.764" starttime="20170807 22:58:01.763"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:01.764">${status} = False</msg>
<status status="PASS" endtime="20170807 22:58:01.764" starttime="20170807 22:58:01.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170807 22:58:01.765">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170807 22:58:01.765" starttime="20170807 22:58:01.765"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:01.765" starttime="20170807 22:58:01.764"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:01.765" starttime="20170807 22:58:01.452"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.766">${logpath} = /tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170807 22:58:01.766" starttime="20170807 22:58:01.766"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:01.769">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:58:01.769" starttime="20170807 22:58:01.768"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.770">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:58:01.770" starttime="20170807 22:58:01.769"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.770">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:58:01.770" starttime="20170807 22:58:01.770"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.771">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:58:01.771" starttime="20170807 22:58:01.771"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:01.964">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:58:01.964" starttime="20170807 22:58:01.772"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:01.964">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:01.964">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:01.964" starttime="20170807 22:58:01.771"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:01.965">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:01.965" starttime="20170807 22:58:01.964"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:01.965">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:01.966" starttime="20170807 22:58:01.965"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:01.966" starttime="20170807 22:58:01.768"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:01.966" starttime="20170807 22:58:01.767"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:01.966" starttime="20170807 22:58:01.767"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:01.966">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170807 22:58:01.966" starttime="20170807 22:58:01.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:01.967" starttime="20170807 22:58:01.967"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:02.384">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:58:02.385">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:02.385" starttime="20170807 22:58:01.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:02.385" starttime="20170807 22:58:02.385"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:58:02.386">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:58:02.386" starttime="20170807 22:58:02.386"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:02.386">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:02.386" starttime="20170807 22:58:01.766"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.387">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:02.387" starttime="20170807 22:58:02.387"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:02.387">${status} = True</msg>
<status status="PASS" endtime="20170807 22:58:02.387" starttime="20170807 22:58:02.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:02.388" starttime="20170807 22:58:02.388"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:02.389">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:58:02.389">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170807 22:58:02.389">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170807 22:58:02.389" starttime="20170807 22:58:02.388"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.391" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_inventory.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:02.391" starttime="20170807 22:58:02.390"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.391" starttime="20170807 22:58:02.389"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.391" starttime="20170807 22:58:01.765"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.391" starttime="20170807 22:58:00.254"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.391" starttime="20170807 22:58:00.253"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.391" starttime="20170807 22:58:00.253"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.391" starttime="20170807 22:58:00.253"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.391" starttime="20170807 22:58:00.252"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.391" starttime="20170807 22:58:00.200"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.391" starttime="20170807 22:58:00.197"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.391" starttime="20170807 22:58:00.197"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:02.393" starttime="20170807 22:58:02.393"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:02.393">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:02.393">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 22:58:02.394" starttime="20170807 22:58:02.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:02.394" starttime="20170807 22:58:02.394"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:02.445">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status status="PASS" endtime="20170807 22:58:02.445" starttime="20170807 22:58:02.444"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:02.446">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') ]</msg>
<status status="PASS" endtime="20170807 22:58:02.446" starttime="20170807 22:58:02.446"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.454">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170807 22:58:02.454" starttime="20170807 22:58:02.446"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.459" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:02.459" starttime="20170807 22:58:02.459"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.459" starttime="20170807 22:58:02.457"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.461" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:02.461" starttime="20170807 22:58:02.460"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.461" starttime="20170807 22:58:02.460"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.462" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:02.462" starttime="20170807 22:58:02.462"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.462" starttime="20170807 22:58:02.461"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.463" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:02.463" starttime="20170807 22:58:02.463"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.464" starttime="20170807 22:58:02.462"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.464" starttime="20170807 22:58:02.457"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.464" starttime="20170807 22:58:02.456"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:02.465">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170807 22:58:02.465" starttime="20170807 22:58:02.464"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.605">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20170807 22:58:02.606">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170807 22:58:02.662">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 22:58:02.662" starttime="20170807 22:58:02.531"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:02.663">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:02.663">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170807 22:58:02.663" starttime="20170807 22:58:02.465"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:02.663">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status status="PASS" endtime="20170807 22:58:02.663" starttime="20170807 22:58:02.663"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:02.664">${stderr} = </msg>
<status status="PASS" endtime="20170807 22:58:02.664" starttime="20170807 22:58:02.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.670" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:02.671" starttime="20170807 22:58:02.670"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.671" starttime="20170807 22:58:02.669"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.671" starttime="20170807 22:58:02.664"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.671" starttime="20170807 22:58:02.455"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.671" starttime="20170807 22:58:02.455"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.674" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:02.674" starttime="20170807 22:58:02.673"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.674" starttime="20170807 22:58:02.673"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.676" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:02.676" starttime="20170807 22:58:02.675"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.676" starttime="20170807 22:58:02.674"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.677" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:02.677" starttime="20170807 22:58:02.677"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.677" starttime="20170807 22:58:02.676"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.678" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:02.678" starttime="20170807 22:58:02.678"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.679" starttime="20170807 22:58:02.677"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.679" starttime="20170807 22:58:02.672"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.679" starttime="20170807 22:58:02.672"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:02.679">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170807 22:58:02.680" starttime="20170807 22:58:02.679"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.800">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20170807 22:58:02.800">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170807 22:58:02.860">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 22:58:02.860" starttime="20170807 22:58:02.739"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:02.861">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:02.861">${ret_values} = (u'Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Mon Aug 7 21:49:12 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170807 22:58:02.861" starttime="20170807 22:58:02.680"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:02.861">${stdout} = Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Mon Aug 7 21:49:12 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170807 22:58:02.861" starttime="20170807 22:58:02.861"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:02.862">${stderr} = </msg>
<status status="PASS" endtime="20170807 22:58:02.862" starttime="20170807 22:58:02.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.869" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:02.869" starttime="20170807 22:58:02.868"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.869" starttime="20170807 22:58:02.867"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.869" starttime="20170807 22:58:02.862"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.869" starttime="20170807 22:58:02.671"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.869" starttime="20170807 22:58:02.671"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.872" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:02.872" starttime="20170807 22:58:02.872"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.872" starttime="20170807 22:58:02.871"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.873" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:02.873" starttime="20170807 22:58:02.873"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.874" starttime="20170807 22:58:02.872"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.877" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:02.877" starttime="20170807 22:58:02.874"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.877" starttime="20170807 22:58:02.874"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:02.878" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:02.879" starttime="20170807 22:58:02.878"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.879" starttime="20170807 22:58:02.878"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.879" starttime="20170807 22:58:02.870"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:02.879" starttime="20170807 22:58:02.870"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:02.880">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170807 22:58:02.880" starttime="20170807 22:58:02.879"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:03.002">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20170807 22:58:03.002">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170807 22:58:03.059">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 22:58:03.059" starttime="20170807 22:58:02.935"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:03.059">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:03.059">${ret_values} = (u' 22:58:08 up 18 min,  load average: 0.53, 0.53, 0.59', u'', 0)</msg>
<status status="PASS" endtime="20170807 22:58:03.059" starttime="20170807 22:58:02.880"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:03.060">${stdout} =  22:58:08 up 18 min,  load average: 0.53, 0.53, 0.59</msg>
<status status="PASS" endtime="20170807 22:58:03.060" starttime="20170807 22:58:03.060"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:03.061">${stderr} = </msg>
<status status="PASS" endtime="20170807 22:58:03.061" starttime="20170807 22:58:03.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:03.067" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:03.067" starttime="20170807 22:58:03.067"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.067" starttime="20170807 22:58:03.066"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.068" starttime="20170807 22:58:03.061"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.068" starttime="20170807 22:58:02.869"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.068" starttime="20170807 22:58:02.869"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.068" starttime="20170807 22:58:02.454"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.068" starttime="20170807 22:58:02.445"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.068" starttime="20170807 22:58:02.445"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:03.069">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170807 22:58:03.069" starttime="20170807 22:58:03.069"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:03.070">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170807 22:58:03.070" starttime="20170807 22:58:03.069"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:03.073" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:03.073" starttime="20170807 22:58:03.072"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.073" starttime="20170807 22:58:03.072"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:03.074" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:03.074" starttime="20170807 22:58:03.074"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.074" starttime="20170807 22:58:03.073"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:03.076" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:03.076" starttime="20170807 22:58:03.075"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.076" starttime="20170807 22:58:03.075"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:03.077" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:03.077" starttime="20170807 22:58:03.076"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.077" starttime="20170807 22:58:03.076"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.078" starttime="20170807 22:58:03.071"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.078" starttime="20170807 22:58:03.071"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:03.078">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170807 22:58:03.078" starttime="20170807 22:58:03.078"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:03.193">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20170807 22:58:03.194">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170807 22:58:03.260">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 22:58:03.261" starttime="20170807 22:58:03.129"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:03.261">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:03.261">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-191"\nVERSION_ID="v1.99.8-191-g5adf966"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170807 22:58:03.261" starttime="20170807 22:58:03.079"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:03.262">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-191"
VERSION_ID="v1.99.8-191-g5adf966"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170807 22:58:03.262" starttime="20170807 22:58:03.261"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:03.262">${stderr} = </msg>
<status status="PASS" endtime="20170807 22:58:03.262" starttime="20170807 22:58:03.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:03.269" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:03.269" starttime="20170807 22:58:03.268"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.269" starttime="20170807 22:58:03.268"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.269" starttime="20170807 22:58:03.263"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.269" starttime="20170807 22:58:03.070"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.269" starttime="20170807 22:58:03.070"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.269" starttime="20170807 22:58:03.070"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.269" starttime="20170807 22:58:03.068"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.269" starttime="20170807 22:58:03.068"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:03.270">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170807 22:58:03.270" starttime="20170807 22:58:03.270"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:03.271">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170807 22:58:03.271" starttime="20170807 22:58:03.271"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:03.274" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:03.274" starttime="20170807 22:58:03.274"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.274" starttime="20170807 22:58:03.273"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:03.276" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:03.276" starttime="20170807 22:58:03.275"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.276" starttime="20170807 22:58:03.275"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:03.277" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:03.277" starttime="20170807 22:58:03.277"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.277" starttime="20170807 22:58:03.276"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:03.279" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:03.279" starttime="20170807 22:58:03.278"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.279" starttime="20170807 22:58:03.277"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.279" starttime="20170807 22:58:03.273"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:03.279" starttime="20170807 22:58:03.272"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:03.280">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170807 22:58:03.280" starttime="20170807 22:58:03.279"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:03.399">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20170807 22:58:03.399">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170807 22:58:04.851">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 22:58:04.851" starttime="20170807 22:58:03.335"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:04.851">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:04.851">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170807 22:58:04.851" starttime="20170807 22:58:03.280"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:04.852">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170807 22:58:04.852" starttime="20170807 22:58:04.852"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:04.852">${stderr} = </msg>
<status status="PASS" endtime="20170807 22:58:04.853" starttime="20170807 22:58:04.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:04.859" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:04.859" starttime="20170807 22:58:04.859"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:04.859" starttime="20170807 22:58:04.858"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:04.859" starttime="20170807 22:58:04.853"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:04.859" starttime="20170807 22:58:03.272"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:04.859" starttime="20170807 22:58:03.271"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:04.859" starttime="20170807 22:58:03.271"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:04.860" starttime="20170807 22:58:03.270"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:04.860" starttime="20170807 22:58:03.269"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:04.860" starttime="20170807 22:58:02.445"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:04.860" starttime="20170807 22:58:02.444"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:04.860" starttime="20170807 22:58:02.394"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:04.860" starttime="20170807 22:58:02.392"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:04.860" starttime="20170807 22:58:02.392"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:04.862" starttime="20170807 22:58:04.861"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:04.862">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:04.862">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 22:58:04.862" starttime="20170807 22:58:04.861"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:04.863" starttime="20170807 22:58:04.862"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:04.902">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170807 22:58:04.902" starttime="20170807 22:58:04.902"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:04.902" starttime="20170807 22:58:04.901"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:04.903" starttime="20170807 22:58:04.863"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:04.903" starttime="20170807 22:58:04.860"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:04.903" starttime="20170807 22:58:04.860"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:04.905" starttime="20170807 22:58:04.904"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:04.905">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:04.905">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 22:58:04.905" starttime="20170807 22:58:04.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:04.905" starttime="20170807 22:58:04.905"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:04.952">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170807 22:58:04.952" starttime="20170807 22:58:04.951"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:04.953">@{cmd_list} = [ ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager'...</msg>
<status status="PASS" endtime="20170807 22:58:04.953" starttime="20170807 22:58:04.953"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:04.954">${logpath} = /tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170807 22:58:04.954" starttime="20170807 22:58:04.954"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:04.956" starttime="20170807 22:58:04.955"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:04.957">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170807 22:58:04.957" starttime="20170807 22:58:04.956"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:05.075">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20170807 22:58:05.076">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170807 22:58:05.143">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 22:58:05.143" starttime="20170807 22:58:05.011"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:05.143">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:05.143">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Mon Aug 7 21...</msg>
<status status="PASS" endtime="20170807 22:58:05.143" starttime="20170807 22:58:04.957"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:05.144">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Mon Aug 7 21:49:...</msg>
<status status="PASS" endtime="20170807 22:58:05.144" starttime="20170807 22:58:05.144"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:05.145">${stderr} = </msg>
<status status="PASS" endtime="20170807 22:58:05.145" starttime="20170807 22:58:05.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:05.152" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_dmesg.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:05.152" starttime="20170807 22:58:05.151"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:05.152" starttime="20170807 22:58:05.150"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:05.152" starttime="20170807 22:58:05.145"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:05.152" starttime="20170807 22:58:04.954"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:05.152" starttime="20170807 22:58:04.953"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:05.153">${logpath} = /tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170807 22:58:05.153" starttime="20170807 22:58:05.153"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:05.154" starttime="20170807 22:58:05.154"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:05.155">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170807 22:58:05.155" starttime="20170807 22:58:05.155"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:05.273">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20170807 22:58:05.273">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170807 22:58:05.351">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 22:58:05.351" starttime="20170807 22:58:05.208"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:05.351">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:05.351">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          274024 kB\nMemAvailable:     321856 kB\nBuffers:           11624 kB\nCached:            53852 kB\nSwapCached:            0 kB\nActive:            9870...</msg>
<status status="PASS" endtime="20170807 22:58:05.351" starttime="20170807 22:58:05.155"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:05.352">${stdout} = MemTotal:         432268 kB
MemFree:          274024 kB
MemAvailable:     321856 kB
Buffers:           11624 kB
Cached:            53852 kB
SwapCached:            0 kB
Active:            98708 kB
Inac...</msg>
<status status="PASS" endtime="20170807 22:58:05.352" starttime="20170807 22:58:05.352"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:05.353">${stderr} = </msg>
<status status="PASS" endtime="20170807 22:58:05.353" starttime="20170807 22:58:05.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:05.359" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_meminfo.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:05.359" starttime="20170807 22:58:05.359"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:05.359" starttime="20170807 22:58:05.358"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:05.360" starttime="20170807 22:58:05.353"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:05.360" starttime="20170807 22:58:05.153"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:05.360" starttime="20170807 22:58:05.152"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:05.360">${logpath} = /tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170807 22:58:05.361" starttime="20170807 22:58:05.360"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:05.362" starttime="20170807 22:58:05.362"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:05.363">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170807 22:58:05.363" starttime="20170807 22:58:05.363"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:05.480">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20170807 22:58:05.481">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170807 22:58:06.033">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 22:58:06.033" starttime="20170807 22:58:05.410"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:06.033">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:06.034">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  7 22:58 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  7 22:58 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170807 22:58:06.034" starttime="20170807 22:58:05.364"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:06.035">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  7 22:58 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  7 22:58 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170807 22:58:06.035" starttime="20170807 22:58:06.034"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:06.035">${stderr} = ls: /proc/1502/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170807 22:58:06.036" starttime="20170807 22:58:06.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:06.043" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:06.043" starttime="20170807 22:58:06.042"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:06.043" starttime="20170807 22:58:06.041"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:06.043" starttime="20170807 22:58:06.036"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:06.043" starttime="20170807 22:58:05.361"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:06.043" starttime="20170807 22:58:05.360"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:06.044">${logpath} = /tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170807 22:58:06.044" starttime="20170807 22:58:06.043"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:06.045" starttime="20170807 22:58:06.045"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:06.046">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170807 22:58:06.046" starttime="20170807 22:58:06.045"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:06.164">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20170807 22:58:06.165">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170807 22:58:06.223">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 22:58:06.223" starttime="20170807 22:58:06.098"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:06.223">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:06.223">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170807 22:58:06.223" starttime="20170807 22:58:06.046"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:06.224">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170807 22:58:06.224" starttime="20170807 22:58:06.224"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:06.225">${stderr} = </msg>
<status status="PASS" endtime="20170807 22:58:06.225" starttime="20170807 22:58:06.224"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:06.232" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_procinfo.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:06.232" starttime="20170807 22:58:06.231"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:06.232" starttime="20170807 22:58:06.230"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:06.232" starttime="20170807 22:58:06.225"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:06.232" starttime="20170807 22:58:06.044"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:06.232" starttime="20170807 22:58:06.043"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:06.233">${logpath} = /tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170807 22:58:06.233" starttime="20170807 22:58:06.232"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:06.234" starttime="20170807 22:58:06.234"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:06.235">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170807 22:58:06.235" starttime="20170807 22:58:06.235"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:06.356">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20170807 22:58:06.361">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170807 22:58:07.802">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 22:58:07.803" starttime="20170807 22:58:06.290"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:07.803">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:07.805">${ret_values} = (u'-- Logs begin at Mon 2017-08-07 22:39:49 UTC, end at Mon 2017-08-07 22:58:07 UTC. --\nAug 07 22:39:49 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 07 22:39:49 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170807 22:58:07.805" starttime="20170807 22:58:06.235"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:07.807">${stdout} = -- Logs begin at Mon 2017-08-07 22:39:49 UTC, end at Mon 2017-08-07 22:58:07 UTC. --
Aug 07 22:39:49 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 07 22:39:49 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170807 22:58:07.807" starttime="20170807 22:58:07.806"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:07.807">${stderr} = </msg>
<status status="PASS" endtime="20170807 22:58:07.807" starttime="20170807 22:58:07.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:07.815" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_journalctl.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:07.815" starttime="20170807 22:58:07.814"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:07.815" starttime="20170807 22:58:07.813"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:07.815" starttime="20170807 22:58:07.808"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:07.815" starttime="20170807 22:58:06.233"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:07.815" starttime="20170807 22:58:06.232"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:07.817">${logpath} = /tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170807 22:58:07.817" starttime="20170807 22:58:07.816"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:07.818" starttime="20170807 22:58:07.818"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:07.819">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170807 22:58:07.820" starttime="20170807 22:58:07.819"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:07.937">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20170807 22:58:07.937">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170807 22:58:08.286">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 22:58:08.286" starttime="20170807 22:58:07.874"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:08.287">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:08.287">${ret_values} = (u'Mem: 158368K used, 273900K free, 15124K shrd, 11624K buff, 53856K cached\nCPU:   0% usr   0% sys   0% nic 100% idle   0% io   0% irq   0% sirq\nLoad average: 0.49 0.53 0.59 1/152 1505\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170807 22:58:08.287" starttime="20170807 22:58:07.820"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:08.288">${stdout} = Mem: 158368K used, 273900K free, 15124K shrd, 11624K buff, 53856K cached
CPU:   0% usr   0% sys   0% nic 100% idle   0% io   0% irq   0% sirq
Load average: 0.49 0.53 0.59 1/152 1505
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170807 22:58:08.288" starttime="20170807 22:58:08.287"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:08.288">${stderr} = </msg>
<status status="PASS" endtime="20170807 22:58:08.288" starttime="20170807 22:58:08.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:08.295" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_proc_list.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:08.295" starttime="20170807 22:58:08.294"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:08.295" starttime="20170807 22:58:08.294"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:08.295" starttime="20170807 22:58:08.289"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:08.295" starttime="20170807 22:58:07.817"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:08.295" starttime="20170807 22:58:07.816"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:08.295" starttime="20170807 22:58:04.953"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:08.295" starttime="20170807 22:58:04.952"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:08.295" starttime="20170807 22:58:04.952"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:08.296" starttime="20170807 22:58:04.952"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:08.296" starttime="20170807 22:58:04.951"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:08.296" starttime="20170807 22:58:04.906"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:08.296" starttime="20170807 22:58:04.903"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:08.296" starttime="20170807 22:58:04.903"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:08.298" starttime="20170807 22:58:08.297"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:08.298">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:08.298">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 22:58:08.298" starttime="20170807 22:58:08.297"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:08.298" starttime="20170807 22:58:08.298"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:08.400">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20170807 22:58:08.401">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170807 22:58:08.467">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170807 22:58:08.486">${core_files} = /tmp/core_phosphor-fan-co.1425
/tmp/core_phosphor-fan-co.1429</msg>
<msg level="INFO" timestamp="20170807 22:58:08.486">${stderr} = </msg>
<msg level="INFO" timestamp="20170807 22:58:08.486">${rc} = 0</msg>
<status status="PASS" endtime="20170807 22:58:08.486" starttime="20170807 22:58:08.340"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:08.487">@{core_list} = [ /tmp/core_phosphor-fan-co.1425 | /tmp/core_phosphor-fan-co.1429 ]</msg>
<status status="PASS" endtime="20170807 22:58:08.487" starttime="20170807 22:58:08.486"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:08.517" starttime="20170807 22:58:08.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:09.186" starttime="20170807 22:58:08.519"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:09.186" starttime="20170807 22:58:08.519"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:09.187" starttime="20170807 22:58:08.518"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:09.187" starttime="20170807 22:58:08.505"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:09.187" starttime="20170807 22:58:08.487"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-co.1425">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:09.440" starttime="20170807 22:58:09.187"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:09.499">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20170807 22:58:09.500">Executing command 'rm /tmp/core_phosphor-fan-co.1425'.</msg>
<msg level="INFO" timestamp="20170807 22:58:09.578">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 22:58:09.598" starttime="20170807 22:58:09.440"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:09.598" starttime="20170807 22:58:09.187"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-co.1429">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:09.899" starttime="20170807 22:58:09.598"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:09.958">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20170807 22:58:09.959">Executing command 'rm /tmp/core_phosphor-fan-co.1429'.</msg>
<msg level="INFO" timestamp="20170807 22:58:10.007">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170807 22:58:10.028" starttime="20170807 22:58:09.900"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:10.029" starttime="20170807 22:58:09.598"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:10.029" starttime="20170807 22:58:09.187"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:10.029" starttime="20170807 22:58:08.339"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:10.029" starttime="20170807 22:58:08.299"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:10.029" starttime="20170807 22:58:08.296"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:10.029" starttime="20170807 22:58:08.296"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:10.031" starttime="20170807 22:58:10.031"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:10.031">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:10.031">${ret_values} = None</msg>
<status status="PASS" endtime="20170807 22:58:10.031" starttime="20170807 22:58:10.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:10.032" starttime="20170807 22:58:10.031"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:10.082">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:58:10.082" starttime="20170807 22:58:10.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.083">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:58:10.083" starttime="20170807 22:58:10.083"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.084">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:58:10.084" starttime="20170807 22:58:10.083"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.088">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:58:10.088" starttime="20170807 22:58:10.084"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:10.285">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:58:10.285" starttime="20170807 22:58:10.088"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:10.285">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:10.285">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:10.285" starttime="20170807 22:58:10.088"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:10.286">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:10.286" starttime="20170807 22:58:10.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:10.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:10.287" starttime="20170807 22:58:10.286"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:10.287" starttime="20170807 22:58:10.081"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:10.287" starttime="20170807 22:58:10.080"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:10.287" starttime="20170807 22:58:10.080"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.287">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170807 22:58:10.287" starttime="20170807 22:58:10.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:10.288" starttime="20170807 22:58:10.288"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.419">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:58:10.419">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:10.419" starttime="20170807 22:58:10.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:10.420" starttime="20170807 22:58:10.420"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:58:10.421">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:58:10.421" starttime="20170807 22:58:10.420"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:10.421">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:10.421" starttime="20170807 22:58:10.079"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:10.422">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:10.422" starttime="20170807 22:58:10.422"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:10.422">${status} = True</msg>
<status status="PASS" endtime="20170807 22:58:10.422" starttime="20170807 22:58:10.421"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:10.423" starttime="20170807 22:58:10.423"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.423">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502145018183, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502145647534, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:58:10.423">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:58:10.424">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/2': {u'Id': 2, u'Message': u'xyz.openbmc_project.Software.Version.Error.ManifestFileFailure', u'Resolved': 0, u'AdditionalData': [], u'associations': []...</msg>
<status status="PASS" endtime="20170807 22:58:10.424" starttime="20170807 22:58:10.423"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.424">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3']</msg>
<status status="PASS" endtime="20170807 22:58:10.424" starttime="20170807 22:58:10.424"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.425">${logpath} = /tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_esel</msg>
<status status="PASS" endtime="20170807 22:58:10.425" starttime="20170807 22:58:10.425"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:10.426" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_esel"&gt;/tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/20170807225759915053_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:10.426" starttime="20170807 22:58:10.425"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:10.427" starttime="20170807 22:58:10.426"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:10.430">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:58:10.431" starttime="20170807 22:58:10.430"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.431">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:58:10.431" starttime="20170807 22:58:10.431"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.432">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:58:10.432" starttime="20170807 22:58:10.432"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.433">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:58:10.433" starttime="20170807 22:58:10.432"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:10.630">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:58:10.630" starttime="20170807 22:58:10.433"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:10.630">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:10.630">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:10.630" starttime="20170807 22:58:10.433"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:10.631">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:10.631" starttime="20170807 22:58:10.631"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:10.632">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:10.632" starttime="20170807 22:58:10.631"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:10.632" starttime="20170807 22:58:10.429"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:10.632" starttime="20170807 22:58:10.429"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:10.632" starttime="20170807 22:58:10.428"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.633">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" endtime="20170807 22:58:10.633" starttime="20170807 22:58:10.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:10.633" starttime="20170807 22:58:10.633"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.727">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:58:10.727">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:10.727" starttime="20170807 22:58:10.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:10.728" starttime="20170807 22:58:10.728"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:58:10.728">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:58:10.729" starttime="20170807 22:58:10.728"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:10.729">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:10.729" starttime="20170807 22:58:10.427"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:10.729">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:10.729" starttime="20170807 22:58:10.729"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.730">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:58:10.730">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:58:10.730">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:58:10.730" starttime="20170807 22:58:10.730"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:10.730">${esel_data} = []</msg>
<status status="PASS" endtime="20170807 22:58:10.730" starttime="20170807 22:58:10.427"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.731">Length is 0</msg>
<msg level="INFO" timestamp="20170807 22:58:10.731">${length} = 0</msg>
<status status="PASS" endtime="20170807 22:58:10.731" starttime="20170807 22:58:10.731"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:10.732">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170807 22:58:10.732" starttime="20170807 22:58:10.731"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:10.732" starttime="20170807 22:58:10.426"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:10.733" starttime="20170807 22:58:10.732"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:10.737">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170807 22:58:10.737" starttime="20170807 22:58:10.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.738">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170807 22:58:10.738" starttime="20170807 22:58:10.738"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.739">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170807 22:58:10.739" starttime="20170807 22:58:10.738"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.739">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170807 22:58:10.739" starttime="20170807 22:58:10.739"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:10.965">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170807 22:58:10.965" starttime="20170807 22:58:10.740"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:10.965">${status} = PASS</msg>
<msg level="INFO" timestamp="20170807 22:58:10.965">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:10.965" starttime="20170807 22:58:10.740"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:10.965">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:10.966" starttime="20170807 22:58:10.965"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:10.966">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:10.966" starttime="20170807 22:58:10.966"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:10.966" starttime="20170807 22:58:10.736"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:10.966" starttime="20170807 22:58:10.735"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:10.967" starttime="20170807 22:58:10.734"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:10.967">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status status="PASS" endtime="20170807 22:58:10.967" starttime="20170807 22:58:10.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:10.968" starttime="20170807 22:58:10.967"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.052">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170807 22:58:11.052">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:11.052" starttime="20170807 22:58:10.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:11.053" starttime="20170807 22:58:11.053"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170807 22:58:11.053">Delete All Sessions</msg>
<status status="PASS" endtime="20170807 22:58:11.053" starttime="20170807 22:58:11.053"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:11.054">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170807 22:58:11.054" starttime="20170807 22:58:10.733"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:11.054">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170807 22:58:11.054" starttime="20170807 22:58:11.054"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.055">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170807 22:58:11.055">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170807 22:58:11.055">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170807 22:58:11.055" starttime="20170807 22:58:11.055"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:11.055">${esel_data} = []</msg>
<status status="PASS" endtime="20170807 22:58:11.055" starttime="20170807 22:58:10.733"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.056">Length is 0</msg>
<msg level="INFO" timestamp="20170807 22:58:11.056">${length} = 0</msg>
<status status="PASS" endtime="20170807 22:58:11.056" starttime="20170807 22:58:11.056"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:11.057">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170807 22:58:11.057" starttime="20170807 22:58:11.056"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.057" starttime="20170807 22:58:10.732"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.057" starttime="20170807 22:58:10.426"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.062">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170807 22:58:11.065">${out} = </msg>
<status status="PASS" endtime="20170807 22:58:11.065" starttime="20170807 22:58:11.057"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170807 22:58:11.070">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170807 22:58:11.070" starttime="20170807 22:58:11.069"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:11.070">${status} = False</msg>
<status status="PASS" endtime="20170807 22:58:11.070" starttime="20170807 22:58:11.068"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:11.071">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170807 22:58:11.071" starttime="20170807 22:58:11.070"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.071" starttime="20170807 22:58:10.079"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.072" starttime="20170807 22:58:10.032"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.072" starttime="20170807 22:58:10.029"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.072" starttime="20170807 22:58:10.029"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.072" starttime="20170807 22:58:00.197"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.072" starttime="20170807 22:58:00.194"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.072" starttime="20170807 22:58:00.194"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.072" starttime="20170807 22:58:00.194"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170807 22:58:11.085" starttime="20170807 22:58:11.085"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.086" starttime="20170807 22:58:11.073"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.086" starttime="20170807 22:58:00.193"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.086" starttime="20170807 22:57:56.796"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.086" starttime="20170807 22:57:56.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:11.087" starttime="20170807 22:58:11.086"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.101">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170807 22:58:11.101" starttime="20170807 22:58:11.088"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.102">${FFDC_DIR_PATH} = /tmp/fspcibld/20353/obmc-robot/logs/20170807225759915053_TestsTestBasicPoweron/20170807225759915053_PowerOnTest/</msg>
<status status="PASS" endtime="20170807 22:58:11.102" starttime="20170807 22:58:11.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:11.103" starttime="20170807 22:58:11.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:11.104" starttime="20170807 22:58:11.103"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:11.105" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs"&gt;/tmp/fspcibld/20353/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170807 22:58:11.105" starttime="20170807 22:58:11.104"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:11.106" html="yes">File '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170807 22:58:11.106" starttime="20170807 22:58:11.105"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:11.106">${exist} = True</msg>
<status status="PASS" endtime="20170807 22:58:11.106" starttime="20170807 22:58:11.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:11.106" starttime="20170807 22:58:11.106"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:11.107" starttime="20170807 22:58:11.107"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.108">${cur_time} = 2017-08-07 22:58:11:108026</msg>
<status status="PASS" endtime="20170807 22:58:11.108" starttime="20170807 22:58:11.108"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.109">${cur_time} = 20170807225811108026</msg>
<status status="PASS" endtime="20170807 22:58:11.109" starttime="20170807 22:58:11.108"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:11.109">${cur_time} = 20170807225811108026</msg>
<status status="PASS" endtime="20170807 22:58:11.109" starttime="20170807 22:58:11.107"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:11.110" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/20353/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:11.110" starttime="20170807 22:58:11.109"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.110" starttime="20170807 22:58:11.087"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.110" starttime="20170807 22:57:56.493"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.112">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170807 22:58:11.112" starttime="20170807 22:58:11.112"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.113">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170807 22:58:11.113" starttime="20170807 22:58:11.112"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:11.113">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170807 22:58:11.113" starttime="20170807 22:58:11.111"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.114">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170807 22:58:11.114" starttime="20170807 22:58:11.114"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:11.114" starttime="20170807 22:58:11.114"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.119">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170807 22:58:11.123">${rc} = 0</msg>
<msg level="INFO" timestamp="20170807 22:58:11.123">${output} = /tmp/fspcibld/20353/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20170807 22:58:11.123" starttime="20170807 22:58:11.115"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:11.126" starttime="20170807 22:58:11.125"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:11.128" starttime="20170807 22:58:11.128"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.129">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170807 22:58:11.129" starttime="20170807 22:58:11.129"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:11.130">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170807 22:58:11.130" starttime="20170807 22:58:11.113"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.131">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170807 22:58:11.131" starttime="20170807 22:58:11.130"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:11.131" starttime="20170807 22:58:11.131"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.135">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170807 22:58:11.148">${rc} = 0</msg>
<msg level="INFO" timestamp="20170807 22:58:11.148">${os_con_pid} = </msg>
<status status="PASS" endtime="20170807 22:58:11.148" starttime="20170807 22:58:11.132"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:11.152" starttime="20170807 22:58:11.151"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.153">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170807 22:58:11.153" starttime="20170807 22:58:11.152"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:11.154" starttime="20170807 22:58:11.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.155">${rc} = None</msg>
<msg level="INFO" timestamp="20170807 22:58:11.155">${output} = None</msg>
<status status="PASS" endtime="20170807 22:58:11.155" starttime="20170807 22:58:11.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:11.156" starttime="20170807 22:58:11.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:11.167" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/20353/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/20353/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170807 22:58:11.167" starttime="20170807 22:58:11.164"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.167" starttime="20170807 22:58:11.158"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.167" starttime="20170807 22:58:11.157"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.168">${output} = </msg>
<status status="PASS" endtime="20170807 22:58:11.168" starttime="20170807 22:58:11.167"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170807 22:58:11.168">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170807 22:58:11.168" starttime="20170807 22:58:11.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170807 22:58:11.213" starttime="20170807 22:58:11.169"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:11.215">${rc} = 0</msg>
<msg level="INFO" timestamp="20170807 22:58:11.215">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status status="PASS" endtime="20170807 22:58:11.215" starttime="20170807 22:58:11.169"></status>
</kw>
<msg level="INFO" timestamp="20170807 22:58:11.216">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status status="PASS" endtime="20170807 22:58:11.216" starttime="20170807 22:58:11.111"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170807 22:58:11.224">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status status="PASS" endtime="20170807 22:58:11.225" starttime="20170807 22:58:11.224"></status>
</kw>
<status status="PASS" endtime="20170807 22:58:11.225" starttime="20170807 22:57:56.493"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20170807 22:58:11.225" starttime="20170807 22:47:43.923">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" endtime="20170807 22:58:11.227" starttime="20170807 22:47:43.888"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" endtime="20170807 22:58:11.232" starttime="20170807 22:47:37.552"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" fail="1" name="Tests" pass="1">Tests</stat>
<stat id="s1-s1" fail="0" name="Security" pass="1">Tests.Security</stat>
<stat id="s1-s1-s1" fail="0" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" fail="1" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
