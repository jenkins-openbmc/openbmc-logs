<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170808 03:08:17.200" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite name="Tests" source="/tmp/fspcibld/10043/obmc-robot/tests" id="s1">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170808 03:08:17.835" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170808 03:08:17.835" status="FAIL" starttime="20170808 03:08:17.835"></status>
</kw>
<msg timestamp="20170808 03:08:17.835" level="INFO">${has_host} = False</msg>
<status endtime="20170808 03:08:17.835" status="PASS" starttime="20170808 03:08:17.834"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170808 03:08:17.836" status="PASS" starttime="20170808 03:08:17.836"></status>
</kw>
<status endtime="20170808 03:08:17.836" status="PASS" starttime="20170808 03:08:17.835"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170808 03:08:17.838" level="INFO">${port_num} = 22</msg>
<status endtime="20170808 03:08:17.838" status="PASS" starttime="20170808 03:08:17.837"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170808 03:08:17.838" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170808 03:08:17.838" status="PASS" starttime="20170808 03:08:17.838"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170808 03:08:17.839" level="INFO">${https_num} = 443</msg>
<status endtime="20170808 03:08:17.839" status="PASS" starttime="20170808 03:08:17.838"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170808 03:08:17.839" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170808 03:08:17.840" status="PASS" starttime="20170808 03:08:17.839"></status>
</kw>
<status endtime="20170808 03:08:17.840" status="PASS" starttime="20170808 03:08:17.837"></status>
</kw>
<status endtime="20170808 03:08:17.840" status="PASS" starttime="20170808 03:08:17.837"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170808 03:08:17.841" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170808 03:08:17.841" status="FAIL" starttime="20170808 03:08:17.841"></status>
</kw>
<msg timestamp="20170808 03:08:17.841" level="INFO">${has_port} = False</msg>
<status endtime="20170808 03:08:17.841" status="PASS" starttime="20170808 03:08:17.840"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170808 03:08:17.843" status="PASS" starttime="20170808 03:08:17.843"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170808 03:08:17.844" status="PASS" starttime="20170808 03:08:17.843"></status>
</kw>
<status endtime="20170808 03:08:17.844" status="PASS" starttime="20170808 03:08:17.842"></status>
</kw>
<status endtime="20170808 03:08:17.844" status="PASS" starttime="20170808 03:08:17.842"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170808 03:08:17.844" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170808 03:08:19.560" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170808 03:08:19.561" status="PASS" starttime="20170808 03:08:17.844"></status>
</kw>
<status endtime="20170808 03:08:19.561" status="PASS" starttime="20170808 03:08:17.834"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170808 03:08:19.562" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170808 03:08:19.639" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170808 03:08:19.639" level="INFO">${output} = VERSION_ID="v1.99.8-191-gabbe307"</msg>
<msg timestamp="20170808 03:08:19.639" level="INFO">${stderr} = </msg>
<status endtime="20170808 03:08:19.639" status="PASS" starttime="20170808 03:08:19.562"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170808 03:08:19.640" level="INFO">Length is 0</msg>
<status endtime="20170808 03:08:19.640" status="PASS" starttime="20170808 03:08:19.640"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170808 03:08:19.640" level="INFO">VERSION_ID="v1.99.8-191-gabbe307"</msg>
<status endtime="20170808 03:08:19.640" status="PASS" starttime="20170808 03:08:19.640"></status>
</kw>
<status endtime="20170808 03:08:19.641" status="PASS" starttime="20170808 03:08:19.561"></status>
</kw>
<status endtime="20170808 03:08:19.641" status="PASS" starttime="20170808 03:08:19.561"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170808 03:08:19.642" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170808 03:08:19.809" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170808 03:08:19.809" level="INFO">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg timestamp="20170808 03:08:19.809" level="INFO">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170808 03:08:19.809" status="PASS" starttime="20170808 03:08:19.642"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170808 03:08:19.810" level="INFO">Length is 81</msg>
<msg timestamp="20170808 03:08:19.810" level="FAIL">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170808 03:08:19.810" status="FAIL" starttime="20170808 03:08:19.809"></status>
</kw>
<status endtime="20170808 03:08:19.810" status="FAIL" starttime="20170808 03:08:19.641"></status>
</kw>
<status endtime="20170808 03:08:19.810" status="FAIL" starttime="20170808 03:08:19.641"></status>
</kw>
<status endtime="20170808 03:08:19.810" status="PASS" starttime="20170808 03:08:19.641"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170808 03:08:20.207" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:08:20.207" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170808 03:08:20.994" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170808 03:08:20.994" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170808 03:08:21.070" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170808 03:08:21.081" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170808 03:08:21.081" level="INFO">${stderr} = </msg>
<msg timestamp="20170808 03:08:21.081" level="INFO">${rc} = 0</msg>
<status endtime="20170808 03:08:21.081" status="PASS" starttime="20170808 03:08:19.811"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170808 03:08:21.082" level="INFO">Length is 0</msg>
<status endtime="20170808 03:08:21.082" status="PASS" starttime="20170808 03:08:21.081"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170808 03:08:21.082" level="INFO">Length is 11</msg>
<status endtime="20170808 03:08:21.082" status="PASS" starttime="20170808 03:08:21.082"></status>
</kw>
<msg timestamp="20170808 03:08:21.082" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170808 03:08:21.082" status="PASS" starttime="20170808 03:08:19.811"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170808 03:08:21.083" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170808 03:08:21.083" status="PASS" starttime="20170808 03:08:21.083"></status>
</kw>
<status endtime="20170808 03:08:21.083" status="PASS" starttime="20170808 03:08:19.811"></status>
</kw>
<status endtime="20170808 03:08:21.083" status="PASS" starttime="20170808 03:08:19.811"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170808 03:08:21.085" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170808 03:08:21.085" status="FAIL" starttime="20170808 03:08:21.085"></status>
</kw>
<msg timestamp="20170808 03:08:21.086" level="INFO">${has_host} = False</msg>
<status endtime="20170808 03:08:21.086" status="PASS" starttime="20170808 03:08:21.085"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170808 03:08:21.087" status="PASS" starttime="20170808 03:08:21.086"></status>
</kw>
<status endtime="20170808 03:08:21.087" status="PASS" starttime="20170808 03:08:21.086"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170808 03:08:21.089" level="INFO">${port_num} = 22</msg>
<status endtime="20170808 03:08:21.089" status="PASS" starttime="20170808 03:08:21.088"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170808 03:08:21.089" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170808 03:08:21.089" status="PASS" starttime="20170808 03:08:21.089"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170808 03:08:21.090" level="INFO">${https_num} = 443</msg>
<status endtime="20170808 03:08:21.090" status="PASS" starttime="20170808 03:08:21.089"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170808 03:08:21.090" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170808 03:08:21.090" status="PASS" starttime="20170808 03:08:21.090"></status>
</kw>
<status endtime="20170808 03:08:21.091" status="PASS" starttime="20170808 03:08:21.088"></status>
</kw>
<status endtime="20170808 03:08:21.091" status="PASS" starttime="20170808 03:08:21.087"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170808 03:08:21.091" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170808 03:08:21.092" status="FAIL" starttime="20170808 03:08:21.091"></status>
</kw>
<msg timestamp="20170808 03:08:21.092" level="INFO">${has_port} = False</msg>
<status endtime="20170808 03:08:21.092" status="PASS" starttime="20170808 03:08:21.091"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170808 03:08:21.093" status="PASS" starttime="20170808 03:08:21.093"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170808 03:08:21.094" status="PASS" starttime="20170808 03:08:21.093"></status>
</kw>
<status endtime="20170808 03:08:21.094" status="PASS" starttime="20170808 03:08:21.093"></status>
</kw>
<status endtime="20170808 03:08:21.094" status="PASS" starttime="20170808 03:08:21.092"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170808 03:08:21.094" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170808 03:08:22.749" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170808 03:08:22.750" status="PASS" starttime="20170808 03:08:21.094"></status>
</kw>
<status endtime="20170808 03:08:22.750" status="PASS" starttime="20170808 03:08:21.084"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170808 03:08:22.751" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170808 03:08:22.827" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170808 03:08:22.827" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170808 03:08:22.827" level="INFO">${stderr} = </msg>
<status endtime="20170808 03:08:22.827" status="PASS" starttime="20170808 03:08:22.751"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170808 03:08:22.828" level="INFO">Length is 0</msg>
<status endtime="20170808 03:08:22.828" status="PASS" starttime="20170808 03:08:22.828"></status>
</kw>
<msg timestamp="20170808 03:08:22.828" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170808 03:08:22.828" status="PASS" starttime="20170808 03:08:22.750"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170808 03:08:22.829" status="PASS" starttime="20170808 03:08:22.828"></status>
</kw>
<status endtime="20170808 03:08:22.829" status="PASS" starttime="20170808 03:08:21.084"></status>
</kw>
<status endtime="20170808 03:08:22.829" status="PASS" starttime="20170808 03:08:21.083"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170808 03:08:22.830" status="PASS" starttime="20170808 03:08:22.829"></status>
</kw>
<status endtime="20170808 03:08:22.830" status="PASS" starttime="20170808 03:08:17.833"></status>
</kw>
<suite name="Security" source="/tmp/fspcibld/10043/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/fspcibld/10043/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:08:22.912" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:08:22.913" status="PASS" starttime="20170808 03:08:22.912"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:08:22.913" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:08:22.914" status="PASS" starttime="20170808 03:08:22.913"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:08:22.914" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:08:22.914" status="PASS" starttime="20170808 03:08:22.914"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:08:22.915" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:08:22.915" status="PASS" starttime="20170808 03:08:22.914"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:08:23.141" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:08:23.141" status="PASS" starttime="20170808 03:08:22.915"></status>
</kw>
<msg timestamp="20170808 03:08:23.142" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:08:23.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:23.142" status="PASS" starttime="20170808 03:08:22.915"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:08:23.142" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:23.142" status="PASS" starttime="20170808 03:08:23.142"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:23.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:23.143" status="PASS" starttime="20170808 03:08:23.143"></status>
</kw>
<status endtime="20170808 03:08:23.143" status="PASS" starttime="20170808 03:08:22.912"></status>
</kw>
<status endtime="20170808 03:08:23.143" status="PASS" starttime="20170808 03:08:22.911"></status>
</kw>
<status endtime="20170808 03:08:23.143" status="PASS" starttime="20170808 03:08:22.911"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:08:23.148" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:08:23.149" status="PASS" starttime="20170808 03:08:23.148"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:08:23.149" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:08:23.149" status="PASS" starttime="20170808 03:08:23.149"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:08:23.150" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:08:23.150" status="PASS" starttime="20170808 03:08:23.150"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:08:23.151" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:08:23.151" status="PASS" starttime="20170808 03:08:23.150"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:08:23.332" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:08:23.332" status="PASS" starttime="20170808 03:08:23.152"></status>
</kw>
<msg timestamp="20170808 03:08:23.332" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:08:23.332" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:23.332" status="PASS" starttime="20170808 03:08:23.151"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:08:23.333" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:23.333" status="PASS" starttime="20170808 03:08:23.333"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:23.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:23.334" status="PASS" starttime="20170808 03:08:23.333"></status>
</kw>
<status endtime="20170808 03:08:23.334" status="PASS" starttime="20170808 03:08:23.147"></status>
</kw>
<status endtime="20170808 03:08:23.334" status="PASS" starttime="20170808 03:08:23.147"></status>
</kw>
<status endtime="20170808 03:08:23.334" status="PASS" starttime="20170808 03:08:23.146"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:08:23.334" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170808 03:08:23.335" status="PASS" starttime="20170808 03:08:23.334"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:08:23.337" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170808 03:08:23.337" status="PASS" starttime="20170808 03:08:23.336"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:08:23.337" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170808 03:08:23.338" status="PASS" starttime="20170808 03:08:23.337"></status>
</kw>
<status endtime="20170808 03:08:23.338" status="PASS" starttime="20170808 03:08:23.337"></status>
</kw>
<status endtime="20170808 03:08:23.338" status="PASS" starttime="20170808 03:08:23.335"></status>
</kw>
<status endtime="20170808 03:08:23.338" status="PASS" starttime="20170808 03:08:23.335"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:08:23.442" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170808 03:08:23.442" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:23.443" status="PASS" starttime="20170808 03:08:23.338"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:08:23.445" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:08:23.445" status="PASS" starttime="20170808 03:08:23.444"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:08:23.445" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:08:23.446" status="PASS" starttime="20170808 03:08:23.445"></status>
</kw>
<status endtime="20170808 03:08:23.446" status="PASS" starttime="20170808 03:08:23.445"></status>
</kw>
<status endtime="20170808 03:08:23.446" status="PASS" starttime="20170808 03:08:23.443"></status>
</kw>
<status endtime="20170808 03:08:23.446" status="PASS" starttime="20170808 03:08:23.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:08:23.446" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:08:23.446" status="PASS" starttime="20170808 03:08:23.446"></status>
</kw>
<msg timestamp="20170808 03:08:23.447" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:23.447" status="PASS" starttime="20170808 03:08:23.145"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:23.447" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:23.447" status="PASS" starttime="20170808 03:08:23.447"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:08:23.448" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:08:23.448" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:08:23.448" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170808 03:08:23.448" status="PASS" starttime="20170808 03:08:23.447"></status>
</kw>
<msg timestamp="20170808 03:08:23.448" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170808 03:08:23.448" status="PASS" starttime="20170808 03:08:23.145"></status>
</kw>
<msg timestamp="20170808 03:08:23.449" level="INFO">${host_state} = Off</msg>
<status endtime="20170808 03:08:23.449" status="PASS" starttime="20170808 03:08:23.144"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170808 03:08:23.450" level="FAIL">Off != Quiesced</msg>
<status endtime="20170808 03:08:23.450" status="FAIL" starttime="20170808 03:08:23.449"></status>
</kw>
<msg timestamp="20170808 03:08:23.450" level="INFO">${status} = False</msg>
<status endtime="20170808 03:08:23.450" status="PASS" starttime="20170808 03:08:23.449"></status>
</kw>
<msg timestamp="20170808 03:08:23.450" level="INFO">${status} = False</msg>
<status endtime="20170808 03:08:23.450" status="PASS" starttime="20170808 03:08:23.144"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170808 03:08:23.451" status="PASS" starttime="20170808 03:08:23.450"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170808 03:08:23.451" status="PASS" starttime="20170808 03:08:23.451"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170808 03:08:23.461" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170808 03:08:23.461" status="PASS" starttime="20170808 03:08:23.452"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170808 03:08:23.470" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20170808 03:08:23.471" status="PASS" starttime="20170808 03:08:23.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170808 03:08:23.473" level="INFO">${cur_time} = 2017-08-08 03:08:23:473037</msg>
<status endtime="20170808 03:08:23.473" status="PASS" starttime="20170808 03:08:23.473"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170808 03:08:23.474" level="INFO">${cur_time} = 20170808030823473037</msg>
<status endtime="20170808 03:08:23.474" status="PASS" starttime="20170808 03:08:23.474"></status>
</kw>
<status endtime="20170808 03:08:23.474" status="PASS" starttime="20170808 03:08:23.472"></status>
</kw>
<msg timestamp="20170808 03:08:23.481" level="INFO">${FFDC_TIME} = 20170808030823473037</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170808 03:08:23.482" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170808 03:08:23.482" status="PASS" starttime="20170808 03:08:23.482"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170808 03:08:23.483" level="INFO">${suite_name} = 20170808030823473037_TestsSecurityTestSsl</msg>
<status endtime="20170808 03:08:23.484" status="PASS" starttime="20170808 03:08:23.483"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170808 03:08:23.484" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20170808 03:08:23.484" status="PASS" starttime="20170808 03:08:23.484"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170808 03:08:23.485" level="INFO">${test_name} = 20170808030823473037_TestSSLConnection</msg>
<status endtime="20170808 03:08:23.485" status="PASS" starttime="20170808 03:08:23.484"></status>
</kw>
<status endtime="20170808 03:08:23.485" status="PASS" starttime="20170808 03:08:23.482"></status>
</kw>
<msg timestamp="20170808 03:08:23.485" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/10043/obmc-robot/logs/20170808030823473037_TestsSecurityTestSsl/20170808030823473037_TestSSLConnection/</msg>
<msg timestamp="20170808 03:08:23.490" level="INFO">${FFDC_PREFIX} = 20170808030823473037_</msg>
<status endtime="20170808 03:08:23.490" status="PASS" starttime="20170808 03:08:23.472"></status>
</kw>
<status endtime="20170808 03:08:23.490" status="PASS" starttime="20170808 03:08:23.471"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170808 03:08:23.491" status="PASS" starttime="20170808 03:08:23.490"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:08:23.491" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs"&gt;/tmp/fspcibld/10043/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170808 03:08:23.492" status="PASS" starttime="20170808 03:08:23.491"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170808 03:08:23.493" level="FAIL">File '/tmp/fspcibld/10043/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170808 03:08:23.493" status="FAIL" starttime="20170808 03:08:23.492"></status>
</kw>
<msg timestamp="20170808 03:08:23.493" level="INFO">${exist} = False</msg>
<status endtime="20170808 03:08:23.493" status="PASS" starttime="20170808 03:08:23.492"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:08:23.494" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:08:23.494" status="PASS" starttime="20170808 03:08:23.494"></status>
</kw>
<status endtime="20170808 03:08:23.494" status="PASS" starttime="20170808 03:08:23.493"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170808 03:08:23.495" status="PASS" starttime="20170808 03:08:23.494"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170808 03:08:23.496" level="INFO">${cur_time} = 2017-08-08 03:08:23:495360</msg>
<status endtime="20170808 03:08:23.496" status="PASS" starttime="20170808 03:08:23.495"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170808 03:08:23.496" level="INFO">${cur_time} = 20170808030823495360</msg>
<status endtime="20170808 03:08:23.496" status="PASS" starttime="20170808 03:08:23.496"></status>
</kw>
<msg timestamp="20170808 03:08:23.496" level="INFO">${cur_time} = 20170808030823495360</msg>
<status endtime="20170808 03:08:23.496" status="PASS" starttime="20170808 03:08:23.495"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:08:23.497" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:08:23.497" status="PASS" starttime="20170808 03:08:23.497"></status>
</kw>
<status endtime="20170808 03:08:23.497" status="PASS" starttime="20170808 03:08:23.451"></status>
</kw>
<status endtime="20170808 03:08:23.497" status="PASS" starttime="20170808 03:08:23.144"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170808 03:08:23.498" status="PASS" starttime="20170808 03:08:22.910" critical="yes"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" type="teardown" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:08:23.499" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:08:23.499" status="PASS" starttime="20170808 03:08:23.498"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170808 03:08:23.499" status="PASS" starttime="20170808 03:08:22.832"></status>
</suite>
<status endtime="20170808 03:08:23.502" status="PASS" starttime="20170808 03:08:22.830"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/fspcibld/10043/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" type="setup" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170808 03:08:23.540" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 03:08:23.540" status="PASS" starttime="20170808 03:08:23.539"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170808 03:08:23.540" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 03:08:23.541" status="PASS" starttime="20170808 03:08:23.540"></status>
</kw>
<msg timestamp="20170808 03:08:23.541" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 03:08:23.541" status="PASS" starttime="20170808 03:08:23.539"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170808 03:08:23.542" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 03:08:23.542" status="PASS" starttime="20170808 03:08:23.542"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170808 03:08:23.543" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 03:08:23.543" status="PASS" starttime="20170808 03:08:23.543"></status>
</kw>
<msg timestamp="20170808 03:08:23.543" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 03:08:23.543" status="PASS" starttime="20170808 03:08:23.542"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:08:23.544" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170808 03:08:23.544" status="PASS" starttime="20170808 03:08:23.544"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170808 03:08:23.545" status="PASS" starttime="20170808 03:08:23.544"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170808 03:08:23.549" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170808 03:08:23.552" level="INFO">${rc} = 0</msg>
<msg timestamp="20170808 03:08:23.552" level="INFO">${output} = /tmp/fspcibld/10043/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170808 03:08:23.552" status="PASS" starttime="20170808 03:08:23.545"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170808 03:08:23.555" status="PASS" starttime="20170808 03:08:23.555"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170808 03:08:23.557" status="PASS" starttime="20170808 03:08:23.556"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:08:23.557" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170808 03:08:23.557" status="PASS" starttime="20170808 03:08:23.557"></status>
</kw>
<msg timestamp="20170808 03:08:23.558" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170808 03:08:23.558" status="PASS" starttime="20170808 03:08:23.544"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:08:23.558" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170808 03:08:23.558" status="PASS" starttime="20170808 03:08:23.558"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170808 03:08:23.559" status="PASS" starttime="20170808 03:08:23.559"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170808 03:08:23.562" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170808 03:08:23.571" level="INFO">${rc} = 0</msg>
<msg timestamp="20170808 03:08:23.571" level="INFO">${os_con_pid} = </msg>
<status endtime="20170808 03:08:23.571" status="PASS" starttime="20170808 03:08:23.559"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170808 03:08:23.574" status="PASS" starttime="20170808 03:08:23.573"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:08:23.574" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170808 03:08:23.574" status="PASS" starttime="20170808 03:08:23.574"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170808 03:08:23.575" status="PASS" starttime="20170808 03:08:23.575"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170808 03:08:23.576" level="INFO">${rc} = None</msg>
<msg timestamp="20170808 03:08:23.576" level="INFO">${output} = None</msg>
<status endtime="20170808 03:08:23.576" status="PASS" starttime="20170808 03:08:23.576"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170808 03:08:23.577" status="PASS" starttime="20170808 03:08:23.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170808 03:08:23.584" level="FAIL">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status endtime="20170808 03:08:23.584" status="FAIL" starttime="20170808 03:08:23.578"></status>
</kw>
<status endtime="20170808 03:08:23.584" status="PASS" starttime="20170808 03:08:23.578"></status>
</kw>
<status endtime="20170808 03:08:23.584" status="PASS" starttime="20170808 03:08:23.577"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170808 03:08:23.585" level="INFO">${output} = </msg>
<status endtime="20170808 03:08:23.585" status="PASS" starttime="20170808 03:08:23.585"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170808 03:08:23.585" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170808 03:08:23.585" status="PASS" starttime="20170808 03:08:23.585"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170808 03:08:23.641" status="PASS" starttime="20170808 03:08:23.586"></status>
</kw>
<msg timestamp="20170808 03:08:23.642" level="INFO">${rc} = 1</msg>
<msg timestamp="20170808 03:08:23.642" level="INFO">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170808 03:08:23.642" status="PASS" starttime="20170808 03:08:23.586"></status>
</kw>
<msg timestamp="20170808 03:08:23.642" level="INFO">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170808 03:08:23.642" status="PASS" starttime="20170808 03:08:23.541"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:08:23.644" level="INFO">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170808 03:08:23.644" status="PASS" starttime="20170808 03:08:23.643"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:08:23.645" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170808 03:08:23.645" status="PASS" starttime="20170808 03:08:23.645"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170808 03:08:23.646" status="PASS" starttime="20170808 03:08:23.645"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170808 03:08:23.649" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170808 03:08:23.651" level="INFO">${rc} = 0</msg>
<msg timestamp="20170808 03:08:23.651" level="INFO">${output} = /tmp/fspcibld/10043/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170808 03:08:23.651" status="PASS" starttime="20170808 03:08:23.646"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170808 03:08:23.656" status="PASS" starttime="20170808 03:08:23.655"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170808 03:08:23.656" status="PASS" starttime="20170808 03:08:23.656"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:08:23.657" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170808 03:08:23.657" status="PASS" starttime="20170808 03:08:23.657"></status>
</kw>
<msg timestamp="20170808 03:08:23.658" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170808 03:08:23.658" status="PASS" starttime="20170808 03:08:23.644"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:08:23.658" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170808 03:08:23.658" status="PASS" starttime="20170808 03:08:23.658"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170808 03:08:23.659" status="PASS" starttime="20170808 03:08:23.659"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170808 03:08:23.662" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170808 03:08:23.665" level="INFO">${rc} = 0</msg>
<msg timestamp="20170808 03:08:23.665" level="INFO">${output} = </msg>
<status endtime="20170808 03:08:23.665" status="PASS" starttime="20170808 03:08:23.659"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170808 03:08:23.668" status="PASS" starttime="20170808 03:08:23.667"></status>
</kw>
<status endtime="20170808 03:08:23.668" status="PASS" starttime="20170808 03:08:23.538"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170808 03:08:23.669" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170808 03:08:23.671" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170808 03:08:23.671" status="PASS" starttime="20170808 03:08:23.670"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:08:23.672" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170808 03:08:23.672" status="PASS" starttime="20170808 03:08:23.672"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:08:23.676" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:08:23.677" status="PASS" starttime="20170808 03:08:23.676"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:08:23.677" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:08:23.677" status="PASS" starttime="20170808 03:08:23.677"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:08:23.678" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:08:23.678" status="PASS" starttime="20170808 03:08:23.678"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:08:23.679" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:08:23.679" status="PASS" starttime="20170808 03:08:23.678"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:08:24.147" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:08:24.147" status="PASS" starttime="20170808 03:08:23.680"></status>
</kw>
<msg timestamp="20170808 03:08:24.147" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:08:24.147" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:24.147" status="PASS" starttime="20170808 03:08:23.679"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:08:24.148" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:24.148" status="PASS" starttime="20170808 03:08:24.147"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:24.148" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:24.148" status="PASS" starttime="20170808 03:08:24.148"></status>
</kw>
<status endtime="20170808 03:08:24.148" status="PASS" starttime="20170808 03:08:23.675"></status>
</kw>
<status endtime="20170808 03:08:24.149" status="PASS" starttime="20170808 03:08:23.674"></status>
</kw>
<status endtime="20170808 03:08:24.149" status="PASS" starttime="20170808 03:08:23.673"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:08:24.149" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170808 03:08:24.149" status="PASS" starttime="20170808 03:08:24.149"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:08:24.150" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:08:24.150" status="PASS" starttime="20170808 03:08:24.150"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170808 03:08:24.151" status="PASS" starttime="20170808 03:08:24.150"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:08:24.152" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170808 03:08:24.152" status="PASS" starttime="20170808 03:08:24.151"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:08:24.153" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170808 03:08:24.153" status="PASS" starttime="20170808 03:08:24.153"></status>
</kw>
<status endtime="20170808 03:08:24.153" status="PASS" starttime="20170808 03:08:24.152"></status>
</kw>
<status endtime="20170808 03:08:24.153" status="PASS" starttime="20170808 03:08:24.151"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:08:24.866" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170808 03:08:24.866" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:24.866" status="PASS" starttime="20170808 03:08:24.154"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:08:24.868" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:08:24.868" status="PASS" starttime="20170808 03:08:24.867"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:08:24.869" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:08:24.869" status="PASS" starttime="20170808 03:08:24.869"></status>
</kw>
<status endtime="20170808 03:08:24.869" status="PASS" starttime="20170808 03:08:24.868"></status>
</kw>
<status endtime="20170808 03:08:24.869" status="PASS" starttime="20170808 03:08:24.867"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:08:24.870" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:08:24.870" status="PASS" starttime="20170808 03:08:24.869"></status>
</kw>
<msg timestamp="20170808 03:08:24.870" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:24.870" status="PASS" starttime="20170808 03:08:23.672"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:24.871" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:24.871" status="PASS" starttime="20170808 03:08:24.870"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170808 03:08:24.871" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:08:24.871" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:08:24.871" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170808 03:08:24.871" status="PASS" starttime="20170808 03:08:24.871"></status>
</kw>
<status endtime="20170808 03:08:24.871" status="PASS" starttime="20170808 03:08:23.671"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170808 03:08:24.872" status="PASS" starttime="20170808 03:08:24.872"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:08:24.877" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:08:24.877" status="PASS" starttime="20170808 03:08:24.876"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:08:24.878" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:08:24.878" status="PASS" starttime="20170808 03:08:24.877"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:08:24.878" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:08:24.878" status="PASS" starttime="20170808 03:08:24.878"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:08:24.879" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:08:24.879" status="PASS" starttime="20170808 03:08:24.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:08:27.081" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:08:27.081" status="PASS" starttime="20170808 03:08:24.880"></status>
</kw>
<msg timestamp="20170808 03:08:27.081" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:08:27.081" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:27.081" status="PASS" starttime="20170808 03:08:24.879"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:08:27.082" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:27.082" status="PASS" starttime="20170808 03:08:27.081"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:27.082" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:27.083" status="PASS" starttime="20170808 03:08:27.082"></status>
</kw>
<status endtime="20170808 03:08:27.083" status="PASS" starttime="20170808 03:08:24.876"></status>
</kw>
<status endtime="20170808 03:08:27.083" status="PASS" starttime="20170808 03:08:24.875"></status>
</kw>
<status endtime="20170808 03:08:27.083" status="PASS" starttime="20170808 03:08:24.875"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:08:27.084" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:08:27.084" status="PASS" starttime="20170808 03:08:27.083"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:08:27.086" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:08:27.086" status="PASS" starttime="20170808 03:08:27.085"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:08:27.086" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:08:27.087" status="PASS" starttime="20170808 03:08:27.086"></status>
</kw>
<status endtime="20170808 03:08:27.087" status="PASS" starttime="20170808 03:08:27.086"></status>
</kw>
<status endtime="20170808 03:08:27.087" status="PASS" starttime="20170808 03:08:27.084"></status>
</kw>
<status endtime="20170808 03:08:27.087" status="PASS" starttime="20170808 03:08:27.084"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:08:31.188" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:08:31.188" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:31.188" status="PASS" starttime="20170808 03:08:27.087"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:08:31.190" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:08:31.190" status="PASS" starttime="20170808 03:08:31.190"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:08:31.191" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:08:31.191" status="PASS" starttime="20170808 03:08:31.191"></status>
</kw>
<status endtime="20170808 03:08:31.191" status="PASS" starttime="20170808 03:08:31.190"></status>
</kw>
<status endtime="20170808 03:08:31.191" status="PASS" starttime="20170808 03:08:31.189"></status>
</kw>
<status endtime="20170808 03:08:31.192" status="PASS" starttime="20170808 03:08:31.189"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:08:31.192" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:08:31.192" status="PASS" starttime="20170808 03:08:31.192"></status>
</kw>
<msg timestamp="20170808 03:08:31.192" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:31.192" status="PASS" starttime="20170808 03:08:24.874"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:31.193" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:31.193" status="PASS" starttime="20170808 03:08:31.192"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:08:31.193" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:08:31.193" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:08:31.194" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:08:31.194" status="PASS" starttime="20170808 03:08:31.193"></status>
</kw>
<msg timestamp="20170808 03:08:31.194" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:08:31.194" status="PASS" starttime="20170808 03:08:24.874"></status>
</kw>
<msg timestamp="20170808 03:08:31.194" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:08:31.194" status="PASS" starttime="20170808 03:08:24.873"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170808 03:08:31.195" status="PASS" starttime="20170808 03:08:31.194"></status>
</kw>
<status endtime="20170808 03:08:31.195" status="PASS" starttime="20170808 03:08:24.873"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:08:31.199" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:08:31.199" status="PASS" starttime="20170808 03:08:31.199"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:08:31.200" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:08:31.200" status="PASS" starttime="20170808 03:08:31.200"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:08:31.200" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:08:31.200" status="PASS" starttime="20170808 03:08:31.200"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:08:31.201" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:08:31.201" status="PASS" starttime="20170808 03:08:31.201"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:08:32.010" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:08:32.010" status="PASS" starttime="20170808 03:08:31.202"></status>
</kw>
<msg timestamp="20170808 03:08:32.011" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:08:32.011" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:32.011" status="PASS" starttime="20170808 03:08:31.201"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:08:32.011" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:32.011" status="PASS" starttime="20170808 03:08:32.011"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:32.012" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:32.012" status="PASS" starttime="20170808 03:08:32.012"></status>
</kw>
<status endtime="20170808 03:08:32.012" status="PASS" starttime="20170808 03:08:31.198"></status>
</kw>
<status endtime="20170808 03:08:32.012" status="PASS" starttime="20170808 03:08:31.197"></status>
</kw>
<status endtime="20170808 03:08:32.012" status="PASS" starttime="20170808 03:08:31.197"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:08:32.013" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170808 03:08:32.013" status="PASS" starttime="20170808 03:08:32.013"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:08:32.015" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170808 03:08:32.015" status="PASS" starttime="20170808 03:08:32.014"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:08:32.016" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170808 03:08:32.016" status="PASS" starttime="20170808 03:08:32.016"></status>
</kw>
<status endtime="20170808 03:08:32.016" status="PASS" starttime="20170808 03:08:32.015"></status>
</kw>
<status endtime="20170808 03:08:32.016" status="PASS" starttime="20170808 03:08:32.014"></status>
</kw>
<status endtime="20170808 03:08:32.016" status="PASS" starttime="20170808 03:08:32.013"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:08:32.132" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170808 03:08:32.133" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:32.133" status="PASS" starttime="20170808 03:08:32.017"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:08:32.134" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:08:32.134" status="PASS" starttime="20170808 03:08:32.134"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:08:32.136" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:08:32.136" status="PASS" starttime="20170808 03:08:32.135"></status>
</kw>
<status endtime="20170808 03:08:32.136" status="PASS" starttime="20170808 03:08:32.135"></status>
</kw>
<status endtime="20170808 03:08:32.136" status="PASS" starttime="20170808 03:08:32.133"></status>
</kw>
<status endtime="20170808 03:08:32.136" status="PASS" starttime="20170808 03:08:32.133"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:08:32.136" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:08:32.137" status="PASS" starttime="20170808 03:08:32.136"></status>
</kw>
<msg timestamp="20170808 03:08:32.137" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:32.137" status="PASS" starttime="20170808 03:08:31.196"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:32.137" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:32.137" status="PASS" starttime="20170808 03:08:32.137"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:08:32.138" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:08:32.138" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:08:32.138" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170808 03:08:32.138" status="PASS" starttime="20170808 03:08:32.138"></status>
</kw>
<msg timestamp="20170808 03:08:32.139" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170808 03:08:32.139" status="PASS" starttime="20170808 03:08:31.195"></status>
</kw>
<msg timestamp="20170808 03:08:32.139" level="INFO">${host_state} = Off</msg>
<status endtime="20170808 03:08:32.139" status="PASS" starttime="20170808 03:08:31.195"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170808 03:08:32.140" status="PASS" starttime="20170808 03:08:32.140"></status>
</kw>
<status endtime="20170808 03:08:32.140" status="PASS" starttime="20170808 03:08:24.873"></status>
</kw>
<status endtime="20170808 03:08:32.140" status="PASS" starttime="20170808 03:08:24.872"></status>
</kw>
<status endtime="20170808 03:08:32.140" status="PASS" starttime="20170808 03:08:23.670"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170808 03:08:32.142" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170808 03:08:32.142" status="PASS" starttime="20170808 03:08:32.141"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:08:32.144" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170808 03:08:32.144" status="PASS" starttime="20170808 03:08:32.143"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:08:32.148" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:08:32.148" status="PASS" starttime="20170808 03:08:32.147"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:08:32.149" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:08:32.149" status="PASS" starttime="20170808 03:08:32.148"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:08:32.150" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:08:32.150" status="PASS" starttime="20170808 03:08:32.149"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:08:32.151" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:08:32.151" status="PASS" starttime="20170808 03:08:32.150"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:08:32.517" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:08:32.517" status="PASS" starttime="20170808 03:08:32.152"></status>
</kw>
<msg timestamp="20170808 03:08:32.517" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:08:32.517" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:32.517" status="PASS" starttime="20170808 03:08:32.151"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:08:32.517" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:32.518" status="PASS" starttime="20170808 03:08:32.517"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:32.518" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:32.518" status="PASS" starttime="20170808 03:08:32.518"></status>
</kw>
<status endtime="20170808 03:08:32.518" status="PASS" starttime="20170808 03:08:32.146"></status>
</kw>
<status endtime="20170808 03:08:32.518" status="PASS" starttime="20170808 03:08:32.146"></status>
</kw>
<status endtime="20170808 03:08:32.519" status="PASS" starttime="20170808 03:08:32.145"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:08:32.519" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170808 03:08:32.519" status="PASS" starttime="20170808 03:08:32.519"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:08:32.520" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:08:32.520" status="PASS" starttime="20170808 03:08:32.520"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170808 03:08:32.520" status="PASS" starttime="20170808 03:08:32.520"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:08:32.522" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170808 03:08:32.522" status="PASS" starttime="20170808 03:08:32.522"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:08:32.523" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170808 03:08:32.523" status="PASS" starttime="20170808 03:08:32.523"></status>
</kw>
<status endtime="20170808 03:08:32.523" status="PASS" starttime="20170808 03:08:32.522"></status>
</kw>
<status endtime="20170808 03:08:32.523" status="PASS" starttime="20170808 03:08:32.521"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:08:32.950" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170808 03:08:32.950" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:32.950" status="PASS" starttime="20170808 03:08:32.524"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:08:32.951" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:08:32.951" status="PASS" starttime="20170808 03:08:32.951"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:08:32.952" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:08:32.953" status="PASS" starttime="20170808 03:08:32.952"></status>
</kw>
<status endtime="20170808 03:08:32.953" status="PASS" starttime="20170808 03:08:32.952"></status>
</kw>
<status endtime="20170808 03:08:32.953" status="PASS" starttime="20170808 03:08:32.950"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:08:32.953" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:08:32.954" status="PASS" starttime="20170808 03:08:32.953"></status>
</kw>
<msg timestamp="20170808 03:08:32.954" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:32.954" status="PASS" starttime="20170808 03:08:32.144"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:32.955" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:32.955" status="PASS" starttime="20170808 03:08:32.954"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170808 03:08:32.955" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:08:32.955" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:08:32.956" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170808 03:08:32.956" status="PASS" starttime="20170808 03:08:32.955"></status>
</kw>
<status endtime="20170808 03:08:32.956" status="PASS" starttime="20170808 03:08:32.142"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170808 03:08:32.956" status="PASS" starttime="20170808 03:08:32.956"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:08:32.961" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:08:32.962" status="PASS" starttime="20170808 03:08:32.961"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:08:32.962" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:08:32.962" status="PASS" starttime="20170808 03:08:32.962"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:08:32.963" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:08:32.963" status="PASS" starttime="20170808 03:08:32.962"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:08:32.963" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:08:32.963" status="PASS" starttime="20170808 03:08:32.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:08:33.882" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:08:33.882" status="PASS" starttime="20170808 03:08:32.964"></status>
</kw>
<msg timestamp="20170808 03:08:33.882" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:08:33.882" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:33.883" status="PASS" starttime="20170808 03:08:32.964"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:08:33.883" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:33.883" status="PASS" starttime="20170808 03:08:33.883"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:33.884" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:33.884" status="PASS" starttime="20170808 03:08:33.883"></status>
</kw>
<status endtime="20170808 03:08:33.884" status="PASS" starttime="20170808 03:08:32.960"></status>
</kw>
<status endtime="20170808 03:08:33.884" status="PASS" starttime="20170808 03:08:32.960"></status>
</kw>
<status endtime="20170808 03:08:33.884" status="PASS" starttime="20170808 03:08:32.959"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:08:33.885" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:08:33.885" status="PASS" starttime="20170808 03:08:33.884"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:08:33.887" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:08:33.887" status="PASS" starttime="20170808 03:08:33.886"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:08:33.888" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:08:33.888" status="PASS" starttime="20170808 03:08:33.888"></status>
</kw>
<status endtime="20170808 03:08:33.888" status="PASS" starttime="20170808 03:08:33.887"></status>
</kw>
<status endtime="20170808 03:08:33.888" status="PASS" starttime="20170808 03:08:33.885"></status>
</kw>
<status endtime="20170808 03:08:33.888" status="PASS" starttime="20170808 03:08:33.885"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:08:34.430" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:08:34.430" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:34.431" status="PASS" starttime="20170808 03:08:33.888"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:08:34.432" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:08:34.432" status="PASS" starttime="20170808 03:08:34.432"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:08:34.433" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:08:34.433" status="PASS" starttime="20170808 03:08:34.433"></status>
</kw>
<status endtime="20170808 03:08:34.433" status="PASS" starttime="20170808 03:08:34.432"></status>
</kw>
<status endtime="20170808 03:08:34.434" status="PASS" starttime="20170808 03:08:34.431"></status>
</kw>
<status endtime="20170808 03:08:34.434" status="PASS" starttime="20170808 03:08:34.431"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:08:34.434" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:08:34.434" status="PASS" starttime="20170808 03:08:34.434"></status>
</kw>
<msg timestamp="20170808 03:08:34.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:34.434" status="PASS" starttime="20170808 03:08:32.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:34.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:34.435" status="PASS" starttime="20170808 03:08:34.435"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:08:34.435" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:08:34.435" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:08:34.436" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:08:34.436" status="PASS" starttime="20170808 03:08:34.435"></status>
</kw>
<msg timestamp="20170808 03:08:34.436" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:08:34.436" status="PASS" starttime="20170808 03:08:32.958"></status>
</kw>
<msg timestamp="20170808 03:08:34.436" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:08:34.436" status="PASS" starttime="20170808 03:08:32.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:08:34.437" level="FAIL">On != Off</msg>
<status endtime="20170808 03:08:34.437" status="FAIL" starttime="20170808 03:08:34.436"></status>
</kw>
<status endtime="20170808 03:08:34.437" status="FAIL" starttime="20170808 03:08:32.957"></status>
</kw>
<status endtime="20170808 03:08:34.437" status="FAIL" starttime="20170808 03:08:32.957"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:08:44.443" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:08:44.444" status="PASS" starttime="20170808 03:08:44.443"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:08:44.444" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:08:44.444" status="PASS" starttime="20170808 03:08:44.444"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:08:44.445" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:08:44.445" status="PASS" starttime="20170808 03:08:44.445"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:08:44.446" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:08:44.446" status="PASS" starttime="20170808 03:08:44.445"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:08:44.630" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:08:44.630" status="PASS" starttime="20170808 03:08:44.446"></status>
</kw>
<msg timestamp="20170808 03:08:44.630" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:08:44.630" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:44.630" status="PASS" starttime="20170808 03:08:44.446"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:08:44.631" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:44.631" status="PASS" starttime="20170808 03:08:44.630"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:44.631" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:44.632" status="PASS" starttime="20170808 03:08:44.631"></status>
</kw>
<status endtime="20170808 03:08:44.632" status="PASS" starttime="20170808 03:08:44.442"></status>
</kw>
<status endtime="20170808 03:08:44.632" status="PASS" starttime="20170808 03:08:44.442"></status>
</kw>
<status endtime="20170808 03:08:44.632" status="PASS" starttime="20170808 03:08:44.441"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:08:44.632" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:08:44.632" status="PASS" starttime="20170808 03:08:44.632"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:08:44.635" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:08:44.635" status="PASS" starttime="20170808 03:08:44.634"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:08:44.636" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:08:44.636" status="PASS" starttime="20170808 03:08:44.635"></status>
</kw>
<status endtime="20170808 03:08:44.636" status="PASS" starttime="20170808 03:08:44.635"></status>
</kw>
<status endtime="20170808 03:08:44.636" status="PASS" starttime="20170808 03:08:44.633"></status>
</kw>
<status endtime="20170808 03:08:44.636" status="PASS" starttime="20170808 03:08:44.633"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:08:44.699" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:08:44.699" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:44.699" status="PASS" starttime="20170808 03:08:44.636"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:08:44.701" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:08:44.701" status="PASS" starttime="20170808 03:08:44.700"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:08:44.701" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:08:44.702" status="PASS" starttime="20170808 03:08:44.701"></status>
</kw>
<status endtime="20170808 03:08:44.702" status="PASS" starttime="20170808 03:08:44.701"></status>
</kw>
<status endtime="20170808 03:08:44.702" status="PASS" starttime="20170808 03:08:44.700"></status>
</kw>
<status endtime="20170808 03:08:44.702" status="PASS" starttime="20170808 03:08:44.699"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:08:44.702" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:08:44.702" status="PASS" starttime="20170808 03:08:44.702"></status>
</kw>
<msg timestamp="20170808 03:08:44.703" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:44.703" status="PASS" starttime="20170808 03:08:44.440"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:44.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:44.703" status="PASS" starttime="20170808 03:08:44.703"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:08:44.704" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:08:44.704" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:08:44.704" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:08:44.704" status="PASS" starttime="20170808 03:08:44.704"></status>
</kw>
<msg timestamp="20170808 03:08:44.704" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:08:44.704" status="PASS" starttime="20170808 03:08:44.440"></status>
</kw>
<msg timestamp="20170808 03:08:44.705" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:08:44.705" status="PASS" starttime="20170808 03:08:44.439"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:08:44.705" level="FAIL">On != Off</msg>
<status endtime="20170808 03:08:44.705" status="FAIL" starttime="20170808 03:08:44.705"></status>
</kw>
<status endtime="20170808 03:08:44.705" status="FAIL" starttime="20170808 03:08:44.438"></status>
</kw>
<status endtime="20170808 03:08:44.706" status="FAIL" starttime="20170808 03:08:44.438"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:08:54.711" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:08:54.711" status="PASS" starttime="20170808 03:08:54.710"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:08:54.712" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:08:54.712" status="PASS" starttime="20170808 03:08:54.711"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:08:54.712" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:08:54.712" status="PASS" starttime="20170808 03:08:54.712"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:08:54.713" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:08:54.713" status="PASS" starttime="20170808 03:08:54.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:08:54.932" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:08:54.932" status="PASS" starttime="20170808 03:08:54.714"></status>
</kw>
<msg timestamp="20170808 03:08:54.932" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:08:54.932" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:54.932" status="PASS" starttime="20170808 03:08:54.714"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:08:54.933" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:54.933" status="PASS" starttime="20170808 03:08:54.933"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:54.934" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:54.934" status="PASS" starttime="20170808 03:08:54.933"></status>
</kw>
<status endtime="20170808 03:08:54.934" status="PASS" starttime="20170808 03:08:54.710"></status>
</kw>
<status endtime="20170808 03:08:54.934" status="PASS" starttime="20170808 03:08:54.709"></status>
</kw>
<status endtime="20170808 03:08:54.934" status="PASS" starttime="20170808 03:08:54.709"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:08:54.935" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:08:54.935" status="PASS" starttime="20170808 03:08:54.934"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:08:54.937" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:08:54.937" status="PASS" starttime="20170808 03:08:54.936"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:08:54.938" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:08:54.938" status="PASS" starttime="20170808 03:08:54.937"></status>
</kw>
<status endtime="20170808 03:08:54.938" status="PASS" starttime="20170808 03:08:54.937"></status>
</kw>
<status endtime="20170808 03:08:54.938" status="PASS" starttime="20170808 03:08:54.935"></status>
</kw>
<status endtime="20170808 03:08:54.938" status="PASS" starttime="20170808 03:08:54.935"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:08:55.043" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:08:55.044" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:55.044" status="PASS" starttime="20170808 03:08:54.938"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:08:55.045" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:08:55.045" status="PASS" starttime="20170808 03:08:55.045"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:08:55.046" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:08:55.046" status="PASS" starttime="20170808 03:08:55.046"></status>
</kw>
<status endtime="20170808 03:08:55.046" status="PASS" starttime="20170808 03:08:55.045"></status>
</kw>
<status endtime="20170808 03:08:55.047" status="PASS" starttime="20170808 03:08:55.044"></status>
</kw>
<status endtime="20170808 03:08:55.047" status="PASS" starttime="20170808 03:08:55.044"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:08:55.047" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:08:55.047" status="PASS" starttime="20170808 03:08:55.047"></status>
</kw>
<msg timestamp="20170808 03:08:55.047" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:08:55.047" status="PASS" starttime="20170808 03:08:54.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:08:55.048" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:08:55.048" status="PASS" starttime="20170808 03:08:55.048"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:08:55.048" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:08:55.049" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:08:55.049" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:08:55.049" status="PASS" starttime="20170808 03:08:55.048"></status>
</kw>
<msg timestamp="20170808 03:08:55.049" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:08:55.049" status="PASS" starttime="20170808 03:08:54.707"></status>
</kw>
<msg timestamp="20170808 03:08:55.049" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:08:55.049" status="PASS" starttime="20170808 03:08:54.707"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:08:55.050" level="FAIL">On != Off</msg>
<status endtime="20170808 03:08:55.050" status="FAIL" starttime="20170808 03:08:55.050"></status>
</kw>
<status endtime="20170808 03:08:55.050" status="FAIL" starttime="20170808 03:08:54.707"></status>
</kw>
<status endtime="20170808 03:08:55.050" status="FAIL" starttime="20170808 03:08:54.706"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:09:05.058" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:09:05.058" status="PASS" starttime="20170808 03:09:05.058"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:09:05.059" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:09:05.059" status="PASS" starttime="20170808 03:09:05.059"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:09:05.060" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:09:05.060" status="PASS" starttime="20170808 03:09:05.059"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:09:05.060" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:09:05.060" status="PASS" starttime="20170808 03:09:05.060"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:09:05.877" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:09:05.877" status="PASS" starttime="20170808 03:09:05.061"></status>
</kw>
<msg timestamp="20170808 03:09:05.877" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:09:05.877" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:09:05.877" status="PASS" starttime="20170808 03:09:05.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:09:05.878" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:05.878" status="PASS" starttime="20170808 03:09:05.878"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:09:05.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:05.879" status="PASS" starttime="20170808 03:09:05.878"></status>
</kw>
<status endtime="20170808 03:09:05.879" status="PASS" starttime="20170808 03:09:05.057"></status>
</kw>
<status endtime="20170808 03:09:05.879" status="PASS" starttime="20170808 03:09:05.057"></status>
</kw>
<status endtime="20170808 03:09:05.879" status="PASS" starttime="20170808 03:09:05.056"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:09:05.880" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:09:05.880" status="PASS" starttime="20170808 03:09:05.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:09:05.882" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:09:05.882" status="PASS" starttime="20170808 03:09:05.881"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:09:05.883" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:09:05.883" status="PASS" starttime="20170808 03:09:05.882"></status>
</kw>
<status endtime="20170808 03:09:05.883" status="PASS" starttime="20170808 03:09:05.882"></status>
</kw>
<status endtime="20170808 03:09:05.883" status="PASS" starttime="20170808 03:09:05.880"></status>
</kw>
<status endtime="20170808 03:09:05.883" status="PASS" starttime="20170808 03:09:05.880"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:09:06.279" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:09:06.279" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:09:06.279" status="PASS" starttime="20170808 03:09:05.883"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:09:06.284" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:09:06.284" status="PASS" starttime="20170808 03:09:06.283"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:09:06.285" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:09:06.285" status="PASS" starttime="20170808 03:09:06.284"></status>
</kw>
<status endtime="20170808 03:09:06.285" status="PASS" starttime="20170808 03:09:06.284"></status>
</kw>
<status endtime="20170808 03:09:06.285" status="PASS" starttime="20170808 03:09:06.283"></status>
</kw>
<status endtime="20170808 03:09:06.285" status="PASS" starttime="20170808 03:09:06.280"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:09:06.286" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:09:06.286" status="PASS" starttime="20170808 03:09:06.285"></status>
</kw>
<msg timestamp="20170808 03:09:06.286" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:09:06.286" status="PASS" starttime="20170808 03:09:05.055"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:09:06.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:06.287" status="PASS" starttime="20170808 03:09:06.286"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:09:06.287" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:09:06.287" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:09:06.287" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:09:06.287" status="PASS" starttime="20170808 03:09:06.287"></status>
</kw>
<msg timestamp="20170808 03:09:06.288" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:09:06.288" status="PASS" starttime="20170808 03:09:05.054"></status>
</kw>
<msg timestamp="20170808 03:09:06.288" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:09:06.288" status="PASS" starttime="20170808 03:09:05.054"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:09:06.289" level="FAIL">On != Off</msg>
<status endtime="20170808 03:09:06.289" status="FAIL" starttime="20170808 03:09:06.288"></status>
</kw>
<status endtime="20170808 03:09:06.289" status="FAIL" starttime="20170808 03:09:05.053"></status>
</kw>
<status endtime="20170808 03:09:06.289" status="FAIL" starttime="20170808 03:09:05.051"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:09:16.294" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:09:16.295" status="PASS" starttime="20170808 03:09:16.294"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:09:16.295" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:09:16.295" status="PASS" starttime="20170808 03:09:16.295"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:09:16.296" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:09:16.296" status="PASS" starttime="20170808 03:09:16.295"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:09:16.296" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:09:16.296" status="PASS" starttime="20170808 03:09:16.296"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:09:16.557" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:09:16.557" status="PASS" starttime="20170808 03:09:16.297"></status>
</kw>
<msg timestamp="20170808 03:09:16.557" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:09:16.557" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:09:16.557" status="PASS" starttime="20170808 03:09:16.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:09:16.557" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:16.558" status="PASS" starttime="20170808 03:09:16.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:09:16.558" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:16.558" status="PASS" starttime="20170808 03:09:16.558"></status>
</kw>
<status endtime="20170808 03:09:16.558" status="PASS" starttime="20170808 03:09:16.293"></status>
</kw>
<status endtime="20170808 03:09:16.558" status="PASS" starttime="20170808 03:09:16.293"></status>
</kw>
<status endtime="20170808 03:09:16.559" status="PASS" starttime="20170808 03:09:16.292"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:09:16.559" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:09:16.559" status="PASS" starttime="20170808 03:09:16.559"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:09:16.561" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:09:16.561" status="PASS" starttime="20170808 03:09:16.561"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:09:16.562" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:09:16.562" status="PASS" starttime="20170808 03:09:16.562"></status>
</kw>
<status endtime="20170808 03:09:16.562" status="PASS" starttime="20170808 03:09:16.561"></status>
</kw>
<status endtime="20170808 03:09:16.562" status="PASS" starttime="20170808 03:09:16.560"></status>
</kw>
<status endtime="20170808 03:09:16.563" status="PASS" starttime="20170808 03:09:16.559"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:09:16.625" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:09:16.626" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:09:16.626" status="PASS" starttime="20170808 03:09:16.563"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:09:16.627" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:09:16.627" status="PASS" starttime="20170808 03:09:16.627"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:09:16.628" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:09:16.628" status="PASS" starttime="20170808 03:09:16.628"></status>
</kw>
<status endtime="20170808 03:09:16.628" status="PASS" starttime="20170808 03:09:16.627"></status>
</kw>
<status endtime="20170808 03:09:16.628" status="PASS" starttime="20170808 03:09:16.626"></status>
</kw>
<status endtime="20170808 03:09:16.629" status="PASS" starttime="20170808 03:09:16.626"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:09:16.629" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:09:16.629" status="PASS" starttime="20170808 03:09:16.629"></status>
</kw>
<msg timestamp="20170808 03:09:16.629" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:09:16.629" status="PASS" starttime="20170808 03:09:16.292"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:09:16.630" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:16.630" status="PASS" starttime="20170808 03:09:16.629"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:09:16.630" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:09:16.630" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:09:16.631" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:09:16.631" status="PASS" starttime="20170808 03:09:16.630"></status>
</kw>
<msg timestamp="20170808 03:09:16.631" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:09:16.631" status="PASS" starttime="20170808 03:09:16.291"></status>
</kw>
<msg timestamp="20170808 03:09:16.631" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:09:16.631" status="PASS" starttime="20170808 03:09:16.291"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:09:16.632" level="FAIL">On != Off</msg>
<status endtime="20170808 03:09:16.632" status="FAIL" starttime="20170808 03:09:16.632"></status>
</kw>
<status endtime="20170808 03:09:16.632" status="FAIL" starttime="20170808 03:09:16.290"></status>
</kw>
<status endtime="20170808 03:09:16.632" status="FAIL" starttime="20170808 03:09:16.290"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:09:26.638" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:09:26.638" status="PASS" starttime="20170808 03:09:26.638"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:09:26.639" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:09:26.639" status="PASS" starttime="20170808 03:09:26.639"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:09:26.639" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:09:26.640" status="PASS" starttime="20170808 03:09:26.639"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:09:26.640" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:09:26.640" status="PASS" starttime="20170808 03:09:26.640"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:09:26.819" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:09:26.819" status="PASS" starttime="20170808 03:09:26.641"></status>
</kw>
<msg timestamp="20170808 03:09:26.819" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:09:26.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:09:26.820" status="PASS" starttime="20170808 03:09:26.640"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:09:26.820" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:26.820" status="PASS" starttime="20170808 03:09:26.820"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:09:26.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:26.821" status="PASS" starttime="20170808 03:09:26.821"></status>
</kw>
<status endtime="20170808 03:09:26.821" status="PASS" starttime="20170808 03:09:26.637"></status>
</kw>
<status endtime="20170808 03:09:26.821" status="PASS" starttime="20170808 03:09:26.636"></status>
</kw>
<status endtime="20170808 03:09:26.821" status="PASS" starttime="20170808 03:09:26.636"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:09:26.822" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:09:26.822" status="PASS" starttime="20170808 03:09:26.822"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:09:26.826" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:09:26.826" status="PASS" starttime="20170808 03:09:26.825"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:09:26.827" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:09:26.827" status="PASS" starttime="20170808 03:09:26.826"></status>
</kw>
<status endtime="20170808 03:09:26.827" status="PASS" starttime="20170808 03:09:26.826"></status>
</kw>
<status endtime="20170808 03:09:26.827" status="PASS" starttime="20170808 03:09:26.823"></status>
</kw>
<status endtime="20170808 03:09:26.827" status="PASS" starttime="20170808 03:09:26.823"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:09:26.890" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:09:26.891" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:09:26.891" status="PASS" starttime="20170808 03:09:26.827"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:09:26.892" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:09:26.892" status="PASS" starttime="20170808 03:09:26.892"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:09:26.894" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:09:26.894" status="PASS" starttime="20170808 03:09:26.893"></status>
</kw>
<status endtime="20170808 03:09:26.894" status="PASS" starttime="20170808 03:09:26.893"></status>
</kw>
<status endtime="20170808 03:09:26.894" status="PASS" starttime="20170808 03:09:26.891"></status>
</kw>
<status endtime="20170808 03:09:26.894" status="PASS" starttime="20170808 03:09:26.891"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:09:26.894" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:09:26.894" status="PASS" starttime="20170808 03:09:26.894"></status>
</kw>
<msg timestamp="20170808 03:09:26.895" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:09:26.895" status="PASS" starttime="20170808 03:09:26.635"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:09:26.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:26.895" status="PASS" starttime="20170808 03:09:26.895"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:09:26.896" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:09:26.896" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:09:26.896" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:09:26.896" status="PASS" starttime="20170808 03:09:26.896"></status>
</kw>
<msg timestamp="20170808 03:09:26.896" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:09:26.896" status="PASS" starttime="20170808 03:09:26.634"></status>
</kw>
<msg timestamp="20170808 03:09:26.897" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:09:26.897" status="PASS" starttime="20170808 03:09:26.634"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:09:26.897" level="FAIL">On != Off</msg>
<status endtime="20170808 03:09:26.897" status="FAIL" starttime="20170808 03:09:26.897"></status>
</kw>
<status endtime="20170808 03:09:26.898" status="FAIL" starttime="20170808 03:09:26.634"></status>
</kw>
<status endtime="20170808 03:09:26.898" status="FAIL" starttime="20170808 03:09:26.633"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:09:36.903" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:09:36.903" status="PASS" starttime="20170808 03:09:36.903"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:09:36.904" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:09:36.904" status="PASS" starttime="20170808 03:09:36.904"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:09:36.905" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:09:36.905" status="PASS" starttime="20170808 03:09:36.904"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:09:36.905" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:09:36.905" status="PASS" starttime="20170808 03:09:36.905"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:09:37.085" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:09:37.085" status="PASS" starttime="20170808 03:09:36.906"></status>
</kw>
<msg timestamp="20170808 03:09:37.085" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:09:37.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:09:37.085" status="PASS" starttime="20170808 03:09:36.906"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:09:37.086" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:37.086" status="PASS" starttime="20170808 03:09:37.086"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:09:37.087" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:37.087" status="PASS" starttime="20170808 03:09:37.086"></status>
</kw>
<status endtime="20170808 03:09:37.087" status="PASS" starttime="20170808 03:09:36.902"></status>
</kw>
<status endtime="20170808 03:09:37.087" status="PASS" starttime="20170808 03:09:36.902"></status>
</kw>
<status endtime="20170808 03:09:37.087" status="PASS" starttime="20170808 03:09:36.901"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:09:37.088" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:09:37.088" status="PASS" starttime="20170808 03:09:37.087"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:09:37.090" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:09:37.090" status="PASS" starttime="20170808 03:09:37.089"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:09:37.091" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:09:37.091" status="PASS" starttime="20170808 03:09:37.090"></status>
</kw>
<status endtime="20170808 03:09:37.091" status="PASS" starttime="20170808 03:09:37.090"></status>
</kw>
<status endtime="20170808 03:09:37.091" status="PASS" starttime="20170808 03:09:37.088"></status>
</kw>
<status endtime="20170808 03:09:37.091" status="PASS" starttime="20170808 03:09:37.088"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:09:37.155" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:09:37.155" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:09:37.155" status="PASS" starttime="20170808 03:09:37.091"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:09:37.157" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:09:37.157" status="PASS" starttime="20170808 03:09:37.156"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:09:37.158" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:09:37.158" status="PASS" starttime="20170808 03:09:37.157"></status>
</kw>
<status endtime="20170808 03:09:37.158" status="PASS" starttime="20170808 03:09:37.157"></status>
</kw>
<status endtime="20170808 03:09:37.158" status="PASS" starttime="20170808 03:09:37.156"></status>
</kw>
<status endtime="20170808 03:09:37.158" status="PASS" starttime="20170808 03:09:37.155"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:09:37.158" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:09:37.158" status="PASS" starttime="20170808 03:09:37.158"></status>
</kw>
<msg timestamp="20170808 03:09:37.159" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:09:37.159" status="PASS" starttime="20170808 03:09:36.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:09:37.159" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:37.159" status="PASS" starttime="20170808 03:09:37.159"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:09:37.160" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:09:37.160" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:09:37.160" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:09:37.160" status="PASS" starttime="20170808 03:09:37.160"></status>
</kw>
<msg timestamp="20170808 03:09:37.160" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:09:37.160" status="PASS" starttime="20170808 03:09:36.900"></status>
</kw>
<msg timestamp="20170808 03:09:37.161" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:09:37.161" status="PASS" starttime="20170808 03:09:36.899"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:09:37.161" level="FAIL">On != Off</msg>
<status endtime="20170808 03:09:37.161" status="FAIL" starttime="20170808 03:09:37.161"></status>
</kw>
<status endtime="20170808 03:09:37.162" status="FAIL" starttime="20170808 03:09:36.899"></status>
</kw>
<status endtime="20170808 03:09:37.162" status="FAIL" starttime="20170808 03:09:36.898"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:09:47.167" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:09:47.167" status="PASS" starttime="20170808 03:09:47.167"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:09:47.168" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:09:47.168" status="PASS" starttime="20170808 03:09:47.168"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:09:47.169" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:09:47.169" status="PASS" starttime="20170808 03:09:47.168"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:09:47.169" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:09:47.169" status="PASS" starttime="20170808 03:09:47.169"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:09:48.242" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:09:48.242" status="PASS" starttime="20170808 03:09:47.170"></status>
</kw>
<msg timestamp="20170808 03:09:48.242" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:09:48.243" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:09:48.243" status="PASS" starttime="20170808 03:09:47.170"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:09:48.243" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:48.243" status="PASS" starttime="20170808 03:09:48.243"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:09:48.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:48.244" status="PASS" starttime="20170808 03:09:48.244"></status>
</kw>
<status endtime="20170808 03:09:48.244" status="PASS" starttime="20170808 03:09:47.166"></status>
</kw>
<status endtime="20170808 03:09:48.244" status="PASS" starttime="20170808 03:09:47.165"></status>
</kw>
<status endtime="20170808 03:09:48.244" status="PASS" starttime="20170808 03:09:47.165"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:09:48.245" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:09:48.245" status="PASS" starttime="20170808 03:09:48.245"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:09:48.247" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:09:48.247" status="PASS" starttime="20170808 03:09:48.246"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:09:48.248" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:09:48.248" status="PASS" starttime="20170808 03:09:48.248"></status>
</kw>
<status endtime="20170808 03:09:48.248" status="PASS" starttime="20170808 03:09:48.247"></status>
</kw>
<status endtime="20170808 03:09:48.248" status="PASS" starttime="20170808 03:09:48.246"></status>
</kw>
<status endtime="20170808 03:09:48.249" status="PASS" starttime="20170808 03:09:48.245"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:09:48.311" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:09:48.311" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:09:48.311" status="PASS" starttime="20170808 03:09:48.249"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:09:48.313" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:09:48.313" status="PASS" starttime="20170808 03:09:48.312"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:09:48.314" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:09:48.315" status="PASS" starttime="20170808 03:09:48.314"></status>
</kw>
<status endtime="20170808 03:09:48.315" status="PASS" starttime="20170808 03:09:48.313"></status>
</kw>
<status endtime="20170808 03:09:48.315" status="PASS" starttime="20170808 03:09:48.312"></status>
</kw>
<status endtime="20170808 03:09:48.315" status="PASS" starttime="20170808 03:09:48.312"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:09:48.315" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:09:48.315" status="PASS" starttime="20170808 03:09:48.315"></status>
</kw>
<msg timestamp="20170808 03:09:48.316" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:09:48.316" status="PASS" starttime="20170808 03:09:47.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:09:48.316" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:48.316" status="PASS" starttime="20170808 03:09:48.316"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:09:48.317" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:09:48.317" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:09:48.317" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:09:48.317" status="PASS" starttime="20170808 03:09:48.317"></status>
</kw>
<msg timestamp="20170808 03:09:48.317" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:09:48.317" status="PASS" starttime="20170808 03:09:47.164"></status>
</kw>
<msg timestamp="20170808 03:09:48.318" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:09:48.318" status="PASS" starttime="20170808 03:09:47.163"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:09:48.318" level="FAIL">On != Off</msg>
<status endtime="20170808 03:09:48.318" status="FAIL" starttime="20170808 03:09:48.318"></status>
</kw>
<status endtime="20170808 03:09:48.319" status="FAIL" starttime="20170808 03:09:47.163"></status>
</kw>
<status endtime="20170808 03:09:48.319" status="FAIL" starttime="20170808 03:09:47.162"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:09:58.324" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:09:58.324" status="PASS" starttime="20170808 03:09:58.323"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:09:58.325" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:09:58.325" status="PASS" starttime="20170808 03:09:58.324"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:09:58.325" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:09:58.325" status="PASS" starttime="20170808 03:09:58.325"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:09:58.326" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:09:58.326" status="PASS" starttime="20170808 03:09:58.326"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:09:59.162" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:09:59.162" status="PASS" starttime="20170808 03:09:58.327"></status>
</kw>
<msg timestamp="20170808 03:09:59.163" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:09:59.163" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:09:59.163" status="PASS" starttime="20170808 03:09:58.326"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:09:59.163" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:59.163" status="PASS" starttime="20170808 03:09:59.163"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:09:59.164" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:09:59.164" status="PASS" starttime="20170808 03:09:59.164"></status>
</kw>
<status endtime="20170808 03:09:59.164" status="PASS" starttime="20170808 03:09:58.323"></status>
</kw>
<status endtime="20170808 03:09:59.164" status="PASS" starttime="20170808 03:09:58.322"></status>
</kw>
<status endtime="20170808 03:09:59.164" status="PASS" starttime="20170808 03:09:58.322"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:09:59.165" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:09:59.165" status="PASS" starttime="20170808 03:09:59.165"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:09:59.167" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:09:59.167" status="PASS" starttime="20170808 03:09:59.166"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:09:59.168" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:09:59.168" status="PASS" starttime="20170808 03:09:59.168"></status>
</kw>
<status endtime="20170808 03:09:59.168" status="PASS" starttime="20170808 03:09:59.167"></status>
</kw>
<status endtime="20170808 03:09:59.168" status="PASS" starttime="20170808 03:09:59.166"></status>
</kw>
<status endtime="20170808 03:09:59.169" status="PASS" starttime="20170808 03:09:59.165"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:10:02.087" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:10:02.087" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:02.088" status="PASS" starttime="20170808 03:09:59.169"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:10:02.090" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:10:02.090" status="PASS" starttime="20170808 03:10:02.089"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:10:02.090" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:10:02.091" status="PASS" starttime="20170808 03:10:02.090"></status>
</kw>
<status endtime="20170808 03:10:02.091" status="PASS" starttime="20170808 03:10:02.090"></status>
</kw>
<status endtime="20170808 03:10:02.091" status="PASS" starttime="20170808 03:10:02.088"></status>
</kw>
<status endtime="20170808 03:10:02.091" status="PASS" starttime="20170808 03:10:02.088"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:10:02.091" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:10:02.091" status="PASS" starttime="20170808 03:10:02.091"></status>
</kw>
<msg timestamp="20170808 03:10:02.092" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:02.092" status="PASS" starttime="20170808 03:09:58.321"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:10:02.092" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:10:02.092" status="PASS" starttime="20170808 03:10:02.092"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:10:02.093" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:10:02.093" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:10:02.093" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:10:02.093" status="PASS" starttime="20170808 03:10:02.092"></status>
</kw>
<msg timestamp="20170808 03:10:02.093" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:10:02.093" status="PASS" starttime="20170808 03:09:58.321"></status>
</kw>
<msg timestamp="20170808 03:10:02.094" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:10:02.094" status="PASS" starttime="20170808 03:09:58.320"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:10:02.094" level="FAIL">On != Off</msg>
<status endtime="20170808 03:10:02.094" status="FAIL" starttime="20170808 03:10:02.094"></status>
</kw>
<status endtime="20170808 03:10:02.095" status="FAIL" starttime="20170808 03:09:58.320"></status>
</kw>
<status endtime="20170808 03:10:02.095" status="FAIL" starttime="20170808 03:09:58.319"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:10:12.100" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:10:12.101" status="PASS" starttime="20170808 03:10:12.100"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:10:12.101" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:10:12.101" status="PASS" starttime="20170808 03:10:12.101"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:10:12.102" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:10:12.102" status="PASS" starttime="20170808 03:10:12.101"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:10:12.102" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:10:12.102" status="PASS" starttime="20170808 03:10:12.102"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:10:12.284" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:10:12.284" status="PASS" starttime="20170808 03:10:12.103"></status>
</kw>
<msg timestamp="20170808 03:10:12.284" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:10:12.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:12.284" status="PASS" starttime="20170808 03:10:12.103"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:10:12.285" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:10:12.285" status="PASS" starttime="20170808 03:10:12.284"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:10:12.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:10:12.286" status="PASS" starttime="20170808 03:10:12.285"></status>
</kw>
<status endtime="20170808 03:10:12.286" status="PASS" starttime="20170808 03:10:12.099"></status>
</kw>
<status endtime="20170808 03:10:12.286" status="PASS" starttime="20170808 03:10:12.098"></status>
</kw>
<status endtime="20170808 03:10:12.286" status="PASS" starttime="20170808 03:10:12.098"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:10:12.287" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:10:12.287" status="PASS" starttime="20170808 03:10:12.286"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:10:12.290" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:10:12.290" status="PASS" starttime="20170808 03:10:12.289"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:10:12.291" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:10:12.291" status="PASS" starttime="20170808 03:10:12.291"></status>
</kw>
<status endtime="20170808 03:10:12.291" status="PASS" starttime="20170808 03:10:12.290"></status>
</kw>
<status endtime="20170808 03:10:12.292" status="PASS" starttime="20170808 03:10:12.288"></status>
</kw>
<status endtime="20170808 03:10:12.292" status="PASS" starttime="20170808 03:10:12.287"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:10:12.355" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:10:12.355" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:12.355" status="PASS" starttime="20170808 03:10:12.292"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:10:12.357" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:10:12.357" status="PASS" starttime="20170808 03:10:12.357"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:10:12.358" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:10:12.359" status="PASS" starttime="20170808 03:10:12.358"></status>
</kw>
<status endtime="20170808 03:10:12.359" status="PASS" starttime="20170808 03:10:12.357"></status>
</kw>
<status endtime="20170808 03:10:12.359" status="PASS" starttime="20170808 03:10:12.356"></status>
</kw>
<status endtime="20170808 03:10:12.359" status="PASS" starttime="20170808 03:10:12.356"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:10:12.359" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:10:12.359" status="PASS" starttime="20170808 03:10:12.359"></status>
</kw>
<msg timestamp="20170808 03:10:12.359" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:12.360" status="PASS" starttime="20170808 03:10:12.097"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:10:12.360" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:10:12.360" status="PASS" starttime="20170808 03:10:12.360"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:10:12.361" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:10:12.361" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:10:12.361" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:10:12.361" status="PASS" starttime="20170808 03:10:12.360"></status>
</kw>
<msg timestamp="20170808 03:10:12.361" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:10:12.361" status="PASS" starttime="20170808 03:10:12.097"></status>
</kw>
<msg timestamp="20170808 03:10:12.362" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:10:12.362" status="PASS" starttime="20170808 03:10:12.096"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:10:12.362" level="FAIL">On != Off</msg>
<status endtime="20170808 03:10:12.362" status="FAIL" starttime="20170808 03:10:12.362"></status>
</kw>
<status endtime="20170808 03:10:12.363" status="FAIL" starttime="20170808 03:10:12.096"></status>
</kw>
<status endtime="20170808 03:10:12.363" status="FAIL" starttime="20170808 03:10:12.095"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:10:22.368" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:10:22.368" status="PASS" starttime="20170808 03:10:22.367"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:10:22.369" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:10:22.369" status="PASS" starttime="20170808 03:10:22.368"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:10:22.369" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:10:22.369" status="PASS" starttime="20170808 03:10:22.369"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:10:22.370" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:10:22.370" status="PASS" starttime="20170808 03:10:22.370"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:10:22.547" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:10:22.547" status="PASS" starttime="20170808 03:10:22.371"></status>
</kw>
<msg timestamp="20170808 03:10:22.548" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:10:22.548" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:22.548" status="PASS" starttime="20170808 03:10:22.370"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:10:22.548" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:10:22.548" status="PASS" starttime="20170808 03:10:22.548"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:10:22.549" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:10:22.549" status="PASS" starttime="20170808 03:10:22.549"></status>
</kw>
<status endtime="20170808 03:10:22.549" status="PASS" starttime="20170808 03:10:22.367"></status>
</kw>
<status endtime="20170808 03:10:22.549" status="PASS" starttime="20170808 03:10:22.366"></status>
</kw>
<status endtime="20170808 03:10:22.549" status="PASS" starttime="20170808 03:10:22.366"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:10:22.550" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:10:22.550" status="PASS" starttime="20170808 03:10:22.550"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:10:22.552" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:10:22.552" status="PASS" starttime="20170808 03:10:22.551"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:10:22.553" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:10:22.553" status="PASS" starttime="20170808 03:10:22.553"></status>
</kw>
<status endtime="20170808 03:10:22.553" status="PASS" starttime="20170808 03:10:22.552"></status>
</kw>
<status endtime="20170808 03:10:22.553" status="PASS" starttime="20170808 03:10:22.551"></status>
</kw>
<status endtime="20170808 03:10:22.553" status="PASS" starttime="20170808 03:10:22.550"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:10:22.617" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:10:22.617" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:22.617" status="PASS" starttime="20170808 03:10:22.554"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:10:22.619" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:10:22.619" status="PASS" starttime="20170808 03:10:22.618"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:10:22.620" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:10:22.620" status="PASS" starttime="20170808 03:10:22.619"></status>
</kw>
<status endtime="20170808 03:10:22.620" status="PASS" starttime="20170808 03:10:22.619"></status>
</kw>
<status endtime="20170808 03:10:22.620" status="PASS" starttime="20170808 03:10:22.618"></status>
</kw>
<status endtime="20170808 03:10:22.620" status="PASS" starttime="20170808 03:10:22.617"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:10:22.620" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:10:22.620" status="PASS" starttime="20170808 03:10:22.620"></status>
</kw>
<msg timestamp="20170808 03:10:22.621" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:22.621" status="PASS" starttime="20170808 03:10:22.365"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:10:22.621" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:10:22.621" status="PASS" starttime="20170808 03:10:22.621"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:10:22.622" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:10:22.622" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:10:22.622" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:10:22.622" status="PASS" starttime="20170808 03:10:22.622"></status>
</kw>
<msg timestamp="20170808 03:10:22.622" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:10:22.622" status="PASS" starttime="20170808 03:10:22.365"></status>
</kw>
<msg timestamp="20170808 03:10:22.623" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:10:22.623" status="PASS" starttime="20170808 03:10:22.364"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:10:22.623" level="FAIL">On != Off</msg>
<status endtime="20170808 03:10:22.623" status="FAIL" starttime="20170808 03:10:22.623"></status>
</kw>
<status endtime="20170808 03:10:22.623" status="FAIL" starttime="20170808 03:10:22.364"></status>
</kw>
<status endtime="20170808 03:10:22.624" status="FAIL" starttime="20170808 03:10:22.363"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:10:32.629" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:10:32.629" status="PASS" starttime="20170808 03:10:32.629"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:10:32.630" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:10:32.630" status="PASS" starttime="20170808 03:10:32.630"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:10:32.631" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:10:32.631" status="PASS" starttime="20170808 03:10:32.630"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:10:32.631" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:10:32.631" status="PASS" starttime="20170808 03:10:32.631"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:10:33.320" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:10:33.320" status="PASS" starttime="20170808 03:10:32.632"></status>
</kw>
<msg timestamp="20170808 03:10:33.320" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:10:33.320" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:33.320" status="PASS" starttime="20170808 03:10:32.632"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:10:33.321" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:10:33.321" status="PASS" starttime="20170808 03:10:33.320"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:10:33.321" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:10:33.321" status="PASS" starttime="20170808 03:10:33.321"></status>
</kw>
<status endtime="20170808 03:10:33.322" status="PASS" starttime="20170808 03:10:32.628"></status>
</kw>
<status endtime="20170808 03:10:33.322" status="PASS" starttime="20170808 03:10:32.627"></status>
</kw>
<status endtime="20170808 03:10:33.322" status="PASS" starttime="20170808 03:10:32.627"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:10:33.322" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:10:33.322" status="PASS" starttime="20170808 03:10:33.322"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:10:33.325" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:10:33.325" status="PASS" starttime="20170808 03:10:33.324"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:10:33.327" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:10:33.327" status="PASS" starttime="20170808 03:10:33.326"></status>
</kw>
<status endtime="20170808 03:10:33.327" status="PASS" starttime="20170808 03:10:33.326"></status>
</kw>
<status endtime="20170808 03:10:33.327" status="PASS" starttime="20170808 03:10:33.323"></status>
</kw>
<status endtime="20170808 03:10:33.327" status="PASS" starttime="20170808 03:10:33.323"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:10:34.029" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:10:34.029" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:34.029" status="PASS" starttime="20170808 03:10:33.327"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:10:34.031" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:10:34.031" status="PASS" starttime="20170808 03:10:34.030"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:10:34.035" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:10:34.035" status="PASS" starttime="20170808 03:10:34.032"></status>
</kw>
<status endtime="20170808 03:10:34.035" status="PASS" starttime="20170808 03:10:34.031"></status>
</kw>
<status endtime="20170808 03:10:34.035" status="PASS" starttime="20170808 03:10:34.030"></status>
</kw>
<status endtime="20170808 03:10:34.035" status="PASS" starttime="20170808 03:10:34.029"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:10:34.036" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:10:34.036" status="PASS" starttime="20170808 03:10:34.036"></status>
</kw>
<msg timestamp="20170808 03:10:34.036" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:34.036" status="PASS" starttime="20170808 03:10:32.626"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:10:34.037" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:10:34.037" status="PASS" starttime="20170808 03:10:34.036"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:10:34.037" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:10:34.037" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:10:34.037" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:10:34.037" status="PASS" starttime="20170808 03:10:34.037"></status>
</kw>
<msg timestamp="20170808 03:10:34.038" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:10:34.038" status="PASS" starttime="20170808 03:10:32.625"></status>
</kw>
<msg timestamp="20170808 03:10:34.038" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:10:34.038" status="PASS" starttime="20170808 03:10:32.625"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:10:34.039" level="FAIL">On != Off</msg>
<status endtime="20170808 03:10:34.039" status="FAIL" starttime="20170808 03:10:34.038"></status>
</kw>
<status endtime="20170808 03:10:34.039" status="FAIL" starttime="20170808 03:10:32.625"></status>
</kw>
<status endtime="20170808 03:10:34.039" status="FAIL" starttime="20170808 03:10:32.624"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:10:44.045" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:10:44.046" status="PASS" starttime="20170808 03:10:44.045"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:10:44.046" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:10:44.046" status="PASS" starttime="20170808 03:10:44.046"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:10:44.047" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:10:44.047" status="PASS" starttime="20170808 03:10:44.047"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:10:44.048" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:10:44.048" status="PASS" starttime="20170808 03:10:44.048"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:10:44.288" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:10:44.288" status="PASS" starttime="20170808 03:10:44.049"></status>
</kw>
<msg timestamp="20170808 03:10:44.289" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:10:44.289" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:44.289" status="PASS" starttime="20170808 03:10:44.049"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:10:44.289" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:10:44.289" status="PASS" starttime="20170808 03:10:44.289"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:10:44.290" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:10:44.290" status="PASS" starttime="20170808 03:10:44.290"></status>
</kw>
<status endtime="20170808 03:10:44.290" status="PASS" starttime="20170808 03:10:44.044"></status>
</kw>
<status endtime="20170808 03:10:44.290" status="PASS" starttime="20170808 03:10:44.043"></status>
</kw>
<status endtime="20170808 03:10:44.291" status="PASS" starttime="20170808 03:10:44.042"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:10:44.291" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:10:44.291" status="PASS" starttime="20170808 03:10:44.291"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:10:44.293" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:10:44.293" status="PASS" starttime="20170808 03:10:44.293"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:10:44.294" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:10:44.294" status="PASS" starttime="20170808 03:10:44.294"></status>
</kw>
<status endtime="20170808 03:10:44.295" status="PASS" starttime="20170808 03:10:44.294"></status>
</kw>
<status endtime="20170808 03:10:44.295" status="PASS" starttime="20170808 03:10:44.292"></status>
</kw>
<status endtime="20170808 03:10:44.295" status="PASS" starttime="20170808 03:10:44.291"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:10:45.502" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:10:45.503" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:45.503" status="PASS" starttime="20170808 03:10:44.295"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:10:45.504" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:10:45.504" status="PASS" starttime="20170808 03:10:45.504"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:10:45.505" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:10:45.505" status="PASS" starttime="20170808 03:10:45.505"></status>
</kw>
<status endtime="20170808 03:10:45.506" status="PASS" starttime="20170808 03:10:45.505"></status>
</kw>
<status endtime="20170808 03:10:45.506" status="PASS" starttime="20170808 03:10:45.503"></status>
</kw>
<status endtime="20170808 03:10:45.506" status="PASS" starttime="20170808 03:10:45.503"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:10:45.506" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:10:45.506" status="PASS" starttime="20170808 03:10:45.506"></status>
</kw>
<msg timestamp="20170808 03:10:45.506" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:45.506" status="PASS" starttime="20170808 03:10:44.041"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:10:45.507" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:10:45.507" status="PASS" starttime="20170808 03:10:45.507"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:10:45.508" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:10:45.508" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:10:45.508" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:10:45.508" status="PASS" starttime="20170808 03:10:45.507"></status>
</kw>
<msg timestamp="20170808 03:10:45.508" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:10:45.508" status="PASS" starttime="20170808 03:10:44.041"></status>
</kw>
<msg timestamp="20170808 03:10:45.508" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:10:45.508" status="PASS" starttime="20170808 03:10:44.040"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:10:45.509" level="FAIL">On != Off</msg>
<status endtime="20170808 03:10:45.509" status="FAIL" starttime="20170808 03:10:45.509"></status>
</kw>
<status endtime="20170808 03:10:45.509" status="FAIL" starttime="20170808 03:10:44.040"></status>
</kw>
<status endtime="20170808 03:10:45.509" status="FAIL" starttime="20170808 03:10:44.039"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:10:55.515" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:10:55.515" status="PASS" starttime="20170808 03:10:55.514"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:10:55.515" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:10:55.516" status="PASS" starttime="20170808 03:10:55.515"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:10:55.516" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:10:55.516" status="PASS" starttime="20170808 03:10:55.516"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:10:55.517" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:10:55.517" status="PASS" starttime="20170808 03:10:55.516"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:10:55.695" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:10:55.695" status="PASS" starttime="20170808 03:10:55.518"></status>
</kw>
<msg timestamp="20170808 03:10:55.695" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:10:55.695" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:55.695" status="PASS" starttime="20170808 03:10:55.517"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:10:55.696" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:10:55.696" status="PASS" starttime="20170808 03:10:55.695"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:10:55.697" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:10:55.697" status="PASS" starttime="20170808 03:10:55.696"></status>
</kw>
<status endtime="20170808 03:10:55.697" status="PASS" starttime="20170808 03:10:55.514"></status>
</kw>
<status endtime="20170808 03:10:55.697" status="PASS" starttime="20170808 03:10:55.513"></status>
</kw>
<status endtime="20170808 03:10:55.697" status="PASS" starttime="20170808 03:10:55.512"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:10:55.698" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:10:55.698" status="PASS" starttime="20170808 03:10:55.697"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:10:55.700" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:10:55.700" status="PASS" starttime="20170808 03:10:55.699"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:10:55.701" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:10:55.701" status="PASS" starttime="20170808 03:10:55.700"></status>
</kw>
<status endtime="20170808 03:10:55.701" status="PASS" starttime="20170808 03:10:55.700"></status>
</kw>
<status endtime="20170808 03:10:55.701" status="PASS" starttime="20170808 03:10:55.698"></status>
</kw>
<status endtime="20170808 03:10:55.701" status="PASS" starttime="20170808 03:10:55.698"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:10:55.764" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:10:55.764" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:55.764" status="PASS" starttime="20170808 03:10:55.701"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:10:55.767" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:10:55.767" status="PASS" starttime="20170808 03:10:55.766"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:10:55.768" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:10:55.768" status="PASS" starttime="20170808 03:10:55.767"></status>
</kw>
<status endtime="20170808 03:10:55.768" status="PASS" starttime="20170808 03:10:55.767"></status>
</kw>
<status endtime="20170808 03:10:55.768" status="PASS" starttime="20170808 03:10:55.765"></status>
</kw>
<status endtime="20170808 03:10:55.768" status="PASS" starttime="20170808 03:10:55.764"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:10:55.768" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:10:55.768" status="PASS" starttime="20170808 03:10:55.768"></status>
</kw>
<msg timestamp="20170808 03:10:55.769" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:10:55.769" status="PASS" starttime="20170808 03:10:55.512"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:10:55.769" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:10:55.769" status="PASS" starttime="20170808 03:10:55.769"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:10:55.770" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:10:55.770" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:10:55.770" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:10:55.770" status="PASS" starttime="20170808 03:10:55.770"></status>
</kw>
<msg timestamp="20170808 03:10:55.770" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:10:55.770" status="PASS" starttime="20170808 03:10:55.511"></status>
</kw>
<msg timestamp="20170808 03:10:55.771" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:10:55.771" status="PASS" starttime="20170808 03:10:55.511"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:10:55.771" level="FAIL">On != Off</msg>
<status endtime="20170808 03:10:55.771" status="FAIL" starttime="20170808 03:10:55.771"></status>
</kw>
<status endtime="20170808 03:10:55.771" status="FAIL" starttime="20170808 03:10:55.510"></status>
</kw>
<status endtime="20170808 03:10:55.772" status="FAIL" starttime="20170808 03:10:55.510"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:11:05.776" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:11:05.777" status="PASS" starttime="20170808 03:11:05.776"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:11:05.777" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:11:05.777" status="PASS" starttime="20170808 03:11:05.777"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:11:05.778" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:11:05.778" status="PASS" starttime="20170808 03:11:05.778"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:11:05.779" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:11:05.779" status="PASS" starttime="20170808 03:11:05.778"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:11:05.972" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:11:05.972" status="PASS" starttime="20170808 03:11:05.779"></status>
</kw>
<msg timestamp="20170808 03:11:05.972" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:11:05.972" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:11:05.972" status="PASS" starttime="20170808 03:11:05.779"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:11:05.973" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:11:05.973" status="PASS" starttime="20170808 03:11:05.972"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:11:05.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:11:05.973" status="PASS" starttime="20170808 03:11:05.973"></status>
</kw>
<status endtime="20170808 03:11:05.974" status="PASS" starttime="20170808 03:11:05.776"></status>
</kw>
<status endtime="20170808 03:11:05.974" status="PASS" starttime="20170808 03:11:05.775"></status>
</kw>
<status endtime="20170808 03:11:05.974" status="PASS" starttime="20170808 03:11:05.774"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:11:05.974" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:11:05.974" status="PASS" starttime="20170808 03:11:05.974"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:11:05.976" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:11:05.976" status="PASS" starttime="20170808 03:11:05.976"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:11:05.977" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:11:05.977" status="PASS" starttime="20170808 03:11:05.977"></status>
</kw>
<status endtime="20170808 03:11:05.978" status="PASS" starttime="20170808 03:11:05.977"></status>
</kw>
<status endtime="20170808 03:11:05.978" status="PASS" starttime="20170808 03:11:05.975"></status>
</kw>
<status endtime="20170808 03:11:05.978" status="PASS" starttime="20170808 03:11:05.975"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:11:06.042" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:11:06.042" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:11:06.042" status="PASS" starttime="20170808 03:11:05.978"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:11:06.044" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:11:06.044" status="PASS" starttime="20170808 03:11:06.043"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:11:06.045" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:11:06.045" status="PASS" starttime="20170808 03:11:06.045"></status>
</kw>
<status endtime="20170808 03:11:06.045" status="PASS" starttime="20170808 03:11:06.044"></status>
</kw>
<status endtime="20170808 03:11:06.045" status="PASS" starttime="20170808 03:11:06.043"></status>
</kw>
<status endtime="20170808 03:11:06.045" status="PASS" starttime="20170808 03:11:06.042"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:11:06.046" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:11:06.046" status="PASS" starttime="20170808 03:11:06.046"></status>
</kw>
<msg timestamp="20170808 03:11:06.046" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:11:06.046" status="PASS" starttime="20170808 03:11:05.774"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:11:06.047" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:11:06.047" status="PASS" starttime="20170808 03:11:06.046"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:11:06.047" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:11:06.047" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:11:06.047" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:11:06.047" status="PASS" starttime="20170808 03:11:06.047"></status>
</kw>
<msg timestamp="20170808 03:11:06.048" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:11:06.048" status="PASS" starttime="20170808 03:11:05.773"></status>
</kw>
<msg timestamp="20170808 03:11:06.048" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:11:06.048" status="PASS" starttime="20170808 03:11:05.773"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:11:06.049" level="FAIL">On != Off</msg>
<status endtime="20170808 03:11:06.049" status="FAIL" starttime="20170808 03:11:06.048"></status>
</kw>
<status endtime="20170808 03:11:06.049" status="FAIL" starttime="20170808 03:11:05.773"></status>
</kw>
<status endtime="20170808 03:11:06.049" status="FAIL" starttime="20170808 03:11:05.772"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:11:16.054" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:11:16.055" status="PASS" starttime="20170808 03:11:16.054"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:11:16.055" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:11:16.055" status="PASS" starttime="20170808 03:11:16.055"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:11:16.056" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:11:16.056" status="PASS" starttime="20170808 03:11:16.056"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:11:16.057" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:11:16.057" status="PASS" starttime="20170808 03:11:16.056"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:11:16.711" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:11:16.711" status="PASS" starttime="20170808 03:11:16.057"></status>
</kw>
<msg timestamp="20170808 03:11:16.711" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:11:16.711" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:11:16.711" status="PASS" starttime="20170808 03:11:16.057"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:11:16.712" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:11:16.712" status="PASS" starttime="20170808 03:11:16.712"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:11:16.713" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:11:16.713" status="PASS" starttime="20170808 03:11:16.712"></status>
</kw>
<status endtime="20170808 03:11:16.713" status="PASS" starttime="20170808 03:11:16.053"></status>
</kw>
<status endtime="20170808 03:11:16.713" status="PASS" starttime="20170808 03:11:16.053"></status>
</kw>
<status endtime="20170808 03:11:16.713" status="PASS" starttime="20170808 03:11:16.052"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:11:16.714" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:11:16.714" status="PASS" starttime="20170808 03:11:16.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:11:16.716" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:11:16.716" status="PASS" starttime="20170808 03:11:16.715"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:11:16.717" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:11:16.717" status="PASS" starttime="20170808 03:11:16.717"></status>
</kw>
<status endtime="20170808 03:11:16.717" status="PASS" starttime="20170808 03:11:16.716"></status>
</kw>
<status endtime="20170808 03:11:16.717" status="PASS" starttime="20170808 03:11:16.714"></status>
</kw>
<status endtime="20170808 03:11:16.717" status="PASS" starttime="20170808 03:11:16.714"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:11:21.180" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:11:21.180" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:11:21.180" status="PASS" starttime="20170808 03:11:16.717"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:11:21.182" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:11:21.182" status="PASS" starttime="20170808 03:11:21.182"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:11:21.183" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:11:21.183" status="PASS" starttime="20170808 03:11:21.183"></status>
</kw>
<status endtime="20170808 03:11:21.184" status="PASS" starttime="20170808 03:11:21.182"></status>
</kw>
<status endtime="20170808 03:11:21.184" status="PASS" starttime="20170808 03:11:21.181"></status>
</kw>
<status endtime="20170808 03:11:21.184" status="PASS" starttime="20170808 03:11:21.181"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:11:21.184" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:11:21.184" status="PASS" starttime="20170808 03:11:21.184"></status>
</kw>
<msg timestamp="20170808 03:11:21.184" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:11:21.184" status="PASS" starttime="20170808 03:11:16.051"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:11:21.185" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:11:21.185" status="PASS" starttime="20170808 03:11:21.185"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:11:21.186" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:11:21.186" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:11:21.186" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:11:21.186" status="PASS" starttime="20170808 03:11:21.185"></status>
</kw>
<msg timestamp="20170808 03:11:21.186" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:11:21.186" status="PASS" starttime="20170808 03:11:16.051"></status>
</kw>
<msg timestamp="20170808 03:11:21.186" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:11:21.186" status="PASS" starttime="20170808 03:11:16.050"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:11:21.187" level="FAIL">On != Off</msg>
<status endtime="20170808 03:11:21.187" status="FAIL" starttime="20170808 03:11:21.187"></status>
</kw>
<status endtime="20170808 03:11:21.187" status="FAIL" starttime="20170808 03:11:16.050"></status>
</kw>
<status endtime="20170808 03:11:21.188" status="FAIL" starttime="20170808 03:11:16.050"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:11:31.192" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:11:31.193" status="PASS" starttime="20170808 03:11:31.192"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:11:31.193" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:11:31.193" status="PASS" starttime="20170808 03:11:31.193"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:11:31.194" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:11:31.194" status="PASS" starttime="20170808 03:11:31.193"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:11:31.194" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:11:31.195" status="PASS" starttime="20170808 03:11:31.194"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:11:31.389" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:11:31.390" status="PASS" starttime="20170808 03:11:31.195"></status>
</kw>
<msg timestamp="20170808 03:11:31.390" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:11:31.390" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:11:31.390" status="PASS" starttime="20170808 03:11:31.195"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:11:31.390" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:11:31.390" status="PASS" starttime="20170808 03:11:31.390"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:11:31.391" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:11:31.391" status="PASS" starttime="20170808 03:11:31.391"></status>
</kw>
<status endtime="20170808 03:11:31.391" status="PASS" starttime="20170808 03:11:31.191"></status>
</kw>
<status endtime="20170808 03:11:31.391" status="PASS" starttime="20170808 03:11:31.191"></status>
</kw>
<status endtime="20170808 03:11:31.391" status="PASS" starttime="20170808 03:11:31.190"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:11:31.392" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:11:31.392" status="PASS" starttime="20170808 03:11:31.392"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:11:31.395" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:11:31.395" status="PASS" starttime="20170808 03:11:31.395"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:11:31.396" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:11:31.396" status="PASS" starttime="20170808 03:11:31.396"></status>
</kw>
<status endtime="20170808 03:11:31.397" status="PASS" starttime="20170808 03:11:31.396"></status>
</kw>
<status endtime="20170808 03:11:31.397" status="PASS" starttime="20170808 03:11:31.393"></status>
</kw>
<status endtime="20170808 03:11:31.397" status="PASS" starttime="20170808 03:11:31.393"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:11:31.476" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:11:31.476" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:11:31.476" status="PASS" starttime="20170808 03:11:31.397"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:11:31.478" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:11:31.478" status="PASS" starttime="20170808 03:11:31.478"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:11:31.479" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:11:31.479" status="PASS" starttime="20170808 03:11:31.479"></status>
</kw>
<status endtime="20170808 03:11:31.479" status="PASS" starttime="20170808 03:11:31.478"></status>
</kw>
<status endtime="20170808 03:11:31.479" status="PASS" starttime="20170808 03:11:31.477"></status>
</kw>
<status endtime="20170808 03:11:31.480" status="PASS" starttime="20170808 03:11:31.477"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:11:31.480" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:11:31.480" status="PASS" starttime="20170808 03:11:31.480"></status>
</kw>
<msg timestamp="20170808 03:11:31.480" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:11:31.480" status="PASS" starttime="20170808 03:11:31.190"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:11:31.481" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:11:31.481" status="PASS" starttime="20170808 03:11:31.480"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:11:31.481" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:11:31.482" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:11:31.482" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:11:31.482" status="PASS" starttime="20170808 03:11:31.481"></status>
</kw>
<msg timestamp="20170808 03:11:31.482" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:11:31.482" status="PASS" starttime="20170808 03:11:31.189"></status>
</kw>
<msg timestamp="20170808 03:11:31.482" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:11:31.482" status="PASS" starttime="20170808 03:11:31.189"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:11:31.483" level="FAIL">On != Off</msg>
<status endtime="20170808 03:11:31.483" status="FAIL" starttime="20170808 03:11:31.483"></status>
</kw>
<status endtime="20170808 03:11:31.483" status="FAIL" starttime="20170808 03:11:31.188"></status>
</kw>
<status endtime="20170808 03:11:31.483" status="FAIL" starttime="20170808 03:11:31.188"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:11:41.489" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:11:41.489" status="PASS" starttime="20170808 03:11:41.488"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:11:41.490" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:11:41.490" status="PASS" starttime="20170808 03:11:41.489"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:11:41.490" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:11:41.490" status="PASS" starttime="20170808 03:11:41.490"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:11:41.491" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:11:41.491" status="PASS" starttime="20170808 03:11:41.490"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:11:41.673" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:11:41.673" status="PASS" starttime="20170808 03:11:41.492"></status>
</kw>
<msg timestamp="20170808 03:11:41.673" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:11:41.673" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:11:41.673" status="PASS" starttime="20170808 03:11:41.491"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:11:41.674" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:11:41.674" status="PASS" starttime="20170808 03:11:41.674"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:11:41.675" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:11:41.675" status="PASS" starttime="20170808 03:11:41.674"></status>
</kw>
<status endtime="20170808 03:11:41.675" status="PASS" starttime="20170808 03:11:41.487"></status>
</kw>
<status endtime="20170808 03:11:41.675" status="PASS" starttime="20170808 03:11:41.487"></status>
</kw>
<status endtime="20170808 03:11:41.675" status="PASS" starttime="20170808 03:11:41.486"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:11:41.676" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:11:41.676" status="PASS" starttime="20170808 03:11:41.675"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:11:41.678" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:11:41.678" status="PASS" starttime="20170808 03:11:41.677"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:11:41.679" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:11:41.679" status="PASS" starttime="20170808 03:11:41.679"></status>
</kw>
<status endtime="20170808 03:11:41.679" status="PASS" starttime="20170808 03:11:41.678"></status>
</kw>
<status endtime="20170808 03:11:41.679" status="PASS" starttime="20170808 03:11:41.676"></status>
</kw>
<status endtime="20170808 03:11:41.679" status="PASS" starttime="20170808 03:11:41.676"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:11:41.751" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:11:41.752" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:11:41.752" status="PASS" starttime="20170808 03:11:41.679"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:11:41.753" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:11:41.753" status="PASS" starttime="20170808 03:11:41.753"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:11:41.755" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:11:41.755" status="PASS" starttime="20170808 03:11:41.754"></status>
</kw>
<status endtime="20170808 03:11:41.755" status="PASS" starttime="20170808 03:11:41.754"></status>
</kw>
<status endtime="20170808 03:11:41.755" status="PASS" starttime="20170808 03:11:41.752"></status>
</kw>
<status endtime="20170808 03:11:41.755" status="PASS" starttime="20170808 03:11:41.752"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:11:41.755" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:11:41.755" status="PASS" starttime="20170808 03:11:41.755"></status>
</kw>
<msg timestamp="20170808 03:11:41.756" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:11:41.756" status="PASS" starttime="20170808 03:11:41.486"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:11:41.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:11:41.756" status="PASS" starttime="20170808 03:11:41.756"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:11:41.757" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:11:41.757" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:11:41.757" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:11:41.757" status="PASS" starttime="20170808 03:11:41.757"></status>
</kw>
<msg timestamp="20170808 03:11:41.757" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:11:41.757" status="PASS" starttime="20170808 03:11:41.485"></status>
</kw>
<msg timestamp="20170808 03:11:41.758" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:11:41.758" status="PASS" starttime="20170808 03:11:41.485"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:11:41.758" level="FAIL">On != Off</msg>
<status endtime="20170808 03:11:41.758" status="FAIL" starttime="20170808 03:11:41.758"></status>
</kw>
<status endtime="20170808 03:11:41.759" status="FAIL" starttime="20170808 03:11:41.484"></status>
</kw>
<status endtime="20170808 03:11:41.759" status="FAIL" starttime="20170808 03:11:41.484"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:11:51.764" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:11:51.764" status="PASS" starttime="20170808 03:11:51.763"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:11:51.765" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:11:51.765" status="PASS" starttime="20170808 03:11:51.764"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:11:51.765" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:11:51.765" status="PASS" starttime="20170808 03:11:51.765"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:11:51.766" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:11:51.766" status="PASS" starttime="20170808 03:11:51.766"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:11:52.177" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:11:52.177" status="PASS" starttime="20170808 03:11:51.767"></status>
</kw>
<msg timestamp="20170808 03:11:52.177" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:11:52.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:11:52.178" status="PASS" starttime="20170808 03:11:51.766"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:11:52.178" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:11:52.178" status="PASS" starttime="20170808 03:11:52.178"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:11:52.179" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:11:52.179" status="PASS" starttime="20170808 03:11:52.179"></status>
</kw>
<status endtime="20170808 03:11:52.179" status="PASS" starttime="20170808 03:11:51.763"></status>
</kw>
<status endtime="20170808 03:11:52.179" status="PASS" starttime="20170808 03:11:51.762"></status>
</kw>
<status endtime="20170808 03:11:52.179" status="PASS" starttime="20170808 03:11:51.762"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:11:52.180" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:11:52.180" status="PASS" starttime="20170808 03:11:52.180"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:11:52.182" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:11:52.182" status="PASS" starttime="20170808 03:11:52.181"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:11:52.183" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:11:52.183" status="PASS" starttime="20170808 03:11:52.183"></status>
</kw>
<status endtime="20170808 03:11:52.183" status="PASS" starttime="20170808 03:11:52.182"></status>
</kw>
<status endtime="20170808 03:11:52.183" status="PASS" starttime="20170808 03:11:52.181"></status>
</kw>
<status endtime="20170808 03:11:52.183" status="PASS" starttime="20170808 03:11:52.180"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:11:58.067" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:11:58.067" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:11:58.067" status="PASS" starttime="20170808 03:11:52.183"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:11:58.069" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:11:58.069" status="PASS" starttime="20170808 03:11:58.069"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:11:58.070" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:11:58.070" status="PASS" starttime="20170808 03:11:58.070"></status>
</kw>
<status endtime="20170808 03:11:58.070" status="PASS" starttime="20170808 03:11:58.069"></status>
</kw>
<status endtime="20170808 03:11:58.071" status="PASS" starttime="20170808 03:11:58.068"></status>
</kw>
<status endtime="20170808 03:11:58.071" status="PASS" starttime="20170808 03:11:58.068"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:11:58.071" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:11:58.071" status="PASS" starttime="20170808 03:11:58.071"></status>
</kw>
<msg timestamp="20170808 03:11:58.071" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:11:58.071" status="PASS" starttime="20170808 03:11:51.761"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:11:58.072" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:11:58.072" status="PASS" starttime="20170808 03:11:58.072"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:11:58.073" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:11:58.073" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:11:58.073" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:11:58.073" status="PASS" starttime="20170808 03:11:58.072"></status>
</kw>
<msg timestamp="20170808 03:11:58.073" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:11:58.073" status="PASS" starttime="20170808 03:11:51.760"></status>
</kw>
<msg timestamp="20170808 03:11:58.073" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:11:58.073" status="PASS" starttime="20170808 03:11:51.760"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:11:58.074" level="FAIL">On != Off</msg>
<status endtime="20170808 03:11:58.074" status="FAIL" starttime="20170808 03:11:58.074"></status>
</kw>
<status endtime="20170808 03:11:58.074" status="FAIL" starttime="20170808 03:11:51.760"></status>
</kw>
<status endtime="20170808 03:11:58.074" status="FAIL" starttime="20170808 03:11:51.759"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:12:08.079" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:12:08.080" status="PASS" starttime="20170808 03:12:08.079"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:12:08.080" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:12:08.080" status="PASS" starttime="20170808 03:12:08.080"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:12:08.081" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:12:08.081" status="PASS" starttime="20170808 03:12:08.081"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:12:08.082" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:12:08.082" status="PASS" starttime="20170808 03:12:08.081"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:12:08.261" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:12:08.261" status="PASS" starttime="20170808 03:12:08.082"></status>
</kw>
<msg timestamp="20170808 03:12:08.261" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:12:08.261" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:12:08.261" status="PASS" starttime="20170808 03:12:08.082"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:12:08.262" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:12:08.262" status="PASS" starttime="20170808 03:12:08.261"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:12:08.262" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:12:08.263" status="PASS" starttime="20170808 03:12:08.262"></status>
</kw>
<status endtime="20170808 03:12:08.263" status="PASS" starttime="20170808 03:12:08.078"></status>
</kw>
<status endtime="20170808 03:12:08.263" status="PASS" starttime="20170808 03:12:08.078"></status>
</kw>
<status endtime="20170808 03:12:08.263" status="PASS" starttime="20170808 03:12:08.077"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:12:08.264" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:12:08.264" status="PASS" starttime="20170808 03:12:08.263"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:12:08.266" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:12:08.266" status="PASS" starttime="20170808 03:12:08.265"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:12:08.268" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:12:08.268" status="PASS" starttime="20170808 03:12:08.267"></status>
</kw>
<status endtime="20170808 03:12:08.268" status="PASS" starttime="20170808 03:12:08.267"></status>
</kw>
<status endtime="20170808 03:12:08.268" status="PASS" starttime="20170808 03:12:08.265"></status>
</kw>
<status endtime="20170808 03:12:08.268" status="PASS" starttime="20170808 03:12:08.264"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:12:08.332" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:12:08.332" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:12:08.332" status="PASS" starttime="20170808 03:12:08.268"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:12:08.333" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:12:08.333" status="PASS" starttime="20170808 03:12:08.333"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:12:08.335" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:12:08.335" status="PASS" starttime="20170808 03:12:08.334"></status>
</kw>
<status endtime="20170808 03:12:08.335" status="PASS" starttime="20170808 03:12:08.334"></status>
</kw>
<status endtime="20170808 03:12:08.335" status="PASS" starttime="20170808 03:12:08.332"></status>
</kw>
<status endtime="20170808 03:12:08.335" status="PASS" starttime="20170808 03:12:08.332"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:12:08.335" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:12:08.335" status="PASS" starttime="20170808 03:12:08.335"></status>
</kw>
<msg timestamp="20170808 03:12:08.336" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:12:08.336" status="PASS" starttime="20170808 03:12:08.076"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:12:08.336" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:12:08.336" status="PASS" starttime="20170808 03:12:08.336"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:12:08.337" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:12:08.337" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:12:08.337" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:12:08.337" status="PASS" starttime="20170808 03:12:08.337"></status>
</kw>
<msg timestamp="20170808 03:12:08.337" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:12:08.337" status="PASS" starttime="20170808 03:12:08.076"></status>
</kw>
<msg timestamp="20170808 03:12:08.338" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:12:08.338" status="PASS" starttime="20170808 03:12:08.076"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:12:08.338" level="FAIL">On != Off</msg>
<status endtime="20170808 03:12:08.338" status="FAIL" starttime="20170808 03:12:08.338"></status>
</kw>
<status endtime="20170808 03:12:08.339" status="FAIL" starttime="20170808 03:12:08.075"></status>
</kw>
<status endtime="20170808 03:12:08.339" status="FAIL" starttime="20170808 03:12:08.075"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:12:18.344" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:12:18.344" status="PASS" starttime="20170808 03:12:18.343"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:12:18.345" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:12:18.345" status="PASS" starttime="20170808 03:12:18.344"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:12:18.345" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:12:18.345" status="PASS" starttime="20170808 03:12:18.345"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:12:18.346" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:12:18.346" status="PASS" starttime="20170808 03:12:18.345"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:12:18.526" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:12:18.527" status="PASS" starttime="20170808 03:12:18.347"></status>
</kw>
<msg timestamp="20170808 03:12:18.527" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:12:18.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:12:18.527" status="PASS" starttime="20170808 03:12:18.346"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:12:18.527" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:12:18.527" status="PASS" starttime="20170808 03:12:18.527"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:12:18.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:12:18.528" status="PASS" starttime="20170808 03:12:18.528"></status>
</kw>
<status endtime="20170808 03:12:18.528" status="PASS" starttime="20170808 03:12:18.343"></status>
</kw>
<status endtime="20170808 03:12:18.528" status="PASS" starttime="20170808 03:12:18.342"></status>
</kw>
<status endtime="20170808 03:12:18.529" status="PASS" starttime="20170808 03:12:18.342"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:12:18.529" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:12:18.529" status="PASS" starttime="20170808 03:12:18.529"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:12:18.531" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:12:18.531" status="PASS" starttime="20170808 03:12:18.531"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:12:18.532" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:12:18.532" status="PASS" starttime="20170808 03:12:18.532"></status>
</kw>
<status endtime="20170808 03:12:18.532" status="PASS" starttime="20170808 03:12:18.531"></status>
</kw>
<status endtime="20170808 03:12:18.532" status="PASS" starttime="20170808 03:12:18.530"></status>
</kw>
<status endtime="20170808 03:12:18.533" status="PASS" starttime="20170808 03:12:18.529"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:12:18.612" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:12:18.612" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:12:18.612" status="PASS" starttime="20170808 03:12:18.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:12:18.614" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:12:18.614" status="PASS" starttime="20170808 03:12:18.613"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:12:18.614" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:12:18.615" status="PASS" starttime="20170808 03:12:18.614"></status>
</kw>
<status endtime="20170808 03:12:18.615" status="PASS" starttime="20170808 03:12:18.614"></status>
</kw>
<status endtime="20170808 03:12:18.615" status="PASS" starttime="20170808 03:12:18.613"></status>
</kw>
<status endtime="20170808 03:12:18.615" status="PASS" starttime="20170808 03:12:18.612"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:12:18.615" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:12:18.615" status="PASS" starttime="20170808 03:12:18.615"></status>
</kw>
<msg timestamp="20170808 03:12:18.616" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:12:18.616" status="PASS" starttime="20170808 03:12:18.341"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:12:18.616" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:12:18.616" status="PASS" starttime="20170808 03:12:18.616"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:12:18.617" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:12:18.617" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:12:18.617" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:12:18.617" status="PASS" starttime="20170808 03:12:18.616"></status>
</kw>
<msg timestamp="20170808 03:12:18.617" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:12:18.617" status="PASS" starttime="20170808 03:12:18.340"></status>
</kw>
<msg timestamp="20170808 03:12:18.618" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:12:18.618" status="PASS" starttime="20170808 03:12:18.340"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:12:18.618" level="FAIL">On != Off</msg>
<status endtime="20170808 03:12:18.618" status="FAIL" starttime="20170808 03:12:18.618"></status>
</kw>
<status endtime="20170808 03:12:18.618" status="FAIL" starttime="20170808 03:12:18.340"></status>
</kw>
<status endtime="20170808 03:12:18.619" status="FAIL" starttime="20170808 03:12:18.339"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:12:28.624" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:12:28.624" status="PASS" starttime="20170808 03:12:28.623"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:12:28.625" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:12:28.625" status="PASS" starttime="20170808 03:12:28.624"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:12:28.625" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:12:28.625" status="PASS" starttime="20170808 03:12:28.625"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:12:28.626" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:12:28.626" status="PASS" starttime="20170808 03:12:28.626"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:12:29.157" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:12:29.157" status="PASS" starttime="20170808 03:12:28.627"></status>
</kw>
<msg timestamp="20170808 03:12:29.157" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:12:29.157" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:12:29.157" status="PASS" starttime="20170808 03:12:28.626"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:12:29.158" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:12:29.158" status="PASS" starttime="20170808 03:12:29.158"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:12:29.159" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:12:29.159" status="PASS" starttime="20170808 03:12:29.158"></status>
</kw>
<status endtime="20170808 03:12:29.159" status="PASS" starttime="20170808 03:12:28.622"></status>
</kw>
<status endtime="20170808 03:12:29.159" status="PASS" starttime="20170808 03:12:28.622"></status>
</kw>
<status endtime="20170808 03:12:29.159" status="PASS" starttime="20170808 03:12:28.621"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:12:29.160" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:12:29.160" status="PASS" starttime="20170808 03:12:29.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:12:29.162" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:12:29.162" status="PASS" starttime="20170808 03:12:29.161"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:12:29.163" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:12:29.163" status="PASS" starttime="20170808 03:12:29.163"></status>
</kw>
<status endtime="20170808 03:12:29.163" status="PASS" starttime="20170808 03:12:29.162"></status>
</kw>
<status endtime="20170808 03:12:29.163" status="PASS" starttime="20170808 03:12:29.161"></status>
</kw>
<status endtime="20170808 03:12:29.163" status="PASS" starttime="20170808 03:12:29.160"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:12:33.096" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:12:33.096" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:12:33.096" status="PASS" starttime="20170808 03:12:29.163"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:12:33.098" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:12:33.098" status="PASS" starttime="20170808 03:12:33.097"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:12:33.099" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:12:33.099" status="PASS" starttime="20170808 03:12:33.099"></status>
</kw>
<status endtime="20170808 03:12:33.099" status="PASS" starttime="20170808 03:12:33.098"></status>
</kw>
<status endtime="20170808 03:12:33.100" status="PASS" starttime="20170808 03:12:33.097"></status>
</kw>
<status endtime="20170808 03:12:33.100" status="PASS" starttime="20170808 03:12:33.096"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:12:33.100" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:12:33.100" status="PASS" starttime="20170808 03:12:33.100"></status>
</kw>
<msg timestamp="20170808 03:12:33.100" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:12:33.100" status="PASS" starttime="20170808 03:12:28.621"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:12:33.101" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:12:33.101" status="PASS" starttime="20170808 03:12:33.101"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:12:33.102" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:12:33.102" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:12:33.102" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:12:33.102" status="PASS" starttime="20170808 03:12:33.101"></status>
</kw>
<msg timestamp="20170808 03:12:33.102" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:12:33.103" status="PASS" starttime="20170808 03:12:28.620"></status>
</kw>
<msg timestamp="20170808 03:12:33.103" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:12:33.103" status="PASS" starttime="20170808 03:12:28.620"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:12:33.103" level="FAIL">On != Off</msg>
<status endtime="20170808 03:12:33.104" status="FAIL" starttime="20170808 03:12:33.103"></status>
</kw>
<status endtime="20170808 03:12:33.104" status="FAIL" starttime="20170808 03:12:28.619"></status>
</kw>
<status endtime="20170808 03:12:33.104" status="FAIL" starttime="20170808 03:12:28.619"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:12:43.109" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:12:43.109" status="PASS" starttime="20170808 03:12:43.108"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:12:43.110" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:12:43.110" status="PASS" starttime="20170808 03:12:43.109"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:12:43.110" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:12:43.110" status="PASS" starttime="20170808 03:12:43.110"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:12:43.111" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:12:43.111" status="PASS" starttime="20170808 03:12:43.111"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:12:43.342" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:12:43.342" status="PASS" starttime="20170808 03:12:43.112"></status>
</kw>
<msg timestamp="20170808 03:12:43.342" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:12:43.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:12:43.342" status="PASS" starttime="20170808 03:12:43.111"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:12:43.343" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:12:43.343" status="PASS" starttime="20170808 03:12:43.342"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:12:43.343" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:12:43.343" status="PASS" starttime="20170808 03:12:43.343"></status>
</kw>
<status endtime="20170808 03:12:43.343" status="PASS" starttime="20170808 03:12:43.108"></status>
</kw>
<status endtime="20170808 03:12:43.344" status="PASS" starttime="20170808 03:12:43.107"></status>
</kw>
<status endtime="20170808 03:12:43.344" status="PASS" starttime="20170808 03:12:43.107"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:12:43.344" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:12:43.344" status="PASS" starttime="20170808 03:12:43.344"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:12:43.346" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:12:43.346" status="PASS" starttime="20170808 03:12:43.346"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:12:43.347" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:12:43.347" status="PASS" starttime="20170808 03:12:43.347"></status>
</kw>
<status endtime="20170808 03:12:43.347" status="PASS" starttime="20170808 03:12:43.346"></status>
</kw>
<status endtime="20170808 03:12:43.348" status="PASS" starttime="20170808 03:12:43.345"></status>
</kw>
<status endtime="20170808 03:12:43.348" status="PASS" starttime="20170808 03:12:43.345"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:12:43.413" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:12:43.413" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:12:43.413" status="PASS" starttime="20170808 03:12:43.348"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:12:43.415" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:12:43.415" status="PASS" starttime="20170808 03:12:43.414"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:12:43.416" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:12:43.416" status="PASS" starttime="20170808 03:12:43.415"></status>
</kw>
<status endtime="20170808 03:12:43.416" status="PASS" starttime="20170808 03:12:43.415"></status>
</kw>
<status endtime="20170808 03:12:43.416" status="PASS" starttime="20170808 03:12:43.414"></status>
</kw>
<status endtime="20170808 03:12:43.416" status="PASS" starttime="20170808 03:12:43.413"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:12:43.416" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:12:43.416" status="PASS" starttime="20170808 03:12:43.416"></status>
</kw>
<msg timestamp="20170808 03:12:43.417" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:12:43.417" status="PASS" starttime="20170808 03:12:43.106"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:12:43.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:12:43.417" status="PASS" starttime="20170808 03:12:43.417"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:12:43.418" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:12:43.418" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:12:43.418" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:12:43.418" status="PASS" starttime="20170808 03:12:43.418"></status>
</kw>
<msg timestamp="20170808 03:12:43.418" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:12:43.418" status="PASS" starttime="20170808 03:12:43.106"></status>
</kw>
<msg timestamp="20170808 03:12:43.419" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:12:43.419" status="PASS" starttime="20170808 03:12:43.105"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:12:43.419" level="FAIL">On != Off</msg>
<status endtime="20170808 03:12:43.419" status="FAIL" starttime="20170808 03:12:43.419"></status>
</kw>
<status endtime="20170808 03:12:43.420" status="FAIL" starttime="20170808 03:12:43.105"></status>
</kw>
<status endtime="20170808 03:12:43.420" status="FAIL" starttime="20170808 03:12:43.104"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:12:53.425" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:12:53.425" status="PASS" starttime="20170808 03:12:53.425"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:12:53.426" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:12:53.426" status="PASS" starttime="20170808 03:12:53.425"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:12:53.427" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:12:53.427" status="PASS" starttime="20170808 03:12:53.426"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:12:53.427" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:12:53.427" status="PASS" starttime="20170808 03:12:53.427"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:12:53.611" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:12:53.611" status="PASS" starttime="20170808 03:12:53.428"></status>
</kw>
<msg timestamp="20170808 03:12:53.611" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:12:53.612" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:12:53.612" status="PASS" starttime="20170808 03:12:53.428"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:12:53.612" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:12:53.612" status="PASS" starttime="20170808 03:12:53.612"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:12:53.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:12:53.613" status="PASS" starttime="20170808 03:12:53.613"></status>
</kw>
<status endtime="20170808 03:12:53.613" status="PASS" starttime="20170808 03:12:53.424"></status>
</kw>
<status endtime="20170808 03:12:53.613" status="PASS" starttime="20170808 03:12:53.423"></status>
</kw>
<status endtime="20170808 03:12:53.613" status="PASS" starttime="20170808 03:12:53.423"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:12:53.614" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:12:53.614" status="PASS" starttime="20170808 03:12:53.613"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:12:53.616" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:12:53.616" status="PASS" starttime="20170808 03:12:53.615"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:12:53.617" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:12:53.617" status="PASS" starttime="20170808 03:12:53.617"></status>
</kw>
<status endtime="20170808 03:12:53.617" status="PASS" starttime="20170808 03:12:53.616"></status>
</kw>
<status endtime="20170808 03:12:53.617" status="PASS" starttime="20170808 03:12:53.615"></status>
</kw>
<status endtime="20170808 03:12:53.617" status="PASS" starttime="20170808 03:12:53.614"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:12:53.680" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:12:53.681" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:12:53.681" status="PASS" starttime="20170808 03:12:53.617"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:12:53.682" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:12:53.682" status="PASS" starttime="20170808 03:12:53.682"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:12:53.684" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:12:53.684" status="PASS" starttime="20170808 03:12:53.683"></status>
</kw>
<status endtime="20170808 03:12:53.684" status="PASS" starttime="20170808 03:12:53.683"></status>
</kw>
<status endtime="20170808 03:12:53.684" status="PASS" starttime="20170808 03:12:53.681"></status>
</kw>
<status endtime="20170808 03:12:53.684" status="PASS" starttime="20170808 03:12:53.681"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:12:53.684" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:12:53.685" status="PASS" starttime="20170808 03:12:53.684"></status>
</kw>
<msg timestamp="20170808 03:12:53.685" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:12:53.685" status="PASS" starttime="20170808 03:12:53.422"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:12:53.685" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:12:53.685" status="PASS" starttime="20170808 03:12:53.685"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:12:53.686" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:12:53.686" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:12:53.686" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:12:53.686" status="PASS" starttime="20170808 03:12:53.686"></status>
</kw>
<msg timestamp="20170808 03:12:53.687" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:12:53.687" status="PASS" starttime="20170808 03:12:53.421"></status>
</kw>
<msg timestamp="20170808 03:12:53.687" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:12:53.687" status="PASS" starttime="20170808 03:12:53.421"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:12:53.687" level="FAIL">On != Off</msg>
<status endtime="20170808 03:12:53.688" status="FAIL" starttime="20170808 03:12:53.687"></status>
</kw>
<status endtime="20170808 03:12:53.688" status="FAIL" starttime="20170808 03:12:53.421"></status>
</kw>
<status endtime="20170808 03:12:53.688" status="FAIL" starttime="20170808 03:12:53.420"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:13:03.693" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:13:03.693" status="PASS" starttime="20170808 03:13:03.692"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:13:03.694" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:13:03.694" status="PASS" starttime="20170808 03:13:03.693"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:13:03.694" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:13:03.694" status="PASS" starttime="20170808 03:13:03.694"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:13:03.695" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:13:03.695" status="PASS" starttime="20170808 03:13:03.694"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:13:04.389" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:13:04.389" status="PASS" starttime="20170808 03:13:03.695"></status>
</kw>
<msg timestamp="20170808 03:13:04.389" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:13:04.389" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:13:04.389" status="PASS" starttime="20170808 03:13:03.695"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:13:04.390" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:13:04.390" status="PASS" starttime="20170808 03:13:04.389"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:13:04.390" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:13:04.391" status="PASS" starttime="20170808 03:13:04.390"></status>
</kw>
<status endtime="20170808 03:13:04.391" status="PASS" starttime="20170808 03:13:03.692"></status>
</kw>
<status endtime="20170808 03:13:04.391" status="PASS" starttime="20170808 03:13:03.691"></status>
</kw>
<status endtime="20170808 03:13:04.391" status="PASS" starttime="20170808 03:13:03.691"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:13:04.392" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:13:04.392" status="PASS" starttime="20170808 03:13:04.391"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:13:04.394" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:13:04.394" status="PASS" starttime="20170808 03:13:04.393"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:13:04.395" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:13:04.395" status="PASS" starttime="20170808 03:13:04.394"></status>
</kw>
<status endtime="20170808 03:13:04.395" status="PASS" starttime="20170808 03:13:04.394"></status>
</kw>
<status endtime="20170808 03:13:04.395" status="PASS" starttime="20170808 03:13:04.392"></status>
</kw>
<status endtime="20170808 03:13:04.395" status="PASS" starttime="20170808 03:13:04.392"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:13:08.753" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:13:08.753" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:13:08.753" status="PASS" starttime="20170808 03:13:04.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:13:08.755" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:13:08.755" status="PASS" starttime="20170808 03:13:08.755"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:13:08.756" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:13:08.756" status="PASS" starttime="20170808 03:13:08.756"></status>
</kw>
<status endtime="20170808 03:13:08.756" status="PASS" starttime="20170808 03:13:08.755"></status>
</kw>
<status endtime="20170808 03:13:08.756" status="PASS" starttime="20170808 03:13:08.754"></status>
</kw>
<status endtime="20170808 03:13:08.756" status="PASS" starttime="20170808 03:13:08.754"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:13:08.757" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:13:08.757" status="PASS" starttime="20170808 03:13:08.757"></status>
</kw>
<msg timestamp="20170808 03:13:08.757" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:13:08.757" status="PASS" starttime="20170808 03:13:03.690"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:13:08.758" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:13:08.758" status="PASS" starttime="20170808 03:13:08.757"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:13:08.758" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:13:08.758" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:13:08.759" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:13:08.759" status="PASS" starttime="20170808 03:13:08.758"></status>
</kw>
<msg timestamp="20170808 03:13:08.759" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:13:08.759" status="PASS" starttime="20170808 03:13:03.689"></status>
</kw>
<msg timestamp="20170808 03:13:08.759" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:13:08.759" status="PASS" starttime="20170808 03:13:03.689"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:13:08.760" level="FAIL">On != Off</msg>
<status endtime="20170808 03:13:08.760" status="FAIL" starttime="20170808 03:13:08.759"></status>
</kw>
<status endtime="20170808 03:13:08.760" status="FAIL" starttime="20170808 03:13:03.689"></status>
</kw>
<status endtime="20170808 03:13:08.760" status="FAIL" starttime="20170808 03:13:03.688"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:13:18.766" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:13:18.766" status="PASS" starttime="20170808 03:13:18.765"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:13:18.767" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:13:18.767" status="PASS" starttime="20170808 03:13:18.766"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:13:18.767" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:13:18.767" status="PASS" starttime="20170808 03:13:18.767"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:13:18.768" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:13:18.768" status="PASS" starttime="20170808 03:13:18.767"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:13:19.016" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:13:19.016" status="PASS" starttime="20170808 03:13:18.769"></status>
</kw>
<msg timestamp="20170808 03:13:19.016" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:13:19.016" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:13:19.016" status="PASS" starttime="20170808 03:13:18.768"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:13:19.017" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:13:19.017" status="PASS" starttime="20170808 03:13:19.016"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:13:19.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:13:19.017" status="PASS" starttime="20170808 03:13:19.017"></status>
</kw>
<status endtime="20170808 03:13:19.017" status="PASS" starttime="20170808 03:13:18.764"></status>
</kw>
<status endtime="20170808 03:13:19.018" status="PASS" starttime="20170808 03:13:18.764"></status>
</kw>
<status endtime="20170808 03:13:19.018" status="PASS" starttime="20170808 03:13:18.763"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:13:19.018" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:13:19.018" status="PASS" starttime="20170808 03:13:19.018"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:13:19.020" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:13:19.020" status="PASS" starttime="20170808 03:13:19.020"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:13:19.021" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:13:19.021" status="PASS" starttime="20170808 03:13:19.021"></status>
</kw>
<status endtime="20170808 03:13:19.021" status="PASS" starttime="20170808 03:13:19.020"></status>
</kw>
<status endtime="20170808 03:13:19.022" status="PASS" starttime="20170808 03:13:19.019"></status>
</kw>
<status endtime="20170808 03:13:19.022" status="PASS" starttime="20170808 03:13:19.019"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:13:19.085" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:13:19.085" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:13:19.085" status="PASS" starttime="20170808 03:13:19.022"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:13:19.087" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:13:19.087" status="PASS" starttime="20170808 03:13:19.087"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:13:19.089" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:13:19.089" status="PASS" starttime="20170808 03:13:19.088"></status>
</kw>
<status endtime="20170808 03:13:19.089" status="PASS" starttime="20170808 03:13:19.087"></status>
</kw>
<status endtime="20170808 03:13:19.089" status="PASS" starttime="20170808 03:13:19.086"></status>
</kw>
<status endtime="20170808 03:13:19.089" status="PASS" starttime="20170808 03:13:19.086"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:13:19.089" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:13:19.090" status="PASS" starttime="20170808 03:13:19.089"></status>
</kw>
<msg timestamp="20170808 03:13:19.090" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:13:19.090" status="PASS" starttime="20170808 03:13:18.762"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:13:19.090" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:13:19.090" status="PASS" starttime="20170808 03:13:19.090"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:13:19.091" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:13:19.091" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:13:19.091" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:13:19.091" status="PASS" starttime="20170808 03:13:19.091"></status>
</kw>
<msg timestamp="20170808 03:13:19.092" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:13:19.092" status="PASS" starttime="20170808 03:13:18.762"></status>
</kw>
<msg timestamp="20170808 03:13:19.092" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:13:19.092" status="PASS" starttime="20170808 03:13:18.762"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:13:19.092" level="FAIL">On != Off</msg>
<status endtime="20170808 03:13:19.093" status="FAIL" starttime="20170808 03:13:19.092"></status>
</kw>
<status endtime="20170808 03:13:19.093" status="FAIL" starttime="20170808 03:13:18.761"></status>
</kw>
<status endtime="20170808 03:13:19.093" status="FAIL" starttime="20170808 03:13:18.761"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:13:29.097" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:13:29.098" status="PASS" starttime="20170808 03:13:29.097"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:13:29.098" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:13:29.098" status="PASS" starttime="20170808 03:13:29.098"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:13:29.099" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:13:29.099" status="PASS" starttime="20170808 03:13:29.099"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:13:29.100" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:13:29.100" status="PASS" starttime="20170808 03:13:29.099"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:13:29.277" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:13:29.277" status="PASS" starttime="20170808 03:13:29.100"></status>
</kw>
<msg timestamp="20170808 03:13:29.277" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:13:29.277" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:13:29.277" status="PASS" starttime="20170808 03:13:29.100"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:13:29.278" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:13:29.278" status="PASS" starttime="20170808 03:13:29.278"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:13:29.279" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:13:29.279" status="PASS" starttime="20170808 03:13:29.279"></status>
</kw>
<status endtime="20170808 03:13:29.279" status="PASS" starttime="20170808 03:13:29.097"></status>
</kw>
<status endtime="20170808 03:13:29.280" status="PASS" starttime="20170808 03:13:29.096"></status>
</kw>
<status endtime="20170808 03:13:29.280" status="PASS" starttime="20170808 03:13:29.096"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:13:29.281" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:13:29.281" status="PASS" starttime="20170808 03:13:29.280"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:13:29.284" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:13:29.284" status="PASS" starttime="20170808 03:13:29.283"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:13:29.285" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:13:29.285" status="PASS" starttime="20170808 03:13:29.285"></status>
</kw>
<status endtime="20170808 03:13:29.285" status="PASS" starttime="20170808 03:13:29.284"></status>
</kw>
<status endtime="20170808 03:13:29.286" status="PASS" starttime="20170808 03:13:29.282"></status>
</kw>
<status endtime="20170808 03:13:29.286" status="PASS" starttime="20170808 03:13:29.281"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:13:29.350" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:13:29.350" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:13:29.350" status="PASS" starttime="20170808 03:13:29.286"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:13:29.352" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:13:29.352" status="PASS" starttime="20170808 03:13:29.351"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:13:29.353" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:13:29.353" status="PASS" starttime="20170808 03:13:29.352"></status>
</kw>
<status endtime="20170808 03:13:29.353" status="PASS" starttime="20170808 03:13:29.352"></status>
</kw>
<status endtime="20170808 03:13:29.353" status="PASS" starttime="20170808 03:13:29.351"></status>
</kw>
<status endtime="20170808 03:13:29.353" status="PASS" starttime="20170808 03:13:29.350"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:13:29.353" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:13:29.353" status="PASS" starttime="20170808 03:13:29.353"></status>
</kw>
<msg timestamp="20170808 03:13:29.354" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:13:29.354" status="PASS" starttime="20170808 03:13:29.095"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:13:29.354" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:13:29.354" status="PASS" starttime="20170808 03:13:29.354"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:13:29.355" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:13:29.355" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:13:29.355" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:13:29.355" status="PASS" starttime="20170808 03:13:29.354"></status>
</kw>
<msg timestamp="20170808 03:13:29.355" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:13:29.355" status="PASS" starttime="20170808 03:13:29.094"></status>
</kw>
<msg timestamp="20170808 03:13:29.356" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:13:29.356" status="PASS" starttime="20170808 03:13:29.094"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:13:29.356" level="FAIL">On != Off</msg>
<status endtime="20170808 03:13:29.356" status="FAIL" starttime="20170808 03:13:29.356"></status>
</kw>
<status endtime="20170808 03:13:29.357" status="FAIL" starttime="20170808 03:13:29.094"></status>
</kw>
<status endtime="20170808 03:13:29.357" status="FAIL" starttime="20170808 03:13:29.093"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:13:39.362" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:13:39.362" status="PASS" starttime="20170808 03:13:39.361"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:13:39.363" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:13:39.363" status="PASS" starttime="20170808 03:13:39.362"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:13:39.363" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:13:39.363" status="PASS" starttime="20170808 03:13:39.363"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:13:39.364" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:13:39.364" status="PASS" starttime="20170808 03:13:39.364"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:13:39.962" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:13:39.962" status="PASS" starttime="20170808 03:13:39.365"></status>
</kw>
<msg timestamp="20170808 03:13:39.962" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:13:39.962" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:13:39.962" status="PASS" starttime="20170808 03:13:39.364"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:13:39.963" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:13:39.963" status="PASS" starttime="20170808 03:13:39.962"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:13:39.963" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:13:39.964" status="PASS" starttime="20170808 03:13:39.963"></status>
</kw>
<status endtime="20170808 03:13:39.964" status="PASS" starttime="20170808 03:13:39.360"></status>
</kw>
<status endtime="20170808 03:13:39.964" status="PASS" starttime="20170808 03:13:39.360"></status>
</kw>
<status endtime="20170808 03:13:39.964" status="PASS" starttime="20170808 03:13:39.359"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:13:39.964" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:13:39.964" status="PASS" starttime="20170808 03:13:39.964"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:13:39.966" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:13:39.966" status="PASS" starttime="20170808 03:13:39.966"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:13:39.967" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:13:39.967" status="PASS" starttime="20170808 03:13:39.967"></status>
</kw>
<status endtime="20170808 03:13:39.968" status="PASS" starttime="20170808 03:13:39.967"></status>
</kw>
<status endtime="20170808 03:13:39.968" status="PASS" starttime="20170808 03:13:39.965"></status>
</kw>
<status endtime="20170808 03:13:39.968" status="PASS" starttime="20170808 03:13:39.965"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:13:45.784" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:13:45.785" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:13:45.785" status="PASS" starttime="20170808 03:13:39.968"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:13:45.787" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:13:45.787" status="PASS" starttime="20170808 03:13:45.786"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:13:45.788" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:13:45.788" status="PASS" starttime="20170808 03:13:45.788"></status>
</kw>
<status endtime="20170808 03:13:45.788" status="PASS" starttime="20170808 03:13:45.787"></status>
</kw>
<status endtime="20170808 03:13:45.788" status="PASS" starttime="20170808 03:13:45.786"></status>
</kw>
<status endtime="20170808 03:13:45.788" status="PASS" starttime="20170808 03:13:45.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:13:45.789" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:13:45.789" status="PASS" starttime="20170808 03:13:45.788"></status>
</kw>
<msg timestamp="20170808 03:13:45.789" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:13:45.789" status="PASS" starttime="20170808 03:13:39.359"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:13:45.790" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:13:45.790" status="PASS" starttime="20170808 03:13:45.789"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:13:45.790" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:13:45.790" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:13:45.790" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:13:45.790" status="PASS" starttime="20170808 03:13:45.790"></status>
</kw>
<msg timestamp="20170808 03:13:45.791" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:13:45.791" status="PASS" starttime="20170808 03:13:39.358"></status>
</kw>
<msg timestamp="20170808 03:13:45.791" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:13:45.791" status="PASS" starttime="20170808 03:13:39.358"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:13:45.792" level="FAIL">On != Off</msg>
<status endtime="20170808 03:13:45.792" status="FAIL" starttime="20170808 03:13:45.791"></status>
</kw>
<status endtime="20170808 03:13:45.792" status="FAIL" starttime="20170808 03:13:39.358"></status>
</kw>
<status endtime="20170808 03:13:45.792" status="FAIL" starttime="20170808 03:13:39.357"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:13:55.797" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:13:55.797" status="PASS" starttime="20170808 03:13:55.796"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:13:55.798" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:13:55.798" status="PASS" starttime="20170808 03:13:55.797"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:13:55.798" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:13:55.798" status="PASS" starttime="20170808 03:13:55.798"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:13:55.799" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:13:55.799" status="PASS" starttime="20170808 03:13:55.799"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:13:56.050" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:13:56.050" status="PASS" starttime="20170808 03:13:55.800"></status>
</kw>
<msg timestamp="20170808 03:13:56.051" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:13:56.051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:13:56.051" status="PASS" starttime="20170808 03:13:55.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:13:56.051" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:13:56.051" status="PASS" starttime="20170808 03:13:56.051"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:13:56.052" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:13:56.052" status="PASS" starttime="20170808 03:13:56.052"></status>
</kw>
<status endtime="20170808 03:13:56.052" status="PASS" starttime="20170808 03:13:55.796"></status>
</kw>
<status endtime="20170808 03:13:56.052" status="PASS" starttime="20170808 03:13:55.795"></status>
</kw>
<status endtime="20170808 03:13:56.052" status="PASS" starttime="20170808 03:13:55.795"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:13:56.053" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:13:56.053" status="PASS" starttime="20170808 03:13:56.053"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:13:56.055" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:13:56.055" status="PASS" starttime="20170808 03:13:56.054"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:13:56.056" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:13:56.056" status="PASS" starttime="20170808 03:13:56.056"></status>
</kw>
<status endtime="20170808 03:13:56.056" status="PASS" starttime="20170808 03:13:56.055"></status>
</kw>
<status endtime="20170808 03:13:56.056" status="PASS" starttime="20170808 03:13:56.054"></status>
</kw>
<status endtime="20170808 03:13:56.056" status="PASS" starttime="20170808 03:13:56.053"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:13:56.137" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:13:56.138" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:13:56.138" status="PASS" starttime="20170808 03:13:56.057"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:13:56.139" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:13:56.139" status="PASS" starttime="20170808 03:13:56.139"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:13:56.140" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:13:56.140" status="PASS" starttime="20170808 03:13:56.140"></status>
</kw>
<status endtime="20170808 03:13:56.141" status="PASS" starttime="20170808 03:13:56.140"></status>
</kw>
<status endtime="20170808 03:13:56.141" status="PASS" starttime="20170808 03:13:56.138"></status>
</kw>
<status endtime="20170808 03:13:56.141" status="PASS" starttime="20170808 03:13:56.138"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:13:56.141" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:13:56.141" status="PASS" starttime="20170808 03:13:56.141"></status>
</kw>
<msg timestamp="20170808 03:13:56.141" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:13:56.141" status="PASS" starttime="20170808 03:13:55.794"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:13:56.142" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:13:56.142" status="PASS" starttime="20170808 03:13:56.142"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:13:56.143" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:13:56.143" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:13:56.143" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:13:56.143" status="PASS" starttime="20170808 03:13:56.142"></status>
</kw>
<msg timestamp="20170808 03:13:56.143" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:13:56.143" status="PASS" starttime="20170808 03:13:55.794"></status>
</kw>
<msg timestamp="20170808 03:13:56.143" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:13:56.144" status="PASS" starttime="20170808 03:13:55.793"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:13:56.144" level="FAIL">On != Off</msg>
<status endtime="20170808 03:13:56.144" status="FAIL" starttime="20170808 03:13:56.144"></status>
</kw>
<status endtime="20170808 03:13:56.144" status="FAIL" starttime="20170808 03:13:55.793"></status>
</kw>
<status endtime="20170808 03:13:56.145" status="FAIL" starttime="20170808 03:13:55.792"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:14:06.149" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:14:06.150" status="PASS" starttime="20170808 03:14:06.149"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:14:06.150" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:14:06.150" status="PASS" starttime="20170808 03:14:06.150"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:14:06.151" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:14:06.151" status="PASS" starttime="20170808 03:14:06.151"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:14:06.152" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:14:06.152" status="PASS" starttime="20170808 03:14:06.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:14:07.113" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:14:07.113" status="PASS" starttime="20170808 03:14:06.152"></status>
</kw>
<msg timestamp="20170808 03:14:07.113" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:14:07.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:14:07.113" status="PASS" starttime="20170808 03:14:06.152"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:14:07.114" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:14:07.114" status="PASS" starttime="20170808 03:14:07.113"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:14:07.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:14:07.114" status="PASS" starttime="20170808 03:14:07.114"></status>
</kw>
<status endtime="20170808 03:14:07.115" status="PASS" starttime="20170808 03:14:06.148"></status>
</kw>
<status endtime="20170808 03:14:07.115" status="PASS" starttime="20170808 03:14:06.148"></status>
</kw>
<status endtime="20170808 03:14:07.115" status="PASS" starttime="20170808 03:14:06.147"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:14:07.115" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:14:07.115" status="PASS" starttime="20170808 03:14:07.115"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:14:07.117" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:14:07.117" status="PASS" starttime="20170808 03:14:07.117"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:14:07.118" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:14:07.118" status="PASS" starttime="20170808 03:14:07.118"></status>
</kw>
<status endtime="20170808 03:14:07.119" status="PASS" starttime="20170808 03:14:07.118"></status>
</kw>
<status endtime="20170808 03:14:07.119" status="PASS" starttime="20170808 03:14:07.116"></status>
</kw>
<status endtime="20170808 03:14:07.119" status="PASS" starttime="20170808 03:14:07.116"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:14:08.618" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:14:08.618" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:14:08.618" status="PASS" starttime="20170808 03:14:07.119"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:14:08.620" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:14:08.620" status="PASS" starttime="20170808 03:14:08.619"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:14:08.621" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:14:08.621" status="PASS" starttime="20170808 03:14:08.621"></status>
</kw>
<status endtime="20170808 03:14:08.621" status="PASS" starttime="20170808 03:14:08.620"></status>
</kw>
<status endtime="20170808 03:14:08.622" status="PASS" starttime="20170808 03:14:08.619"></status>
</kw>
<status endtime="20170808 03:14:08.622" status="PASS" starttime="20170808 03:14:08.619"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:14:08.622" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:14:08.622" status="PASS" starttime="20170808 03:14:08.622"></status>
</kw>
<msg timestamp="20170808 03:14:08.622" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:14:08.622" status="PASS" starttime="20170808 03:14:06.147"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:14:08.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:14:08.623" status="PASS" starttime="20170808 03:14:08.623"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:14:08.624" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:14:08.624" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:14:08.624" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:14:08.624" status="PASS" starttime="20170808 03:14:08.623"></status>
</kw>
<msg timestamp="20170808 03:14:08.624" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:14:08.624" status="PASS" starttime="20170808 03:14:06.146"></status>
</kw>
<msg timestamp="20170808 03:14:08.624" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:14:08.624" status="PASS" starttime="20170808 03:14:06.146"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:14:08.625" level="FAIL">On != Off</msg>
<status endtime="20170808 03:14:08.625" status="FAIL" starttime="20170808 03:14:08.625"></status>
</kw>
<status endtime="20170808 03:14:08.625" status="FAIL" starttime="20170808 03:14:06.145"></status>
</kw>
<status endtime="20170808 03:14:08.625" status="FAIL" starttime="20170808 03:14:06.145"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:14:18.630" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:14:18.631" status="PASS" starttime="20170808 03:14:18.630"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:14:18.631" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:14:18.631" status="PASS" starttime="20170808 03:14:18.631"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:14:18.632" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:14:18.632" status="PASS" starttime="20170808 03:14:18.631"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:14:18.632" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:14:18.633" status="PASS" starttime="20170808 03:14:18.632"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:14:18.974" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:14:18.974" status="PASS" starttime="20170808 03:14:18.633"></status>
</kw>
<msg timestamp="20170808 03:14:18.974" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:14:18.974" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:14:18.974" status="PASS" starttime="20170808 03:14:18.633"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:14:18.975" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:14:18.975" status="PASS" starttime="20170808 03:14:18.974"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:14:18.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:14:18.976" status="PASS" starttime="20170808 03:14:18.975"></status>
</kw>
<status endtime="20170808 03:14:18.976" status="PASS" starttime="20170808 03:14:18.629"></status>
</kw>
<status endtime="20170808 03:14:18.976" status="PASS" starttime="20170808 03:14:18.629"></status>
</kw>
<status endtime="20170808 03:14:18.976" status="PASS" starttime="20170808 03:14:18.628"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:14:18.976" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:14:18.977" status="PASS" starttime="20170808 03:14:18.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:14:18.979" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:14:18.979" status="PASS" starttime="20170808 03:14:18.978"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:14:18.979" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:14:18.980" status="PASS" starttime="20170808 03:14:18.979"></status>
</kw>
<status endtime="20170808 03:14:18.980" status="PASS" starttime="20170808 03:14:18.979"></status>
</kw>
<status endtime="20170808 03:14:18.980" status="PASS" starttime="20170808 03:14:18.977"></status>
</kw>
<status endtime="20170808 03:14:18.980" status="PASS" starttime="20170808 03:14:18.977"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:14:22.353" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:14:22.353" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:14:22.353" status="PASS" starttime="20170808 03:14:18.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:14:22.355" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:14:22.355" status="PASS" starttime="20170808 03:14:22.355"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:14:22.356" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:14:22.357" status="PASS" starttime="20170808 03:14:22.356"></status>
</kw>
<status endtime="20170808 03:14:22.357" status="PASS" starttime="20170808 03:14:22.356"></status>
</kw>
<status endtime="20170808 03:14:22.357" status="PASS" starttime="20170808 03:14:22.354"></status>
</kw>
<status endtime="20170808 03:14:22.357" status="PASS" starttime="20170808 03:14:22.354"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:14:22.357" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:14:22.357" status="PASS" starttime="20170808 03:14:22.357"></status>
</kw>
<msg timestamp="20170808 03:14:22.358" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:14:22.358" status="PASS" starttime="20170808 03:14:18.628"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:14:22.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:14:22.358" status="PASS" starttime="20170808 03:14:22.358"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:14:22.359" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:14:22.359" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:14:22.359" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:14:22.359" status="PASS" starttime="20170808 03:14:22.359"></status>
</kw>
<msg timestamp="20170808 03:14:22.360" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:14:22.360" status="PASS" starttime="20170808 03:14:18.627"></status>
</kw>
<msg timestamp="20170808 03:14:22.360" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:14:22.360" status="PASS" starttime="20170808 03:14:18.627"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:14:22.361" level="FAIL">On != Off</msg>
<status endtime="20170808 03:14:22.361" status="FAIL" starttime="20170808 03:14:22.361"></status>
</kw>
<status endtime="20170808 03:14:22.362" status="FAIL" starttime="20170808 03:14:18.626"></status>
</kw>
<status endtime="20170808 03:14:22.362" status="FAIL" starttime="20170808 03:14:18.626"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:14:32.367" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:14:32.367" status="PASS" starttime="20170808 03:14:32.367"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:14:32.368" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:14:32.368" status="PASS" starttime="20170808 03:14:32.368"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:14:32.369" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:14:32.369" status="PASS" starttime="20170808 03:14:32.368"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:14:32.369" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:14:32.369" status="PASS" starttime="20170808 03:14:32.369"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:14:32.549" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:14:32.549" status="PASS" starttime="20170808 03:14:32.370"></status>
</kw>
<msg timestamp="20170808 03:14:32.550" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:14:32.550" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:14:32.550" status="PASS" starttime="20170808 03:14:32.369"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:14:32.550" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:14:32.550" status="PASS" starttime="20170808 03:14:32.550"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:14:32.551" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:14:32.551" status="PASS" starttime="20170808 03:14:32.551"></status>
</kw>
<status endtime="20170808 03:14:32.551" status="PASS" starttime="20170808 03:14:32.366"></status>
</kw>
<status endtime="20170808 03:14:32.551" status="PASS" starttime="20170808 03:14:32.365"></status>
</kw>
<status endtime="20170808 03:14:32.551" status="PASS" starttime="20170808 03:14:32.365"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:14:32.552" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:14:32.552" status="PASS" starttime="20170808 03:14:32.552"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:14:32.554" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:14:32.554" status="PASS" starttime="20170808 03:14:32.553"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:14:32.555" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:14:32.555" status="PASS" starttime="20170808 03:14:32.555"></status>
</kw>
<status endtime="20170808 03:14:32.555" status="PASS" starttime="20170808 03:14:32.554"></status>
</kw>
<status endtime="20170808 03:14:32.555" status="PASS" starttime="20170808 03:14:32.553"></status>
</kw>
<status endtime="20170808 03:14:32.556" status="PASS" starttime="20170808 03:14:32.552"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:14:32.639" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:14:32.640" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:14:32.640" status="PASS" starttime="20170808 03:14:32.556"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:14:32.641" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:14:32.641" status="PASS" starttime="20170808 03:14:32.641"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:14:32.643" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:14:32.643" status="PASS" starttime="20170808 03:14:32.642"></status>
</kw>
<status endtime="20170808 03:14:32.643" status="PASS" starttime="20170808 03:14:32.642"></status>
</kw>
<status endtime="20170808 03:14:32.643" status="PASS" starttime="20170808 03:14:32.640"></status>
</kw>
<status endtime="20170808 03:14:32.643" status="PASS" starttime="20170808 03:14:32.640"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:14:32.643" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:14:32.643" status="PASS" starttime="20170808 03:14:32.643"></status>
</kw>
<msg timestamp="20170808 03:14:32.644" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:14:32.644" status="PASS" starttime="20170808 03:14:32.364"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:14:32.644" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:14:32.644" status="PASS" starttime="20170808 03:14:32.644"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:14:32.645" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:14:32.645" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:14:32.645" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:14:32.645" status="PASS" starttime="20170808 03:14:32.645"></status>
</kw>
<msg timestamp="20170808 03:14:32.645" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:14:32.645" status="PASS" starttime="20170808 03:14:32.363"></status>
</kw>
<msg timestamp="20170808 03:14:32.646" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:14:32.646" status="PASS" starttime="20170808 03:14:32.363"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:14:32.646" level="FAIL">On != Off</msg>
<status endtime="20170808 03:14:32.646" status="FAIL" starttime="20170808 03:14:32.646"></status>
</kw>
<status endtime="20170808 03:14:32.647" status="FAIL" starttime="20170808 03:14:32.363"></status>
</kw>
<status endtime="20170808 03:14:32.647" status="FAIL" starttime="20170808 03:14:32.362"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:14:42.651" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:14:42.652" status="PASS" starttime="20170808 03:14:42.651"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:14:42.652" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:14:42.652" status="PASS" starttime="20170808 03:14:42.652"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:14:42.653" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:14:42.653" status="PASS" starttime="20170808 03:14:42.653"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:14:42.654" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:14:42.654" status="PASS" starttime="20170808 03:14:42.653"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:14:43.123" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:14:43.123" status="PASS" starttime="20170808 03:14:42.654"></status>
</kw>
<msg timestamp="20170808 03:14:43.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:14:43.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:14:43.123" status="PASS" starttime="20170808 03:14:42.654"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:14:43.124" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:14:43.124" status="PASS" starttime="20170808 03:14:43.124"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:14:43.125" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:14:43.125" status="PASS" starttime="20170808 03:14:43.124"></status>
</kw>
<status endtime="20170808 03:14:43.125" status="PASS" starttime="20170808 03:14:42.651"></status>
</kw>
<status endtime="20170808 03:14:43.125" status="PASS" starttime="20170808 03:14:42.650"></status>
</kw>
<status endtime="20170808 03:14:43.125" status="PASS" starttime="20170808 03:14:42.650"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:14:43.126" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:14:43.126" status="PASS" starttime="20170808 03:14:43.125"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:14:43.128" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:14:43.128" status="PASS" starttime="20170808 03:14:43.127"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:14:43.129" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:14:43.129" status="PASS" starttime="20170808 03:14:43.128"></status>
</kw>
<status endtime="20170808 03:14:43.129" status="PASS" starttime="20170808 03:14:43.128"></status>
</kw>
<status endtime="20170808 03:14:43.129" status="PASS" starttime="20170808 03:14:43.126"></status>
</kw>
<status endtime="20170808 03:14:43.129" status="PASS" starttime="20170808 03:14:43.126"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:14:45.211" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:14:45.212" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:14:45.212" status="PASS" starttime="20170808 03:14:43.129"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:14:45.214" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:14:45.214" status="PASS" starttime="20170808 03:14:45.213"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:14:45.215" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:14:45.215" status="PASS" starttime="20170808 03:14:45.214"></status>
</kw>
<status endtime="20170808 03:14:45.215" status="PASS" starttime="20170808 03:14:45.214"></status>
</kw>
<status endtime="20170808 03:14:45.215" status="PASS" starttime="20170808 03:14:45.213"></status>
</kw>
<status endtime="20170808 03:14:45.215" status="PASS" starttime="20170808 03:14:45.212"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:14:45.215" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:14:45.215" status="PASS" starttime="20170808 03:14:45.215"></status>
</kw>
<msg timestamp="20170808 03:14:45.216" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:14:45.216" status="PASS" starttime="20170808 03:14:42.649"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:14:45.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:14:45.216" status="PASS" starttime="20170808 03:14:45.216"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:14:45.217" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:14:45.217" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:14:45.217" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:14:45.217" status="PASS" starttime="20170808 03:14:45.217"></status>
</kw>
<msg timestamp="20170808 03:14:45.217" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:14:45.217" status="PASS" starttime="20170808 03:14:42.648"></status>
</kw>
<msg timestamp="20170808 03:14:45.218" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:14:45.218" status="PASS" starttime="20170808 03:14:42.648"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:14:45.218" level="FAIL">On != Off</msg>
<status endtime="20170808 03:14:45.218" status="FAIL" starttime="20170808 03:14:45.218"></status>
</kw>
<status endtime="20170808 03:14:45.219" status="FAIL" starttime="20170808 03:14:42.648"></status>
</kw>
<status endtime="20170808 03:14:45.219" status="FAIL" starttime="20170808 03:14:42.647"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:14:55.224" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:14:55.224" status="PASS" starttime="20170808 03:14:55.224"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:14:55.225" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:14:55.225" status="PASS" starttime="20170808 03:14:55.225"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:14:55.226" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:14:55.226" status="PASS" starttime="20170808 03:14:55.225"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:14:55.226" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:14:55.226" status="PASS" starttime="20170808 03:14:55.226"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:14:55.666" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:14:55.666" status="PASS" starttime="20170808 03:14:55.227"></status>
</kw>
<msg timestamp="20170808 03:14:55.667" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:14:55.667" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:14:55.667" status="PASS" starttime="20170808 03:14:55.227"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:14:55.667" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:14:55.667" status="PASS" starttime="20170808 03:14:55.667"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:14:55.668" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:14:55.668" status="PASS" starttime="20170808 03:14:55.668"></status>
</kw>
<status endtime="20170808 03:14:55.668" status="PASS" starttime="20170808 03:14:55.223"></status>
</kw>
<status endtime="20170808 03:14:55.668" status="PASS" starttime="20170808 03:14:55.222"></status>
</kw>
<status endtime="20170808 03:14:55.668" status="PASS" starttime="20170808 03:14:55.222"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:14:55.669" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:14:55.669" status="PASS" starttime="20170808 03:14:55.669"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:14:55.671" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:14:55.671" status="PASS" starttime="20170808 03:14:55.670"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:14:55.672" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:14:55.672" status="PASS" starttime="20170808 03:14:55.672"></status>
</kw>
<status endtime="20170808 03:14:55.672" status="PASS" starttime="20170808 03:14:55.671"></status>
</kw>
<status endtime="20170808 03:14:55.672" status="PASS" starttime="20170808 03:14:55.670"></status>
</kw>
<status endtime="20170808 03:14:55.672" status="PASS" starttime="20170808 03:14:55.669"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:14:57.379" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:14:57.379" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:14:57.379" status="PASS" starttime="20170808 03:14:55.673"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:14:57.381" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:14:57.381" status="PASS" starttime="20170808 03:14:57.381"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:14:57.383" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:14:57.383" status="PASS" starttime="20170808 03:14:57.382"></status>
</kw>
<status endtime="20170808 03:14:57.383" status="PASS" starttime="20170808 03:14:57.382"></status>
</kw>
<status endtime="20170808 03:14:57.383" status="PASS" starttime="20170808 03:14:57.380"></status>
</kw>
<status endtime="20170808 03:14:57.383" status="PASS" starttime="20170808 03:14:57.380"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:14:57.383" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:14:57.384" status="PASS" starttime="20170808 03:14:57.383"></status>
</kw>
<msg timestamp="20170808 03:14:57.384" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:14:57.384" status="PASS" starttime="20170808 03:14:55.221"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:14:57.384" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:14:57.384" status="PASS" starttime="20170808 03:14:57.384"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:14:57.385" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:14:57.385" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:14:57.385" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:14:57.385" status="PASS" starttime="20170808 03:14:57.385"></status>
</kw>
<msg timestamp="20170808 03:14:57.386" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:14:57.386" status="PASS" starttime="20170808 03:14:55.220"></status>
</kw>
<msg timestamp="20170808 03:14:57.386" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:14:57.386" status="PASS" starttime="20170808 03:14:55.220"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:14:57.387" level="FAIL">On != Off</msg>
<status endtime="20170808 03:14:57.387" status="FAIL" starttime="20170808 03:14:57.386"></status>
</kw>
<status endtime="20170808 03:14:57.387" status="FAIL" starttime="20170808 03:14:55.220"></status>
</kw>
<status endtime="20170808 03:14:57.387" status="FAIL" starttime="20170808 03:14:55.219"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:15:07.392" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:15:07.392" status="PASS" starttime="20170808 03:15:07.391"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:15:07.393" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:15:07.393" status="PASS" starttime="20170808 03:15:07.392"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:15:07.393" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:15:07.393" status="PASS" starttime="20170808 03:15:07.393"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:15:07.394" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:15:07.394" status="PASS" starttime="20170808 03:15:07.394"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:15:07.604" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:15:07.604" status="PASS" starttime="20170808 03:15:07.395"></status>
</kw>
<msg timestamp="20170808 03:15:07.604" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:15:07.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:15:07.604" status="PASS" starttime="20170808 03:15:07.394"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:15:07.605" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:15:07.605" status="PASS" starttime="20170808 03:15:07.604"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:15:07.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:15:07.605" status="PASS" starttime="20170808 03:15:07.605"></status>
</kw>
<status endtime="20170808 03:15:07.605" status="PASS" starttime="20170808 03:15:07.391"></status>
</kw>
<status endtime="20170808 03:15:07.606" status="PASS" starttime="20170808 03:15:07.391"></status>
</kw>
<status endtime="20170808 03:15:07.606" status="PASS" starttime="20170808 03:15:07.390"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:15:07.606" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:15:07.606" status="PASS" starttime="20170808 03:15:07.606"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:15:07.608" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:15:07.608" status="PASS" starttime="20170808 03:15:07.608"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:15:07.609" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:15:07.609" status="PASS" starttime="20170808 03:15:07.609"></status>
</kw>
<status endtime="20170808 03:15:07.610" status="PASS" starttime="20170808 03:15:07.609"></status>
</kw>
<status endtime="20170808 03:15:07.610" status="PASS" starttime="20170808 03:15:07.607"></status>
</kw>
<status endtime="20170808 03:15:07.610" status="PASS" starttime="20170808 03:15:07.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:15:07.731" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:15:07.731" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:15:07.731" status="PASS" starttime="20170808 03:15:07.610"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:15:07.733" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:15:07.733" status="PASS" starttime="20170808 03:15:07.732"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:15:07.734" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:15:07.734" status="PASS" starttime="20170808 03:15:07.733"></status>
</kw>
<status endtime="20170808 03:15:07.734" status="PASS" starttime="20170808 03:15:07.733"></status>
</kw>
<status endtime="20170808 03:15:07.734" status="PASS" starttime="20170808 03:15:07.732"></status>
</kw>
<status endtime="20170808 03:15:07.734" status="PASS" starttime="20170808 03:15:07.731"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:15:07.734" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:15:07.734" status="PASS" starttime="20170808 03:15:07.734"></status>
</kw>
<msg timestamp="20170808 03:15:07.735" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:15:07.735" status="PASS" starttime="20170808 03:15:07.389"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:15:07.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:15:07.735" status="PASS" starttime="20170808 03:15:07.735"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:15:07.736" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:15:07.736" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:15:07.736" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:15:07.736" status="PASS" starttime="20170808 03:15:07.736"></status>
</kw>
<msg timestamp="20170808 03:15:07.736" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:15:07.736" status="PASS" starttime="20170808 03:15:07.389"></status>
</kw>
<msg timestamp="20170808 03:15:07.737" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:15:07.737" status="PASS" starttime="20170808 03:15:07.388"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:15:07.737" level="FAIL">On != Off</msg>
<status endtime="20170808 03:15:07.737" status="FAIL" starttime="20170808 03:15:07.737"></status>
</kw>
<status endtime="20170808 03:15:07.738" status="FAIL" starttime="20170808 03:15:07.388"></status>
</kw>
<status endtime="20170808 03:15:07.738" status="FAIL" starttime="20170808 03:15:07.387"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:15:17.745" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:15:17.745" status="PASS" starttime="20170808 03:15:17.744"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:15:17.746" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:15:17.746" status="PASS" starttime="20170808 03:15:17.746"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:15:17.747" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:15:17.747" status="PASS" starttime="20170808 03:15:17.746"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:15:17.747" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:15:17.747" status="PASS" starttime="20170808 03:15:17.747"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:15:18.242" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:15:18.242" status="PASS" starttime="20170808 03:15:17.748"></status>
</kw>
<msg timestamp="20170808 03:15:18.242" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:15:18.243" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:15:18.243" status="PASS" starttime="20170808 03:15:17.748"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:15:18.243" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:15:18.243" status="PASS" starttime="20170808 03:15:18.243"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:15:18.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:15:18.244" status="PASS" starttime="20170808 03:15:18.244"></status>
</kw>
<status endtime="20170808 03:15:18.244" status="PASS" starttime="20170808 03:15:17.743"></status>
</kw>
<status endtime="20170808 03:15:18.244" status="PASS" starttime="20170808 03:15:17.743"></status>
</kw>
<status endtime="20170808 03:15:18.244" status="PASS" starttime="20170808 03:15:17.742"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:15:18.245" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:15:18.245" status="PASS" starttime="20170808 03:15:18.245"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:15:18.247" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:15:18.248" status="PASS" starttime="20170808 03:15:18.247"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:15:18.249" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:15:18.249" status="PASS" starttime="20170808 03:15:18.248"></status>
</kw>
<status endtime="20170808 03:15:18.249" status="PASS" starttime="20170808 03:15:18.248"></status>
</kw>
<status endtime="20170808 03:15:18.249" status="PASS" starttime="20170808 03:15:18.246"></status>
</kw>
<status endtime="20170808 03:15:18.249" status="PASS" starttime="20170808 03:15:18.245"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:15:18.385" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:15:18.385" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:15:18.385" status="PASS" starttime="20170808 03:15:18.249"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:15:18.387" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:15:18.387" status="PASS" starttime="20170808 03:15:18.386"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:15:18.388" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:15:18.388" status="PASS" starttime="20170808 03:15:18.387"></status>
</kw>
<status endtime="20170808 03:15:18.388" status="PASS" starttime="20170808 03:15:18.387"></status>
</kw>
<status endtime="20170808 03:15:18.388" status="PASS" starttime="20170808 03:15:18.386"></status>
</kw>
<status endtime="20170808 03:15:18.388" status="PASS" starttime="20170808 03:15:18.385"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:15:18.389" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:15:18.389" status="PASS" starttime="20170808 03:15:18.389"></status>
</kw>
<msg timestamp="20170808 03:15:18.389" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:15:18.389" status="PASS" starttime="20170808 03:15:17.741"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:15:18.390" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:15:18.390" status="PASS" starttime="20170808 03:15:18.389"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:15:18.390" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:15:18.390" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:15:18.390" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:15:18.390" status="PASS" starttime="20170808 03:15:18.390"></status>
</kw>
<msg timestamp="20170808 03:15:18.391" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:15:18.391" status="PASS" starttime="20170808 03:15:17.740"></status>
</kw>
<msg timestamp="20170808 03:15:18.391" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:15:18.391" status="PASS" starttime="20170808 03:15:17.739"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:15:18.392" level="FAIL">On != Off</msg>
<status endtime="20170808 03:15:18.392" status="FAIL" starttime="20170808 03:15:18.391"></status>
</kw>
<status endtime="20170808 03:15:18.392" status="FAIL" starttime="20170808 03:15:17.739"></status>
</kw>
<status endtime="20170808 03:15:18.392" status="FAIL" starttime="20170808 03:15:17.738"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:15:28.397" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:15:28.397" status="PASS" starttime="20170808 03:15:28.397"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:15:28.398" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:15:28.398" status="PASS" starttime="20170808 03:15:28.398"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:15:28.399" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:15:28.399" status="PASS" starttime="20170808 03:15:28.398"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:15:28.399" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:15:28.399" status="PASS" starttime="20170808 03:15:28.399"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:15:28.922" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:15:28.922" status="PASS" starttime="20170808 03:15:28.400"></status>
</kw>
<msg timestamp="20170808 03:15:28.922" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:15:28.922" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:15:28.922" status="PASS" starttime="20170808 03:15:28.400"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:15:28.923" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:15:28.923" status="PASS" starttime="20170808 03:15:28.922"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:15:28.923" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:15:28.923" status="PASS" starttime="20170808 03:15:28.923"></status>
</kw>
<status endtime="20170808 03:15:28.924" status="PASS" starttime="20170808 03:15:28.396"></status>
</kw>
<status endtime="20170808 03:15:28.924" status="PASS" starttime="20170808 03:15:28.396"></status>
</kw>
<status endtime="20170808 03:15:28.924" status="PASS" starttime="20170808 03:15:28.395"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:15:28.924" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:15:28.924" status="PASS" starttime="20170808 03:15:28.924"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:15:28.926" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:15:28.927" status="PASS" starttime="20170808 03:15:28.926"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:15:28.927" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:15:28.927" status="PASS" starttime="20170808 03:15:28.927"></status>
</kw>
<status endtime="20170808 03:15:28.928" status="PASS" starttime="20170808 03:15:28.927"></status>
</kw>
<status endtime="20170808 03:15:28.928" status="PASS" starttime="20170808 03:15:28.925"></status>
</kw>
<status endtime="20170808 03:15:28.928" status="PASS" starttime="20170808 03:15:28.925"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:15:32.698" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:15:32.699" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:15:32.699" status="PASS" starttime="20170808 03:15:28.928"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:15:32.700" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:15:32.701" status="PASS" starttime="20170808 03:15:32.700"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:15:32.701" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:15:32.701" status="PASS" starttime="20170808 03:15:32.701"></status>
</kw>
<status endtime="20170808 03:15:32.702" status="PASS" starttime="20170808 03:15:32.701"></status>
</kw>
<status endtime="20170808 03:15:32.702" status="PASS" starttime="20170808 03:15:32.699"></status>
</kw>
<status endtime="20170808 03:15:32.702" status="PASS" starttime="20170808 03:15:32.699"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:15:32.702" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:15:32.702" status="PASS" starttime="20170808 03:15:32.702"></status>
</kw>
<msg timestamp="20170808 03:15:32.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:15:32.702" status="PASS" starttime="20170808 03:15:28.394"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:15:32.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:15:32.703" status="PASS" starttime="20170808 03:15:32.703"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:15:32.704" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:15:32.704" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:15:32.704" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:15:32.704" status="PASS" starttime="20170808 03:15:32.703"></status>
</kw>
<msg timestamp="20170808 03:15:32.704" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:15:32.704" status="PASS" starttime="20170808 03:15:28.394"></status>
</kw>
<msg timestamp="20170808 03:15:32.704" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:15:32.704" status="PASS" starttime="20170808 03:15:28.393"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:15:32.705" level="FAIL">On != Off</msg>
<status endtime="20170808 03:15:32.705" status="FAIL" starttime="20170808 03:15:32.705"></status>
</kw>
<status endtime="20170808 03:15:32.705" status="FAIL" starttime="20170808 03:15:28.393"></status>
</kw>
<status endtime="20170808 03:15:32.705" status="FAIL" starttime="20170808 03:15:28.393"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:15:42.711" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:15:42.711" status="PASS" starttime="20170808 03:15:42.710"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:15:42.712" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:15:42.712" status="PASS" starttime="20170808 03:15:42.711"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:15:42.712" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:15:42.712" status="PASS" starttime="20170808 03:15:42.712"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:15:42.713" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:15:42.713" status="PASS" starttime="20170808 03:15:42.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:15:42.896" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:15:42.897" status="PASS" starttime="20170808 03:15:42.714"></status>
</kw>
<msg timestamp="20170808 03:15:42.897" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:15:42.897" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:15:42.897" status="PASS" starttime="20170808 03:15:42.713"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:15:42.897" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:15:42.898" status="PASS" starttime="20170808 03:15:42.897"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:15:42.898" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:15:42.898" status="PASS" starttime="20170808 03:15:42.898"></status>
</kw>
<status endtime="20170808 03:15:42.898" status="PASS" starttime="20170808 03:15:42.710"></status>
</kw>
<status endtime="20170808 03:15:42.898" status="PASS" starttime="20170808 03:15:42.709"></status>
</kw>
<status endtime="20170808 03:15:42.899" status="PASS" starttime="20170808 03:15:42.708"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:15:42.899" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:15:42.899" status="PASS" starttime="20170808 03:15:42.899"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:15:42.901" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:15:42.901" status="PASS" starttime="20170808 03:15:42.901"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:15:42.902" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:15:42.902" status="PASS" starttime="20170808 03:15:42.902"></status>
</kw>
<status endtime="20170808 03:15:42.902" status="PASS" starttime="20170808 03:15:42.901"></status>
</kw>
<status endtime="20170808 03:15:42.902" status="PASS" starttime="20170808 03:15:42.900"></status>
</kw>
<status endtime="20170808 03:15:42.902" status="PASS" starttime="20170808 03:15:42.899"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:15:42.967" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:15:42.967" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:15:42.967" status="PASS" starttime="20170808 03:15:42.903"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:15:42.969" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:15:42.969" status="PASS" starttime="20170808 03:15:42.968"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:15:42.970" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:15:42.970" status="PASS" starttime="20170808 03:15:42.970"></status>
</kw>
<status endtime="20170808 03:15:42.970" status="PASS" starttime="20170808 03:15:42.969"></status>
</kw>
<status endtime="20170808 03:15:42.971" status="PASS" starttime="20170808 03:15:42.968"></status>
</kw>
<status endtime="20170808 03:15:42.971" status="PASS" starttime="20170808 03:15:42.967"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:15:42.971" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:15:42.971" status="PASS" starttime="20170808 03:15:42.971"></status>
</kw>
<msg timestamp="20170808 03:15:42.971" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:15:42.971" status="PASS" starttime="20170808 03:15:42.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:15:42.972" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:15:42.972" status="PASS" starttime="20170808 03:15:42.972"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:15:42.973" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:15:42.973" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:15:42.973" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:15:42.973" status="PASS" starttime="20170808 03:15:42.972"></status>
</kw>
<msg timestamp="20170808 03:15:42.973" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:15:42.973" status="PASS" starttime="20170808 03:15:42.707"></status>
</kw>
<msg timestamp="20170808 03:15:42.974" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:15:42.974" status="PASS" starttime="20170808 03:15:42.707"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:15:42.975" level="FAIL">On != Off</msg>
<status endtime="20170808 03:15:42.975" status="FAIL" starttime="20170808 03:15:42.974"></status>
</kw>
<status endtime="20170808 03:15:42.975" status="FAIL" starttime="20170808 03:15:42.706"></status>
</kw>
<status endtime="20170808 03:15:42.975" status="FAIL" starttime="20170808 03:15:42.706"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:15:52.980" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:15:52.981" status="PASS" starttime="20170808 03:15:52.980"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:15:52.981" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:15:52.981" status="PASS" starttime="20170808 03:15:52.981"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:15:52.982" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:15:52.982" status="PASS" starttime="20170808 03:15:52.981"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:15:52.982" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:15:52.983" status="PASS" starttime="20170808 03:15:52.982"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:15:53.329" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:15:53.329" status="PASS" starttime="20170808 03:15:52.983"></status>
</kw>
<msg timestamp="20170808 03:15:53.329" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:15:53.329" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:15:53.329" status="PASS" starttime="20170808 03:15:52.983"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:15:53.330" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:15:53.330" status="PASS" starttime="20170808 03:15:53.329"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:15:53.330" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:15:53.331" status="PASS" starttime="20170808 03:15:53.330"></status>
</kw>
<status endtime="20170808 03:15:53.331" status="PASS" starttime="20170808 03:15:52.979"></status>
</kw>
<status endtime="20170808 03:15:53.331" status="PASS" starttime="20170808 03:15:52.979"></status>
</kw>
<status endtime="20170808 03:15:53.331" status="PASS" starttime="20170808 03:15:52.978"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:15:53.332" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:15:53.332" status="PASS" starttime="20170808 03:15:53.331"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:15:53.334" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:15:53.334" status="PASS" starttime="20170808 03:15:53.333"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:15:53.335" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:15:53.335" status="PASS" starttime="20170808 03:15:53.335"></status>
</kw>
<status endtime="20170808 03:15:53.335" status="PASS" starttime="20170808 03:15:53.334"></status>
</kw>
<status endtime="20170808 03:15:53.335" status="PASS" starttime="20170808 03:15:53.333"></status>
</kw>
<status endtime="20170808 03:15:53.335" status="PASS" starttime="20170808 03:15:53.332"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:15:53.422" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:15:53.422" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:15:53.422" status="PASS" starttime="20170808 03:15:53.336"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:15:53.425" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:15:53.425" status="PASS" starttime="20170808 03:15:53.424"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:15:53.425" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:15:53.426" status="PASS" starttime="20170808 03:15:53.425"></status>
</kw>
<status endtime="20170808 03:15:53.426" status="PASS" starttime="20170808 03:15:53.425"></status>
</kw>
<status endtime="20170808 03:15:53.426" status="PASS" starttime="20170808 03:15:53.423"></status>
</kw>
<status endtime="20170808 03:15:53.426" status="PASS" starttime="20170808 03:15:53.422"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:15:53.426" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:15:53.426" status="PASS" starttime="20170808 03:15:53.426"></status>
</kw>
<msg timestamp="20170808 03:15:53.427" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:15:53.427" status="PASS" starttime="20170808 03:15:52.978"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:15:53.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:15:53.427" status="PASS" starttime="20170808 03:15:53.427"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:15:53.428" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:15:53.428" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:15:53.428" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:15:53.428" status="PASS" starttime="20170808 03:15:53.428"></status>
</kw>
<msg timestamp="20170808 03:15:53.428" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:15:53.428" status="PASS" starttime="20170808 03:15:52.977"></status>
</kw>
<msg timestamp="20170808 03:15:53.429" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:15:53.429" status="PASS" starttime="20170808 03:15:52.977"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:15:53.429" level="FAIL">On != Off</msg>
<status endtime="20170808 03:15:53.429" status="FAIL" starttime="20170808 03:15:53.429"></status>
</kw>
<status endtime="20170808 03:15:53.430" status="FAIL" starttime="20170808 03:15:52.976"></status>
</kw>
<status endtime="20170808 03:15:53.430" status="FAIL" starttime="20170808 03:15:52.976"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:16:03.435" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:16:03.435" status="PASS" starttime="20170808 03:16:03.434"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:16:03.436" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:16:03.436" status="PASS" starttime="20170808 03:16:03.435"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:16:03.436" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:16:03.436" status="PASS" starttime="20170808 03:16:03.436"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:16:03.437" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:16:03.437" status="PASS" starttime="20170808 03:16:03.437"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:16:03.966" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:16:03.966" status="PASS" starttime="20170808 03:16:03.438"></status>
</kw>
<msg timestamp="20170808 03:16:03.966" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:16:03.966" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:16:03.966" status="PASS" starttime="20170808 03:16:03.437"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:16:03.967" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:16:03.967" status="PASS" starttime="20170808 03:16:03.967"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:16:03.968" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:16:03.968" status="PASS" starttime="20170808 03:16:03.967"></status>
</kw>
<status endtime="20170808 03:16:03.968" status="PASS" starttime="20170808 03:16:03.433"></status>
</kw>
<status endtime="20170808 03:16:03.968" status="PASS" starttime="20170808 03:16:03.433"></status>
</kw>
<status endtime="20170808 03:16:03.968" status="PASS" starttime="20170808 03:16:03.432"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:16:03.969" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:16:03.969" status="PASS" starttime="20170808 03:16:03.968"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:16:03.971" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:16:03.971" status="PASS" starttime="20170808 03:16:03.970"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:16:03.972" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:16:03.972" status="PASS" starttime="20170808 03:16:03.972"></status>
</kw>
<status endtime="20170808 03:16:03.972" status="PASS" starttime="20170808 03:16:03.971"></status>
</kw>
<status endtime="20170808 03:16:03.972" status="PASS" starttime="20170808 03:16:03.969"></status>
</kw>
<status endtime="20170808 03:16:03.972" status="PASS" starttime="20170808 03:16:03.969"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:16:09.701" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:16:09.701" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:16:09.701" status="PASS" starttime="20170808 03:16:03.972"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:16:09.703" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:16:09.703" status="PASS" starttime="20170808 03:16:09.703"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:16:09.705" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:16:09.705" status="PASS" starttime="20170808 03:16:09.704"></status>
</kw>
<status endtime="20170808 03:16:09.705" status="PASS" starttime="20170808 03:16:09.704"></status>
</kw>
<status endtime="20170808 03:16:09.705" status="PASS" starttime="20170808 03:16:09.702"></status>
</kw>
<status endtime="20170808 03:16:09.705" status="PASS" starttime="20170808 03:16:09.702"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:16:09.705" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:16:09.705" status="PASS" starttime="20170808 03:16:09.705"></status>
</kw>
<msg timestamp="20170808 03:16:09.706" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:16:09.706" status="PASS" starttime="20170808 03:16:03.432"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:16:09.706" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:16:09.706" status="PASS" starttime="20170808 03:16:09.706"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:16:09.707" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:16:09.707" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:16:09.707" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:16:09.707" status="PASS" starttime="20170808 03:16:09.707"></status>
</kw>
<msg timestamp="20170808 03:16:09.707" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:16:09.707" status="PASS" starttime="20170808 03:16:03.431"></status>
</kw>
<msg timestamp="20170808 03:16:09.708" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:16:09.708" status="PASS" starttime="20170808 03:16:03.431"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:16:09.708" level="FAIL">On != Off</msg>
<status endtime="20170808 03:16:09.708" status="FAIL" starttime="20170808 03:16:09.708"></status>
</kw>
<status endtime="20170808 03:16:09.709" status="FAIL" starttime="20170808 03:16:03.431"></status>
</kw>
<status endtime="20170808 03:16:09.709" status="FAIL" starttime="20170808 03:16:03.430"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:16:19.714" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:16:19.714" status="PASS" starttime="20170808 03:16:19.713"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:16:19.715" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:16:19.715" status="PASS" starttime="20170808 03:16:19.714"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:16:19.715" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:16:19.715" status="PASS" starttime="20170808 03:16:19.715"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:16:19.716" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:16:19.716" status="PASS" starttime="20170808 03:16:19.716"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:16:19.958" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:16:19.958" status="PASS" starttime="20170808 03:16:19.717"></status>
</kw>
<msg timestamp="20170808 03:16:19.959" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:16:19.959" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:16:19.959" status="PASS" starttime="20170808 03:16:19.716"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:16:19.959" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:16:19.959" status="PASS" starttime="20170808 03:16:19.959"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:16:19.960" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:16:19.960" status="PASS" starttime="20170808 03:16:19.960"></status>
</kw>
<status endtime="20170808 03:16:19.960" status="PASS" starttime="20170808 03:16:19.713"></status>
</kw>
<status endtime="20170808 03:16:19.960" status="PASS" starttime="20170808 03:16:19.712"></status>
</kw>
<status endtime="20170808 03:16:19.960" status="PASS" starttime="20170808 03:16:19.712"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:16:19.961" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:16:19.961" status="PASS" starttime="20170808 03:16:19.961"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:16:19.963" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:16:19.963" status="PASS" starttime="20170808 03:16:19.962"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:16:19.964" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:16:19.964" status="PASS" starttime="20170808 03:16:19.964"></status>
</kw>
<status endtime="20170808 03:16:19.964" status="PASS" starttime="20170808 03:16:19.963"></status>
</kw>
<status endtime="20170808 03:16:19.964" status="PASS" starttime="20170808 03:16:19.962"></status>
</kw>
<status endtime="20170808 03:16:19.964" status="PASS" starttime="20170808 03:16:19.961"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:16:20.028" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:16:20.028" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:16:20.028" status="PASS" starttime="20170808 03:16:19.964"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:16:20.031" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:16:20.031" status="PASS" starttime="20170808 03:16:20.030"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:16:20.032" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:16:20.032" status="PASS" starttime="20170808 03:16:20.032"></status>
</kw>
<status endtime="20170808 03:16:20.032" status="PASS" starttime="20170808 03:16:20.031"></status>
</kw>
<status endtime="20170808 03:16:20.032" status="PASS" starttime="20170808 03:16:20.029"></status>
</kw>
<status endtime="20170808 03:16:20.032" status="PASS" starttime="20170808 03:16:20.029"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:16:20.033" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:16:20.033" status="PASS" starttime="20170808 03:16:20.033"></status>
</kw>
<msg timestamp="20170808 03:16:20.033" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:16:20.033" status="PASS" starttime="20170808 03:16:19.711"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:16:20.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:16:20.034" status="PASS" starttime="20170808 03:16:20.034"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:16:20.034" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:16:20.034" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:16:20.035" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:16:20.035" status="PASS" starttime="20170808 03:16:20.034"></status>
</kw>
<msg timestamp="20170808 03:16:20.035" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:16:20.035" status="PASS" starttime="20170808 03:16:19.710"></status>
</kw>
<msg timestamp="20170808 03:16:20.035" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:16:20.035" status="PASS" starttime="20170808 03:16:19.710"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:16:20.036" level="FAIL">On != Off</msg>
<status endtime="20170808 03:16:20.036" status="FAIL" starttime="20170808 03:16:20.036"></status>
</kw>
<status endtime="20170808 03:16:20.036" status="FAIL" starttime="20170808 03:16:19.710"></status>
</kw>
<status endtime="20170808 03:16:20.036" status="FAIL" starttime="20170808 03:16:19.709"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:16:30.043" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:16:30.044" status="PASS" starttime="20170808 03:16:30.043"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:16:30.044" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:16:30.044" status="PASS" starttime="20170808 03:16:30.044"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:16:30.045" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:16:30.045" status="PASS" starttime="20170808 03:16:30.045"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:16:30.046" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:16:30.046" status="PASS" starttime="20170808 03:16:30.046"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:16:31.131" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:16:31.131" status="PASS" starttime="20170808 03:16:30.047"></status>
</kw>
<msg timestamp="20170808 03:16:31.131" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:16:31.131" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:16:31.132" status="PASS" starttime="20170808 03:16:30.047"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:16:31.132" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:16:31.132" status="PASS" starttime="20170808 03:16:31.132"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:16:31.133" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:16:31.133" status="PASS" starttime="20170808 03:16:31.133"></status>
</kw>
<status endtime="20170808 03:16:31.133" status="PASS" starttime="20170808 03:16:30.041"></status>
</kw>
<status endtime="20170808 03:16:31.133" status="PASS" starttime="20170808 03:16:30.041"></status>
</kw>
<status endtime="20170808 03:16:31.133" status="PASS" starttime="20170808 03:16:30.040"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:16:31.134" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:16:31.134" status="PASS" starttime="20170808 03:16:31.134"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:16:31.136" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:16:31.136" status="PASS" starttime="20170808 03:16:31.135"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:16:31.137" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:16:31.137" status="PASS" starttime="20170808 03:16:31.137"></status>
</kw>
<status endtime="20170808 03:16:31.137" status="PASS" starttime="20170808 03:16:31.136"></status>
</kw>
<status endtime="20170808 03:16:31.137" status="PASS" starttime="20170808 03:16:31.135"></status>
</kw>
<status endtime="20170808 03:16:31.137" status="PASS" starttime="20170808 03:16:31.134"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:16:32.961" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:16:32.961" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:16:32.961" status="PASS" starttime="20170808 03:16:31.138"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:16:32.963" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:16:32.963" status="PASS" starttime="20170808 03:16:32.962"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:16:32.964" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:16:32.964" status="PASS" starttime="20170808 03:16:32.964"></status>
</kw>
<status endtime="20170808 03:16:32.964" status="PASS" starttime="20170808 03:16:32.963"></status>
</kw>
<status endtime="20170808 03:16:32.964" status="PASS" starttime="20170808 03:16:32.962"></status>
</kw>
<status endtime="20170808 03:16:32.965" status="PASS" starttime="20170808 03:16:32.961"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:16:32.965" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:16:32.965" status="PASS" starttime="20170808 03:16:32.965"></status>
</kw>
<msg timestamp="20170808 03:16:32.965" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:16:32.965" status="PASS" starttime="20170808 03:16:30.039"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:16:32.966" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:16:32.966" status="PASS" starttime="20170808 03:16:32.965"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:16:32.966" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:16:32.966" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:16:32.967" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:16:32.967" status="PASS" starttime="20170808 03:16:32.966"></status>
</kw>
<msg timestamp="20170808 03:16:32.967" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:16:32.967" status="PASS" starttime="20170808 03:16:30.038"></status>
</kw>
<msg timestamp="20170808 03:16:32.967" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:16:32.967" status="PASS" starttime="20170808 03:16:30.038"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:16:32.968" level="FAIL">On != Off</msg>
<status endtime="20170808 03:16:32.968" status="FAIL" starttime="20170808 03:16:32.967"></status>
</kw>
<status endtime="20170808 03:16:32.968" status="FAIL" starttime="20170808 03:16:30.037"></status>
</kw>
<status endtime="20170808 03:16:32.968" status="FAIL" starttime="20170808 03:16:30.037"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:16:42.973" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:16:42.974" status="PASS" starttime="20170808 03:16:42.973"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:16:42.974" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:16:42.974" status="PASS" starttime="20170808 03:16:42.974"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:16:42.975" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:16:42.975" status="PASS" starttime="20170808 03:16:42.974"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:16:42.975" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:16:42.975" status="PASS" starttime="20170808 03:16:42.975"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:16:43.161" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:16:43.161" status="PASS" starttime="20170808 03:16:42.976"></status>
</kw>
<msg timestamp="20170808 03:16:43.161" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:16:43.161" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:16:43.161" status="PASS" starttime="20170808 03:16:42.976"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:16:43.162" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:16:43.162" status="PASS" starttime="20170808 03:16:43.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:16:43.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:16:43.163" status="PASS" starttime="20170808 03:16:43.162"></status>
</kw>
<status endtime="20170808 03:16:43.163" status="PASS" starttime="20170808 03:16:42.972"></status>
</kw>
<status endtime="20170808 03:16:43.163" status="PASS" starttime="20170808 03:16:42.972"></status>
</kw>
<status endtime="20170808 03:16:43.163" status="PASS" starttime="20170808 03:16:42.971"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:16:43.163" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:16:43.164" status="PASS" starttime="20170808 03:16:43.163"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:16:43.166" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:16:43.166" status="PASS" starttime="20170808 03:16:43.165"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:16:43.167" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:16:43.167" status="PASS" starttime="20170808 03:16:43.167"></status>
</kw>
<status endtime="20170808 03:16:43.167" status="PASS" starttime="20170808 03:16:43.166"></status>
</kw>
<status endtime="20170808 03:16:43.167" status="PASS" starttime="20170808 03:16:43.164"></status>
</kw>
<status endtime="20170808 03:16:43.167" status="PASS" starttime="20170808 03:16:43.164"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:16:43.231" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:16:43.232" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:16:43.232" status="PASS" starttime="20170808 03:16:43.168"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:16:43.233" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:16:43.233" status="PASS" starttime="20170808 03:16:43.233"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:16:43.234" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:16:43.234" status="PASS" starttime="20170808 03:16:43.234"></status>
</kw>
<status endtime="20170808 03:16:43.235" status="PASS" starttime="20170808 03:16:43.234"></status>
</kw>
<status endtime="20170808 03:16:43.235" status="PASS" starttime="20170808 03:16:43.232"></status>
</kw>
<status endtime="20170808 03:16:43.235" status="PASS" starttime="20170808 03:16:43.232"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:16:43.235" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:16:43.235" status="PASS" starttime="20170808 03:16:43.235"></status>
</kw>
<msg timestamp="20170808 03:16:43.235" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:16:43.235" status="PASS" starttime="20170808 03:16:42.971"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:16:43.236" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:16:43.236" status="PASS" starttime="20170808 03:16:43.236"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:16:43.237" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:16:43.237" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:16:43.237" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:16:43.237" status="PASS" starttime="20170808 03:16:43.236"></status>
</kw>
<msg timestamp="20170808 03:16:43.237" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:16:43.237" status="PASS" starttime="20170808 03:16:42.970"></status>
</kw>
<msg timestamp="20170808 03:16:43.237" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:16:43.237" status="PASS" starttime="20170808 03:16:42.970"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:16:43.238" level="FAIL">On != Off</msg>
<status endtime="20170808 03:16:43.238" status="FAIL" starttime="20170808 03:16:43.238"></status>
</kw>
<status endtime="20170808 03:16:43.238" status="FAIL" starttime="20170808 03:16:42.969"></status>
</kw>
<status endtime="20170808 03:16:43.238" status="FAIL" starttime="20170808 03:16:42.969"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:16:53.244" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:16:53.244" status="PASS" starttime="20170808 03:16:53.243"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:16:53.245" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:16:53.245" status="PASS" starttime="20170808 03:16:53.244"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:16:53.245" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:16:53.245" status="PASS" starttime="20170808 03:16:53.245"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:16:53.246" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:16:53.246" status="PASS" starttime="20170808 03:16:53.245"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:16:53.464" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:16:53.464" status="PASS" starttime="20170808 03:16:53.247"></status>
</kw>
<msg timestamp="20170808 03:16:53.464" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:16:53.464" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:16:53.464" status="PASS" starttime="20170808 03:16:53.246"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:16:53.465" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:16:53.465" status="PASS" starttime="20170808 03:16:53.465"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:16:53.466" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:16:53.466" status="PASS" starttime="20170808 03:16:53.465"></status>
</kw>
<status endtime="20170808 03:16:53.466" status="PASS" starttime="20170808 03:16:53.242"></status>
</kw>
<status endtime="20170808 03:16:53.466" status="PASS" starttime="20170808 03:16:53.242"></status>
</kw>
<status endtime="20170808 03:16:53.466" status="PASS" starttime="20170808 03:16:53.241"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:16:53.467" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:16:53.467" status="PASS" starttime="20170808 03:16:53.466"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:16:53.469" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:16:53.469" status="PASS" starttime="20170808 03:16:53.468"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:16:53.470" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:16:53.470" status="PASS" starttime="20170808 03:16:53.469"></status>
</kw>
<status endtime="20170808 03:16:53.470" status="PASS" starttime="20170808 03:16:53.469"></status>
</kw>
<status endtime="20170808 03:16:53.470" status="PASS" starttime="20170808 03:16:53.467"></status>
</kw>
<status endtime="20170808 03:16:53.470" status="PASS" starttime="20170808 03:16:53.467"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:16:53.561" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:16:53.561" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:16:53.561" status="PASS" starttime="20170808 03:16:53.470"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:16:53.563" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:16:53.563" status="PASS" starttime="20170808 03:16:53.563"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:16:53.564" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:16:53.565" status="PASS" starttime="20170808 03:16:53.564"></status>
</kw>
<status endtime="20170808 03:16:53.565" status="PASS" starttime="20170808 03:16:53.563"></status>
</kw>
<status endtime="20170808 03:16:53.565" status="PASS" starttime="20170808 03:16:53.562"></status>
</kw>
<status endtime="20170808 03:16:53.565" status="PASS" starttime="20170808 03:16:53.562"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:16:53.565" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:16:53.565" status="PASS" starttime="20170808 03:16:53.565"></status>
</kw>
<msg timestamp="20170808 03:16:53.566" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:16:53.566" status="PASS" starttime="20170808 03:16:53.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:16:53.566" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:16:53.566" status="PASS" starttime="20170808 03:16:53.566"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:16:53.567" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:16:53.567" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:16:53.567" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:16:53.567" status="PASS" starttime="20170808 03:16:53.566"></status>
</kw>
<msg timestamp="20170808 03:16:53.567" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:16:53.567" status="PASS" starttime="20170808 03:16:53.240"></status>
</kw>
<msg timestamp="20170808 03:16:53.568" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:16:53.568" status="PASS" starttime="20170808 03:16:53.240"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:16:53.568" level="FAIL">On != Off</msg>
<status endtime="20170808 03:16:53.568" status="FAIL" starttime="20170808 03:16:53.568"></status>
</kw>
<status endtime="20170808 03:16:53.569" status="FAIL" starttime="20170808 03:16:53.239"></status>
</kw>
<status endtime="20170808 03:16:53.569" status="FAIL" starttime="20170808 03:16:53.239"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:17:03.574" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:17:03.574" status="PASS" starttime="20170808 03:17:03.573"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:17:03.575" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:17:03.575" status="PASS" starttime="20170808 03:17:03.574"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:17:03.575" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:17:03.575" status="PASS" starttime="20170808 03:17:03.575"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:17:03.576" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:17:03.576" status="PASS" starttime="20170808 03:17:03.575"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:17:03.764" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:17:03.764" status="PASS" starttime="20170808 03:17:03.577"></status>
</kw>
<msg timestamp="20170808 03:17:03.764" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:17:03.764" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:17:03.764" status="PASS" starttime="20170808 03:17:03.576"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:17:03.765" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:17:03.765" status="PASS" starttime="20170808 03:17:03.765"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:17:03.766" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:17:03.766" status="PASS" starttime="20170808 03:17:03.765"></status>
</kw>
<status endtime="20170808 03:17:03.766" status="PASS" starttime="20170808 03:17:03.573"></status>
</kw>
<status endtime="20170808 03:17:03.766" status="PASS" starttime="20170808 03:17:03.572"></status>
</kw>
<status endtime="20170808 03:17:03.766" status="PASS" starttime="20170808 03:17:03.572"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:17:03.767" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:17:03.767" status="PASS" starttime="20170808 03:17:03.766"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:17:03.769" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:17:03.769" status="PASS" starttime="20170808 03:17:03.768"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:17:03.769" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:17:03.770" status="PASS" starttime="20170808 03:17:03.769"></status>
</kw>
<status endtime="20170808 03:17:03.770" status="PASS" starttime="20170808 03:17:03.769"></status>
</kw>
<status endtime="20170808 03:17:03.770" status="PASS" starttime="20170808 03:17:03.767"></status>
</kw>
<status endtime="20170808 03:17:03.770" status="PASS" starttime="20170808 03:17:03.767"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:17:03.850" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:17:03.850" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:17:03.850" status="PASS" starttime="20170808 03:17:03.770"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:17:03.852" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:17:03.852" status="PASS" starttime="20170808 03:17:03.851"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:17:03.853" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:17:03.853" status="PASS" starttime="20170808 03:17:03.852"></status>
</kw>
<status endtime="20170808 03:17:03.853" status="PASS" starttime="20170808 03:17:03.852"></status>
</kw>
<status endtime="20170808 03:17:03.853" status="PASS" starttime="20170808 03:17:03.851"></status>
</kw>
<status endtime="20170808 03:17:03.853" status="PASS" starttime="20170808 03:17:03.850"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:17:03.853" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:17:03.854" status="PASS" starttime="20170808 03:17:03.853"></status>
</kw>
<msg timestamp="20170808 03:17:03.854" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:17:03.854" status="PASS" starttime="20170808 03:17:03.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:17:03.854" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:17:03.854" status="PASS" starttime="20170808 03:17:03.854"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:17:03.855" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:17:03.855" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:17:03.855" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:17:03.855" status="PASS" starttime="20170808 03:17:03.855"></status>
</kw>
<msg timestamp="20170808 03:17:03.855" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:17:03.855" status="PASS" starttime="20170808 03:17:03.570"></status>
</kw>
<msg timestamp="20170808 03:17:03.856" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:17:03.856" status="PASS" starttime="20170808 03:17:03.570"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:17:03.856" level="FAIL">On != Off</msg>
<status endtime="20170808 03:17:03.856" status="FAIL" starttime="20170808 03:17:03.856"></status>
</kw>
<status endtime="20170808 03:17:03.857" status="FAIL" starttime="20170808 03:17:03.570"></status>
</kw>
<status endtime="20170808 03:17:03.857" status="FAIL" starttime="20170808 03:17:03.569"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:17:13.862" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:17:13.862" status="PASS" starttime="20170808 03:17:13.862"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:17:13.863" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:17:13.863" status="PASS" starttime="20170808 03:17:13.863"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:17:13.864" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:17:13.864" status="PASS" starttime="20170808 03:17:13.863"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:17:13.864" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:17:13.864" status="PASS" starttime="20170808 03:17:13.864"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:17:14.443" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:17:14.443" status="PASS" starttime="20170808 03:17:13.865"></status>
</kw>
<msg timestamp="20170808 03:17:14.443" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:17:14.443" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:17:14.443" status="PASS" starttime="20170808 03:17:13.865"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:17:14.444" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:17:14.444" status="PASS" starttime="20170808 03:17:14.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:17:14.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:17:14.445" status="PASS" starttime="20170808 03:17:14.444"></status>
</kw>
<status endtime="20170808 03:17:14.445" status="PASS" starttime="20170808 03:17:13.861"></status>
</kw>
<status endtime="20170808 03:17:14.445" status="PASS" starttime="20170808 03:17:13.860"></status>
</kw>
<status endtime="20170808 03:17:14.445" status="PASS" starttime="20170808 03:17:13.860"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:17:14.446" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:17:14.446" status="PASS" starttime="20170808 03:17:14.445"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:17:14.448" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:17:14.448" status="PASS" starttime="20170808 03:17:14.447"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:17:14.449" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:17:14.449" status="PASS" starttime="20170808 03:17:14.448"></status>
</kw>
<status endtime="20170808 03:17:14.449" status="PASS" starttime="20170808 03:17:14.448"></status>
</kw>
<status endtime="20170808 03:17:14.449" status="PASS" starttime="20170808 03:17:14.446"></status>
</kw>
<status endtime="20170808 03:17:14.449" status="PASS" starttime="20170808 03:17:14.446"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:17:19.480" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:17:19.481" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:17:19.481" status="PASS" starttime="20170808 03:17:14.449"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:17:19.483" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:17:19.483" status="PASS" starttime="20170808 03:17:19.482"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:17:19.484" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:17:19.484" status="PASS" starttime="20170808 03:17:19.483"></status>
</kw>
<status endtime="20170808 03:17:19.484" status="PASS" starttime="20170808 03:17:19.483"></status>
</kw>
<status endtime="20170808 03:17:19.484" status="PASS" starttime="20170808 03:17:19.482"></status>
</kw>
<status endtime="20170808 03:17:19.484" status="PASS" starttime="20170808 03:17:19.481"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:17:19.485" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:17:19.485" status="PASS" starttime="20170808 03:17:19.485"></status>
</kw>
<msg timestamp="20170808 03:17:19.485" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:17:19.485" status="PASS" starttime="20170808 03:17:13.859"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:17:19.486" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:17:19.486" status="PASS" starttime="20170808 03:17:19.485"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:17:19.486" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:17:19.486" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:17:19.486" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:17:19.486" status="PASS" starttime="20170808 03:17:19.486"></status>
</kw>
<msg timestamp="20170808 03:17:19.487" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:17:19.487" status="PASS" starttime="20170808 03:17:13.858"></status>
</kw>
<msg timestamp="20170808 03:17:19.487" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:17:19.487" status="PASS" starttime="20170808 03:17:13.858"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:17:19.488" level="FAIL">On != Off</msg>
<status endtime="20170808 03:17:19.488" status="FAIL" starttime="20170808 03:17:19.487"></status>
</kw>
<status endtime="20170808 03:17:19.488" status="FAIL" starttime="20170808 03:17:13.858"></status>
</kw>
<status endtime="20170808 03:17:19.488" status="FAIL" starttime="20170808 03:17:13.857"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:17:29.493" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:17:29.493" status="PASS" starttime="20170808 03:17:29.493"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:17:29.494" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:17:29.494" status="PASS" starttime="20170808 03:17:29.494"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:17:29.495" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:17:29.495" status="PASS" starttime="20170808 03:17:29.494"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:17:29.495" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:17:29.495" status="PASS" starttime="20170808 03:17:29.495"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:17:29.787" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:17:29.787" status="PASS" starttime="20170808 03:17:29.496"></status>
</kw>
<msg timestamp="20170808 03:17:29.787" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:17:29.787" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:17:29.787" status="PASS" starttime="20170808 03:17:29.495"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:17:29.788" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:17:29.788" status="PASS" starttime="20170808 03:17:29.787"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:17:29.788" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:17:29.788" status="PASS" starttime="20170808 03:17:29.788"></status>
</kw>
<status endtime="20170808 03:17:29.789" status="PASS" starttime="20170808 03:17:29.492"></status>
</kw>
<status endtime="20170808 03:17:29.789" status="PASS" starttime="20170808 03:17:29.492"></status>
</kw>
<status endtime="20170808 03:17:29.789" status="PASS" starttime="20170808 03:17:29.491"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:17:29.789" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:17:29.789" status="PASS" starttime="20170808 03:17:29.789"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:17:29.792" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:17:29.792" status="PASS" starttime="20170808 03:17:29.791"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:17:29.792" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:17:29.793" status="PASS" starttime="20170808 03:17:29.792"></status>
</kw>
<status endtime="20170808 03:17:29.793" status="PASS" starttime="20170808 03:17:29.792"></status>
</kw>
<status endtime="20170808 03:17:29.793" status="PASS" starttime="20170808 03:17:29.790"></status>
</kw>
<status endtime="20170808 03:17:29.793" status="PASS" starttime="20170808 03:17:29.790"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:17:29.857" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:17:29.857" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:17:29.857" status="PASS" starttime="20170808 03:17:29.793"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:17:29.859" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:17:29.859" status="PASS" starttime="20170808 03:17:29.858"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:17:29.860" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:17:29.860" status="PASS" starttime="20170808 03:17:29.859"></status>
</kw>
<status endtime="20170808 03:17:29.860" status="PASS" starttime="20170808 03:17:29.859"></status>
</kw>
<status endtime="20170808 03:17:29.860" status="PASS" starttime="20170808 03:17:29.858"></status>
</kw>
<status endtime="20170808 03:17:29.860" status="PASS" starttime="20170808 03:17:29.857"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:17:29.860" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:17:29.861" status="PASS" starttime="20170808 03:17:29.860"></status>
</kw>
<msg timestamp="20170808 03:17:29.861" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:17:29.861" status="PASS" starttime="20170808 03:17:29.490"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:17:29.861" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:17:29.862" status="PASS" starttime="20170808 03:17:29.861"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:17:29.862" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:17:29.862" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:17:29.862" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:17:29.862" status="PASS" starttime="20170808 03:17:29.862"></status>
</kw>
<msg timestamp="20170808 03:17:29.863" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:17:29.863" status="PASS" starttime="20170808 03:17:29.490"></status>
</kw>
<msg timestamp="20170808 03:17:29.863" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:17:29.863" status="PASS" starttime="20170808 03:17:29.489"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:17:29.863" level="FAIL">On != Off</msg>
<status endtime="20170808 03:17:29.864" status="FAIL" starttime="20170808 03:17:29.863"></status>
</kw>
<status endtime="20170808 03:17:29.864" status="FAIL" starttime="20170808 03:17:29.489"></status>
</kw>
<status endtime="20170808 03:17:29.864" status="FAIL" starttime="20170808 03:17:29.488"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:17:39.869" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:17:39.870" status="PASS" starttime="20170808 03:17:39.869"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:17:39.870" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:17:39.870" status="PASS" starttime="20170808 03:17:39.870"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:17:39.871" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:17:39.871" status="PASS" starttime="20170808 03:17:39.870"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:17:39.871" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:17:39.872" status="PASS" starttime="20170808 03:17:39.871"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:17:40.062" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:17:40.063" status="PASS" starttime="20170808 03:17:39.872"></status>
</kw>
<msg timestamp="20170808 03:17:40.063" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:17:40.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:17:40.063" status="PASS" starttime="20170808 03:17:39.872"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:17:40.063" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:17:40.064" status="PASS" starttime="20170808 03:17:40.063"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:17:40.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:17:40.064" status="PASS" starttime="20170808 03:17:40.064"></status>
</kw>
<status endtime="20170808 03:17:40.064" status="PASS" starttime="20170808 03:17:39.868"></status>
</kw>
<status endtime="20170808 03:17:40.064" status="PASS" starttime="20170808 03:17:39.867"></status>
</kw>
<status endtime="20170808 03:17:40.065" status="PASS" starttime="20170808 03:17:39.867"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:17:40.065" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:17:40.065" status="PASS" starttime="20170808 03:17:40.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:17:40.067" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:17:40.067" status="PASS" starttime="20170808 03:17:40.066"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:17:40.068" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:17:40.068" status="PASS" starttime="20170808 03:17:40.068"></status>
</kw>
<status endtime="20170808 03:17:40.068" status="PASS" starttime="20170808 03:17:40.067"></status>
</kw>
<status endtime="20170808 03:17:40.068" status="PASS" starttime="20170808 03:17:40.066"></status>
</kw>
<status endtime="20170808 03:17:40.068" status="PASS" starttime="20170808 03:17:40.065"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:17:40.158" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:17:40.158" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:17:40.158" status="PASS" starttime="20170808 03:17:40.069"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:17:40.160" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:17:40.160" status="PASS" starttime="20170808 03:17:40.159"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:17:40.161" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:17:40.161" status="PASS" starttime="20170808 03:17:40.161"></status>
</kw>
<status endtime="20170808 03:17:40.161" status="PASS" starttime="20170808 03:17:40.160"></status>
</kw>
<status endtime="20170808 03:17:40.162" status="PASS" starttime="20170808 03:17:40.159"></status>
</kw>
<status endtime="20170808 03:17:40.162" status="PASS" starttime="20170808 03:17:40.158"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:17:40.162" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:17:40.162" status="PASS" starttime="20170808 03:17:40.162"></status>
</kw>
<msg timestamp="20170808 03:17:40.162" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:17:40.162" status="PASS" starttime="20170808 03:17:39.866"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:17:40.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:17:40.163" status="PASS" starttime="20170808 03:17:40.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:17:40.163" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:17:40.164" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:17:40.164" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:17:40.164" status="PASS" starttime="20170808 03:17:40.163"></status>
</kw>
<msg timestamp="20170808 03:17:40.164" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:17:40.164" status="PASS" starttime="20170808 03:17:39.866"></status>
</kw>
<msg timestamp="20170808 03:17:40.164" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:17:40.164" status="PASS" starttime="20170808 03:17:39.865"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:17:40.165" level="FAIL">On != Off</msg>
<status endtime="20170808 03:17:40.165" status="FAIL" starttime="20170808 03:17:40.165"></status>
</kw>
<status endtime="20170808 03:17:40.165" status="FAIL" starttime="20170808 03:17:39.865"></status>
</kw>
<status endtime="20170808 03:17:40.165" status="FAIL" starttime="20170808 03:17:39.864"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:17:50.170" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:17:50.170" status="PASS" starttime="20170808 03:17:50.170"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:17:50.171" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:17:50.171" status="PASS" starttime="20170808 03:17:50.171"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:17:50.172" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:17:50.172" status="PASS" starttime="20170808 03:17:50.171"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:17:50.172" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:17:50.172" status="PASS" starttime="20170808 03:17:50.172"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:17:50.853" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:17:50.853" status="PASS" starttime="20170808 03:17:50.173"></status>
</kw>
<msg timestamp="20170808 03:17:50.853" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:17:50.853" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:17:50.853" status="PASS" starttime="20170808 03:17:50.173"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:17:50.854" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:17:50.854" status="PASS" starttime="20170808 03:17:50.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:17:50.855" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:17:50.855" status="PASS" starttime="20170808 03:17:50.855"></status>
</kw>
<status endtime="20170808 03:17:50.855" status="PASS" starttime="20170808 03:17:50.169"></status>
</kw>
<status endtime="20170808 03:17:50.855" status="PASS" starttime="20170808 03:17:50.169"></status>
</kw>
<status endtime="20170808 03:17:50.855" status="PASS" starttime="20170808 03:17:50.168"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:17:50.856" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:17:50.856" status="PASS" starttime="20170808 03:17:50.856"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:17:50.859" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:17:50.859" status="PASS" starttime="20170808 03:17:50.858"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:17:50.860" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:17:50.860" status="PASS" starttime="20170808 03:17:50.860"></status>
</kw>
<status endtime="20170808 03:17:50.860" status="PASS" starttime="20170808 03:17:50.859"></status>
</kw>
<status endtime="20170808 03:17:50.860" status="PASS" starttime="20170808 03:17:50.857"></status>
</kw>
<status endtime="20170808 03:17:50.861" status="PASS" starttime="20170808 03:17:50.856"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:17:54.783" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:17:54.783" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:17:54.783" status="PASS" starttime="20170808 03:17:50.861"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:17:54.785" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:17:54.785" status="PASS" starttime="20170808 03:17:54.785"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:17:54.786" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:17:54.786" status="PASS" starttime="20170808 03:17:54.786"></status>
</kw>
<status endtime="20170808 03:17:54.786" status="PASS" starttime="20170808 03:17:54.785"></status>
</kw>
<status endtime="20170808 03:17:54.786" status="PASS" starttime="20170808 03:17:54.784"></status>
</kw>
<status endtime="20170808 03:17:54.786" status="PASS" starttime="20170808 03:17:54.784"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:17:54.787" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:17:54.787" status="PASS" starttime="20170808 03:17:54.787"></status>
</kw>
<msg timestamp="20170808 03:17:54.787" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:17:54.787" status="PASS" starttime="20170808 03:17:50.168"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:17:54.788" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:17:54.788" status="PASS" starttime="20170808 03:17:54.787"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:17:54.788" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:17:54.788" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:17:54.788" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:17:54.788" status="PASS" starttime="20170808 03:17:54.788"></status>
</kw>
<msg timestamp="20170808 03:17:54.789" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:17:54.789" status="PASS" starttime="20170808 03:17:50.167"></status>
</kw>
<msg timestamp="20170808 03:17:54.789" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:17:54.789" status="PASS" starttime="20170808 03:17:50.167"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:17:54.790" level="FAIL">On != Off</msg>
<status endtime="20170808 03:17:54.790" status="FAIL" starttime="20170808 03:17:54.789"></status>
</kw>
<status endtime="20170808 03:17:54.790" status="FAIL" starttime="20170808 03:17:50.166"></status>
</kw>
<status endtime="20170808 03:17:54.790" status="FAIL" starttime="20170808 03:17:50.166"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:04.795" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:04.796" status="PASS" starttime="20170808 03:18:04.795"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:04.796" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:04.796" status="PASS" starttime="20170808 03:18:04.796"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:04.797" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:04.797" status="PASS" starttime="20170808 03:18:04.797"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:04.798" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:04.798" status="PASS" starttime="20170808 03:18:04.797"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:04.999" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:04.999" status="PASS" starttime="20170808 03:18:04.798"></status>
</kw>
<msg timestamp="20170808 03:18:04.999" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:04.999" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:04.999" status="PASS" starttime="20170808 03:18:04.798"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:05.000" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:05.000" status="PASS" starttime="20170808 03:18:04.999"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:05.000" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:05.001" status="PASS" starttime="20170808 03:18:05.000"></status>
</kw>
<status endtime="20170808 03:18:05.001" status="PASS" starttime="20170808 03:18:04.794"></status>
</kw>
<status endtime="20170808 03:18:05.001" status="PASS" starttime="20170808 03:18:04.794"></status>
</kw>
<status endtime="20170808 03:18:05.001" status="PASS" starttime="20170808 03:18:04.793"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:05.001" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:18:05.001" status="PASS" starttime="20170808 03:18:05.001"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:18:05.004" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:18:05.004" status="PASS" starttime="20170808 03:18:05.003"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:18:05.005" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:18:05.005" status="PASS" starttime="20170808 03:18:05.004"></status>
</kw>
<status endtime="20170808 03:18:05.005" status="PASS" starttime="20170808 03:18:05.004"></status>
</kw>
<status endtime="20170808 03:18:05.005" status="PASS" starttime="20170808 03:18:05.002"></status>
</kw>
<status endtime="20170808 03:18:05.005" status="PASS" starttime="20170808 03:18:05.002"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:05.088" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:18:05.089" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:05.089" status="PASS" starttime="20170808 03:18:05.005"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:18:05.090" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:18:05.090" status="PASS" starttime="20170808 03:18:05.090"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:18:05.092" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:18:05.092" status="PASS" starttime="20170808 03:18:05.091"></status>
</kw>
<status endtime="20170808 03:18:05.092" status="PASS" starttime="20170808 03:18:05.091"></status>
</kw>
<status endtime="20170808 03:18:05.092" status="PASS" starttime="20170808 03:18:05.089"></status>
</kw>
<status endtime="20170808 03:18:05.092" status="PASS" starttime="20170808 03:18:05.089"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:05.093" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:05.093" status="PASS" starttime="20170808 03:18:05.092"></status>
</kw>
<msg timestamp="20170808 03:18:05.093" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:05.093" status="PASS" starttime="20170808 03:18:04.792"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:05.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:05.094" status="PASS" starttime="20170808 03:18:05.093"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:18:05.094" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:05.094" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:18:05.094" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:18:05.094" status="PASS" starttime="20170808 03:18:05.094"></status>
</kw>
<msg timestamp="20170808 03:18:05.094" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:18:05.095" status="PASS" starttime="20170808 03:18:04.792"></status>
</kw>
<msg timestamp="20170808 03:18:05.095" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:18:05.095" status="PASS" starttime="20170808 03:18:04.791"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:18:05.095" level="FAIL">On != Off</msg>
<status endtime="20170808 03:18:05.096" status="FAIL" starttime="20170808 03:18:05.095"></status>
</kw>
<status endtime="20170808 03:18:05.096" status="FAIL" starttime="20170808 03:18:04.791"></status>
</kw>
<status endtime="20170808 03:18:05.096" status="FAIL" starttime="20170808 03:18:04.791"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:15.101" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:15.101" status="PASS" starttime="20170808 03:18:15.100"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:15.102" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:15.102" status="PASS" starttime="20170808 03:18:15.101"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:15.102" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:15.102" status="PASS" starttime="20170808 03:18:15.102"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:15.103" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:15.103" status="PASS" starttime="20170808 03:18:15.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:15.289" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:15.289" status="PASS" starttime="20170808 03:18:15.104"></status>
</kw>
<msg timestamp="20170808 03:18:15.289" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:15.289" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:15.289" status="PASS" starttime="20170808 03:18:15.103"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:15.290" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:15.290" status="PASS" starttime="20170808 03:18:15.289"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:15.290" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:15.290" status="PASS" starttime="20170808 03:18:15.290"></status>
</kw>
<status endtime="20170808 03:18:15.290" status="PASS" starttime="20170808 03:18:15.100"></status>
</kw>
<status endtime="20170808 03:18:15.290" status="PASS" starttime="20170808 03:18:15.099"></status>
</kw>
<status endtime="20170808 03:18:15.291" status="PASS" starttime="20170808 03:18:15.099"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:15.291" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:18:15.291" status="PASS" starttime="20170808 03:18:15.291"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:18:15.293" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:18:15.293" status="PASS" starttime="20170808 03:18:15.293"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:18:15.295" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:18:15.295" status="PASS" starttime="20170808 03:18:15.294"></status>
</kw>
<status endtime="20170808 03:18:15.295" status="PASS" starttime="20170808 03:18:15.294"></status>
</kw>
<status endtime="20170808 03:18:15.295" status="PASS" starttime="20170808 03:18:15.292"></status>
</kw>
<status endtime="20170808 03:18:15.295" status="PASS" starttime="20170808 03:18:15.291"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:15.359" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:18:15.359" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:15.359" status="PASS" starttime="20170808 03:18:15.295"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:18:15.361" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:18:15.361" status="PASS" starttime="20170808 03:18:15.360"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:18:15.362" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:18:15.362" status="PASS" starttime="20170808 03:18:15.362"></status>
</kw>
<status endtime="20170808 03:18:15.362" status="PASS" starttime="20170808 03:18:15.361"></status>
</kw>
<status endtime="20170808 03:18:15.362" status="PASS" starttime="20170808 03:18:15.360"></status>
</kw>
<status endtime="20170808 03:18:15.362" status="PASS" starttime="20170808 03:18:15.360"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:15.363" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:15.363" status="PASS" starttime="20170808 03:18:15.363"></status>
</kw>
<msg timestamp="20170808 03:18:15.363" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:15.363" status="PASS" starttime="20170808 03:18:15.098"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:15.364" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:15.364" status="PASS" starttime="20170808 03:18:15.363"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:18:15.364" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:15.364" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:18:15.364" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:18:15.365" status="PASS" starttime="20170808 03:18:15.364"></status>
</kw>
<msg timestamp="20170808 03:18:15.365" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:18:15.365" status="PASS" starttime="20170808 03:18:15.098"></status>
</kw>
<msg timestamp="20170808 03:18:15.365" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:18:15.365" status="PASS" starttime="20170808 03:18:15.097"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:18:15.366" level="FAIL">On != Off</msg>
<status endtime="20170808 03:18:15.366" status="FAIL" starttime="20170808 03:18:15.365"></status>
</kw>
<status endtime="20170808 03:18:15.366" status="FAIL" starttime="20170808 03:18:15.097"></status>
</kw>
<status endtime="20170808 03:18:15.366" status="FAIL" starttime="20170808 03:18:15.096"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:25.371" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:25.372" status="PASS" starttime="20170808 03:18:25.371"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:25.372" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:25.372" status="PASS" starttime="20170808 03:18:25.372"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:25.373" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:25.373" status="PASS" starttime="20170808 03:18:25.373"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:25.374" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:25.374" status="PASS" starttime="20170808 03:18:25.373"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:25.983" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:25.984" status="PASS" starttime="20170808 03:18:25.374"></status>
</kw>
<msg timestamp="20170808 03:18:25.984" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:25.984" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:25.984" status="PASS" starttime="20170808 03:18:25.374"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:25.984" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:25.985" status="PASS" starttime="20170808 03:18:25.984"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:25.985" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:25.985" status="PASS" starttime="20170808 03:18:25.985"></status>
</kw>
<status endtime="20170808 03:18:25.985" status="PASS" starttime="20170808 03:18:25.370"></status>
</kw>
<status endtime="20170808 03:18:25.985" status="PASS" starttime="20170808 03:18:25.370"></status>
</kw>
<status endtime="20170808 03:18:25.986" status="PASS" starttime="20170808 03:18:25.369"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:25.986" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:18:25.986" status="PASS" starttime="20170808 03:18:25.986"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:18:25.988" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:18:25.988" status="PASS" starttime="20170808 03:18:25.987"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:18:25.989" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:18:25.989" status="PASS" starttime="20170808 03:18:25.989"></status>
</kw>
<status endtime="20170808 03:18:25.989" status="PASS" starttime="20170808 03:18:25.988"></status>
</kw>
<status endtime="20170808 03:18:25.990" status="PASS" starttime="20170808 03:18:25.987"></status>
</kw>
<status endtime="20170808 03:18:25.990" status="PASS" starttime="20170808 03:18:25.986"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:29.780" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:18:29.780" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:29.781" status="PASS" starttime="20170808 03:18:25.990"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:18:29.782" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:18:29.782" status="PASS" starttime="20170808 03:18:29.782"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:18:29.784" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:18:29.784" status="PASS" starttime="20170808 03:18:29.783"></status>
</kw>
<status endtime="20170808 03:18:29.784" status="PASS" starttime="20170808 03:18:29.783"></status>
</kw>
<status endtime="20170808 03:18:29.784" status="PASS" starttime="20170808 03:18:29.781"></status>
</kw>
<status endtime="20170808 03:18:29.784" status="PASS" starttime="20170808 03:18:29.781"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:29.785" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:29.785" status="PASS" starttime="20170808 03:18:29.784"></status>
</kw>
<msg timestamp="20170808 03:18:29.785" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:29.785" status="PASS" starttime="20170808 03:18:25.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:29.785" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:29.786" status="PASS" starttime="20170808 03:18:29.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:18:29.786" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:29.786" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:18:29.786" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:18:29.786" status="PASS" starttime="20170808 03:18:29.786"></status>
</kw>
<msg timestamp="20170808 03:18:29.787" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:18:29.787" status="PASS" starttime="20170808 03:18:25.368"></status>
</kw>
<msg timestamp="20170808 03:18:29.787" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:18:29.787" status="PASS" starttime="20170808 03:18:25.367"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:18:29.787" level="FAIL">On != Off</msg>
<status endtime="20170808 03:18:29.788" status="FAIL" starttime="20170808 03:18:29.787"></status>
</kw>
<status endtime="20170808 03:18:29.788" status="FAIL" starttime="20170808 03:18:25.367"></status>
</kw>
<status endtime="20170808 03:18:29.788" status="FAIL" starttime="20170808 03:18:25.367"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:39.793" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:39.793" status="PASS" starttime="20170808 03:18:39.792"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:39.794" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:39.794" status="PASS" starttime="20170808 03:18:39.794"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:39.795" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:39.795" status="PASS" starttime="20170808 03:18:39.794"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:39.795" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:39.795" status="PASS" starttime="20170808 03:18:39.795"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:40.018" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:40.018" status="PASS" starttime="20170808 03:18:39.796"></status>
</kw>
<msg timestamp="20170808 03:18:40.018" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:40.018" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:40.018" status="PASS" starttime="20170808 03:18:39.795"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:40.019" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:40.019" status="PASS" starttime="20170808 03:18:40.018"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:40.020" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:40.020" status="PASS" starttime="20170808 03:18:40.019"></status>
</kw>
<status endtime="20170808 03:18:40.020" status="PASS" starttime="20170808 03:18:39.792"></status>
</kw>
<status endtime="20170808 03:18:40.020" status="PASS" starttime="20170808 03:18:39.791"></status>
</kw>
<status endtime="20170808 03:18:40.020" status="PASS" starttime="20170808 03:18:39.791"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:40.021" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170808 03:18:40.021" status="PASS" starttime="20170808 03:18:40.021"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:18:40.024" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:18:40.024" status="PASS" starttime="20170808 03:18:40.023"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:18:40.025" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170808 03:18:40.026" status="PASS" starttime="20170808 03:18:40.025"></status>
</kw>
<status endtime="20170808 03:18:40.026" status="PASS" starttime="20170808 03:18:40.024"></status>
</kw>
<status endtime="20170808 03:18:40.026" status="PASS" starttime="20170808 03:18:40.022"></status>
</kw>
<status endtime="20170808 03:18:40.026" status="PASS" starttime="20170808 03:18:40.021"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:40.103" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170808 03:18:40.103" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:40.103" status="PASS" starttime="20170808 03:18:40.026"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:18:40.105" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:18:40.105" status="PASS" starttime="20170808 03:18:40.104"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:18:40.106" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:18:40.106" status="PASS" starttime="20170808 03:18:40.105"></status>
</kw>
<status endtime="20170808 03:18:40.106" status="PASS" starttime="20170808 03:18:40.105"></status>
</kw>
<status endtime="20170808 03:18:40.106" status="PASS" starttime="20170808 03:18:40.104"></status>
</kw>
<status endtime="20170808 03:18:40.106" status="PASS" starttime="20170808 03:18:40.103"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:40.107" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:40.107" status="PASS" starttime="20170808 03:18:40.106"></status>
</kw>
<msg timestamp="20170808 03:18:40.107" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:40.107" status="PASS" starttime="20170808 03:18:39.790"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:40.107" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:40.108" status="PASS" starttime="20170808 03:18:40.107"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:18:40.108" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:40.108" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:18:40.108" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170808 03:18:40.108" status="PASS" starttime="20170808 03:18:40.108"></status>
</kw>
<msg timestamp="20170808 03:18:40.108" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170808 03:18:40.109" status="PASS" starttime="20170808 03:18:39.790"></status>
</kw>
<msg timestamp="20170808 03:18:40.109" level="INFO">${power_state} = Off</msg>
<status endtime="20170808 03:18:40.109" status="PASS" starttime="20170808 03:18:39.789"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170808 03:18:40.109" level="FAIL">On != Off</msg>
<status endtime="20170808 03:18:40.110" status="FAIL" starttime="20170808 03:18:40.109"></status>
</kw>
<status endtime="20170808 03:18:40.110" status="FAIL" starttime="20170808 03:18:39.789"></status>
</kw>
<status endtime="20170808 03:18:40.110" status="FAIL" starttime="20170808 03:18:39.788"></status>
</kw>
<msg timestamp="20170808 03:18:40.110" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</msg>
<status endtime="20170808 03:18:40.110" status="FAIL" starttime="20170808 03:08:32.957"></status>
</kw>
<status endtime="20170808 03:18:40.110" status="FAIL" starttime="20170808 03:08:32.141"></status>
</kw>
<status endtime="20170808 03:18:40.110" status="FAIL" starttime="20170808 03:08:23.669"></status>
</kw>
<status endtime="20170808 03:18:40.110" status="FAIL" starttime="20170808 03:08:23.668"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:40.116" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:40.116" status="PASS" starttime="20170808 03:18:40.115"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:40.117" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:40.117" status="PASS" starttime="20170808 03:18:40.116"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:40.117" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:40.117" status="PASS" starttime="20170808 03:18:40.117"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:40.118" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:40.118" status="PASS" starttime="20170808 03:18:40.118"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:40.309" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:40.309" status="PASS" starttime="20170808 03:18:40.119"></status>
</kw>
<msg timestamp="20170808 03:18:40.309" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:40.309" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:40.309" status="PASS" starttime="20170808 03:18:40.118"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:40.310" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:40.310" status="PASS" starttime="20170808 03:18:40.310"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:40.311" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:40.311" status="PASS" starttime="20170808 03:18:40.310"></status>
</kw>
<status endtime="20170808 03:18:40.311" status="PASS" starttime="20170808 03:18:40.114"></status>
</kw>
<status endtime="20170808 03:18:40.311" status="PASS" starttime="20170808 03:18:40.114"></status>
</kw>
<status endtime="20170808 03:18:40.311" status="PASS" starttime="20170808 03:18:40.113"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:40.312" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170808 03:18:40.312" status="PASS" starttime="20170808 03:18:40.311"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:18:40.314" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170808 03:18:40.314" status="PASS" starttime="20170808 03:18:40.313"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:18:40.315" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170808 03:18:40.315" status="PASS" starttime="20170808 03:18:40.315"></status>
</kw>
<status endtime="20170808 03:18:40.315" status="PASS" starttime="20170808 03:18:40.314"></status>
</kw>
<status endtime="20170808 03:18:40.315" status="PASS" starttime="20170808 03:18:40.313"></status>
</kw>
<status endtime="20170808 03:18:40.315" status="PASS" starttime="20170808 03:18:40.312"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:40.405" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170808 03:18:40.405" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:40.405" status="PASS" starttime="20170808 03:18:40.316"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170808 03:18:40.407" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:18:40.407" status="PASS" starttime="20170808 03:18:40.406"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170808 03:18:40.408" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170808 03:18:40.408" status="PASS" starttime="20170808 03:18:40.408"></status>
</kw>
<status endtime="20170808 03:18:40.408" status="PASS" starttime="20170808 03:18:40.407"></status>
</kw>
<status endtime="20170808 03:18:40.408" status="PASS" starttime="20170808 03:18:40.406"></status>
</kw>
<status endtime="20170808 03:18:40.408" status="PASS" starttime="20170808 03:18:40.405"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:40.409" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:40.409" status="PASS" starttime="20170808 03:18:40.408"></status>
</kw>
<msg timestamp="20170808 03:18:40.409" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:40.409" status="PASS" starttime="20170808 03:18:40.113"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:40.409" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:40.409" status="PASS" starttime="20170808 03:18:40.409"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:18:40.410" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:40.410" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:18:40.410" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170808 03:18:40.410" status="PASS" starttime="20170808 03:18:40.410"></status>
</kw>
<msg timestamp="20170808 03:18:40.410" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170808 03:18:40.411" status="PASS" starttime="20170808 03:18:40.112"></status>
</kw>
<msg timestamp="20170808 03:18:40.411" level="INFO">${host_state} = Off</msg>
<status endtime="20170808 03:18:40.411" status="PASS" starttime="20170808 03:18:40.112"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170808 03:18:40.412" level="FAIL">Off != Quiesced</msg>
<status endtime="20170808 03:18:40.412" status="FAIL" starttime="20170808 03:18:40.412"></status>
</kw>
<msg timestamp="20170808 03:18:40.412" level="INFO">${status} = False</msg>
<status endtime="20170808 03:18:40.412" status="PASS" starttime="20170808 03:18:40.411"></status>
</kw>
<msg timestamp="20170808 03:18:40.413" level="INFO">${status} = False</msg>
<status endtime="20170808 03:18:40.413" status="PASS" starttime="20170808 03:18:40.111"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170808 03:18:40.470" level="INFO">Length is 10</msg>
<status endtime="20170808 03:18:40.470" status="PASS" starttime="20170808 03:18:40.470"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170808 03:18:40.512" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170808 03:18:43.515" level="INFO">${RC} = 0</msg>
<msg timestamp="20170808 03:18:43.516" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.77 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.681 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status endtime="20170808 03:18:43.516" status="PASS" starttime="20170808 03:18:40.470"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170808 03:18:43.530" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.77 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.681 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.681 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.608 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.608/0.935/1.773/0.485 ms</msg>
<status endtime="20170808 03:18:43.530" status="PASS" starttime="20170808 03:18:43.527"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170808 03:18:43.532" status="PASS" starttime="20170808 03:18:43.532"></status>
</kw>
<status endtime="20170808 03:18:43.533" status="PASS" starttime="20170808 03:18:40.468"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170808 03:18:43.575" level="INFO">${cur_time} = 2017-08-08 03:18:43:574477</msg>
<status endtime="20170808 03:18:43.575" status="PASS" starttime="20170808 03:18:43.573"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170808 03:18:43.575" level="INFO">${cur_time} = 20170808031843574477</msg>
<status endtime="20170808 03:18:43.575" status="PASS" starttime="20170808 03:18:43.575"></status>
</kw>
<status endtime="20170808 03:18:43.576" status="PASS" starttime="20170808 03:18:43.572"></status>
</kw>
<msg timestamp="20170808 03:18:43.576" level="INFO">${FFDC_TIME} = 20170808031843574477</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170808 03:18:43.590" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170808 03:18:43.590" status="PASS" starttime="20170808 03:18:43.589"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170808 03:18:43.590" level="INFO">${suite_name} = 20170808031843574477_TestsTestBasicPoweron</msg>
<status endtime="20170808 03:18:43.590" status="PASS" starttime="20170808 03:18:43.590"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170808 03:18:43.591" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170808 03:18:43.591" status="PASS" starttime="20170808 03:18:43.591"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170808 03:18:43.592" level="INFO">${test_name} = 20170808031843574477_PowerOnTest</msg>
<status endtime="20170808 03:18:43.592" status="PASS" starttime="20170808 03:18:43.591"></status>
</kw>
<status endtime="20170808 03:18:43.592" status="PASS" starttime="20170808 03:18:43.587"></status>
</kw>
<msg timestamp="20170808 03:18:43.592" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/</msg>
<msg timestamp="20170808 03:18:43.592" level="INFO">${FFDC_PREFIX} = 20170808031843574477_</msg>
<msg timestamp="20170808 03:18:43.627" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.631" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.631" status="PASS" starttime="20170808 03:18:43.627"></status>
</kw>
<msg timestamp="20170808 03:18:43.637" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.671" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.671" status="PASS" starttime="20170808 03:18:43.670"></status>
</kw>
<status endtime="20170808 03:18:43.672" status="PASS" starttime="20170808 03:18:43.669"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.673" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.673" status="PASS" starttime="20170808 03:18:43.672"></status>
</kw>
<status endtime="20170808 03:18:43.673" status="PASS" starttime="20170808 03:18:43.672"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.674" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.674" status="PASS" starttime="20170808 03:18:43.674"></status>
</kw>
<status endtime="20170808 03:18:43.675" status="PASS" starttime="20170808 03:18:43.673"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.676" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.676" status="PASS" starttime="20170808 03:18:43.675"></status>
</kw>
<status endtime="20170808 03:18:43.678" status="PASS" starttime="20170808 03:18:43.675"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.679" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.679" status="PASS" starttime="20170808 03:18:43.679"></status>
</kw>
<status endtime="20170808 03:18:43.679" status="PASS" starttime="20170808 03:18:43.678"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.680" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.681" status="PASS" starttime="20170808 03:18:43.680"></status>
</kw>
<status endtime="20170808 03:18:43.681" status="PASS" starttime="20170808 03:18:43.679"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.682" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.682" status="PASS" starttime="20170808 03:18:43.681"></status>
</kw>
<status endtime="20170808 03:18:43.682" status="PASS" starttime="20170808 03:18:43.681"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.683" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.683" status="PASS" starttime="20170808 03:18:43.683"></status>
</kw>
<status endtime="20170808 03:18:43.683" status="PASS" starttime="20170808 03:18:43.682"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.685" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.685" status="PASS" starttime="20170808 03:18:43.684"></status>
</kw>
<status endtime="20170808 03:18:43.685" status="PASS" starttime="20170808 03:18:43.684"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.687" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.687" status="PASS" starttime="20170808 03:18:43.686"></status>
</kw>
<status endtime="20170808 03:18:43.687" status="PASS" starttime="20170808 03:18:43.685"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.688" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.688" status="PASS" starttime="20170808 03:18:43.687"></status>
</kw>
<status endtime="20170808 03:18:43.688" status="PASS" starttime="20170808 03:18:43.687"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.689" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.689" status="PASS" starttime="20170808 03:18:43.689"></status>
</kw>
<status endtime="20170808 03:18:43.689" status="PASS" starttime="20170808 03:18:43.688"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.690" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.691" status="PASS" starttime="20170808 03:18:43.690"></status>
</kw>
<status endtime="20170808 03:18:43.691" status="PASS" starttime="20170808 03:18:43.689"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170808 03:18:43.747" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:18:43.748" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170808 03:18:43.827" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170808 03:18:43.844" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170808 03:18:43.844" level="INFO">${stderr} = </msg>
<msg timestamp="20170808 03:18:43.844" level="INFO">${rc} = 0</msg>
<status endtime="20170808 03:18:43.845" status="PASS" starttime="20170808 03:18:43.691"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170808 03:18:43.845" level="INFO">Length is 0</msg>
<status endtime="20170808 03:18:43.845" status="PASS" starttime="20170808 03:18:43.845"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170808 03:18:43.846" level="INFO">Length is 11</msg>
<status endtime="20170808 03:18:43.846" status="PASS" starttime="20170808 03:18:43.845"></status>
</kw>
<msg timestamp="20170808 03:18:43.846" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170808 03:18:43.846" status="PASS" starttime="20170808 03:18:43.691"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.847" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.847" status="PASS" starttime="20170808 03:18:43.847"></status>
</kw>
<status endtime="20170808 03:18:43.847" status="PASS" starttime="20170808 03:18:43.846"></status>
</kw>
<status endtime="20170808 03:18:43.848" status="PASS" starttime="20170808 03:18:43.685"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.849" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.849" status="PASS" starttime="20170808 03:18:43.848"></status>
</kw>
<status endtime="20170808 03:18:43.849" status="PASS" starttime="20170808 03:18:43.848"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170808 03:18:43.850" level="INFO">@{entries} = [ APPLICATION DATA | BMC DATA | DRIVER INFO ]</msg>
<status endtime="20170808 03:18:43.850" status="PASS" starttime="20170808 03:18:43.849"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.852" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.852" status="PASS" starttime="20170808 03:18:43.851"></status>
</kw>
<status endtime="20170808 03:18:43.852" status="PASS" starttime="20170808 03:18:43.850"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.853" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.853" status="PASS" starttime="20170808 03:18:43.853"></status>
</kw>
<status endtime="20170808 03:18:43.853" status="PASS" starttime="20170808 03:18:43.852"></status>
</kw>
<status endtime="20170808 03:18:43.853" status="PASS" starttime="20170808 03:18:43.850"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.855" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.855" status="PASS" starttime="20170808 03:18:43.854"></status>
</kw>
<status endtime="20170808 03:18:43.855" status="PASS" starttime="20170808 03:18:43.854"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.856" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.856" status="PASS" starttime="20170808 03:18:43.856"></status>
</kw>
<status endtime="20170808 03:18:43.857" status="PASS" starttime="20170808 03:18:43.855"></status>
</kw>
<status endtime="20170808 03:18:43.857" status="PASS" starttime="20170808 03:18:43.854"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.858" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.858" status="PASS" starttime="20170808 03:18:43.857"></status>
</kw>
<status endtime="20170808 03:18:43.858" status="PASS" starttime="20170808 03:18:43.857"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.859" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.859" status="PASS" starttime="20170808 03:18:43.859"></status>
</kw>
<status endtime="20170808 03:18:43.859" status="PASS" starttime="20170808 03:18:43.858"></status>
</kw>
<status endtime="20170808 03:18:43.859" status="PASS" starttime="20170808 03:18:43.857"></status>
</kw>
<status endtime="20170808 03:18:43.859" status="PASS" starttime="20170808 03:18:43.850"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:43.863" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:43.863" status="PASS" starttime="20170808 03:18:43.862"></status>
</kw>
<status endtime="20170808 03:18:43.863" status="PASS" starttime="20170808 03:18:43.859"></status>
</kw>
<status endtime="20170808 03:18:43.863" status="PASS" starttime="20170808 03:18:43.668"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170808 03:18:43.874" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170808 03:18:43.874" status="PASS" starttime="20170808 03:18:43.874"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170808 03:18:43.876" level="INFO">@{method_list} = [ ('SEL Log', 'Collect eSEL Log') | ('OS FFDC', 'OS FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('BMC Specific Files', 'BMC FFDC Files...</msg>
<status endtime="20170808 03:18:43.876" status="PASS" starttime="20170808 03:18:43.875"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170808 03:18:43.877" status="PASS" starttime="20170808 03:18:43.877"></status>
</kw>
<msg timestamp="20170808 03:18:43.877" level="INFO">@{ffdc_function_list} = [ SEL Log | OS FFDC | Get Request FFDC | FFDC Generic Report | BMC Specific Files | Core Files ]</msg>
<status endtime="20170808 03:18:43.877" status="PASS" starttime="20170808 03:18:43.876"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170808 03:18:43.879" status="PASS" starttime="20170808 03:18:43.879"></status>
</kw>
<msg timestamp="20170808 03:18:43.879" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:43.879" level="INFO">${ret_values} = None</msg>
<status endtime="20170808 03:18:43.879" status="PASS" starttime="20170808 03:18:43.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170808 03:18:43.880" status="PASS" starttime="20170808 03:18:43.880"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:43.928" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:43.932" status="PASS" starttime="20170808 03:18:43.927"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:43.932" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:43.933" status="PASS" starttime="20170808 03:18:43.932"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:43.933" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:43.933" status="PASS" starttime="20170808 03:18:43.933"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:43.934" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:43.934" status="PASS" starttime="20170808 03:18:43.933"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:44.112" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:44.112" status="PASS" starttime="20170808 03:18:43.935"></status>
</kw>
<msg timestamp="20170808 03:18:44.112" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:44.112" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:44.112" status="PASS" starttime="20170808 03:18:43.934"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:44.113" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:44.113" status="PASS" starttime="20170808 03:18:44.112"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:44.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:44.114" status="PASS" starttime="20170808 03:18:44.113"></status>
</kw>
<status endtime="20170808 03:18:44.114" status="PASS" starttime="20170808 03:18:43.927"></status>
</kw>
<status endtime="20170808 03:18:44.114" status="PASS" starttime="20170808 03:18:43.926"></status>
</kw>
<status endtime="20170808 03:18:44.114" status="PASS" starttime="20170808 03:18:43.926"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:44.115" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170808 03:18:44.115" status="PASS" starttime="20170808 03:18:44.114"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 03:18:44.115" status="PASS" starttime="20170808 03:18:44.115"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:44.369" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170808 03:18:44.369" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:44.369" status="PASS" starttime="20170808 03:18:44.115"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 03:18:44.370" status="PASS" starttime="20170808 03:18:44.369"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:44.370" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:44.371" status="PASS" starttime="20170808 03:18:44.370"></status>
</kw>
<msg timestamp="20170808 03:18:44.371" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:44.371" status="PASS" starttime="20170808 03:18:43.925"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:44.372" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:44.372" status="PASS" starttime="20170808 03:18:44.371"></status>
</kw>
<msg timestamp="20170808 03:18:44.372" level="INFO">${status} = True</msg>
<status endtime="20170808 03:18:44.372" status="PASS" starttime="20170808 03:18:44.371"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170808 03:18:44.373" status="PASS" starttime="20170808 03:18:44.372"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:18:44.373" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [], 
      "Id": 10, 
      "Message": "org.open_power.Proc.CFAM.OpenFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502161793564, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502160779271, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502161414802, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Proc.CFAM.OpenFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502161750582, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Proc.CFAM.OpenFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502161754992, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502161787997, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Proc.CFAM.OpenFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502161790506, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [], 
      "Id": 8, 
      "Message": "org.open_power.Proc.CFAM.OpenFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502161791173, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [], 
      "Id": 9, 
      "Message": "org.open_power.Proc.CFAM.OpenFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502161792772, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:44.373" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:18:44.374" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/3': {u'Message': u'xyz.openbmc_project.Common.Error.InternalFailure', u'Timestamp': 1502161414802, u'associatio...</msg>
<status endtime="20170808 03:18:44.374" status="PASS" starttime="20170808 03:18:44.373"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170808 03:18:44.374" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/10', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/ent...</msg>
<status endtime="20170808 03:18:44.374" status="PASS" starttime="20170808 03:18:44.374"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170808 03:18:44.375" level="INFO">${logpath} = /tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_esel</msg>
<status endtime="20170808 03:18:44.375" status="PASS" starttime="20170808 03:18:44.375"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:44.377" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_esel"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_esel&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:44.377" status="PASS" starttime="20170808 03:18:44.375"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/10">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170808 03:18:44.378" status="PASS" starttime="20170808 03:18:44.378"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:44.381" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:44.382" status="PASS" starttime="20170808 03:18:44.381"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:44.382" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:44.382" status="PASS" starttime="20170808 03:18:44.382"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:44.383" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:44.383" status="PASS" starttime="20170808 03:18:44.383"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:44.384" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:44.384" status="PASS" starttime="20170808 03:18:44.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:44.648" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:44.648" status="PASS" starttime="20170808 03:18:44.384"></status>
</kw>
<msg timestamp="20170808 03:18:44.648" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:44.648" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:44.648" status="PASS" starttime="20170808 03:18:44.384"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:44.649" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:44.649" status="PASS" starttime="20170808 03:18:44.649"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:44.650" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:44.651" status="PASS" starttime="20170808 03:18:44.650"></status>
</kw>
<status endtime="20170808 03:18:44.651" status="PASS" starttime="20170808 03:18:44.381"></status>
</kw>
<status endtime="20170808 03:18:44.651" status="PASS" starttime="20170808 03:18:44.380"></status>
</kw>
<status endtime="20170808 03:18:44.651" status="PASS" starttime="20170808 03:18:44.380"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:44.652" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/10/attr/AdditionalData</msg>
<status endtime="20170808 03:18:44.652" status="PASS" starttime="20170808 03:18:44.651"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 03:18:44.653" status="PASS" starttime="20170808 03:18:44.652"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:44.737" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/10/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170808 03:18:44.737" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:44.737" status="PASS" starttime="20170808 03:18:44.653"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 03:18:44.737" status="PASS" starttime="20170808 03:18:44.737"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:44.738" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:44.738" status="PASS" starttime="20170808 03:18:44.738"></status>
</kw>
<msg timestamp="20170808 03:18:44.738" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:44.738" status="PASS" starttime="20170808 03:18:44.379"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:44.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:44.739" status="PASS" starttime="20170808 03:18:44.738"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:18:44.739" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:44.739" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:18:44.739" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170808 03:18:44.739" status="PASS" starttime="20170808 03:18:44.739"></status>
</kw>
<msg timestamp="20170808 03:18:44.740" level="INFO">${esel_data} = []</msg>
<status endtime="20170808 03:18:44.740" status="PASS" starttime="20170808 03:18:44.378"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170808 03:18:44.740" level="INFO">Length is 0</msg>
<msg timestamp="20170808 03:18:44.740" level="INFO">${length} = 0</msg>
<status endtime="20170808 03:18:44.740" status="PASS" starttime="20170808 03:18:44.740"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170808 03:18:44.741" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170808 03:18:44.741" status="PASS" starttime="20170808 03:18:44.741"></status>
</kw>
<status endtime="20170808 03:18:44.741" status="PASS" starttime="20170808 03:18:44.377"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170808 03:18:44.742" status="PASS" starttime="20170808 03:18:44.741"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:44.745" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:44.746" status="PASS" starttime="20170808 03:18:44.745"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:44.746" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:44.746" status="PASS" starttime="20170808 03:18:44.746"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:44.747" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:44.747" status="PASS" starttime="20170808 03:18:44.746"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:44.747" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:44.748" status="PASS" starttime="20170808 03:18:44.747"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:44.932" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:44.932" status="PASS" starttime="20170808 03:18:44.748"></status>
</kw>
<msg timestamp="20170808 03:18:44.932" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:44.932" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:44.932" status="PASS" starttime="20170808 03:18:44.748"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:44.933" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:44.933" status="PASS" starttime="20170808 03:18:44.933"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:44.934" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:44.934" status="PASS" starttime="20170808 03:18:44.933"></status>
</kw>
<status endtime="20170808 03:18:44.934" status="PASS" starttime="20170808 03:18:44.744"></status>
</kw>
<status endtime="20170808 03:18:44.934" status="PASS" starttime="20170808 03:18:44.744"></status>
</kw>
<status endtime="20170808 03:18:44.934" status="PASS" starttime="20170808 03:18:44.743"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:44.935" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170808 03:18:44.935" status="PASS" starttime="20170808 03:18:44.935"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 03:18:44.935" status="PASS" starttime="20170808 03:18:44.935"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:45.017" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170808 03:18:45.018" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:45.018" status="PASS" starttime="20170808 03:18:44.936"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 03:18:45.018" status="PASS" starttime="20170808 03:18:45.018"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:45.019" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:45.019" status="PASS" starttime="20170808 03:18:45.019"></status>
</kw>
<msg timestamp="20170808 03:18:45.019" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:45.019" status="PASS" starttime="20170808 03:18:44.743"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.020" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:45.020" status="PASS" starttime="20170808 03:18:45.019"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:18:45.020" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:45.020" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:18:45.020" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170808 03:18:45.020" status="PASS" starttime="20170808 03:18:45.020"></status>
</kw>
<msg timestamp="20170808 03:18:45.021" level="INFO">${esel_data} = []</msg>
<status endtime="20170808 03:18:45.021" status="PASS" starttime="20170808 03:18:44.742"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170808 03:18:45.021" level="INFO">Length is 0</msg>
<msg timestamp="20170808 03:18:45.021" level="INFO">${length} = 0</msg>
<status endtime="20170808 03:18:45.021" status="PASS" starttime="20170808 03:18:45.021"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.022" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170808 03:18:45.022" status="PASS" starttime="20170808 03:18:45.022"></status>
</kw>
<status endtime="20170808 03:18:45.022" status="PASS" starttime="20170808 03:18:44.741"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170808 03:18:45.023" status="PASS" starttime="20170808 03:18:45.022"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:45.027" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:45.027" status="PASS" starttime="20170808 03:18:45.026"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:45.028" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:45.028" status="PASS" starttime="20170808 03:18:45.027"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:45.029" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:45.029" status="PASS" starttime="20170808 03:18:45.028"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:45.029" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:45.029" status="PASS" starttime="20170808 03:18:45.029"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.215" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:45.215" status="PASS" starttime="20170808 03:18:45.030"></status>
</kw>
<msg timestamp="20170808 03:18:45.216" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:45.216" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:45.216" status="PASS" starttime="20170808 03:18:45.030"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.216" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:45.216" status="PASS" starttime="20170808 03:18:45.216"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.217" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:45.217" status="PASS" starttime="20170808 03:18:45.217"></status>
</kw>
<status endtime="20170808 03:18:45.217" status="PASS" starttime="20170808 03:18:45.025"></status>
</kw>
<status endtime="20170808 03:18:45.217" status="PASS" starttime="20170808 03:18:45.025"></status>
</kw>
<status endtime="20170808 03:18:45.217" status="PASS" starttime="20170808 03:18:45.024"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:45.218" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170808 03:18:45.218" status="PASS" starttime="20170808 03:18:45.218"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 03:18:45.219" status="PASS" starttime="20170808 03:18:45.218"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:45.302" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170808 03:18:45.302" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:45.302" status="PASS" starttime="20170808 03:18:45.219"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 03:18:45.303" status="PASS" starttime="20170808 03:18:45.302"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:45.303" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:45.303" status="PASS" starttime="20170808 03:18:45.303"></status>
</kw>
<msg timestamp="20170808 03:18:45.303" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:45.303" status="PASS" starttime="20170808 03:18:45.024"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.304" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:45.304" status="PASS" starttime="20170808 03:18:45.304"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:18:45.305" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:45.305" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:18:45.305" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170808 03:18:45.305" status="PASS" starttime="20170808 03:18:45.304"></status>
</kw>
<msg timestamp="20170808 03:18:45.305" level="INFO">${esel_data} = []</msg>
<status endtime="20170808 03:18:45.305" status="PASS" starttime="20170808 03:18:45.023"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170808 03:18:45.306" level="INFO">Length is 0</msg>
<msg timestamp="20170808 03:18:45.306" level="INFO">${length} = 0</msg>
<status endtime="20170808 03:18:45.306" status="PASS" starttime="20170808 03:18:45.305"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.306" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170808 03:18:45.306" status="PASS" starttime="20170808 03:18:45.306"></status>
</kw>
<status endtime="20170808 03:18:45.306" status="PASS" starttime="20170808 03:18:45.022"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170808 03:18:45.307" status="PASS" starttime="20170808 03:18:45.307"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:45.311" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:45.311" status="PASS" starttime="20170808 03:18:45.310"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:45.312" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:45.312" status="PASS" starttime="20170808 03:18:45.311"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:45.312" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:45.312" status="PASS" starttime="20170808 03:18:45.312"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:45.313" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:45.313" status="PASS" starttime="20170808 03:18:45.312"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.516" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:45.516" status="PASS" starttime="20170808 03:18:45.314"></status>
</kw>
<msg timestamp="20170808 03:18:45.516" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:45.516" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:45.516" status="PASS" starttime="20170808 03:18:45.313"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.517" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:45.517" status="PASS" starttime="20170808 03:18:45.516"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:45.517" status="PASS" starttime="20170808 03:18:45.517"></status>
</kw>
<status endtime="20170808 03:18:45.518" status="PASS" starttime="20170808 03:18:45.310"></status>
</kw>
<status endtime="20170808 03:18:45.518" status="PASS" starttime="20170808 03:18:45.309"></status>
</kw>
<status endtime="20170808 03:18:45.518" status="PASS" starttime="20170808 03:18:45.309"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:45.518" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170808 03:18:45.518" status="PASS" starttime="20170808 03:18:45.518"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 03:18:45.519" status="PASS" starttime="20170808 03:18:45.519"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:45.601" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170808 03:18:45.602" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:45.602" status="PASS" starttime="20170808 03:18:45.519"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 03:18:45.602" status="PASS" starttime="20170808 03:18:45.602"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:45.603" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:45.603" status="PASS" starttime="20170808 03:18:45.603"></status>
</kw>
<msg timestamp="20170808 03:18:45.603" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:45.603" status="PASS" starttime="20170808 03:18:45.308"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.604" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:45.604" status="PASS" starttime="20170808 03:18:45.603"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:18:45.604" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:45.604" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:18:45.605" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170808 03:18:45.605" status="PASS" starttime="20170808 03:18:45.604"></status>
</kw>
<msg timestamp="20170808 03:18:45.605" level="INFO">${esel_data} = []</msg>
<status endtime="20170808 03:18:45.605" status="PASS" starttime="20170808 03:18:45.308"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170808 03:18:45.605" level="INFO">Length is 0</msg>
<msg timestamp="20170808 03:18:45.605" level="INFO">${length} = 0</msg>
<status endtime="20170808 03:18:45.606" status="PASS" starttime="20170808 03:18:45.605"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.606" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170808 03:18:45.606" status="PASS" starttime="20170808 03:18:45.606"></status>
</kw>
<status endtime="20170808 03:18:45.606" status="PASS" starttime="20170808 03:18:45.307"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170808 03:18:45.607" status="PASS" starttime="20170808 03:18:45.607"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:45.610" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:45.611" status="PASS" starttime="20170808 03:18:45.610"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:45.611" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:45.611" status="PASS" starttime="20170808 03:18:45.611"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:45.612" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:45.612" status="PASS" starttime="20170808 03:18:45.611"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:45.612" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:45.613" status="PASS" starttime="20170808 03:18:45.612"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.858" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:45.859" status="PASS" starttime="20170808 03:18:45.613"></status>
</kw>
<msg timestamp="20170808 03:18:45.859" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:45.859" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:45.859" status="PASS" starttime="20170808 03:18:45.613"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.859" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:45.859" status="PASS" starttime="20170808 03:18:45.859"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.860" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:45.860" status="PASS" starttime="20170808 03:18:45.860"></status>
</kw>
<status endtime="20170808 03:18:45.860" status="PASS" starttime="20170808 03:18:45.609"></status>
</kw>
<status endtime="20170808 03:18:45.860" status="PASS" starttime="20170808 03:18:45.609"></status>
</kw>
<status endtime="20170808 03:18:45.861" status="PASS" starttime="20170808 03:18:45.608"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:45.861" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status endtime="20170808 03:18:45.861" status="PASS" starttime="20170808 03:18:45.861"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 03:18:45.862" status="PASS" starttime="20170808 03:18:45.861"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:45.946" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170808 03:18:45.946" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:45.946" status="PASS" starttime="20170808 03:18:45.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 03:18:45.947" status="PASS" starttime="20170808 03:18:45.947"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:45.947" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:45.948" status="PASS" starttime="20170808 03:18:45.947"></status>
</kw>
<msg timestamp="20170808 03:18:45.948" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:45.948" status="PASS" starttime="20170808 03:18:45.608"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.948" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:45.948" status="PASS" starttime="20170808 03:18:45.948"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:18:45.949" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:45.949" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:18:45.949" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170808 03:18:45.949" status="PASS" starttime="20170808 03:18:45.949"></status>
</kw>
<msg timestamp="20170808 03:18:45.949" level="INFO">${esel_data} = []</msg>
<status endtime="20170808 03:18:45.949" status="PASS" starttime="20170808 03:18:45.607"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170808 03:18:45.950" level="INFO">Length is 0</msg>
<msg timestamp="20170808 03:18:45.950" level="INFO">${length} = 0</msg>
<status endtime="20170808 03:18:45.950" status="PASS" starttime="20170808 03:18:45.950"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170808 03:18:45.951" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170808 03:18:45.951" status="PASS" starttime="20170808 03:18:45.950"></status>
</kw>
<status endtime="20170808 03:18:45.951" status="PASS" starttime="20170808 03:18:45.606"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/6">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170808 03:18:45.952" status="PASS" starttime="20170808 03:18:45.951"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:45.956" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:45.956" status="PASS" starttime="20170808 03:18:45.955"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:45.957" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:45.957" status="PASS" starttime="20170808 03:18:45.956"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:45.958" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:45.958" status="PASS" starttime="20170808 03:18:45.957"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:45.959" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:45.959" status="PASS" starttime="20170808 03:18:45.958"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:46.139" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:46.139" status="PASS" starttime="20170808 03:18:45.960"></status>
</kw>
<msg timestamp="20170808 03:18:46.139" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:46.140" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:46.140" status="PASS" starttime="20170808 03:18:45.959"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:46.140" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:46.140" status="PASS" starttime="20170808 03:18:46.140"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:46.141" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:46.141" status="PASS" starttime="20170808 03:18:46.141"></status>
</kw>
<status endtime="20170808 03:18:46.141" status="PASS" starttime="20170808 03:18:45.954"></status>
</kw>
<status endtime="20170808 03:18:46.141" status="PASS" starttime="20170808 03:18:45.954"></status>
</kw>
<status endtime="20170808 03:18:46.141" status="PASS" starttime="20170808 03:18:45.953"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:46.142" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status endtime="20170808 03:18:46.142" status="PASS" starttime="20170808 03:18:46.142"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 03:18:46.143" status="PASS" starttime="20170808 03:18:46.142"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:46.226" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170808 03:18:46.226" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:46.226" status="PASS" starttime="20170808 03:18:46.143"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 03:18:46.227" status="PASS" starttime="20170808 03:18:46.226"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:46.227" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:46.227" status="PASS" starttime="20170808 03:18:46.227"></status>
</kw>
<msg timestamp="20170808 03:18:46.227" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:46.227" status="PASS" starttime="20170808 03:18:45.952"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:46.228" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:46.228" status="PASS" starttime="20170808 03:18:46.228"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:18:46.228" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:46.229" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:18:46.229" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170808 03:18:46.229" status="PASS" starttime="20170808 03:18:46.228"></status>
</kw>
<msg timestamp="20170808 03:18:46.229" level="INFO">${esel_data} = []</msg>
<status endtime="20170808 03:18:46.229" status="PASS" starttime="20170808 03:18:45.952"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170808 03:18:46.229" level="INFO">Length is 0</msg>
<msg timestamp="20170808 03:18:46.230" level="INFO">${length} = 0</msg>
<status endtime="20170808 03:18:46.230" status="PASS" starttime="20170808 03:18:46.229"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170808 03:18:46.230" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170808 03:18:46.231" status="PASS" starttime="20170808 03:18:46.230"></status>
</kw>
<status endtime="20170808 03:18:46.231" status="PASS" starttime="20170808 03:18:45.951"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/7">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170808 03:18:46.232" status="PASS" starttime="20170808 03:18:46.231"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:46.237" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:46.237" status="PASS" starttime="20170808 03:18:46.236"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:46.238" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:46.238" status="PASS" starttime="20170808 03:18:46.238"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:46.239" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:46.239" status="PASS" starttime="20170808 03:18:46.238"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:46.240" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:46.240" status="PASS" starttime="20170808 03:18:46.239"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:46.418" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:46.418" status="PASS" starttime="20170808 03:18:46.240"></status>
</kw>
<msg timestamp="20170808 03:18:46.419" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:46.419" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:46.419" status="PASS" starttime="20170808 03:18:46.240"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:46.419" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:46.419" status="PASS" starttime="20170808 03:18:46.419"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:46.420" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:46.420" status="PASS" starttime="20170808 03:18:46.420"></status>
</kw>
<status endtime="20170808 03:18:46.420" status="PASS" starttime="20170808 03:18:46.235"></status>
</kw>
<status endtime="20170808 03:18:46.420" status="PASS" starttime="20170808 03:18:46.235"></status>
</kw>
<status endtime="20170808 03:18:46.420" status="PASS" starttime="20170808 03:18:46.234"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:46.421" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status endtime="20170808 03:18:46.421" status="PASS" starttime="20170808 03:18:46.421"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 03:18:46.422" status="PASS" starttime="20170808 03:18:46.421"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:46.516" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170808 03:18:46.516" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:46.516" status="PASS" starttime="20170808 03:18:46.422"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 03:18:46.517" status="PASS" starttime="20170808 03:18:46.516"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:46.517" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:46.517" status="PASS" starttime="20170808 03:18:46.517"></status>
</kw>
<msg timestamp="20170808 03:18:46.518" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:46.518" status="PASS" starttime="20170808 03:18:46.233"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:46.518" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:46.518" status="PASS" starttime="20170808 03:18:46.518"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:18:46.519" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:46.519" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:18:46.519" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170808 03:18:46.519" status="PASS" starttime="20170808 03:18:46.518"></status>
</kw>
<msg timestamp="20170808 03:18:46.519" level="INFO">${esel_data} = []</msg>
<status endtime="20170808 03:18:46.519" status="PASS" starttime="20170808 03:18:46.232"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170808 03:18:46.520" level="INFO">Length is 0</msg>
<msg timestamp="20170808 03:18:46.520" level="INFO">${length} = 0</msg>
<status endtime="20170808 03:18:46.520" status="PASS" starttime="20170808 03:18:46.520"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170808 03:18:46.520" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170808 03:18:46.521" status="PASS" starttime="20170808 03:18:46.520"></status>
</kw>
<status endtime="20170808 03:18:46.521" status="PASS" starttime="20170808 03:18:46.231"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/8">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170808 03:18:46.521" status="PASS" starttime="20170808 03:18:46.521"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:46.525" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:46.525" status="PASS" starttime="20170808 03:18:46.525"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:46.526" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:46.526" status="PASS" starttime="20170808 03:18:46.525"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:46.526" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:46.526" status="PASS" starttime="20170808 03:18:46.526"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:46.527" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:46.527" status="PASS" starttime="20170808 03:18:46.527"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:46.784" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:46.784" status="PASS" starttime="20170808 03:18:46.528"></status>
</kw>
<msg timestamp="20170808 03:18:46.785" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:46.785" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:46.785" status="PASS" starttime="20170808 03:18:46.527"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:46.785" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:46.785" status="PASS" starttime="20170808 03:18:46.785"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:46.786" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:46.786" status="PASS" starttime="20170808 03:18:46.786"></status>
</kw>
<status endtime="20170808 03:18:46.786" status="PASS" starttime="20170808 03:18:46.524"></status>
</kw>
<status endtime="20170808 03:18:46.786" status="PASS" starttime="20170808 03:18:46.524"></status>
</kw>
<status endtime="20170808 03:18:46.786" status="PASS" starttime="20170808 03:18:46.523"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:46.787" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/8/attr/AdditionalData</msg>
<status endtime="20170808 03:18:46.787" status="PASS" starttime="20170808 03:18:46.787"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 03:18:46.788" status="PASS" starttime="20170808 03:18:46.787"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:46.892" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/8/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170808 03:18:46.893" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:46.893" status="PASS" starttime="20170808 03:18:46.788"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 03:18:46.893" status="PASS" starttime="20170808 03:18:46.893"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:46.894" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:46.894" status="PASS" starttime="20170808 03:18:46.894"></status>
</kw>
<msg timestamp="20170808 03:18:46.894" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:46.894" status="PASS" starttime="20170808 03:18:46.522"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:46.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:46.895" status="PASS" starttime="20170808 03:18:46.894"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:18:46.895" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:46.895" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:18:46.895" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170808 03:18:46.895" status="PASS" starttime="20170808 03:18:46.895"></status>
</kw>
<msg timestamp="20170808 03:18:46.896" level="INFO">${esel_data} = []</msg>
<status endtime="20170808 03:18:46.896" status="PASS" starttime="20170808 03:18:46.522"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170808 03:18:46.896" level="INFO">Length is 0</msg>
<msg timestamp="20170808 03:18:46.896" level="INFO">${length} = 0</msg>
<status endtime="20170808 03:18:46.896" status="PASS" starttime="20170808 03:18:46.896"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170808 03:18:46.897" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170808 03:18:46.897" status="PASS" starttime="20170808 03:18:46.897"></status>
</kw>
<status endtime="20170808 03:18:46.897" status="PASS" starttime="20170808 03:18:46.521"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/9">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170808 03:18:46.898" status="PASS" starttime="20170808 03:18:46.898"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:46.901" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:46.902" status="PASS" starttime="20170808 03:18:46.901"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:46.903" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:46.903" status="PASS" starttime="20170808 03:18:46.902"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:46.903" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:46.903" status="PASS" starttime="20170808 03:18:46.903"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:46.904" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:46.904" status="PASS" starttime="20170808 03:18:46.904"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:47.147" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:47.147" status="PASS" starttime="20170808 03:18:46.905"></status>
</kw>
<msg timestamp="20170808 03:18:47.147" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:47.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:47.148" status="PASS" starttime="20170808 03:18:46.904"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:47.148" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:47.148" status="PASS" starttime="20170808 03:18:47.148"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:47.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:47.149" status="PASS" starttime="20170808 03:18:47.149"></status>
</kw>
<status endtime="20170808 03:18:47.149" status="PASS" starttime="20170808 03:18:46.900"></status>
</kw>
<status endtime="20170808 03:18:47.149" status="PASS" starttime="20170808 03:18:46.900"></status>
</kw>
<status endtime="20170808 03:18:47.149" status="PASS" starttime="20170808 03:18:46.899"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:47.150" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/9/attr/AdditionalData</msg>
<status endtime="20170808 03:18:47.150" status="PASS" starttime="20170808 03:18:47.150"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 03:18:47.151" status="PASS" starttime="20170808 03:18:47.150"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:47.234" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/9/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170808 03:18:47.234" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:47.234" status="PASS" starttime="20170808 03:18:47.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 03:18:47.235" status="PASS" starttime="20170808 03:18:47.234"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:47.235" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:47.235" status="PASS" starttime="20170808 03:18:47.235"></status>
</kw>
<msg timestamp="20170808 03:18:47.235" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:47.235" status="PASS" starttime="20170808 03:18:46.899"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:47.236" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:47.236" status="PASS" starttime="20170808 03:18:47.236"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170808 03:18:47.237" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:47.237" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170808 03:18:47.237" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170808 03:18:47.237" status="PASS" starttime="20170808 03:18:47.236"></status>
</kw>
<msg timestamp="20170808 03:18:47.237" level="INFO">${esel_data} = []</msg>
<status endtime="20170808 03:18:47.237" status="PASS" starttime="20170808 03:18:46.898"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170808 03:18:47.238" level="INFO">Length is 0</msg>
<msg timestamp="20170808 03:18:47.238" level="INFO">${length} = 0</msg>
<status endtime="20170808 03:18:47.238" status="PASS" starttime="20170808 03:18:47.237"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170808 03:18:47.238" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170808 03:18:47.239" status="PASS" starttime="20170808 03:18:47.238"></status>
</kw>
<status endtime="20170808 03:18:47.239" status="PASS" starttime="20170808 03:18:46.897"></status>
</kw>
<status endtime="20170808 03:18:47.239" status="PASS" starttime="20170808 03:18:44.377"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170808 03:18:47.248" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170808 03:18:47.259" level="INFO">${out} = </msg>
<status endtime="20170808 03:18:47.259" status="PASS" starttime="20170808 03:18:47.239"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170808 03:18:47.263" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170808 03:18:47.263" status="FAIL" starttime="20170808 03:18:47.262"></status>
</kw>
<msg timestamp="20170808 03:18:47.263" level="INFO">${status} = False</msg>
<status endtime="20170808 03:18:47.263" status="PASS" starttime="20170808 03:18:47.261"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170808 03:18:47.264" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170808 03:18:47.265" status="PASS" starttime="20170808 03:18:47.264"></status>
</kw>
<status endtime="20170808 03:18:47.265" status="PASS" starttime="20170808 03:18:43.925"></status>
</kw>
<status endtime="20170808 03:18:47.265" status="PASS" starttime="20170808 03:18:43.880"></status>
</kw>
<status endtime="20170808 03:18:47.265" status="PASS" starttime="20170808 03:18:43.878"></status>
</kw>
<status endtime="20170808 03:18:47.265" status="PASS" starttime="20170808 03:18:43.877"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170808 03:18:47.268" status="PASS" starttime="20170808 03:18:47.267"></status>
</kw>
<msg timestamp="20170808 03:18:47.268" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:47.268" level="INFO">${ret_values} = None</msg>
<status endtime="20170808 03:18:47.268" status="PASS" starttime="20170808 03:18:47.267"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170808 03:18:47.269" status="PASS" starttime="20170808 03:18:47.268"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170808 03:18:47.315" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170808 03:18:47.315" status="PASS" starttime="20170808 03:18:47.315"></status>
</kw>
<status endtime="20170808 03:18:47.315" status="PASS" starttime="20170808 03:18:47.314"></status>
</kw>
<status endtime="20170808 03:18:47.315" status="PASS" starttime="20170808 03:18:47.269"></status>
</kw>
<status endtime="20170808 03:18:47.316" status="PASS" starttime="20170808 03:18:47.266"></status>
</kw>
<status endtime="20170808 03:18:47.316" status="PASS" starttime="20170808 03:18:47.266"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170808 03:18:47.318" status="PASS" starttime="20170808 03:18:47.317"></status>
</kw>
<msg timestamp="20170808 03:18:47.318" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:47.318" level="INFO">${ret_values} = None</msg>
<status endtime="20170808 03:18:47.318" status="PASS" starttime="20170808 03:18:47.317"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170808 03:18:47.318" status="PASS" starttime="20170808 03:18:47.318"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170808 03:18:47.371" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170808 03:18:47.371" status="PASS" starttime="20170808 03:18:47.370"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170808 03:18:47.372" level="INFO">@{cmd_list} = [ ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_lis...</msg>
<status endtime="20170808 03:18:47.372" status="PASS" starttime="20170808 03:18:47.372"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170808 03:18:47.373" level="INFO">${logpath} = /tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_inventory.txt</msg>
<status endtime="20170808 03:18:47.373" status="PASS" starttime="20170808 03:18:47.372"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:47.376" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:47.377" status="PASS" starttime="20170808 03:18:47.376"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:47.377" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:47.377" status="PASS" starttime="20170808 03:18:47.377"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:47.378" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:47.378" status="PASS" starttime="20170808 03:18:47.378"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:47.379" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:47.379" status="PASS" starttime="20170808 03:18:47.378"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:47.568" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:47.569" status="PASS" starttime="20170808 03:18:47.379"></status>
</kw>
<msg timestamp="20170808 03:18:47.569" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:47.569" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:47.569" status="PASS" starttime="20170808 03:18:47.379"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:47.569" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:47.569" status="PASS" starttime="20170808 03:18:47.569"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:47.570" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:47.570" status="PASS" starttime="20170808 03:18:47.570"></status>
</kw>
<status endtime="20170808 03:18:47.570" status="PASS" starttime="20170808 03:18:47.375"></status>
</kw>
<status endtime="20170808 03:18:47.571" status="PASS" starttime="20170808 03:18:47.375"></status>
</kw>
<status endtime="20170808 03:18:47.571" status="PASS" starttime="20170808 03:18:47.374"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:47.571" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170808 03:18:47.571" status="PASS" starttime="20170808 03:18:47.571"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 03:18:47.572" status="PASS" starttime="20170808 03:18:47.572"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:47.797" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170808 03:18:47.797" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:47.798" status="PASS" starttime="20170808 03:18:47.572"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 03:18:47.798" status="PASS" starttime="20170808 03:18:47.798"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:47.799" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:47.799" status="PASS" starttime="20170808 03:18:47.798"></status>
</kw>
<msg timestamp="20170808 03:18:47.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:47.799" status="PASS" starttime="20170808 03:18:47.373"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:47.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:47.800" status="PASS" starttime="20170808 03:18:47.800"></status>
</kw>
<msg timestamp="20170808 03:18:47.800" level="INFO">${status} = True</msg>
<status endtime="20170808 03:18:47.800" status="PASS" starttime="20170808 03:18:47.799"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170808 03:18:47.801" status="PASS" starttime="20170808 03:18:47.800"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170808 03:18:47.802" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:47.802" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170808 03:18:47.802" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status endtime="20170808 03:18:47.802" status="PASS" starttime="20170808 03:18:47.801"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:47.803" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_inventory.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:47.804" status="PASS" starttime="20170808 03:18:47.803"></status>
</kw>
<status endtime="20170808 03:18:47.804" status="PASS" starttime="20170808 03:18:47.802"></status>
</kw>
<status endtime="20170808 03:18:47.804" status="PASS" starttime="20170808 03:18:47.372"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170808 03:18:47.804" level="INFO">${logpath} = /tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_led.txt</msg>
<status endtime="20170808 03:18:47.805" status="PASS" starttime="20170808 03:18:47.804"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:47.807" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:47.808" status="PASS" starttime="20170808 03:18:47.807"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:47.808" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:47.808" status="PASS" starttime="20170808 03:18:47.808"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:47.809" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:47.809" status="PASS" starttime="20170808 03:18:47.808"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:47.809" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:47.809" status="PASS" starttime="20170808 03:18:47.809"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:47.991" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:47.992" status="PASS" starttime="20170808 03:18:47.810"></status>
</kw>
<msg timestamp="20170808 03:18:47.992" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:47.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:47.992" status="PASS" starttime="20170808 03:18:47.810"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:47.992" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:47.993" status="PASS" starttime="20170808 03:18:47.992"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:47.993" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:47.993" status="PASS" starttime="20170808 03:18:47.993"></status>
</kw>
<status endtime="20170808 03:18:47.993" status="PASS" starttime="20170808 03:18:47.806"></status>
</kw>
<status endtime="20170808 03:18:47.993" status="PASS" starttime="20170808 03:18:47.806"></status>
</kw>
<status endtime="20170808 03:18:47.994" status="PASS" starttime="20170808 03:18:47.805"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:47.994" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170808 03:18:47.994" status="PASS" starttime="20170808 03:18:47.994"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 03:18:47.995" status="PASS" starttime="20170808 03:18:47.994"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:48.044" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170808 03:18:48.044" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170808 03:18:48.044" status="PASS" starttime="20170808 03:18:47.995"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 03:18:48.045" status="PASS" starttime="20170808 03:18:48.045"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:48.045" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:48.045" status="PASS" starttime="20170808 03:18:48.045"></status>
</kw>
<msg timestamp="20170808 03:18:48.046" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170808 03:18:48.046" status="PASS" starttime="20170808 03:18:47.805"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:48.047" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170808 03:18:48.047" level="FAIL">404 != 200</msg>
<status endtime="20170808 03:18:48.047" status="FAIL" starttime="20170808 03:18:48.046"></status>
</kw>
<msg timestamp="20170808 03:18:48.047" level="INFO">${status} = False</msg>
<status endtime="20170808 03:18:48.047" status="PASS" starttime="20170808 03:18:48.046"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170808 03:18:48.048" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170808 03:18:48.048" status="PASS" starttime="20170808 03:18:48.048"></status>
</kw>
<status endtime="20170808 03:18:48.048" status="PASS" starttime="20170808 03:18:48.047"></status>
</kw>
<status endtime="20170808 03:18:48.048" status="PASS" starttime="20170808 03:18:47.804"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170808 03:18:48.049" level="INFO">${logpath} = /tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_elog.txt</msg>
<status endtime="20170808 03:18:48.049" status="PASS" starttime="20170808 03:18:48.049"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:48.052" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:48.052" status="PASS" starttime="20170808 03:18:48.051"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:48.053" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:48.053" status="PASS" starttime="20170808 03:18:48.052"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:48.053" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:48.053" status="PASS" starttime="20170808 03:18:48.053"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:48.054" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:48.054" status="PASS" starttime="20170808 03:18:48.054"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:48.298" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:48.298" status="PASS" starttime="20170808 03:18:48.055"></status>
</kw>
<msg timestamp="20170808 03:18:48.298" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:48.298" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:48.298" status="PASS" starttime="20170808 03:18:48.054"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:48.299" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:48.299" status="PASS" starttime="20170808 03:18:48.298"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:48.299" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:48.299" status="PASS" starttime="20170808 03:18:48.299"></status>
</kw>
<status endtime="20170808 03:18:48.299" status="PASS" starttime="20170808 03:18:48.051"></status>
</kw>
<status endtime="20170808 03:18:48.300" status="PASS" starttime="20170808 03:18:48.050"></status>
</kw>
<status endtime="20170808 03:18:48.300" status="PASS" starttime="20170808 03:18:48.050"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:48.300" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170808 03:18:48.300" status="PASS" starttime="20170808 03:18:48.300"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 03:18:48.301" status="PASS" starttime="20170808 03:18:48.300"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:48.549" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170808 03:18:48.549" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:48.550" status="PASS" starttime="20170808 03:18:48.301"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 03:18:48.550" status="PASS" starttime="20170808 03:18:48.550"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:48.551" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:48.551" status="PASS" starttime="20170808 03:18:48.550"></status>
</kw>
<msg timestamp="20170808 03:18:48.551" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:48.551" status="PASS" starttime="20170808 03:18:48.049"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:48.552" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:48.552" status="PASS" starttime="20170808 03:18:48.552"></status>
</kw>
<msg timestamp="20170808 03:18:48.552" level="INFO">${status} = True</msg>
<status endtime="20170808 03:18:48.552" status="PASS" starttime="20170808 03:18:48.551"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170808 03:18:48.553" status="PASS" starttime="20170808 03:18:48.552"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170808 03:18:48.554" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [], 
      "Id": 10, 
      "Message": "org.open_power.Proc.CFAM.OpenFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502161793564, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502160779271, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502161414802, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Proc.CFAM.OpenFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502161750582, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Proc.CFAM.OpenFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502161754992, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502161787997, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Proc.CFAM.OpenFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502161790506, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [], 
      "Id": 8, 
      "Message": "org.open_power.Proc.CFAM.OpenFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502161791173, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [], 
      "Id": 9, 
      "Message": "org.open_power.Proc.CFAM.OpenFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502161792772, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:48.554" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170808 03:18:48.554" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/10": {
            "AdditionalData": [],
            "Id": 10,
            "Message": "org.open_power.Proc.CFAM.OpenFailure",
            "R...</msg>
<status endtime="20170808 03:18:48.554" status="PASS" starttime="20170808 03:18:48.553"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:48.556" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_elog.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:48.556" status="PASS" starttime="20170808 03:18:48.555"></status>
</kw>
<status endtime="20170808 03:18:48.556" status="PASS" starttime="20170808 03:18:48.554"></status>
</kw>
<status endtime="20170808 03:18:48.556" status="PASS" starttime="20170808 03:18:48.048"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170808 03:18:48.557" level="INFO">${logpath} = /tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_sensor_list.txt</msg>
<status endtime="20170808 03:18:48.557" status="PASS" starttime="20170808 03:18:48.556"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:48.559" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:48.560" status="PASS" starttime="20170808 03:18:48.559"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:48.560" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:48.560" status="PASS" starttime="20170808 03:18:48.560"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:48.561" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:48.561" status="PASS" starttime="20170808 03:18:48.560"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:48.561" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:48.562" status="PASS" starttime="20170808 03:18:48.561"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:48.752" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:48.753" status="PASS" starttime="20170808 03:18:48.562"></status>
</kw>
<msg timestamp="20170808 03:18:48.753" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:48.753" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:48.753" status="PASS" starttime="20170808 03:18:48.562"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:48.753" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:48.753" status="PASS" starttime="20170808 03:18:48.753"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:48.754" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:48.754" status="PASS" starttime="20170808 03:18:48.754"></status>
</kw>
<status endtime="20170808 03:18:48.754" status="PASS" starttime="20170808 03:18:48.558"></status>
</kw>
<status endtime="20170808 03:18:48.754" status="PASS" starttime="20170808 03:18:48.558"></status>
</kw>
<status endtime="20170808 03:18:48.754" status="PASS" starttime="20170808 03:18:48.557"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:48.755" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170808 03:18:48.755" status="PASS" starttime="20170808 03:18:48.755"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 03:18:48.756" status="PASS" starttime="20170808 03:18:48.755"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:48.927" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170808 03:18:48.927" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:48.927" status="PASS" starttime="20170808 03:18:48.756"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 03:18:48.928" status="PASS" starttime="20170808 03:18:48.928"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:48.928" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:48.928" status="PASS" starttime="20170808 03:18:48.928"></status>
</kw>
<msg timestamp="20170808 03:18:48.929" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:48.929" status="PASS" starttime="20170808 03:18:48.557"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:48.930" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:48.930" status="PASS" starttime="20170808 03:18:48.929"></status>
</kw>
<msg timestamp="20170808 03:18:48.930" level="INFO">${status} = True</msg>
<status endtime="20170808 03:18:48.930" status="PASS" starttime="20170808 03:18:48.929"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170808 03:18:48.930" status="PASS" starttime="20170808 03:18:48.930"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170808 03:18:48.931" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170808 03:18:48.931" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170808 03:18:48.931" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170808 03:18:48.931" status="PASS" starttime="20170808 03:18:48.931"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:48.933" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_sensor_list.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:48.933" status="PASS" starttime="20170808 03:18:48.932"></status>
</kw>
<status endtime="20170808 03:18:48.933" status="PASS" starttime="20170808 03:18:48.932"></status>
</kw>
<status endtime="20170808 03:18:48.933" status="PASS" starttime="20170808 03:18:48.556"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170808 03:18:48.934" level="INFO">${logpath} = /tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_record_log.txt</msg>
<status endtime="20170808 03:18:48.934" status="PASS" starttime="20170808 03:18:48.934"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170808 03:18:48.937" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170808 03:18:48.937" status="PASS" starttime="20170808 03:18:48.936"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170808 03:18:48.937" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170808 03:18:48.938" status="PASS" starttime="20170808 03:18:48.937"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170808 03:18:48.938" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170808 03:18:48.938" status="PASS" starttime="20170808 03:18:48.938"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170808 03:18:48.939" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170808 03:18:48.939" status="PASS" starttime="20170808 03:18:48.938"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170808 03:18:49.122" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170808 03:18:49.123" status="PASS" starttime="20170808 03:18:48.939"></status>
</kw>
<msg timestamp="20170808 03:18:49.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:49.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170808 03:18:49.123" status="PASS" starttime="20170808 03:18:48.939"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170808 03:18:49.123" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:49.123" status="PASS" starttime="20170808 03:18:49.123"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:49.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170808 03:18:49.124" status="PASS" starttime="20170808 03:18:49.124"></status>
</kw>
<status endtime="20170808 03:18:49.124" status="PASS" starttime="20170808 03:18:48.936"></status>
</kw>
<status endtime="20170808 03:18:49.124" status="PASS" starttime="20170808 03:18:48.935"></status>
</kw>
<status endtime="20170808 03:18:49.125" status="PASS" starttime="20170808 03:18:48.935"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170808 03:18:49.125" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170808 03:18:49.125" status="PASS" starttime="20170808 03:18:49.125"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170808 03:18:49.126" status="PASS" starttime="20170808 03:18:49.125"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170808 03:18:49.170" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170808 03:18:49.170" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170808 03:18:49.170" status="PASS" starttime="20170808 03:18:49.126"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170808 03:18:49.171" status="PASS" starttime="20170808 03:18:49.170"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170808 03:18:49.171" level="INFO">Delete All Sessions</msg>
<status endtime="20170808 03:18:49.171" status="PASS" starttime="20170808 03:18:49.171"></status>
</kw>
<msg timestamp="20170808 03:18:49.171" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170808 03:18:49.171" status="PASS" starttime="20170808 03:18:48.934"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170808 03:18:49.172" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170808 03:18:49.172" level="FAIL">404 != 200</msg>
<status endtime="20170808 03:18:49.172" status="FAIL" starttime="20170808 03:18:49.172"></status>
</kw>
<msg timestamp="20170808 03:18:49.173" level="INFO">${status} = False</msg>
<status endtime="20170808 03:18:49.173" status="PASS" starttime="20170808 03:18:49.171"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170808 03:18:49.174" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170808 03:18:49.174" status="PASS" starttime="20170808 03:18:49.174"></status>
</kw>
<status endtime="20170808 03:18:49.174" status="PASS" starttime="20170808 03:18:49.173"></status>
</kw>
<status endtime="20170808 03:18:49.174" status="PASS" starttime="20170808 03:18:48.933"></status>
</kw>
<status endtime="20170808 03:18:49.174" status="PASS" starttime="20170808 03:18:47.372"></status>
</kw>
<status endtime="20170808 03:18:49.175" status="PASS" starttime="20170808 03:18:47.371"></status>
</kw>
<status endtime="20170808 03:18:49.175" status="PASS" starttime="20170808 03:18:47.371"></status>
</kw>
<status endtime="20170808 03:18:49.175" status="PASS" starttime="20170808 03:18:47.371"></status>
</kw>
<status endtime="20170808 03:18:49.175" status="PASS" starttime="20170808 03:18:47.370"></status>
</kw>
<status endtime="20170808 03:18:49.175" status="PASS" starttime="20170808 03:18:47.318"></status>
</kw>
<status endtime="20170808 03:18:49.175" status="PASS" starttime="20170808 03:18:47.316"></status>
</kw>
<status endtime="20170808 03:18:49.175" status="PASS" starttime="20170808 03:18:47.316"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170808 03:18:49.178" status="PASS" starttime="20170808 03:18:49.177"></status>
</kw>
<msg timestamp="20170808 03:18:49.178" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:49.178" level="INFO">${ret_values} = None</msg>
<status endtime="20170808 03:18:49.178" status="PASS" starttime="20170808 03:18:49.177"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170808 03:18:49.179" status="PASS" starttime="20170808 03:18:49.178"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170808 03:18:49.222" level="INFO">@{entries} = [ APPLICATION DATA | BMC DATA | DRIVER INFO ]</msg>
<status endtime="20170808 03:18:49.222" status="PASS" starttime="20170808 03:18:49.221"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170808 03:18:49.223" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170808 03:18:49.223" status="PASS" starttime="20170808 03:18:49.223"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170808 03:18:49.231" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170808 03:18:49.231" status="PASS" starttime="20170808 03:18:49.223"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:49.238" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:49.238" status="PASS" starttime="20170808 03:18:49.238"></status>
</kw>
<status endtime="20170808 03:18:49.238" status="PASS" starttime="20170808 03:18:49.233"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:49.240" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:49.240" status="PASS" starttime="20170808 03:18:49.239"></status>
</kw>
<status endtime="20170808 03:18:49.240" status="PASS" starttime="20170808 03:18:49.239"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:49.241" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:49.241" status="PASS" starttime="20170808 03:18:49.241"></status>
</kw>
<status endtime="20170808 03:18:49.241" status="PASS" starttime="20170808 03:18:49.240"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:49.242" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:49.243" status="PASS" starttime="20170808 03:18:49.242"></status>
</kw>
<status endtime="20170808 03:18:49.243" status="PASS" starttime="20170808 03:18:49.242"></status>
</kw>
<status endtime="20170808 03:18:49.243" status="PASS" starttime="20170808 03:18:49.232"></status>
</kw>
<status endtime="20170808 03:18:49.243" status="PASS" starttime="20170808 03:18:49.232"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:18:49.244" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170808 03:18:49.244" status="PASS" starttime="20170808 03:18:49.243"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170808 03:18:49.364" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:18:49.366" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170808 03:18:50.664" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170808 03:18:50.664" status="PASS" starttime="20170808 03:18:49.300"></status>
</kw>
<msg timestamp="20170808 03:18:50.664" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:50.664" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status endtime="20170808 03:18:50.664" status="PASS" starttime="20170808 03:18:49.244"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170808 03:18:50.665" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170808 03:18:50.665" status="PASS" starttime="20170808 03:18:50.664"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170808 03:18:50.665" level="INFO">${stderr} = </msg>
<status endtime="20170808 03:18:50.665" status="PASS" starttime="20170808 03:18:50.665"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:50.673" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:50.673" status="PASS" starttime="20170808 03:18:50.673"></status>
</kw>
<status endtime="20170808 03:18:50.674" status="PASS" starttime="20170808 03:18:50.672"></status>
</kw>
<status endtime="20170808 03:18:50.674" status="PASS" starttime="20170808 03:18:50.666"></status>
</kw>
<status endtime="20170808 03:18:50.674" status="PASS" starttime="20170808 03:18:49.231"></status>
</kw>
<status endtime="20170808 03:18:50.674" status="PASS" starttime="20170808 03:18:49.231"></status>
</kw>
<status endtime="20170808 03:18:50.674" status="PASS" starttime="20170808 03:18:49.231"></status>
</kw>
<status endtime="20170808 03:18:50.674" status="PASS" starttime="20170808 03:18:49.222"></status>
</kw>
<status endtime="20170808 03:18:50.674" status="PASS" starttime="20170808 03:18:49.222"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170808 03:18:50.675" level="INFO">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170808 03:18:50.675" status="PASS" starttime="20170808 03:18:50.675"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170808 03:18:50.676" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170808 03:18:50.676" status="PASS" starttime="20170808 03:18:50.675"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:50.679" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:50.679" status="PASS" starttime="20170808 03:18:50.679"></status>
</kw>
<status endtime="20170808 03:18:50.679" status="PASS" starttime="20170808 03:18:50.678"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:50.681" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:50.681" status="PASS" starttime="20170808 03:18:50.680"></status>
</kw>
<status endtime="20170808 03:18:50.681" status="PASS" starttime="20170808 03:18:50.680"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:50.682" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:50.682" status="PASS" starttime="20170808 03:18:50.682"></status>
</kw>
<status endtime="20170808 03:18:50.682" status="PASS" starttime="20170808 03:18:50.681"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:50.683" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:50.683" status="PASS" starttime="20170808 03:18:50.683"></status>
</kw>
<status endtime="20170808 03:18:50.683" status="PASS" starttime="20170808 03:18:50.682"></status>
</kw>
<status endtime="20170808 03:18:50.684" status="PASS" starttime="20170808 03:18:50.677"></status>
</kw>
<status endtime="20170808 03:18:50.684" status="PASS" starttime="20170808 03:18:50.677"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:18:50.684" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170808 03:18:50.684" status="PASS" starttime="20170808 03:18:50.684"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170808 03:18:50.798" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:18:50.799" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170808 03:18:51.095" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170808 03:18:51.095" status="PASS" starttime="20170808 03:18:50.736"></status>
</kw>
<msg timestamp="20170808 03:18:51.095" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:51.095" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Mon Aug 7 23:31:17 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170808 03:18:51.095" status="PASS" starttime="20170808 03:18:50.685"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170808 03:18:51.096" level="INFO">${stdout} = Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Mon Aug 7 23:31:17 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170808 03:18:51.096" status="PASS" starttime="20170808 03:18:51.096"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170808 03:18:51.097" level="INFO">${stderr} = </msg>
<status endtime="20170808 03:18:51.097" status="PASS" starttime="20170808 03:18:51.096"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:51.103" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:51.103" status="PASS" starttime="20170808 03:18:51.103"></status>
</kw>
<status endtime="20170808 03:18:51.103" status="PASS" starttime="20170808 03:18:51.102"></status>
</kw>
<status endtime="20170808 03:18:51.103" status="PASS" starttime="20170808 03:18:51.097"></status>
</kw>
<status endtime="20170808 03:18:51.104" status="PASS" starttime="20170808 03:18:50.676"></status>
</kw>
<status endtime="20170808 03:18:51.104" status="PASS" starttime="20170808 03:18:50.676"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:51.106" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:51.107" status="PASS" starttime="20170808 03:18:51.106"></status>
</kw>
<status endtime="20170808 03:18:51.107" status="PASS" starttime="20170808 03:18:51.106"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:51.108" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:51.108" status="PASS" starttime="20170808 03:18:51.108"></status>
</kw>
<status endtime="20170808 03:18:51.108" status="PASS" starttime="20170808 03:18:51.107"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:51.110" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:51.110" status="PASS" starttime="20170808 03:18:51.109"></status>
</kw>
<status endtime="20170808 03:18:51.110" status="PASS" starttime="20170808 03:18:51.108"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:51.111" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:51.111" status="PASS" starttime="20170808 03:18:51.110"></status>
</kw>
<status endtime="20170808 03:18:51.111" status="PASS" starttime="20170808 03:18:51.110"></status>
</kw>
<status endtime="20170808 03:18:51.111" status="PASS" starttime="20170808 03:18:51.105"></status>
</kw>
<status endtime="20170808 03:18:51.111" status="PASS" starttime="20170808 03:18:51.105"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:18:51.112" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170808 03:18:51.112" status="PASS" starttime="20170808 03:18:51.111"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170808 03:18:51.227" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:18:51.227" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170808 03:18:51.617" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170808 03:18:51.617" status="PASS" starttime="20170808 03:18:51.158"></status>
</kw>
<msg timestamp="20170808 03:18:51.617" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:51.617" level="INFO">${ret_values} = (u' 03:18:56 up 16 min,  load average: 2.15, 1.98, 1.37', u'', 0)</msg>
<status endtime="20170808 03:18:51.617" status="PASS" starttime="20170808 03:18:51.112"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170808 03:18:51.618" level="INFO">${stdout} =  03:18:56 up 16 min,  load average: 2.15, 1.98, 1.37</msg>
<status endtime="20170808 03:18:51.618" status="PASS" starttime="20170808 03:18:51.617"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170808 03:18:51.618" level="INFO">${stderr} = </msg>
<status endtime="20170808 03:18:51.618" status="PASS" starttime="20170808 03:18:51.618"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:51.625" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:51.625" status="PASS" starttime="20170808 03:18:51.624"></status>
</kw>
<status endtime="20170808 03:18:51.625" status="PASS" starttime="20170808 03:18:51.624"></status>
</kw>
<status endtime="20170808 03:18:51.625" status="PASS" starttime="20170808 03:18:51.619"></status>
</kw>
<status endtime="20170808 03:18:51.625" status="PASS" starttime="20170808 03:18:51.104"></status>
</kw>
<status endtime="20170808 03:18:51.625" status="PASS" starttime="20170808 03:18:51.104"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:51.628" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:51.628" status="PASS" starttime="20170808 03:18:51.628"></status>
</kw>
<status endtime="20170808 03:18:51.628" status="PASS" starttime="20170808 03:18:51.627"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:51.629" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:51.630" status="PASS" starttime="20170808 03:18:51.629"></status>
</kw>
<status endtime="20170808 03:18:51.630" status="PASS" starttime="20170808 03:18:51.628"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:51.631" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:51.631" status="PASS" starttime="20170808 03:18:51.630"></status>
</kw>
<status endtime="20170808 03:18:51.631" status="PASS" starttime="20170808 03:18:51.630"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:51.632" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:51.632" status="PASS" starttime="20170808 03:18:51.632"></status>
</kw>
<status endtime="20170808 03:18:51.632" status="PASS" starttime="20170808 03:18:51.631"></status>
</kw>
<status endtime="20170808 03:18:51.632" status="PASS" starttime="20170808 03:18:51.627"></status>
</kw>
<status endtime="20170808 03:18:51.632" status="PASS" starttime="20170808 03:18:51.626"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:18:51.633" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170808 03:18:51.633" status="PASS" starttime="20170808 03:18:51.633"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170808 03:18:51.755" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:18:51.755" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170808 03:18:51.852" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170808 03:18:51.852" status="PASS" starttime="20170808 03:18:51.685"></status>
</kw>
<msg timestamp="20170808 03:18:51.852" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:51.853" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170808 03:18:51.853" status="PASS" starttime="20170808 03:18:51.633"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170808 03:18:51.853" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status endtime="20170808 03:18:51.853" status="PASS" starttime="20170808 03:18:51.853"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170808 03:18:51.854" level="INFO">${stderr} = </msg>
<status endtime="20170808 03:18:51.854" status="PASS" starttime="20170808 03:18:51.854"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:51.860" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:51.860" status="PASS" starttime="20170808 03:18:51.860"></status>
</kw>
<status endtime="20170808 03:18:51.861" status="PASS" starttime="20170808 03:18:51.859"></status>
</kw>
<status endtime="20170808 03:18:51.861" status="PASS" starttime="20170808 03:18:51.854"></status>
</kw>
<status endtime="20170808 03:18:51.861" status="PASS" starttime="20170808 03:18:51.625"></status>
</kw>
<status endtime="20170808 03:18:51.861" status="PASS" starttime="20170808 03:18:51.625"></status>
</kw>
<status endtime="20170808 03:18:51.861" status="PASS" starttime="20170808 03:18:50.676"></status>
</kw>
<status endtime="20170808 03:18:51.861" status="PASS" starttime="20170808 03:18:50.674"></status>
</kw>
<status endtime="20170808 03:18:51.861" status="PASS" starttime="20170808 03:18:50.674"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170808 03:18:51.862" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170808 03:18:51.862" status="PASS" starttime="20170808 03:18:51.862"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170808 03:18:51.863" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170808 03:18:51.863" status="PASS" starttime="20170808 03:18:51.862"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:51.866" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:51.866" status="PASS" starttime="20170808 03:18:51.866"></status>
</kw>
<status endtime="20170808 03:18:51.866" status="PASS" starttime="20170808 03:18:51.865"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:51.867" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:51.867" status="PASS" starttime="20170808 03:18:51.867"></status>
</kw>
<status endtime="20170808 03:18:51.868" status="PASS" starttime="20170808 03:18:51.866"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:51.869" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:51.869" status="PASS" starttime="20170808 03:18:51.868"></status>
</kw>
<status endtime="20170808 03:18:51.869" status="PASS" starttime="20170808 03:18:51.868"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:51.870" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:51.870" status="PASS" starttime="20170808 03:18:51.870"></status>
</kw>
<status endtime="20170808 03:18:51.870" status="PASS" starttime="20170808 03:18:51.869"></status>
</kw>
<status endtime="20170808 03:18:51.870" status="PASS" starttime="20170808 03:18:51.865"></status>
</kw>
<status endtime="20170808 03:18:51.870" status="PASS" starttime="20170808 03:18:51.864"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:18:51.871" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170808 03:18:51.871" status="PASS" starttime="20170808 03:18:51.871"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170808 03:18:51.987" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:18:51.988" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170808 03:18:52.057" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170808 03:18:52.057" status="PASS" starttime="20170808 03:18:51.924"></status>
</kw>
<msg timestamp="20170808 03:18:52.057" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:52.057" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-191"\nVERSION_ID="v1.99.8-191-gabbe307"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status endtime="20170808 03:18:52.057" status="PASS" starttime="20170808 03:18:51.871"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170808 03:18:52.058" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-191"
VERSION_ID="v1.99.8-191-gabbe307"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status endtime="20170808 03:18:52.058" status="PASS" starttime="20170808 03:18:52.058"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170808 03:18:52.058" level="INFO">${stderr} = </msg>
<status endtime="20170808 03:18:52.059" status="PASS" starttime="20170808 03:18:52.058"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:52.065" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:52.065" status="PASS" starttime="20170808 03:18:52.065"></status>
</kw>
<status endtime="20170808 03:18:52.065" status="PASS" starttime="20170808 03:18:52.064"></status>
</kw>
<status endtime="20170808 03:18:52.065" status="PASS" starttime="20170808 03:18:52.059"></status>
</kw>
<status endtime="20170808 03:18:52.065" status="PASS" starttime="20170808 03:18:51.863"></status>
</kw>
<status endtime="20170808 03:18:52.065" status="PASS" starttime="20170808 03:18:51.863"></status>
</kw>
<status endtime="20170808 03:18:52.065" status="PASS" starttime="20170808 03:18:51.863"></status>
</kw>
<status endtime="20170808 03:18:52.066" status="PASS" starttime="20170808 03:18:51.861"></status>
</kw>
<status endtime="20170808 03:18:52.066" status="PASS" starttime="20170808 03:18:51.861"></status>
</kw>
<status endtime="20170808 03:18:52.066" status="PASS" starttime="20170808 03:18:49.222"></status>
</kw>
<status endtime="20170808 03:18:52.066" status="PASS" starttime="20170808 03:18:49.221"></status>
</kw>
<status endtime="20170808 03:18:52.066" status="PASS" starttime="20170808 03:18:49.179"></status>
</kw>
<status endtime="20170808 03:18:52.066" status="PASS" starttime="20170808 03:18:49.176"></status>
</kw>
<status endtime="20170808 03:18:52.066" status="PASS" starttime="20170808 03:18:49.175"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170808 03:18:52.068" status="PASS" starttime="20170808 03:18:52.068"></status>
</kw>
<msg timestamp="20170808 03:18:52.068" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:52.068" level="INFO">${ret_values} = None</msg>
<status endtime="20170808 03:18:52.068" status="PASS" starttime="20170808 03:18:52.067"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170808 03:18:52.069" status="PASS" starttime="20170808 03:18:52.068"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170808 03:18:52.106" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170808 03:18:52.106" status="PASS" starttime="20170808 03:18:52.105"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170808 03:18:52.107" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_fd...</msg>
<status endtime="20170808 03:18:52.107" status="PASS" starttime="20170808 03:18:52.107"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170808 03:18:52.108" level="INFO">${logpath} = /tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_proc_list.txt</msg>
<status endtime="20170808 03:18:52.108" status="PASS" starttime="20170808 03:18:52.107"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170808 03:18:52.109" status="PASS" starttime="20170808 03:18:52.109"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:18:52.110" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170808 03:18:52.110" status="PASS" starttime="20170808 03:18:52.109"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170808 03:18:52.231" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:18:52.232" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170808 03:18:52.802" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170808 03:18:52.803" status="PASS" starttime="20170808 03:18:52.157"></status>
</kw>
<msg timestamp="20170808 03:18:52.803" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:18:52.803" level="INFO">${ret_values} = (u'Mem: 160452K used, 271816K free, 16376K shrd, 11776K buff, 55484K cached\nCPU: 100% usr   0% sys   0% nic   0% idle   0% io   0% irq   0% sirq\nLoad average: 2.47 2.05 1.40 4/156 5067\n  PID  PPID ...</msg>
<status endtime="20170808 03:18:52.803" status="PASS" starttime="20170808 03:18:52.110"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170808 03:18:52.804" level="INFO">${stdout} = Mem: 160452K used, 271816K free, 16376K shrd, 11776K buff, 55484K cached
CPU: 100% usr   0% sys   0% nic   0% idle   0% io   0% irq   0% sirq
Load average: 2.47 2.05 1.40 4/156 5067
  PID  PPID USER  ...</msg>
<status endtime="20170808 03:18:52.804" status="PASS" starttime="20170808 03:18:52.803"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170808 03:18:52.804" level="INFO">${stderr} = </msg>
<status endtime="20170808 03:18:52.804" status="PASS" starttime="20170808 03:18:52.804"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:18:52.813" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_proc_list.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:18:52.813" status="PASS" starttime="20170808 03:18:52.810"></status>
</kw>
<status endtime="20170808 03:18:52.813" status="PASS" starttime="20170808 03:18:52.810"></status>
</kw>
<status endtime="20170808 03:18:52.813" status="PASS" starttime="20170808 03:18:52.805"></status>
</kw>
<status endtime="20170808 03:18:52.813" status="PASS" starttime="20170808 03:18:52.108"></status>
</kw>
<status endtime="20170808 03:18:52.813" status="PASS" starttime="20170808 03:18:52.107"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170808 03:18:52.814" level="INFO">${logpath} = /tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_journalctl.txt</msg>
<status endtime="20170808 03:18:52.814" status="PASS" starttime="20170808 03:18:52.813"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170808 03:18:52.815" status="PASS" starttime="20170808 03:18:52.815"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:18:52.816" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170808 03:18:52.816" status="PASS" starttime="20170808 03:18:52.815"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170808 03:18:52.928" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:18:52.928" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170808 03:19:05.873" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170808 03:19:05.875" status="PASS" starttime="20170808 03:18:52.868"></status>
</kw>
<msg timestamp="20170808 03:19:05.875" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:19:05.881" level="INFO">${ret_values} = (u'-- Logs begin at Tue 2017-08-08 03:02:33 UTC, end at Tue 2017-08-08 03:18:57 UTC. --\nAug 08 03:02:33 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 08 03:02:33 witherspoon kernel: Linu...</msg>
<status endtime="20170808 03:19:05.881" status="PASS" starttime="20170808 03:18:52.816"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170808 03:19:05.883" level="INFO">${stdout} = -- Logs begin at Tue 2017-08-08 03:02:33 UTC, end at Tue 2017-08-08 03:18:57 UTC. --
Aug 08 03:02:33 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 08 03:02:33 witherspoon kernel: Linux ver...</msg>
<status endtime="20170808 03:19:05.883" status="PASS" starttime="20170808 03:19:05.882"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170808 03:19:05.884" level="INFO">${stderr} = </msg>
<status endtime="20170808 03:19:05.884" status="PASS" starttime="20170808 03:19:05.884"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:19:05.893" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_journalctl.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:19:05.893" status="PASS" starttime="20170808 03:19:05.892"></status>
</kw>
<status endtime="20170808 03:19:05.894" status="PASS" starttime="20170808 03:19:05.889"></status>
</kw>
<status endtime="20170808 03:19:05.894" status="PASS" starttime="20170808 03:19:05.884"></status>
</kw>
<status endtime="20170808 03:19:05.894" status="PASS" starttime="20170808 03:18:52.814"></status>
</kw>
<status endtime="20170808 03:19:05.894" status="PASS" starttime="20170808 03:18:52.813"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170808 03:19:05.895" level="INFO">${logpath} = /tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_procinfo.txt</msg>
<status endtime="20170808 03:19:05.895" status="PASS" starttime="20170808 03:19:05.894"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170808 03:19:05.896" status="PASS" starttime="20170808 03:19:05.896"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:19:05.897" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170808 03:19:05.897" status="PASS" starttime="20170808 03:19:05.896"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170808 03:19:06.010" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:19:06.010" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170808 03:19:06.058" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170808 03:19:06.058" status="PASS" starttime="20170808 03:19:05.951"></status>
</kw>
<msg timestamp="20170808 03:19:06.058" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:19:06.058" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170808 03:19:06.058" status="PASS" starttime="20170808 03:19:05.897"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170808 03:19:06.059" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170808 03:19:06.059" status="PASS" starttime="20170808 03:19:06.059"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170808 03:19:06.060" level="INFO">${stderr} = </msg>
<status endtime="20170808 03:19:06.060" status="PASS" starttime="20170808 03:19:06.059"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:19:06.066" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_procinfo.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:19:06.066" status="PASS" starttime="20170808 03:19:06.066"></status>
</kw>
<status endtime="20170808 03:19:06.067" status="PASS" starttime="20170808 03:19:06.065"></status>
</kw>
<status endtime="20170808 03:19:06.067" status="PASS" starttime="20170808 03:19:06.060"></status>
</kw>
<status endtime="20170808 03:19:06.067" status="PASS" starttime="20170808 03:19:05.895"></status>
</kw>
<status endtime="20170808 03:19:06.067" status="PASS" starttime="20170808 03:19:05.894"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170808 03:19:06.068" level="INFO">${logpath} = /tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_meminfo.txt</msg>
<status endtime="20170808 03:19:06.068" status="PASS" starttime="20170808 03:19:06.067"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170808 03:19:06.069" status="PASS" starttime="20170808 03:19:06.069"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:19:06.070" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170808 03:19:06.070" status="PASS" starttime="20170808 03:19:06.069"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170808 03:19:06.190" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:19:06.191" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170808 03:19:06.348" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170808 03:19:06.348" status="PASS" starttime="20170808 03:19:06.126"></status>
</kw>
<msg timestamp="20170808 03:19:06.349" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:19:06.349" level="INFO">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          270612 kB\nMemAvailable:     319552 kB\nBuffers:           11776 kB\nCached:            55508 kB\nSwapCached:            0 kB\nActive:           10130...</msg>
<status endtime="20170808 03:19:06.349" status="PASS" starttime="20170808 03:19:06.070"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170808 03:19:06.350" level="INFO">${stdout} = MemTotal:         432268 kB
MemFree:          270612 kB
MemAvailable:     319552 kB
Buffers:           11776 kB
Cached:            55508 kB
SwapCached:            0 kB
Active:           101304 kB
Inac...</msg>
<status endtime="20170808 03:19:06.350" status="PASS" starttime="20170808 03:19:06.349"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170808 03:19:06.350" level="INFO">${stderr} = </msg>
<status endtime="20170808 03:19:06.350" status="PASS" starttime="20170808 03:19:06.350"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:19:06.357" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_meminfo.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:19:06.357" status="PASS" starttime="20170808 03:19:06.356"></status>
</kw>
<status endtime="20170808 03:19:06.357" status="PASS" starttime="20170808 03:19:06.356"></status>
</kw>
<status endtime="20170808 03:19:06.357" status="PASS" starttime="20170808 03:19:06.351"></status>
</kw>
<status endtime="20170808 03:19:06.358" status="PASS" starttime="20170808 03:19:06.068"></status>
</kw>
<status endtime="20170808 03:19:06.358" status="PASS" starttime="20170808 03:19:06.067"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170808 03:19:06.358" level="INFO">${logpath} = /tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_dmesg.txt</msg>
<status endtime="20170808 03:19:06.358" status="PASS" starttime="20170808 03:19:06.358"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170808 03:19:06.360" status="PASS" starttime="20170808 03:19:06.359"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:19:06.360" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170808 03:19:06.360" status="PASS" starttime="20170808 03:19:06.360"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170808 03:19:06.476" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:19:06.479" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170808 03:19:06.680" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170808 03:19:06.680" status="PASS" starttime="20170808 03:19:06.415"></status>
</kw>
<msg timestamp="20170808 03:19:06.681" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:19:06.681" level="INFO">${ret_values} = (u'[    0.220000] usbcore: registered new device driver usb\n[    0.220000] clocksource: Switched to clocksource moxart_timer\n[    0.230000] NET: Registered protocol family 2\n[    0.240000] TCP esta...</msg>
<status endtime="20170808 03:19:06.681" status="PASS" starttime="20170808 03:19:06.361"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170808 03:19:06.682" level="INFO">${stdout} = [    0.220000] usbcore: registered new device driver usb
[    0.220000] clocksource: Switched to clocksource moxart_timer
[    0.230000] NET: Registered protocol family 2
[    0.240000] TCP establishe...</msg>
<status endtime="20170808 03:19:06.682" status="PASS" starttime="20170808 03:19:06.681"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170808 03:19:06.682" level="INFO">${stderr} = </msg>
<status endtime="20170808 03:19:06.682" status="PASS" starttime="20170808 03:19:06.682"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:19:06.689" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_dmesg.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:19:06.689" status="PASS" starttime="20170808 03:19:06.688"></status>
</kw>
<status endtime="20170808 03:19:06.689" status="PASS" starttime="20170808 03:19:06.688"></status>
</kw>
<status endtime="20170808 03:19:06.689" status="PASS" starttime="20170808 03:19:06.682"></status>
</kw>
<status endtime="20170808 03:19:06.689" status="PASS" starttime="20170808 03:19:06.358"></status>
</kw>
<status endtime="20170808 03:19:06.690" status="PASS" starttime="20170808 03:19:06.358"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170808 03:19:06.690" level="INFO">${logpath} = /tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170808 03:19:06.690" status="PASS" starttime="20170808 03:19:06.690"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170808 03:19:06.692" status="PASS" starttime="20170808 03:19:06.691"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:19:06.692" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170808 03:19:06.693" status="PASS" starttime="20170808 03:19:06.692"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170808 03:19:06.803" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:19:06.804" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170808 03:19:08.016" level="INFO">Command exited with return code 1.</msg>
<status endtime="20170808 03:19:08.016" status="PASS" starttime="20170808 03:19:06.747"></status>
</kw>
<msg timestamp="20170808 03:19:08.016" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:19:08.017" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  8 03:19 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  8 03:19 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170808 03:19:08.017" status="PASS" starttime="20170808 03:19:06.693"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170808 03:19:08.018" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  8 03:19 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  8 03:19 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170808 03:19:08.018" status="PASS" starttime="20170808 03:19:08.017"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170808 03:19:08.019" level="INFO">${stderr} = ls: can't open '/proc/5270/fd/': No such file or directory
ls: /proc/5282/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/t...</msg>
<status endtime="20170808 03:19:08.019" status="PASS" starttime="20170808 03:19:08.018"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:19:08.026" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/20170808031843574477_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:19:08.026" status="PASS" starttime="20170808 03:19:08.025"></status>
</kw>
<status endtime="20170808 03:19:08.026" status="PASS" starttime="20170808 03:19:08.024"></status>
</kw>
<status endtime="20170808 03:19:08.026" status="PASS" starttime="20170808 03:19:08.019"></status>
</kw>
<status endtime="20170808 03:19:08.026" status="PASS" starttime="20170808 03:19:06.691"></status>
</kw>
<status endtime="20170808 03:19:08.026" status="PASS" starttime="20170808 03:19:06.690"></status>
</kw>
<status endtime="20170808 03:19:08.026" status="PASS" starttime="20170808 03:18:52.107"></status>
</kw>
<status endtime="20170808 03:19:08.027" status="PASS" starttime="20170808 03:18:52.106"></status>
</kw>
<status endtime="20170808 03:19:08.027" status="PASS" starttime="20170808 03:18:52.106"></status>
</kw>
<status endtime="20170808 03:19:08.027" status="PASS" starttime="20170808 03:18:52.106"></status>
</kw>
<status endtime="20170808 03:19:08.027" status="PASS" starttime="20170808 03:18:52.105"></status>
</kw>
<status endtime="20170808 03:19:08.027" status="PASS" starttime="20170808 03:18:52.069"></status>
</kw>
<status endtime="20170808 03:19:08.027" status="PASS" starttime="20170808 03:18:52.066"></status>
</kw>
<status endtime="20170808 03:19:08.027" status="PASS" starttime="20170808 03:18:52.066"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170808 03:19:08.029" status="PASS" starttime="20170808 03:19:08.029"></status>
</kw>
<msg timestamp="20170808 03:19:08.029" level="INFO">${status} = PASS</msg>
<msg timestamp="20170808 03:19:08.029" level="INFO">${ret_values} = None</msg>
<status endtime="20170808 03:19:08.029" status="PASS" starttime="20170808 03:19:08.028"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170808 03:19:08.030" status="PASS" starttime="20170808 03:19:08.030"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170808 03:19:08.127" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:19:08.127" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170808 03:19:08.482" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170808 03:19:08.499" level="INFO">${core_files} = /tmp/core_phosphor-fan-co.1427
/tmp/core_phosphor-fan-co.1431
/tmp/core_phosphor-fan-co.1439
/tmp/core_phosphor-hwmon-.2090
/tmp/core_phosphor-hwmon-.4163
/tmp/core_phosphor-hwmon-.4166</msg>
<msg timestamp="20170808 03:19:08.499" level="INFO">${stderr} = </msg>
<msg timestamp="20170808 03:19:08.499" level="INFO">${rc} = 0</msg>
<status endtime="20170808 03:19:08.499" status="PASS" starttime="20170808 03:19:08.066"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170808 03:19:08.500" level="INFO">@{core_list} = [ /tmp/core_phosphor-fan-co.1427 | /tmp/core_phosphor-fan-co.1431 | /tmp/core_phosphor-fan-co.1439 | /tmp/core_phosphor-hwmon-.2090 | /tmp/core_phosphor-hwmon-.4163 | /tmp/core_phosphor-hwmon-.4166 ]</msg>
<status endtime="20170808 03:19:08.500" status="PASS" starttime="20170808 03:19:08.500"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170808 03:19:08.537" status="PASS" starttime="20170808 03:19:08.518"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170808 03:19:10.075" status="PASS" starttime="20170808 03:19:08.539"></status>
</kw>
<status endtime="20170808 03:19:10.075" status="PASS" starttime="20170808 03:19:08.538"></status>
</kw>
<status endtime="20170808 03:19:10.075" status="PASS" starttime="20170808 03:19:08.537"></status>
</kw>
<status endtime="20170808 03:19:10.075" status="PASS" starttime="20170808 03:19:08.517"></status>
</kw>
<status endtime="20170808 03:19:10.075" status="PASS" starttime="20170808 03:19:08.500"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-co.1427">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170808 03:19:11.146" status="PASS" starttime="20170808 03:19:10.076"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170808 03:19:11.199" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:19:11.199" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-co.1427'.</msg>
<msg timestamp="20170808 03:19:11.246" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170808 03:19:11.264" status="PASS" starttime="20170808 03:19:11.146"></status>
</kw>
<status endtime="20170808 03:19:11.264" status="PASS" starttime="20170808 03:19:10.075"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-co.1431">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170808 03:19:11.575" status="PASS" starttime="20170808 03:19:11.265"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170808 03:19:11.630" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:19:11.631" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-co.1431'.</msg>
<msg timestamp="20170808 03:19:11.689" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170808 03:19:11.708" status="PASS" starttime="20170808 03:19:11.576"></status>
</kw>
<status endtime="20170808 03:19:11.708" status="PASS" starttime="20170808 03:19:11.264"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-co.1439">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170808 03:19:11.967" status="PASS" starttime="20170808 03:19:11.708"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170808 03:19:12.017" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:19:12.018" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-co.1439'.</msg>
<msg timestamp="20170808 03:19:12.071" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170808 03:19:12.089" status="PASS" starttime="20170808 03:19:11.967"></status>
</kw>
<status endtime="20170808 03:19:12.089" status="PASS" starttime="20170808 03:19:11.708"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.2090">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170808 03:19:12.362" status="PASS" starttime="20170808 03:19:12.114"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170808 03:19:12.413" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:19:12.413" level="INFO">Executing command 'rm /tmp/core_phosphor-hwmon-.2090'.</msg>
<msg timestamp="20170808 03:19:12.463" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170808 03:19:12.482" status="PASS" starttime="20170808 03:19:12.363"></status>
</kw>
<status endtime="20170808 03:19:12.482" status="PASS" starttime="20170808 03:19:12.090"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.4163">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170808 03:19:12.740" status="PASS" starttime="20170808 03:19:12.482"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170808 03:19:12.793" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:19:12.794" level="INFO">Executing command 'rm /tmp/core_phosphor-hwmon-.4163'.</msg>
<msg timestamp="20170808 03:19:12.851" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170808 03:19:12.869" status="PASS" starttime="20170808 03:19:12.741"></status>
</kw>
<status endtime="20170808 03:19:12.870" status="PASS" starttime="20170808 03:19:12.482"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.4166">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170808 03:19:13.182" status="PASS" starttime="20170808 03:19:12.870"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170808 03:19:13.238" level="INFO">newline=

alias=bmc_connection
height=24
width=80
index=1
prompt=# 
path_separator=/
term_type=vt100
port=22
host=9.3.86.161
timeout=25 seconds
encoding=UTF-8</msg>
<msg timestamp="20170808 03:19:13.238" level="INFO">Executing command 'rm /tmp/core_phosphor-hwmon-.4166'.</msg>
<msg timestamp="20170808 03:19:13.285" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170808 03:19:13.305" status="PASS" starttime="20170808 03:19:13.182"></status>
</kw>
<status endtime="20170808 03:19:13.305" status="PASS" starttime="20170808 03:19:12.870"></status>
</kw>
<status endtime="20170808 03:19:13.305" status="PASS" starttime="20170808 03:19:10.075"></status>
</kw>
<status endtime="20170808 03:19:13.305" status="PASS" starttime="20170808 03:19:08.066"></status>
</kw>
<status endtime="20170808 03:19:13.305" status="PASS" starttime="20170808 03:19:08.030"></status>
</kw>
<status endtime="20170808 03:19:13.305" status="PASS" starttime="20170808 03:19:08.027"></status>
</kw>
<status endtime="20170808 03:19:13.305" status="PASS" starttime="20170808 03:19:08.027"></status>
</kw>
<status endtime="20170808 03:19:13.305" status="PASS" starttime="20170808 03:18:43.877"></status>
</kw>
<status endtime="20170808 03:19:13.305" status="PASS" starttime="20170808 03:18:43.875"></status>
</kw>
<status endtime="20170808 03:19:13.305" status="PASS" starttime="20170808 03:18:43.875"></status>
</kw>
<status endtime="20170808 03:19:13.305" status="PASS" starttime="20170808 03:18:43.875"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status endtime="20170808 03:19:13.319" status="PASS" starttime="20170808 03:19:13.319"></status>
</kw>
<status endtime="20170808 03:19:13.319" status="PASS" starttime="20170808 03:19:13.306"></status>
</kw>
<status endtime="20170808 03:19:13.319" status="PASS" starttime="20170808 03:18:43.873"></status>
</kw>
<status endtime="20170808 03:19:13.320" status="PASS" starttime="20170808 03:18:40.414"></status>
</kw>
<status endtime="20170808 03:19:13.320" status="PASS" starttime="20170808 03:18:40.413"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170808 03:19:13.320" status="PASS" starttime="20170808 03:19:13.320"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170808 03:19:13.331" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170808 03:19:13.332" status="PASS" starttime="20170808 03:19:13.321"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170808 03:19:13.332" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/10043/obmc-robot/logs/20170808031843574477_TestsTestBasicPoweron/20170808031843574477_PowerOnTest/</msg>
<status endtime="20170808 03:19:13.332" status="PASS" starttime="20170808 03:19:13.332"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170808 03:19:13.333" status="PASS" starttime="20170808 03:19:13.332"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170808 03:19:13.333" status="PASS" starttime="20170808 03:19:13.333"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:19:13.334" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs"&gt;/tmp/fspcibld/10043/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170808 03:19:13.334" status="PASS" starttime="20170808 03:19:13.334"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:19:13.335" level="INFO">File '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170808 03:19:13.335" status="PASS" starttime="20170808 03:19:13.335"></status>
</kw>
<msg timestamp="20170808 03:19:13.335" level="INFO">${exist} = True</msg>
<status endtime="20170808 03:19:13.335" status="PASS" starttime="20170808 03:19:13.334"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170808 03:19:13.336" status="PASS" starttime="20170808 03:19:13.336"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170808 03:19:13.336" status="PASS" starttime="20170808 03:19:13.336"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170808 03:19:13.337" level="INFO">${cur_time} = 2017-08-08 03:19:13:337266</msg>
<status endtime="20170808 03:19:13.337" status="PASS" starttime="20170808 03:19:13.337"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170808 03:19:13.338" level="INFO">${cur_time} = 20170808031913337266</msg>
<status endtime="20170808 03:19:13.338" status="PASS" starttime="20170808 03:19:13.338"></status>
</kw>
<msg timestamp="20170808 03:19:13.338" level="INFO">${cur_time} = 20170808031913337266</msg>
<status endtime="20170808 03:19:13.338" status="PASS" starttime="20170808 03:19:13.337"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:19:13.339" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/10043/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170808 03:19:13.339" status="PASS" starttime="20170808 03:19:13.339"></status>
</kw>
<status endtime="20170808 03:19:13.339" status="PASS" starttime="20170808 03:19:13.320"></status>
</kw>
<status endtime="20170808 03:19:13.339" status="PASS" starttime="20170808 03:18:40.111"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170808 03:19:13.345" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 03:19:13.345" status="PASS" starttime="20170808 03:19:13.344"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170808 03:19:13.346" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 03:19:13.346" status="PASS" starttime="20170808 03:19:13.345"></status>
</kw>
<msg timestamp="20170808 03:19:13.346" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170808 03:19:13.346" status="PASS" starttime="20170808 03:19:13.343"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:19:13.347" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170808 03:19:13.347" status="PASS" starttime="20170808 03:19:13.347"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170808 03:19:13.348" status="PASS" starttime="20170808 03:19:13.348"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170808 03:19:13.354" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170808 03:19:13.360" level="INFO">${rc} = 0</msg>
<msg timestamp="20170808 03:19:13.360" level="INFO">${output} = /tmp/fspcibld/10043/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170808 03:19:13.360" status="PASS" starttime="20170808 03:19:13.349"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170808 03:19:13.363" status="PASS" starttime="20170808 03:19:13.362"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170808 03:19:13.364" status="PASS" starttime="20170808 03:19:13.363"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:19:13.365" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170808 03:19:13.365" status="PASS" starttime="20170808 03:19:13.364"></status>
</kw>
<msg timestamp="20170808 03:19:13.365" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170808 03:19:13.366" status="PASS" starttime="20170808 03:19:13.346"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:19:13.366" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170808 03:19:13.366" status="PASS" starttime="20170808 03:19:13.366"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170808 03:19:13.367" status="PASS" starttime="20170808 03:19:13.367"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170808 03:19:13.373" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170808 03:19:13.391" level="INFO">${rc} = 0</msg>
<msg timestamp="20170808 03:19:13.391" level="INFO">${os_con_pid} = </msg>
<status endtime="20170808 03:19:13.391" status="PASS" starttime="20170808 03:19:13.368"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170808 03:19:13.394" status="PASS" starttime="20170808 03:19:13.393"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170808 03:19:13.395" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170808 03:19:13.395" status="PASS" starttime="20170808 03:19:13.394"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170808 03:19:13.398" status="PASS" starttime="20170808 03:19:13.396"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170808 03:19:13.399" level="INFO">${rc} = None</msg>
<msg timestamp="20170808 03:19:13.399" level="INFO">${output} = None</msg>
<status endtime="20170808 03:19:13.399" status="PASS" starttime="20170808 03:19:13.398"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170808 03:19:13.400" status="PASS" starttime="20170808 03:19:13.399"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170808 03:19:13.404" level="INFO">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/10043/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/10043/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170808 03:19:13.404" status="PASS" starttime="20170808 03:19:13.401"></status>
</kw>
<status endtime="20170808 03:19:13.404" status="PASS" starttime="20170808 03:19:13.400"></status>
</kw>
<status endtime="20170808 03:19:13.404" status="PASS" starttime="20170808 03:19:13.400"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170808 03:19:13.405" level="INFO">${output} = </msg>
<status endtime="20170808 03:19:13.405" status="PASS" starttime="20170808 03:19:13.404"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170808 03:19:13.405" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170808 03:19:13.405" status="PASS" starttime="20170808 03:19:13.405"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170808 03:19:13.453" status="PASS" starttime="20170808 03:19:13.406"></status>
</kw>
<msg timestamp="20170808 03:19:13.454" level="INFO">${rc} = 0</msg>
<msg timestamp="20170808 03:19:13.455" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status endtime="20170808 03:19:13.455" status="PASS" starttime="20170808 03:19:13.406"></status>
</kw>
<msg timestamp="20170808 03:19:13.456" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status endtime="20170808 03:19:13.456" status="PASS" starttime="20170808 03:19:13.340"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170808 03:19:13.458" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
</msg>
<status endtime="20170808 03:19:13.458" status="PASS" starttime="20170808 03:19:13.457"></status>
</kw>
<status endtime="20170808 03:19:13.458" status="PASS" starttime="20170808 03:18:40.111"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170808 03:19:13.459" status="FAIL" starttime="20170808 03:08:23.538" critical="yes">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170808 03:19:13.460" status="FAIL" starttime="20170808 03:08:23.503"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170808 03:19:13.464" status="FAIL" starttime="20170808 03:08:17.202"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" id="s1" pass="1" name="Tests">Tests</stat>
<stat fail="0" id="s1-s1" pass="1" name="Security">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" pass="1" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat fail="1" id="s1-s2" pass="0" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
