<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170811 20:53:49.169" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite id="s1" source="/tmp/fspcibld/9215/obmc-robot/tests" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170811 20:53:49.816" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170811 20:53:49.816" endtime="20170811 20:53:49.816"></status>
</kw>
<msg timestamp="20170811 20:53:49.817" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170811 20:53:49.816" endtime="20170811 20:53:49.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:49.817" endtime="20170811 20:53:49.818"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:49.817" endtime="20170811 20:53:49.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170811 20:53:49.819" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170811 20:53:49.819" endtime="20170811 20:53:49.819"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170811 20:53:49.820" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170811 20:53:49.819" endtime="20170811 20:53:49.820"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170811 20:53:49.820" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170811 20:53:49.820" endtime="20170811 20:53:49.820"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170811 20:53:49.822" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status status="PASS" starttime="20170811 20:53:49.820" endtime="20170811 20:53:49.822"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:49.818" endtime="20170811 20:53:49.822"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:49.818" endtime="20170811 20:53:49.822"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170811 20:53:49.823" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170811 20:53:49.823" endtime="20170811 20:53:49.823"></status>
</kw>
<msg timestamp="20170811 20:53:49.823" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170811 20:53:49.822" endtime="20170811 20:53:49.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:49.825" endtime="20170811 20:53:49.825"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:49.825" endtime="20170811 20:53:49.826"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:49.825" endtime="20170811 20:53:49.826"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:49.824" endtime="20170811 20:53:49.826"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170811 20:53:49.827" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170811 20:53:51.541" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170811 20:53:49.827" endtime="20170811 20:53:51.541"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:49.815" endtime="20170811 20:53:51.541"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170811 20:53:51.543" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170811 20:53:51.619" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170811 20:53:51.620" level="INFO">${output} = VERSION_ID="v1.99.8-191-gabbe307"</msg>
<msg timestamp="20170811 20:53:51.620" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170811 20:53:51.543" endtime="20170811 20:53:51.620"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170811 20:53:51.620" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170811 20:53:51.620" endtime="20170811 20:53:51.620"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170811 20:53:51.621" level="INFO">VERSION_ID="v1.99.8-191-gabbe307"</msg>
<status status="PASS" starttime="20170811 20:53:51.621" endtime="20170811 20:53:51.621"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:51.542" endtime="20170811 20:53:51.621"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:51.542" endtime="20170811 20:53:51.621"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170811 20:53:51.622" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170811 20:53:51.752" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170811 20:53:51.752" level="INFO">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg timestamp="20170811 20:53:51.752" level="INFO">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status status="PASS" starttime="20170811 20:53:51.622" endtime="20170811 20:53:51.752"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170811 20:53:51.753" level="INFO">Length is 81</msg>
<msg timestamp="20170811 20:53:51.753" level="FAIL">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status status="FAIL" starttime="20170811 20:53:51.753" endtime="20170811 20:53:51.753"></status>
</kw>
<status status="FAIL" starttime="20170811 20:53:51.622" endtime="20170811 20:53:51.753"></status>
</kw>
<status status="FAIL" starttime="20170811 20:53:51.621" endtime="20170811 20:53:51.753"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:51.621" endtime="20170811 20:53:51.754"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170811 20:53:52.153" level="INFO">width=80
host=9.3.21.61
height=24
port=22
alias=bmc_connection
term_type=vt100
index=1
newline=

prompt=# 
encoding=UTF-8
path_separator=/
timeout=25 seconds</msg>
<msg timestamp="20170811 20:53:52.153" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170811 20:53:52.919" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170811 20:53:52.919" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170811 20:53:52.996" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170811 20:53:53.007" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170811 20:53:53.007" level="INFO">${stderr} = </msg>
<msg timestamp="20170811 20:53:53.007" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20170811 20:53:51.755" endtime="20170811 20:53:53.007"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170811 20:53:53.007" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170811 20:53:53.007" endtime="20170811 20:53:53.008"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170811 20:53:53.008" level="INFO">Length is 11</msg>
<status status="PASS" starttime="20170811 20:53:53.008" endtime="20170811 20:53:53.008"></status>
</kw>
<msg timestamp="20170811 20:53:53.009" level="INFO">${bmc_model} = Witherspoon</msg>
<status status="PASS" starttime="20170811 20:53:51.754" endtime="20170811 20:53:53.009"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170811 20:53:53.009" level="INFO">BMC Model=Witherspoon</msg>
<status status="PASS" starttime="20170811 20:53:53.009" endtime="20170811 20:53:53.009"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:51.754" endtime="20170811 20:53:53.009"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:51.754" endtime="20170811 20:53:53.009"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170811 20:53:53.011" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170811 20:53:53.011" endtime="20170811 20:53:53.012"></status>
</kw>
<msg timestamp="20170811 20:53:53.012" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170811 20:53:53.011" endtime="20170811 20:53:53.012"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:53.013" endtime="20170811 20:53:53.014"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:53.012" endtime="20170811 20:53:53.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170811 20:53:53.015" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170811 20:53:53.015" endtime="20170811 20:53:53.015"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170811 20:53:53.016" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170811 20:53:53.016" endtime="20170811 20:53:53.016"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170811 20:53:53.016" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170811 20:53:53.016" endtime="20170811 20:53:53.016"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170811 20:53:53.017" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status status="PASS" starttime="20170811 20:53:53.017" endtime="20170811 20:53:53.017"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:53.015" endtime="20170811 20:53:53.017"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:53.014" endtime="20170811 20:53:53.017"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170811 20:53:53.018" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170811 20:53:53.018" endtime="20170811 20:53:53.018"></status>
</kw>
<msg timestamp="20170811 20:53:53.018" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170811 20:53:53.018" endtime="20170811 20:53:53.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:53.020" endtime="20170811 20:53:53.021"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:53.021" endtime="20170811 20:53:53.021"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:53.019" endtime="20170811 20:53:53.021"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:53.019" endtime="20170811 20:53:53.021"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170811 20:53:53.022" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170811 20:53:54.705" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170811 20:53:53.022" endtime="20170811 20:53:54.706"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:53.010" endtime="20170811 20:53:54.706"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170811 20:53:54.707" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170811 20:53:54.784" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170811 20:53:54.784" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170811 20:53:54.784" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170811 20:53:54.707" endtime="20170811 20:53:54.784"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170811 20:53:54.784" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170811 20:53:54.784" endtime="20170811 20:53:54.785"></status>
</kw>
<msg timestamp="20170811 20:53:54.785" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" starttime="20170811 20:53:54.706" endtime="20170811 20:53:54.785"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:54.785" endtime="20170811 20:53:54.785"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:53.010" endtime="20170811 20:53:54.785"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:53.009" endtime="20170811 20:53:54.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:54.786" endtime="20170811 20:53:54.786"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:49.814" endtime="20170811 20:53:54.786"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/9215/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/9215/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:53:54.871" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:53:54.871" endtime="20170811 20:53:54.871"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:53:54.872" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:53:54.872" endtime="20170811 20:53:54.872"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:53:54.873" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:53:54.872" endtime="20170811 20:53:54.873"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:53:54.873" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:53:54.873" endtime="20170811 20:53:54.873"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:53:55.099" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:53:54.874" endtime="20170811 20:53:55.100"></status>
</kw>
<msg timestamp="20170811 20:53:55.100" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:53:55.100" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:53:54.874" endtime="20170811 20:53:55.100"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:53:55.100" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:53:55.100" endtime="20170811 20:53:55.101"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:53:55.101" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:53:55.101" endtime="20170811 20:53:55.101"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:54.870" endtime="20170811 20:53:55.101"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:54.870" endtime="20170811 20:53:55.101"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:54.869" endtime="20170811 20:53:55.102"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:53:55.106" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:53:55.106" endtime="20170811 20:53:55.107"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:53:55.107" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:53:55.107" endtime="20170811 20:53:55.107"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:53:55.108" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:53:55.107" endtime="20170811 20:53:55.108"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:53:55.109" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:53:55.108" endtime="20170811 20:53:55.109"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:53:55.301" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:53:55.109" endtime="20170811 20:53:55.301"></status>
</kw>
<msg timestamp="20170811 20:53:55.301" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:53:55.301" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:53:55.109" endtime="20170811 20:53:55.301"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:53:55.302" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:53:55.301" endtime="20170811 20:53:55.302"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:53:55.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:53:55.302" endtime="20170811 20:53:55.303"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.105" endtime="20170811 20:53:55.303"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.105" endtime="20170811 20:53:55.303"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.104" endtime="20170811 20:53:55.303"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:53:55.303" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:53:55.303" endtime="20170811 20:53:55.303"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:53:55.306" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:53:55.305" endtime="20170811 20:53:55.306"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:53:55.306" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:53:55.306" endtime="20170811 20:53:55.307"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.306" endtime="20170811 20:53:55.307"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.304" endtime="20170811 20:53:55.307"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.304" endtime="20170811 20:53:55.307"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:53:55.395" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:53:55.395" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:53:55.307" endtime="20170811 20:53:55.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:53:55.397" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:53:55.397" endtime="20170811 20:53:55.397"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:53:55.398" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:53:55.398" endtime="20170811 20:53:55.399"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.397" endtime="20170811 20:53:55.399"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.396" endtime="20170811 20:53:55.399"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.396" endtime="20170811 20:53:55.399"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:53:55.399" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:53:55.399" endtime="20170811 20:53:55.399"></status>
</kw>
<msg timestamp="20170811 20:53:55.400" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:53:55.104" endtime="20170811 20:53:55.400"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:53:55.400" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:53:55.400" endtime="20170811 20:53:55.400"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:53:55.401" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:53:55.401" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:53:55.401" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:53:55.400" endtime="20170811 20:53:55.401"></status>
</kw>
<msg timestamp="20170811 20:53:55.401" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170811 20:53:55.103" endtime="20170811 20:53:55.401"></status>
</kw>
<msg timestamp="20170811 20:53:55.402" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20170811 20:53:55.103" endtime="20170811 20:53:55.402"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170811 20:53:55.403" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" starttime="20170811 20:53:55.402" endtime="20170811 20:53:55.403"></status>
</kw>
<msg timestamp="20170811 20:53:55.403" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 20:53:55.402" endtime="20170811 20:53:55.403"></status>
</kw>
<msg timestamp="20170811 20:53:55.403" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 20:53:55.102" endtime="20170811 20:53:55.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.403" endtime="20170811 20:53:55.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.404" endtime="20170811 20:53:55.404"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170811 20:53:55.414" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170811 20:53:55.405" endtime="20170811 20:53:55.414"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170811 20:53:55.423" level="INFO">${FFDC_DIR_PATH} = </msg>
<status status="PASS" starttime="20170811 20:53:55.414" endtime="20170811 20:53:55.423"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170811 20:53:55.425" level="INFO">${cur_time} = 2017-08-11 20:53:55:424443</msg>
<status status="PASS" starttime="20170811 20:53:55.424" endtime="20170811 20:53:55.425"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170811 20:53:55.425" level="INFO">${cur_time} = 20170811205355424443</msg>
<status status="PASS" starttime="20170811 20:53:55.425" endtime="20170811 20:53:55.425"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.424" endtime="20170811 20:53:55.425"></status>
</kw>
<msg timestamp="20170811 20:53:55.430" level="INFO">${FFDC_TIME} = 20170811205355424443</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170811 20:53:55.431" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20170811 20:53:55.431" endtime="20170811 20:53:55.431"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170811 20:53:55.431" level="INFO">${suite_name} = 20170811205355424443_TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20170811 20:53:55.431" endtime="20170811 20:53:55.432"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170811 20:53:55.432" level="INFO">${test_name} = TestSSLConnection</msg>
<status status="PASS" starttime="20170811 20:53:55.432" endtime="20170811 20:53:55.432"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170811 20:53:55.433" level="INFO">${test_name} = 20170811205355424443_TestSSLConnection</msg>
<status status="PASS" starttime="20170811 20:53:55.432" endtime="20170811 20:53:55.433"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.430" endtime="20170811 20:53:55.433"></status>
</kw>
<msg timestamp="20170811 20:53:55.433" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/9215/obmc-robot/logs/20170811205355424443_TestsSecurityTestSsl/20170811205355424443_TestSSLConnection/</msg>
<msg timestamp="20170811 20:53:55.438" level="INFO">${FFDC_PREFIX} = 20170811205355424443_</msg>
<status status="PASS" starttime="20170811 20:53:55.424" endtime="20170811 20:53:55.438"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.423" endtime="20170811 20:53:55.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.438" endtime="20170811 20:53:55.439"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170811 20:53:55.439" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs"&gt;/tmp/fspcibld/9215/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 20:53:55.439" endtime="20170811 20:53:55.439"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170811 20:53:55.440" level="FAIL">File '/tmp/fspcibld/9215/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" starttime="20170811 20:53:55.440" endtime="20170811 20:53:55.441"></status>
</kw>
<msg timestamp="20170811 20:53:55.441" level="INFO">${exist} = False</msg>
<status status="PASS" starttime="20170811 20:53:55.440" endtime="20170811 20:53:55.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170811 20:53:55.442" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 20:53:55.441" endtime="20170811 20:53:55.442"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.441" endtime="20170811 20:53:55.442"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.442" endtime="20170811 20:53:55.442"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170811 20:53:55.443" level="INFO">${cur_time} = 2017-08-11 20:53:55:443272</msg>
<status status="PASS" starttime="20170811 20:53:55.443" endtime="20170811 20:53:55.443"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170811 20:53:55.444" level="INFO">${cur_time} = 20170811205355443272</msg>
<status status="PASS" starttime="20170811 20:53:55.444" endtime="20170811 20:53:55.444"></status>
</kw>
<msg timestamp="20170811 20:53:55.444" level="INFO">${cur_time} = 20170811205355443272</msg>
<status status="PASS" starttime="20170811 20:53:55.443" endtime="20170811 20:53:55.444"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170811 20:53:55.445" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 20:53:55.445" endtime="20170811 20:53:55.445"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.404" endtime="20170811 20:53:55.445"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.102" endtime="20170811 20:53:55.445"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" status="PASS" starttime="20170811 20:53:54.868" endtime="20170811 20:53:55.445"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:53:55.447" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:53:55.446" endtime="20170811 20:53:55.447"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" starttime="20170811 20:53:54.788" endtime="20170811 20:53:55.447"></status>
</suite>
<status status="PASS" starttime="20170811 20:53:54.786" endtime="20170811 20:53:55.449"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/9215/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170811 20:53:55.491" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170811 20:53:55.490" endtime="20170811 20:53:55.491"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170811 20:53:55.492" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170811 20:53:55.491" endtime="20170811 20:53:55.492"></status>
</kw>
<msg timestamp="20170811 20:53:55.493" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170811 20:53:55.490" endtime="20170811 20:53:55.493"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170811 20:53:55.495" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170811 20:53:55.494" endtime="20170811 20:53:55.495"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170811 20:53:55.496" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170811 20:53:55.495" endtime="20170811 20:53:55.496"></status>
</kw>
<msg timestamp="20170811 20:53:55.496" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170811 20:53:55.494" endtime="20170811 20:53:55.496"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 20:53:55.497" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170811 20:53:55.497" endtime="20170811 20:53:55.497"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.498" endtime="20170811 20:53:55.498"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170811 20:53:55.502" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170811 20:53:55.506" level="INFO">${rc} = 0</msg>
<msg timestamp="20170811 20:53:55.506" level="INFO">${output} = /tmp/fspcibld/9215/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170811 20:53:55.498" endtime="20170811 20:53:55.506"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.508" endtime="20170811 20:53:55.509"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.509" endtime="20170811 20:53:55.510"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 20:53:55.510" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" starttime="20170811 20:53:55.510" endtime="20170811 20:53:55.510"></status>
</kw>
<msg timestamp="20170811 20:53:55.511" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" starttime="20170811 20:53:55.497" endtime="20170811 20:53:55.511"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 20:53:55.511" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170811 20:53:55.511" endtime="20170811 20:53:55.511"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.512" endtime="20170811 20:53:55.512"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170811 20:53:55.515" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170811 20:53:55.525" level="INFO">${rc} = 0</msg>
<msg timestamp="20170811 20:53:55.525" level="INFO">${os_con_pid} = </msg>
<status status="PASS" starttime="20170811 20:53:55.512" endtime="20170811 20:53:55.525"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.527" endtime="20170811 20:53:55.528"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 20:53:55.528" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20170811 20:53:55.528" endtime="20170811 20:53:55.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.529" endtime="20170811 20:53:55.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170811 20:53:55.530" level="INFO">${rc} = None</msg>
<msg timestamp="20170811 20:53:55.530" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20170811 20:53:55.530" endtime="20170811 20:53:55.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.531" endtime="20170811 20:53:55.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170811 20:53:55.534" level="FAIL">Source file '/tmp/9.3.21.61_os_console' does not exist.</msg>
<status status="FAIL" starttime="20170811 20:53:55.533" endtime="20170811 20:53:55.534"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.532" endtime="20170811 20:53:55.534"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.531" endtime="20170811 20:53:55.534"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170811 20:53:55.535" level="INFO">${output} = </msg>
<status status="PASS" starttime="20170811 20:53:55.535" endtime="20170811 20:53:55.535"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170811 20:53:55.536" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20170811 20:53:55.535" endtime="20170811 20:53:55.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.537" endtime="20170811 20:53:55.592"></status>
</kw>
<msg timestamp="20170811 20:53:55.593" level="INFO">${rc} = 1</msg>
<msg timestamp="20170811 20:53:55.593" level="INFO">${output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status status="PASS" starttime="20170811 20:53:55.536" endtime="20170811 20:53:55.593"></status>
</kw>
<msg timestamp="20170811 20:53:55.594" level="INFO">${log_output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status status="PASS" starttime="20170811 20:53:55.493" endtime="20170811 20:53:55.594"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170811 20:53:55.596" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 20:53:55.595" endtime="20170811 20:53:55.596"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 20:53:55.597" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170811 20:53:55.597" endtime="20170811 20:53:55.597"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.598" endtime="20170811 20:53:55.598"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170811 20:53:55.609" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170811 20:53:55.628" level="INFO">${rc} = 0</msg>
<msg timestamp="20170811 20:53:55.628" level="INFO">${output} = /tmp/fspcibld/9215/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170811 20:53:55.598" endtime="20170811 20:53:55.629"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.639" endtime="20170811 20:53:55.642"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.644" endtime="20170811 20:53:55.645"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 20:53:55.646" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" starttime="20170811 20:53:55.645" endtime="20170811 20:53:55.646"></status>
</kw>
<msg timestamp="20170811 20:53:55.647" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" starttime="20170811 20:53:55.596" endtime="20170811 20:53:55.647"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 20:53:55.648" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" starttime="20170811 20:53:55.648" endtime="20170811 20:53:55.648"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.649" endtime="20170811 20:53:55.650"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170811 20:53:55.657" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170811 20:53:55.675" level="INFO">${rc} = 0</msg>
<msg timestamp="20170811 20:53:55.675" level="INFO">${output} = </msg>
<status status="PASS" starttime="20170811 20:53:55.650" endtime="20170811 20:53:55.675"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:55.687" endtime="20170811 20:53:55.689"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.489" endtime="20170811 20:53:55.690"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170811 20:53:55.691" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170811 20:53:55.693" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20170811 20:53:55.692" endtime="20170811 20:53:55.693"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:53:55.694" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170811 20:53:55.694" endtime="20170811 20:53:55.694"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:53:55.698" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:53:55.698" endtime="20170811 20:53:55.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:53:55.704" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:53:55.703" endtime="20170811 20:53:55.704"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:53:55.704" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:53:55.704" endtime="20170811 20:53:55.704"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:53:55.705" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:53:55.704" endtime="20170811 20:53:55.705"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:53:56.235" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:53:55.706" endtime="20170811 20:53:56.236"></status>
</kw>
<msg timestamp="20170811 20:53:56.236" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:53:56.236" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:53:55.705" endtime="20170811 20:53:56.236"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:53:56.236" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:53:56.236" endtime="20170811 20:53:56.237"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:53:56.237" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:53:56.237" endtime="20170811 20:53:56.237"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.697" endtime="20170811 20:53:56.237"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.696" endtime="20170811 20:53:56.238"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.695" endtime="20170811 20:53:56.238"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:53:56.238" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170811 20:53:56.238" endtime="20170811 20:53:56.238"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:53:56.239" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:53:56.239" endtime="20170811 20:53:56.239"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:56.239" endtime="20170811 20:53:56.239"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:53:56.241" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status status="PASS" starttime="20170811 20:53:56.240" endtime="20170811 20:53:56.241"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:53:56.242" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170811 20:53:56.242" endtime="20170811 20:53:56.242"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:56.241" endtime="20170811 20:53:56.242"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:56.240" endtime="20170811 20:53:56.242"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:53:56.830" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170811 20:53:56.831" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:53:56.242" endtime="20170811 20:53:56.831"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:53:56.832" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:53:56.831" endtime="20170811 20:53:56.832"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:53:56.833" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:53:56.833" endtime="20170811 20:53:56.833"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:56.832" endtime="20170811 20:53:56.833"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:56.831" endtime="20170811 20:53:56.833"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:53:56.834" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:53:56.833" endtime="20170811 20:53:56.834"></status>
</kw>
<msg timestamp="20170811 20:53:56.834" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:53:55.694" endtime="20170811 20:53:56.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:53:56.835" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:53:56.834" endtime="20170811 20:53:56.835"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170811 20:53:56.835" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:53:56.835" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:53:56.835" level="INFO">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:53:56.835" endtime="20170811 20:53:56.835"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.693" endtime="20170811 20:53:56.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170811 20:53:56.836" endtime="20170811 20:53:56.836"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:53:56.841" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:53:56.841" endtime="20170811 20:53:56.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:53:56.842" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:53:56.841" endtime="20170811 20:53:56.842"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:53:56.842" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:53:56.842" endtime="20170811 20:53:56.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:53:56.843" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:53:56.843" endtime="20170811 20:53:56.843"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:53:58.712" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:53:56.844" endtime="20170811 20:53:58.712"></status>
</kw>
<msg timestamp="20170811 20:53:58.712" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:53:58.712" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:53:56.844" endtime="20170811 20:53:58.712"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:53:58.713" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:53:58.713" endtime="20170811 20:53:58.713"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:53:58.714" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:53:58.713" endtime="20170811 20:53:58.714"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:56.840" endtime="20170811 20:53:58.714"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:56.840" endtime="20170811 20:53:58.714"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:56.839" endtime="20170811 20:53:58.714"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:53:58.715" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:53:58.714" endtime="20170811 20:53:58.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:53:58.717" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:53:58.716" endtime="20170811 20:53:58.717"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:53:58.718" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:53:58.717" endtime="20170811 20:53:58.718"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:58.717" endtime="20170811 20:53:58.718"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:58.715" endtime="20170811 20:53:58.718"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:58.715" endtime="20170811 20:53:58.718"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:02.620" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:54:02.621" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:53:58.718" endtime="20170811 20:54:02.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:02.622" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:02.622" endtime="20170811 20:54:02.622"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:02.623" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:02.623" endtime="20170811 20:54:02.623"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:02.623" endtime="20170811 20:54:02.624"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:02.621" endtime="20170811 20:54:02.624"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:02.621" endtime="20170811 20:54:02.624"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:02.624" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:02.624" endtime="20170811 20:54:02.624"></status>
</kw>
<msg timestamp="20170811 20:54:02.624" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:53:56.838" endtime="20170811 20:54:02.624"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:02.625" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:02.625" endtime="20170811 20:54:02.625"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:54:02.626" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:02.626" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:02.626" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:02.625" endtime="20170811 20:54:02.626"></status>
</kw>
<msg timestamp="20170811 20:54:02.626" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170811 20:53:56.838" endtime="20170811 20:54:02.626"></status>
</kw>
<msg timestamp="20170811 20:54:02.626" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170811 20:53:56.838" endtime="20170811 20:54:02.626"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:54:02.627" endtime="20170811 20:54:02.627"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:56.837" endtime="20170811 20:54:02.627"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:54:02.631" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:54:02.631" endtime="20170811 20:54:02.631"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:02.632" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:02.632" endtime="20170811 20:54:02.632"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:54:02.633" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:54:02.632" endtime="20170811 20:54:02.633"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:54:02.633" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:54:02.633" endtime="20170811 20:54:02.633"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:54:03.002" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:54:02.634" endtime="20170811 20:54:03.002"></status>
</kw>
<msg timestamp="20170811 20:54:03.002" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:54:03.002" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:02.633" endtime="20170811 20:54:03.002"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:54:03.003" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:03.003" endtime="20170811 20:54:03.003"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:03.003" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:03.003" endtime="20170811 20:54:03.004"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:02.630" endtime="20170811 20:54:03.004"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:02.629" endtime="20170811 20:54:03.004"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:02.629" endtime="20170811 20:54:03.004"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:03.004" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:54:03.004" endtime="20170811 20:54:03.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:03.007" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:03.006" endtime="20170811 20:54:03.007"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:03.008" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:03.008" endtime="20170811 20:54:03.008"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:03.007" endtime="20170811 20:54:03.008"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:03.005" endtime="20170811 20:54:03.009"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:03.005" endtime="20170811 20:54:03.009"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:03.243" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:54:03.244" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:03.009" endtime="20170811 20:54:03.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:03.245" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:03.245" endtime="20170811 20:54:03.245"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:03.247" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:03.246" endtime="20170811 20:54:03.247"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:03.246" endtime="20170811 20:54:03.247"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:03.244" endtime="20170811 20:54:03.247"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:03.244" endtime="20170811 20:54:03.247"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:03.247" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:03.247" endtime="20170811 20:54:03.247"></status>
</kw>
<msg timestamp="20170811 20:54:03.248" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:02.628" endtime="20170811 20:54:03.248"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:03.248" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:03.248" endtime="20170811 20:54:03.248"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:54:03.249" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:03.249" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:03.249" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:03.249" endtime="20170811 20:54:03.249"></status>
</kw>
<msg timestamp="20170811 20:54:03.249" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170811 20:54:02.628" endtime="20170811 20:54:03.249"></status>
</kw>
<msg timestamp="20170811 20:54:03.250" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20170811 20:54:02.627" endtime="20170811 20:54:03.250"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:54:03.250" endtime="20170811 20:54:03.250"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:56.837" endtime="20170811 20:54:03.250"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:56.836" endtime="20170811 20:54:03.250"></status>
</kw>
<status status="PASS" starttime="20170811 20:53:55.692" endtime="20170811 20:54:03.250"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170811 20:54:03.251" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" starttime="20170811 20:54:03.251" endtime="20170811 20:54:03.251"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:03.253" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170811 20:54:03.252" endtime="20170811 20:54:03.253"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:54:03.255" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:54:03.255" endtime="20170811 20:54:03.256"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:03.256" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:03.256" endtime="20170811 20:54:03.256"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:54:03.257" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:54:03.256" endtime="20170811 20:54:03.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:54:03.257" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:54:03.257" endtime="20170811 20:54:03.257"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:54:03.513" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:54:03.258" endtime="20170811 20:54:03.514"></status>
</kw>
<msg timestamp="20170811 20:54:03.514" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:54:03.514" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:03.258" endtime="20170811 20:54:03.514"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:54:03.514" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:03.514" endtime="20170811 20:54:03.514"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:03.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:03.515" endtime="20170811 20:54:03.515"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:03.254" endtime="20170811 20:54:03.515"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:03.254" endtime="20170811 20:54:03.515"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:03.253" endtime="20170811 20:54:03.515"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:03.516" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170811 20:54:03.516" endtime="20170811 20:54:03.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:03.517" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:03.516" endtime="20170811 20:54:03.517"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:54:03.517" endtime="20170811 20:54:03.517"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:03.519" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Ty...</msg>
<status status="PASS" starttime="20170811 20:54:03.518" endtime="20170811 20:54:03.519"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:03.520" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170811 20:54:03.520" endtime="20170811 20:54:03.520"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:03.519" endtime="20170811 20:54:03.520"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:03.517" endtime="20170811 20:54:03.520"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:04.103" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170811 20:54:04.104" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:03.520" endtime="20170811 20:54:04.104"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:04.105" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:04.104" endtime="20170811 20:54:04.105"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:04.106" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:04.105" endtime="20170811 20:54:04.106"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:04.105" endtime="20170811 20:54:04.106"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:04.104" endtime="20170811 20:54:04.106"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:04.106" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:04.106" endtime="20170811 20:54:04.106"></status>
</kw>
<msg timestamp="20170811 20:54:04.107" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:03.253" endtime="20170811 20:54:04.107"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:04.107" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:04.107" endtime="20170811 20:54:04.107"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170811 20:54:04.108" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:04.108" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:04.108" level="INFO">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:04.108" endtime="20170811 20:54:04.108"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:03.252" endtime="20170811 20:54:04.108"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170811 20:54:04.109" endtime="20170811 20:54:04.109"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:54:04.115" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:54:04.115" endtime="20170811 20:54:04.116"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:04.117" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:04.116" endtime="20170811 20:54:04.117"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:54:04.118" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:54:04.117" endtime="20170811 20:54:04.118"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:54:04.119" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:54:04.118" endtime="20170811 20:54:04.119"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:54:05.085" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:54:04.120" endtime="20170811 20:54:05.085"></status>
</kw>
<msg timestamp="20170811 20:54:05.085" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:54:05.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:04.119" endtime="20170811 20:54:05.085"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:54:05.086" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:05.085" endtime="20170811 20:54:05.086"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:05.086" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:05.086" endtime="20170811 20:54:05.086"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:04.114" endtime="20170811 20:54:05.087"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:04.113" endtime="20170811 20:54:05.087"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:04.112" endtime="20170811 20:54:05.087"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:05.087" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:54:05.087" endtime="20170811 20:54:05.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:05.090" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:05.089" endtime="20170811 20:54:05.090"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:05.090" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:05.090" endtime="20170811 20:54:05.091"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:05.090" endtime="20170811 20:54:05.091"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:05.088" endtime="20170811 20:54:05.091"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:05.088" endtime="20170811 20:54:05.091"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:06.478" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:54:06.479" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:05.091" endtime="20170811 20:54:06.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:06.480" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:06.480" endtime="20170811 20:54:06.480"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:06.482" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:06.481" endtime="20170811 20:54:06.482"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:06.481" endtime="20170811 20:54:06.482"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:06.479" endtime="20170811 20:54:06.482"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:06.479" endtime="20170811 20:54:06.482"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:06.482" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:06.482" endtime="20170811 20:54:06.482"></status>
</kw>
<msg timestamp="20170811 20:54:06.483" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:04.112" endtime="20170811 20:54:06.483"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:06.483" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:06.483" endtime="20170811 20:54:06.483"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:54:06.484" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:06.484" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:06.484" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:06.484" endtime="20170811 20:54:06.484"></status>
</kw>
<msg timestamp="20170811 20:54:06.484" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170811 20:54:04.111" endtime="20170811 20:54:06.484"></status>
</kw>
<msg timestamp="20170811 20:54:06.485" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170811 20:54:04.110" endtime="20170811 20:54:06.485"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170811 20:54:06.485" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170811 20:54:06.485" endtime="20170811 20:54:06.485"></status>
</kw>
<status status="FAIL" starttime="20170811 20:54:04.110" endtime="20170811 20:54:06.486"></status>
</kw>
<status status="FAIL" starttime="20170811 20:54:04.109" endtime="20170811 20:54:06.486"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:54:16.491" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:54:16.491" endtime="20170811 20:54:16.491"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:16.492" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:16.492" endtime="20170811 20:54:16.492"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:54:16.493" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:54:16.492" endtime="20170811 20:54:16.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:54:16.493" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:54:16.493" endtime="20170811 20:54:16.493"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:54:17.460" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:54:16.494" endtime="20170811 20:54:17.460"></status>
</kw>
<msg timestamp="20170811 20:54:17.461" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:54:17.461" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:16.494" endtime="20170811 20:54:17.461"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:54:17.461" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:17.461" endtime="20170811 20:54:17.461"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:17.462" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:17.462" endtime="20170811 20:54:17.462"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:16.490" endtime="20170811 20:54:17.462"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:16.490" endtime="20170811 20:54:17.462"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:16.489" endtime="20170811 20:54:17.462"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:17.463" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:54:17.463" endtime="20170811 20:54:17.463"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:17.465" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:17.464" endtime="20170811 20:54:17.465"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:17.466" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:17.466" endtime="20170811 20:54:17.466"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:17.465" endtime="20170811 20:54:17.466"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:17.464" endtime="20170811 20:54:17.467"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:17.463" endtime="20170811 20:54:17.467"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:17.643" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:54:17.643" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:17.467" endtime="20170811 20:54:17.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:17.645" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:17.645" endtime="20170811 20:54:17.645"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:17.646" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:17.646" endtime="20170811 20:54:17.646"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:17.645" endtime="20170811 20:54:17.646"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:17.644" endtime="20170811 20:54:17.647"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:17.644" endtime="20170811 20:54:17.647"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:17.647" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:17.647" endtime="20170811 20:54:17.647"></status>
</kw>
<msg timestamp="20170811 20:54:17.647" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:16.488" endtime="20170811 20:54:17.647"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:17.648" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:17.648" endtime="20170811 20:54:17.648"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:54:17.649" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:17.649" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:17.649" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:17.648" endtime="20170811 20:54:17.649"></status>
</kw>
<msg timestamp="20170811 20:54:17.649" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170811 20:54:16.488" endtime="20170811 20:54:17.649"></status>
</kw>
<msg timestamp="20170811 20:54:17.649" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170811 20:54:16.487" endtime="20170811 20:54:17.649"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170811 20:54:17.650" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170811 20:54:17.650" endtime="20170811 20:54:17.650"></status>
</kw>
<status status="FAIL" starttime="20170811 20:54:16.487" endtime="20170811 20:54:17.650"></status>
</kw>
<status status="FAIL" starttime="20170811 20:54:16.486" endtime="20170811 20:54:17.650"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:54:27.655" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:54:27.655" endtime="20170811 20:54:27.656"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:27.656" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:27.656" endtime="20170811 20:54:27.656"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:54:27.657" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:54:27.657" endtime="20170811 20:54:27.657"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:54:27.661" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:54:27.657" endtime="20170811 20:54:27.661"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:54:27.883" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:54:27.661" endtime="20170811 20:54:27.883"></status>
</kw>
<msg timestamp="20170811 20:54:27.884" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:54:27.884" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:27.661" endtime="20170811 20:54:27.884"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:54:27.884" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:27.884" endtime="20170811 20:54:27.884"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:27.885" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:27.885" endtime="20170811 20:54:27.885"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:27.654" endtime="20170811 20:54:27.885"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:27.654" endtime="20170811 20:54:27.886"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:27.653" endtime="20170811 20:54:27.886"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:27.886" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:54:27.886" endtime="20170811 20:54:27.886"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:27.888" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:27.888" endtime="20170811 20:54:27.889"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:27.890" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:27.889" endtime="20170811 20:54:27.890"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:27.889" endtime="20170811 20:54:27.890"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:27.887" endtime="20170811 20:54:27.890"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:27.887" endtime="20170811 20:54:27.890"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:27.953" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:54:27.953" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:27.890" endtime="20170811 20:54:27.953"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:27.955" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:27.955" endtime="20170811 20:54:27.955"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:27.956" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:27.956" endtime="20170811 20:54:27.956"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:27.955" endtime="20170811 20:54:27.956"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:27.954" endtime="20170811 20:54:27.956"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:27.954" endtime="20170811 20:54:27.957"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:27.957" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:27.957" endtime="20170811 20:54:27.957"></status>
</kw>
<msg timestamp="20170811 20:54:27.957" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:27.653" endtime="20170811 20:54:27.957"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:27.958" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:27.958" endtime="20170811 20:54:27.958"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:54:27.959" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:27.959" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:27.959" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:27.958" endtime="20170811 20:54:27.959"></status>
</kw>
<msg timestamp="20170811 20:54:27.959" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:54:27.652" endtime="20170811 20:54:27.959"></status>
</kw>
<msg timestamp="20170811 20:54:27.960" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:54:27.652" endtime="20170811 20:54:27.960"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:54:27.960" endtime="20170811 20:54:27.960"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:27.651" endtime="20170811 20:54:27.960"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:54:27.965" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:54:27.965" endtime="20170811 20:54:27.966"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:27.967" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:27.966" endtime="20170811 20:54:27.967"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:54:27.968" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:54:27.967" endtime="20170811 20:54:27.968"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:54:27.969" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:54:27.968" endtime="20170811 20:54:27.969"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:54:28.164" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:54:27.970" endtime="20170811 20:54:28.164"></status>
</kw>
<msg timestamp="20170811 20:54:28.164" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:54:28.164" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:27.970" endtime="20170811 20:54:28.164"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:54:28.165" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:28.165" endtime="20170811 20:54:28.165"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:28.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:28.165" endtime="20170811 20:54:28.166"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:27.964" endtime="20170811 20:54:28.166"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:27.963" endtime="20170811 20:54:28.166"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:27.962" endtime="20170811 20:54:28.166"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:28.166" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:54:28.166" endtime="20170811 20:54:28.166"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:28.168" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:28.168" endtime="20170811 20:54:28.169"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:28.169" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:28.169" endtime="20170811 20:54:28.170"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.169" endtime="20170811 20:54:28.170"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.167" endtime="20170811 20:54:28.170"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.167" endtime="20170811 20:54:28.170"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:28.257" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:54:28.257" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:28.170" endtime="20170811 20:54:28.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:28.259" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:28.259" endtime="20170811 20:54:28.259"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:28.260" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:28.260" endtime="20170811 20:54:28.261"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.259" endtime="20170811 20:54:28.261"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.258" endtime="20170811 20:54:28.261"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.258" endtime="20170811 20:54:28.261"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:28.261" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:28.261" endtime="20170811 20:54:28.261"></status>
</kw>
<msg timestamp="20170811 20:54:28.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:27.962" endtime="20170811 20:54:28.262"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:28.262" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:28.262" endtime="20170811 20:54:28.262"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:54:28.263" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:28.263" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:28.263" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:28.262" endtime="20170811 20:54:28.263"></status>
</kw>
<msg timestamp="20170811 20:54:28.263" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170811 20:54:27.961" endtime="20170811 20:54:28.263"></status>
</kw>
<msg timestamp="20170811 20:54:28.264" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170811 20:54:27.961" endtime="20170811 20:54:28.264"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:54:28.264" endtime="20170811 20:54:28.264"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:54:28.269" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:54:28.268" endtime="20170811 20:54:28.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:28.270" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:28.269" endtime="20170811 20:54:28.270"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:54:28.270" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:54:28.270" endtime="20170811 20:54:28.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:54:28.271" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:54:28.271" endtime="20170811 20:54:28.271"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:54:28.474" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:54:28.272" endtime="20170811 20:54:28.474"></status>
</kw>
<msg timestamp="20170811 20:54:28.474" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:54:28.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:28.271" endtime="20170811 20:54:28.474"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:54:28.475" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:28.474" endtime="20170811 20:54:28.475"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:28.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:28.475" endtime="20170811 20:54:28.475"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.268" endtime="20170811 20:54:28.475"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.267" endtime="20170811 20:54:28.476"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.267" endtime="20170811 20:54:28.476"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:28.476" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170811 20:54:28.476" endtime="20170811 20:54:28.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:28.478" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:28.478" endtime="20170811 20:54:28.478"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:28.479" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:28.479" endtime="20170811 20:54:28.479"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.478" endtime="20170811 20:54:28.479"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.477" endtime="20170811 20:54:28.480"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.476" endtime="20170811 20:54:28.480"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:28.546" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170811 20:54:28.546" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:28.480" endtime="20170811 20:54:28.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:28.548" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:28.548" endtime="20170811 20:54:28.548"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:28.549" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:28.549" endtime="20170811 20:54:28.549"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.548" endtime="20170811 20:54:28.549"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.547" endtime="20170811 20:54:28.550"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.547" endtime="20170811 20:54:28.550"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:28.550" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:28.550" endtime="20170811 20:54:28.550"></status>
</kw>
<msg timestamp="20170811 20:54:28.550" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:28.266" endtime="20170811 20:54:28.550"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:28.551" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:28.551" endtime="20170811 20:54:28.551"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:54:28.551" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:28.551" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:28.552" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:28.551" endtime="20170811 20:54:28.552"></status>
</kw>
<msg timestamp="20170811 20:54:28.552" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170811 20:54:28.266" endtime="20170811 20:54:28.552"></status>
</kw>
<msg timestamp="20170811 20:54:28.552" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170811 20:54:28.265" endtime="20170811 20:54:28.552"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170811 20:54:28.553" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170811 20:54:28.552" endtime="20170811 20:54:28.553"></status>
</kw>
<status status="FAIL" starttime="20170811 20:54:28.265" endtime="20170811 20:54:28.553"></status>
</kw>
<msg timestamp="20170811 20:54:28.553" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 20:54:28.265" endtime="20170811 20:54:28.553"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:54:28.553" endtime="20170811 20:54:28.554"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:54:28.557" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:54:28.557" endtime="20170811 20:54:28.558"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:28.559" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:28.558" endtime="20170811 20:54:28.559"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:54:28.559" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:54:28.559" endtime="20170811 20:54:28.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:54:28.560" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:54:28.560" endtime="20170811 20:54:28.560"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:54:28.771" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:54:28.561" endtime="20170811 20:54:28.771"></status>
</kw>
<msg timestamp="20170811 20:54:28.771" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:54:28.771" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:28.560" endtime="20170811 20:54:28.771"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:54:28.771" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:28.771" endtime="20170811 20:54:28.772"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:28.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:28.772" endtime="20170811 20:54:28.772"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.556" endtime="20170811 20:54:28.772"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.556" endtime="20170811 20:54:28.772"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.555" endtime="20170811 20:54:28.773"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:28.773" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170811 20:54:28.773" endtime="20170811 20:54:28.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:28.776" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:28.775" endtime="20170811 20:54:28.776"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:28.777" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:28.777" endtime="20170811 20:54:28.778"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.776" endtime="20170811 20:54:28.778"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.774" endtime="20170811 20:54:28.778"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.774" endtime="20170811 20:54:28.778"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:28.940" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170811 20:54:28.940" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:28.778" endtime="20170811 20:54:28.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:28.942" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:28.941" endtime="20170811 20:54:28.942"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:28.943" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:28.943" endtime="20170811 20:54:28.943"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.942" endtime="20170811 20:54:28.943"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.941" endtime="20170811 20:54:28.943"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:28.941" endtime="20170811 20:54:28.943"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:28.944" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:28.943" endtime="20170811 20:54:28.944"></status>
</kw>
<msg timestamp="20170811 20:54:28.944" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:28.555" endtime="20170811 20:54:28.944"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:28.945" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:28.944" endtime="20170811 20:54:28.945"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:54:28.945" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:28.945" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:28.945" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:28.945" endtime="20170811 20:54:28.945"></status>
</kw>
<msg timestamp="20170811 20:54:28.946" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:54:28.554" endtime="20170811 20:54:28.946"></status>
</kw>
<msg timestamp="20170811 20:54:28.946" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:54:28.554" endtime="20170811 20:54:28.946"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170811 20:54:28.946" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170811 20:54:28.947" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170811 20:54:28.946" endtime="20170811 20:54:28.947"></status>
</kw>
<status status="FAIL" starttime="20170811 20:54:28.264" endtime="20170811 20:54:28.947"></status>
</kw>
<status status="FAIL" starttime="20170811 20:54:27.651" endtime="20170811 20:54:28.947"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:54:38.952" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:54:38.952" endtime="20170811 20:54:38.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:38.953" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:38.953" endtime="20170811 20:54:38.953"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:54:38.954" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:54:38.953" endtime="20170811 20:54:38.954"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:54:38.954" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:54:38.954" endtime="20170811 20:54:38.954"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:54:39.236" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:54:38.955" endtime="20170811 20:54:39.236"></status>
</kw>
<msg timestamp="20170811 20:54:39.236" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:54:39.237" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:38.955" endtime="20170811 20:54:39.237"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:54:39.237" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:39.237" endtime="20170811 20:54:39.237"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:39.238" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:39.237" endtime="20170811 20:54:39.238"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:38.951" endtime="20170811 20:54:39.238"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:38.951" endtime="20170811 20:54:39.238"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:38.950" endtime="20170811 20:54:39.238"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:39.239" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:54:39.238" endtime="20170811 20:54:39.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:39.241" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:39.240" endtime="20170811 20:54:39.241"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:39.242" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:39.242" endtime="20170811 20:54:39.242"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.241" endtime="20170811 20:54:39.242"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.240" endtime="20170811 20:54:39.242"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.239" endtime="20170811 20:54:39.242"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:39.305" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:54:39.305" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:39.242" endtime="20170811 20:54:39.305"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:39.307" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:39.306" endtime="20170811 20:54:39.307"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:39.308" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:39.307" endtime="20170811 20:54:39.308"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.307" endtime="20170811 20:54:39.308"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.306" endtime="20170811 20:54:39.308"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.305" endtime="20170811 20:54:39.308"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:39.308" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:39.308" endtime="20170811 20:54:39.308"></status>
</kw>
<msg timestamp="20170811 20:54:39.309" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:38.950" endtime="20170811 20:54:39.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:39.309" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:39.309" endtime="20170811 20:54:39.309"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:54:39.310" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:39.310" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:39.310" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:39.310" endtime="20170811 20:54:39.310"></status>
</kw>
<msg timestamp="20170811 20:54:39.310" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:54:38.949" endtime="20170811 20:54:39.310"></status>
</kw>
<msg timestamp="20170811 20:54:39.311" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:54:38.948" endtime="20170811 20:54:39.311"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:54:39.311" endtime="20170811 20:54:39.311"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:38.948" endtime="20170811 20:54:39.312"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:54:39.315" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:54:39.315" endtime="20170811 20:54:39.315"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:39.316" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:39.316" endtime="20170811 20:54:39.316"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:54:39.316" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:54:39.316" endtime="20170811 20:54:39.317"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:54:39.317" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:54:39.317" endtime="20170811 20:54:39.317"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:54:39.690" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:54:39.318" endtime="20170811 20:54:39.691"></status>
</kw>
<msg timestamp="20170811 20:54:39.691" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:54:39.691" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:39.317" endtime="20170811 20:54:39.691"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:54:39.691" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:39.691" endtime="20170811 20:54:39.692"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:39.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:39.692" endtime="20170811 20:54:39.693"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.314" endtime="20170811 20:54:39.693"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.314" endtime="20170811 20:54:39.693"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.313" endtime="20170811 20:54:39.693"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:39.694" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:54:39.694" endtime="20170811 20:54:39.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:39.697" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:39.696" endtime="20170811 20:54:39.697"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:39.697" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:39.697" endtime="20170811 20:54:39.698"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.697" endtime="20170811 20:54:39.698"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.695" endtime="20170811 20:54:39.698"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.695" endtime="20170811 20:54:39.698"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:39.785" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:54:39.785" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:39.698" endtime="20170811 20:54:39.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:39.787" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:39.786" endtime="20170811 20:54:39.787"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:39.787" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:39.787" endtime="20170811 20:54:39.788"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.787" endtime="20170811 20:54:39.788"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.786" endtime="20170811 20:54:39.788"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.785" endtime="20170811 20:54:39.788"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:39.788" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:39.788" endtime="20170811 20:54:39.788"></status>
</kw>
<msg timestamp="20170811 20:54:39.788" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:39.313" endtime="20170811 20:54:39.789"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:39.789" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:39.789" endtime="20170811 20:54:39.789"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:54:39.790" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:39.790" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:39.790" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:39.789" endtime="20170811 20:54:39.790"></status>
</kw>
<msg timestamp="20170811 20:54:39.790" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170811 20:54:39.312" endtime="20170811 20:54:39.790"></status>
</kw>
<msg timestamp="20170811 20:54:39.790" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170811 20:54:39.312" endtime="20170811 20:54:39.791"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:54:39.791" endtime="20170811 20:54:39.791"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:54:39.796" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:54:39.796" endtime="20170811 20:54:39.796"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:39.797" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:39.797" endtime="20170811 20:54:39.797"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:54:39.798" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:54:39.797" endtime="20170811 20:54:39.798"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:54:39.798" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:54:39.798" endtime="20170811 20:54:39.798"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:54:39.987" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:54:39.799" endtime="20170811 20:54:39.987"></status>
</kw>
<msg timestamp="20170811 20:54:39.987" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:54:39.987" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:39.799" endtime="20170811 20:54:39.987"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:54:39.988" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:39.987" endtime="20170811 20:54:39.988"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:39.988" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:39.988" endtime="20170811 20:54:39.989"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.795" endtime="20170811 20:54:39.989"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.795" endtime="20170811 20:54:39.989"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.794" endtime="20170811 20:54:39.989"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:39.989" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170811 20:54:39.989" endtime="20170811 20:54:39.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:39.992" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:39.991" endtime="20170811 20:54:39.992"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:39.992" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:39.992" endtime="20170811 20:54:39.993"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.992" endtime="20170811 20:54:39.993"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.990" endtime="20170811 20:54:39.993"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:39.990" endtime="20170811 20:54:39.993"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:40.058" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170811 20:54:40.058" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:39.993" endtime="20170811 20:54:40.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:40.060" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:40.059" endtime="20170811 20:54:40.060"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:40.061" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:40.061" endtime="20170811 20:54:40.061"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:40.060" endtime="20170811 20:54:40.061"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:40.059" endtime="20170811 20:54:40.061"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:40.058" endtime="20170811 20:54:40.061"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:40.062" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:40.061" endtime="20170811 20:54:40.062"></status>
</kw>
<msg timestamp="20170811 20:54:40.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:39.793" endtime="20170811 20:54:40.062"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:40.062" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:40.062" endtime="20170811 20:54:40.063"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:54:40.063" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:40.063" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:40.063" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:40.063" endtime="20170811 20:54:40.063"></status>
</kw>
<msg timestamp="20170811 20:54:40.063" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170811 20:54:39.793" endtime="20170811 20:54:40.064"></status>
</kw>
<msg timestamp="20170811 20:54:40.064" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170811 20:54:39.792" endtime="20170811 20:54:40.064"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170811 20:54:40.064" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170811 20:54:40.064" endtime="20170811 20:54:40.065"></status>
</kw>
<status status="FAIL" starttime="20170811 20:54:39.792" endtime="20170811 20:54:40.065"></status>
</kw>
<msg timestamp="20170811 20:54:40.065" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 20:54:39.792" endtime="20170811 20:54:40.065"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:54:40.065" endtime="20170811 20:54:40.065"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:54:40.069" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:54:40.069" endtime="20170811 20:54:40.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:40.070" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:40.069" endtime="20170811 20:54:40.070"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:54:40.070" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:54:40.070" endtime="20170811 20:54:40.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:54:40.071" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:54:40.071" endtime="20170811 20:54:40.071"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:54:40.387" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:54:40.072" endtime="20170811 20:54:40.387"></status>
</kw>
<msg timestamp="20170811 20:54:40.387" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:54:40.388" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:40.071" endtime="20170811 20:54:40.388"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:54:40.388" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:40.388" endtime="20170811 20:54:40.388"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:40.389" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:40.388" endtime="20170811 20:54:40.389"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:40.068" endtime="20170811 20:54:40.389"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:40.068" endtime="20170811 20:54:40.389"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:40.067" endtime="20170811 20:54:40.389"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:40.390" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170811 20:54:40.389" endtime="20170811 20:54:40.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:40.392" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:40.391" endtime="20170811 20:54:40.392"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:40.393" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:40.393" endtime="20170811 20:54:40.393"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:40.392" endtime="20170811 20:54:40.393"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:40.391" endtime="20170811 20:54:40.393"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:40.390" endtime="20170811 20:54:40.393"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:40.483" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170811 20:54:40.483" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:40.394" endtime="20170811 20:54:40.483"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:40.485" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:40.484" endtime="20170811 20:54:40.485"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:40.486" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:40.485" endtime="20170811 20:54:40.486"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:40.485" endtime="20170811 20:54:40.486"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:40.484" endtime="20170811 20:54:40.486"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:40.483" endtime="20170811 20:54:40.486"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:40.486" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:40.486" endtime="20170811 20:54:40.486"></status>
</kw>
<msg timestamp="20170811 20:54:40.487" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:40.066" endtime="20170811 20:54:40.487"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:40.487" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:40.487" endtime="20170811 20:54:40.487"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:54:40.488" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:40.488" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:40.488" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:40.488" endtime="20170811 20:54:40.488"></status>
</kw>
<msg timestamp="20170811 20:54:40.489" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:54:40.066" endtime="20170811 20:54:40.489"></status>
</kw>
<msg timestamp="20170811 20:54:40.489" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:54:40.066" endtime="20170811 20:54:40.489"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170811 20:54:40.490" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170811 20:54:40.490" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170811 20:54:40.490" endtime="20170811 20:54:40.490"></status>
</kw>
<status status="FAIL" starttime="20170811 20:54:39.791" endtime="20170811 20:54:40.491"></status>
</kw>
<status status="FAIL" starttime="20170811 20:54:38.947" endtime="20170811 20:54:40.491"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:54:50.496" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:54:50.496" endtime="20170811 20:54:50.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:50.497" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:50.497" endtime="20170811 20:54:50.497"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:54:50.497" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:54:50.497" endtime="20170811 20:54:50.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:54:50.499" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:54:50.498" endtime="20170811 20:54:50.499"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:54:50.696" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:54:50.499" endtime="20170811 20:54:50.696"></status>
</kw>
<msg timestamp="20170811 20:54:50.696" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:54:50.696" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:50.499" endtime="20170811 20:54:50.696"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:54:50.697" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:50.697" endtime="20170811 20:54:50.697"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:50.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:50.697" endtime="20170811 20:54:50.698"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:50.495" endtime="20170811 20:54:50.698"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:50.495" endtime="20170811 20:54:50.698"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:50.494" endtime="20170811 20:54:50.698"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:50.699" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:54:50.698" endtime="20170811 20:54:50.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:50.701" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:50.700" endtime="20170811 20:54:50.701"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:50.702" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:50.701" endtime="20170811 20:54:50.702"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:50.701" endtime="20170811 20:54:50.702"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:50.699" endtime="20170811 20:54:50.702"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:50.699" endtime="20170811 20:54:50.702"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:50.764" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:54:50.764" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:50.702" endtime="20170811 20:54:50.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:50.766" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:50.765" endtime="20170811 20:54:50.766"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:50.767" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:50.767" endtime="20170811 20:54:50.767"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:50.766" endtime="20170811 20:54:50.767"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:50.765" endtime="20170811 20:54:50.767"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:50.764" endtime="20170811 20:54:50.767"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:50.768" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:50.767" endtime="20170811 20:54:50.768"></status>
</kw>
<msg timestamp="20170811 20:54:50.768" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:50.493" endtime="20170811 20:54:50.768"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:50.768" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:50.768" endtime="20170811 20:54:50.769"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:54:50.769" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:50.769" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:50.769" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:50.769" endtime="20170811 20:54:50.769"></status>
</kw>
<msg timestamp="20170811 20:54:50.770" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:54:50.493" endtime="20170811 20:54:50.770"></status>
</kw>
<msg timestamp="20170811 20:54:50.770" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:54:50.492" endtime="20170811 20:54:50.770"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:54:50.770" endtime="20170811 20:54:50.770"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:50.492" endtime="20170811 20:54:50.771"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:54:50.777" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:54:50.777" endtime="20170811 20:54:50.777"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:50.778" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:50.778" endtime="20170811 20:54:50.778"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:54:50.779" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:54:50.778" endtime="20170811 20:54:50.779"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:54:50.779" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:54:50.779" endtime="20170811 20:54:50.779"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:54:51.116" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:54:50.780" endtime="20170811 20:54:51.117"></status>
</kw>
<msg timestamp="20170811 20:54:51.117" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:54:51.117" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:50.780" endtime="20170811 20:54:51.117"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:54:51.117" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:51.117" endtime="20170811 20:54:51.118"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:51.118" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:51.118" endtime="20170811 20:54:51.118"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:50.776" endtime="20170811 20:54:51.118"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:50.773" endtime="20170811 20:54:51.118"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:50.772" endtime="20170811 20:54:51.119"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:51.119" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:54:51.119" endtime="20170811 20:54:51.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:51.121" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:51.121" endtime="20170811 20:54:51.121"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:51.122" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:51.122" endtime="20170811 20:54:51.123"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.121" endtime="20170811 20:54:51.123"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.120" endtime="20170811 20:54:51.123"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.119" endtime="20170811 20:54:51.123"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:51.213" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:54:51.213" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:51.123" endtime="20170811 20:54:51.213"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:51.215" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:51.214" endtime="20170811 20:54:51.215"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:51.244" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:51.244" endtime="20170811 20:54:51.244"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.215" endtime="20170811 20:54:51.245"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.214" endtime="20170811 20:54:51.245"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.213" endtime="20170811 20:54:51.245"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:51.245" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:51.245" endtime="20170811 20:54:51.245"></status>
</kw>
<msg timestamp="20170811 20:54:51.245" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:50.772" endtime="20170811 20:54:51.245"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:51.246" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:51.246" endtime="20170811 20:54:51.246"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:54:51.247" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:51.247" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:51.247" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:51.246" endtime="20170811 20:54:51.247"></status>
</kw>
<msg timestamp="20170811 20:54:51.247" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170811 20:54:50.771" endtime="20170811 20:54:51.247"></status>
</kw>
<msg timestamp="20170811 20:54:51.248" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170811 20:54:50.771" endtime="20170811 20:54:51.248"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:54:51.248" endtime="20170811 20:54:51.248"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:54:51.253" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:54:51.252" endtime="20170811 20:54:51.253"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:51.254" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:51.253" endtime="20170811 20:54:51.254"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:54:51.254" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:54:51.254" endtime="20170811 20:54:51.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:54:51.255" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:54:51.255" endtime="20170811 20:54:51.255"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:54:51.432" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:54:51.256" endtime="20170811 20:54:51.432"></status>
</kw>
<msg timestamp="20170811 20:54:51.432" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:54:51.432" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:51.255" endtime="20170811 20:54:51.432"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:54:51.433" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:51.432" endtime="20170811 20:54:51.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:51.433" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:51.433" endtime="20170811 20:54:51.434"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.252" endtime="20170811 20:54:51.434"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.251" endtime="20170811 20:54:51.434"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.251" endtime="20170811 20:54:51.434"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:51.434" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170811 20:54:51.434" endtime="20170811 20:54:51.435"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:51.437" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:51.436" endtime="20170811 20:54:51.437"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:51.438" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:51.438" endtime="20170811 20:54:51.438"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.437" endtime="20170811 20:54:51.438"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.435" endtime="20170811 20:54:51.438"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.435" endtime="20170811 20:54:51.439"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:51.505" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170811 20:54:51.505" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:51.439" endtime="20170811 20:54:51.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:51.507" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:51.507" endtime="20170811 20:54:51.507"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:51.508" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:51.508" endtime="20170811 20:54:51.508"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.507" endtime="20170811 20:54:51.508"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.506" endtime="20170811 20:54:51.508"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.506" endtime="20170811 20:54:51.508"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:51.509" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:51.509" endtime="20170811 20:54:51.509"></status>
</kw>
<msg timestamp="20170811 20:54:51.509" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:51.250" endtime="20170811 20:54:51.509"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:51.510" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:51.509" endtime="20170811 20:54:51.510"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:54:51.510" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:51.510" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:51.510" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:51.510" endtime="20170811 20:54:51.511"></status>
</kw>
<msg timestamp="20170811 20:54:51.511" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170811 20:54:51.250" endtime="20170811 20:54:51.511"></status>
</kw>
<msg timestamp="20170811 20:54:51.511" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170811 20:54:51.249" endtime="20170811 20:54:51.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170811 20:54:51.512" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170811 20:54:51.511" endtime="20170811 20:54:51.512"></status>
</kw>
<status status="FAIL" starttime="20170811 20:54:51.249" endtime="20170811 20:54:51.512"></status>
</kw>
<msg timestamp="20170811 20:54:51.512" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 20:54:51.249" endtime="20170811 20:54:51.512"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:54:51.512" endtime="20170811 20:54:51.513"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:54:51.517" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:54:51.516" endtime="20170811 20:54:51.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:54:51.518" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:54:51.517" endtime="20170811 20:54:51.518"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:54:51.518" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:54:51.518" endtime="20170811 20:54:51.518"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:54:51.519" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:54:51.519" endtime="20170811 20:54:51.519"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:54:51.715" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:54:51.520" endtime="20170811 20:54:51.715"></status>
</kw>
<msg timestamp="20170811 20:54:51.715" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:54:51.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:51.519" endtime="20170811 20:54:51.715"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:54:51.716" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:51.716" endtime="20170811 20:54:51.716"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:51.717" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:51.716" endtime="20170811 20:54:51.717"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.516" endtime="20170811 20:54:51.717"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.515" endtime="20170811 20:54:51.717"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.515" endtime="20170811 20:54:51.717"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:54:51.718" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170811 20:54:51.717" endtime="20170811 20:54:51.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:51.720" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:51.719" endtime="20170811 20:54:51.720"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:51.721" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:54:51.721" endtime="20170811 20:54:51.721"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.720" endtime="20170811 20:54:51.721"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.718" endtime="20170811 20:54:51.721"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.718" endtime="20170811 20:54:51.721"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:54:51.811" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170811 20:54:51.811" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:51.722" endtime="20170811 20:54:51.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:54:51.814" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:51.813" endtime="20170811 20:54:51.814"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:54:51.815" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:54:51.815" endtime="20170811 20:54:51.815"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.814" endtime="20170811 20:54:51.815"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.812" endtime="20170811 20:54:51.815"></status>
</kw>
<status status="PASS" starttime="20170811 20:54:51.811" endtime="20170811 20:54:51.815"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:54:51.816" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:54:51.816" endtime="20170811 20:54:51.816"></status>
</kw>
<msg timestamp="20170811 20:54:51.816" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:54:51.514" endtime="20170811 20:54:51.816"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:54:51.817" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:54:51.817" endtime="20170811 20:54:51.817"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:54:51.817" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:54:51.818" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:54:51.818" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:54:51.817" endtime="20170811 20:54:51.818"></status>
</kw>
<msg timestamp="20170811 20:54:51.818" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:54:51.513" endtime="20170811 20:54:51.818"></status>
</kw>
<msg timestamp="20170811 20:54:51.818" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:54:51.513" endtime="20170811 20:54:51.818"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170811 20:54:51.819" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170811 20:54:51.819" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170811 20:54:51.818" endtime="20170811 20:54:51.819"></status>
</kw>
<status status="FAIL" starttime="20170811 20:54:51.248" endtime="20170811 20:54:51.819"></status>
</kw>
<status status="FAIL" starttime="20170811 20:54:50.491" endtime="20170811 20:54:51.820"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:01.825" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:01.825" endtime="20170811 20:55:01.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:01.826" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:01.826" endtime="20170811 20:55:01.826"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:01.827" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:01.826" endtime="20170811 20:55:01.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:01.827" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:01.827" endtime="20170811 20:55:01.827"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:02.332" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:01.828" endtime="20170811 20:55:02.332"></status>
</kw>
<msg timestamp="20170811 20:55:02.332" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:02.332" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:01.828" endtime="20170811 20:55:02.333"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:02.333" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:02.333" endtime="20170811 20:55:02.333"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:02.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:02.334" endtime="20170811 20:55:02.334"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:01.824" endtime="20170811 20:55:02.334"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:01.824" endtime="20170811 20:55:02.334"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:01.823" endtime="20170811 20:55:02.335"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:02.335" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:55:02.335" endtime="20170811 20:55:02.335"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:02.337" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:02.337" endtime="20170811 20:55:02.337"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:02.338" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:02.338" endtime="20170811 20:55:02.338"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:02.337" endtime="20170811 20:55:02.338"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:02.336" endtime="20170811 20:55:02.338"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:02.335" endtime="20170811 20:55:02.338"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:05.106" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:55:05.106" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:02.339" endtime="20170811 20:55:05.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:05.108" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:05.107" endtime="20170811 20:55:05.108"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:05.109" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:05.109" endtime="20170811 20:55:05.109"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:05.108" endtime="20170811 20:55:05.109"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:05.107" endtime="20170811 20:55:05.109"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:05.106" endtime="20170811 20:55:05.109"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:05.110" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:05.109" endtime="20170811 20:55:05.110"></status>
</kw>
<msg timestamp="20170811 20:55:05.110" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:01.822" endtime="20170811 20:55:05.110"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:05.111" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:05.110" endtime="20170811 20:55:05.111"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:05.111" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:05.111" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:05.111" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:05.111" endtime="20170811 20:55:05.111"></status>
</kw>
<msg timestamp="20170811 20:55:05.112" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:55:01.822" endtime="20170811 20:55:05.112"></status>
</kw>
<msg timestamp="20170811 20:55:05.112" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:55:01.822" endtime="20170811 20:55:05.112"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:55:05.112" endtime="20170811 20:55:05.112"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:01.821" endtime="20170811 20:55:05.113"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:05.116" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:05.116" endtime="20170811 20:55:05.117"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:05.117" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:05.117" endtime="20170811 20:55:05.118"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:05.118" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:05.118" endtime="20170811 20:55:05.118"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:05.119" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:05.118" endtime="20170811 20:55:05.119"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:05.777" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:05.120" endtime="20170811 20:55:05.778"></status>
</kw>
<msg timestamp="20170811 20:55:05.778" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:05.778" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:05.119" endtime="20170811 20:55:05.778"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:05.778" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:05.778" endtime="20170811 20:55:05.779"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:05.779" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:05.779" endtime="20170811 20:55:05.779"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:05.115" endtime="20170811 20:55:05.779"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:05.115" endtime="20170811 20:55:05.780"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:05.114" endtime="20170811 20:55:05.780"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:05.780" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:55:05.780" endtime="20170811 20:55:05.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:05.782" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:05.782" endtime="20170811 20:55:05.783"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:05.783" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:05.783" endtime="20170811 20:55:05.783"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:05.783" endtime="20170811 20:55:05.784"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:05.781" endtime="20170811 20:55:05.784"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:05.781" endtime="20170811 20:55:05.784"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:05.892" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:55:05.892" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:05.784" endtime="20170811 20:55:05.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:05.894" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:05.894" endtime="20170811 20:55:05.894"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:05.895" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:05.895" endtime="20170811 20:55:05.895"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:05.894" endtime="20170811 20:55:05.895"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:05.893" endtime="20170811 20:55:05.895"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:05.893" endtime="20170811 20:55:05.895"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:05.896" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:05.896" endtime="20170811 20:55:05.896"></status>
</kw>
<msg timestamp="20170811 20:55:05.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:05.114" endtime="20170811 20:55:05.896"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:05.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:05.896" endtime="20170811 20:55:05.897"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:05.897" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:05.897" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:05.898" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:05.897" endtime="20170811 20:55:05.898"></status>
</kw>
<msg timestamp="20170811 20:55:05.898" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170811 20:55:05.113" endtime="20170811 20:55:05.898"></status>
</kw>
<msg timestamp="20170811 20:55:05.898" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170811 20:55:05.113" endtime="20170811 20:55:05.898"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:55:05.898" endtime="20170811 20:55:05.899"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:05.904" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:05.903" endtime="20170811 20:55:05.904"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:05.904" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:05.904" endtime="20170811 20:55:05.905"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:05.905" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:05.905" endtime="20170811 20:55:05.905"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:05.906" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:05.905" endtime="20170811 20:55:05.906"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:06.165" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:05.907" endtime="20170811 20:55:06.165"></status>
</kw>
<msg timestamp="20170811 20:55:06.165" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:06.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:05.906" endtime="20170811 20:55:06.165"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:06.166" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:06.166" endtime="20170811 20:55:06.166"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:06.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:06.166" endtime="20170811 20:55:06.167"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:05.903" endtime="20170811 20:55:06.167"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:05.902" endtime="20170811 20:55:06.167"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:05.902" endtime="20170811 20:55:06.167"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:06.168" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170811 20:55:06.168" endtime="20170811 20:55:06.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:06.170" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:06.169" endtime="20170811 20:55:06.170"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:06.171" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:06.171" endtime="20170811 20:55:06.171"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:06.170" endtime="20170811 20:55:06.171"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:06.169" endtime="20170811 20:55:06.171"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:06.168" endtime="20170811 20:55:06.171"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:06.246" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170811 20:55:06.246" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:06.172" endtime="20170811 20:55:06.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:06.248" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:06.247" endtime="20170811 20:55:06.248"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:06.249" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:06.249" endtime="20170811 20:55:06.249"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:06.248" endtime="20170811 20:55:06.249"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:06.247" endtime="20170811 20:55:06.249"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:06.246" endtime="20170811 20:55:06.249"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:06.250" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:06.250" endtime="20170811 20:55:06.250"></status>
</kw>
<msg timestamp="20170811 20:55:06.250" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:05.901" endtime="20170811 20:55:06.250"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:06.251" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:06.250" endtime="20170811 20:55:06.251"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:06.251" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:06.251" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:06.251" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:06.251" endtime="20170811 20:55:06.251"></status>
</kw>
<msg timestamp="20170811 20:55:06.252" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170811 20:55:05.901" endtime="20170811 20:55:06.252"></status>
</kw>
<msg timestamp="20170811 20:55:06.252" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170811 20:55:05.900" endtime="20170811 20:55:06.252"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170811 20:55:06.253" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170811 20:55:06.252" endtime="20170811 20:55:06.253"></status>
</kw>
<status status="FAIL" starttime="20170811 20:55:05.900" endtime="20170811 20:55:06.253"></status>
</kw>
<msg timestamp="20170811 20:55:06.253" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 20:55:05.899" endtime="20170811 20:55:06.253"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:55:06.253" endtime="20170811 20:55:06.254"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:06.257" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:06.257" endtime="20170811 20:55:06.258"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:06.258" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:06.258" endtime="20170811 20:55:06.258"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:06.259" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:06.259" endtime="20170811 20:55:06.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:06.260" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:06.259" endtime="20170811 20:55:06.260"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:06.440" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:06.260" endtime="20170811 20:55:06.440"></status>
</kw>
<msg timestamp="20170811 20:55:06.440" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:06.440" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:06.260" endtime="20170811 20:55:06.441"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:06.441" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:06.441" endtime="20170811 20:55:06.441"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:06.442" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:06.441" endtime="20170811 20:55:06.442"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:06.256" endtime="20170811 20:55:06.442"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:06.256" endtime="20170811 20:55:06.442"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:06.255" endtime="20170811 20:55:06.442"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:06.443" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170811 20:55:06.442" endtime="20170811 20:55:06.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:06.445" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:06.444" endtime="20170811 20:55:06.445"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:06.446" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:06.446" endtime="20170811 20:55:06.446"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:06.445" endtime="20170811 20:55:06.446"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:06.443" endtime="20170811 20:55:06.446"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:06.443" endtime="20170811 20:55:06.447"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:06.536" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170811 20:55:06.536" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:06.447" endtime="20170811 20:55:06.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:06.537" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:06.537" endtime="20170811 20:55:06.538"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:06.538" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:06.538" endtime="20170811 20:55:06.539"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:06.538" endtime="20170811 20:55:06.539"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:06.537" endtime="20170811 20:55:06.539"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:06.536" endtime="20170811 20:55:06.539"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:06.539" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:06.539" endtime="20170811 20:55:06.539"></status>
</kw>
<msg timestamp="20170811 20:55:06.540" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:06.255" endtime="20170811 20:55:06.540"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:06.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:06.540" endtime="20170811 20:55:06.540"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:06.541" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:06.541" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:06.541" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:06.540" endtime="20170811 20:55:06.541"></status>
</kw>
<msg timestamp="20170811 20:55:06.541" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:55:06.254" endtime="20170811 20:55:06.541"></status>
</kw>
<msg timestamp="20170811 20:55:06.542" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:55:06.254" endtime="20170811 20:55:06.542"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170811 20:55:06.542" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170811 20:55:06.542" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170811 20:55:06.542" endtime="20170811 20:55:06.542"></status>
</kw>
<status status="FAIL" starttime="20170811 20:55:05.899" endtime="20170811 20:55:06.543"></status>
</kw>
<status status="FAIL" starttime="20170811 20:55:01.820" endtime="20170811 20:55:06.543"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:16.548" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:16.547" endtime="20170811 20:55:16.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:16.549" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:16.548" endtime="20170811 20:55:16.549"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:16.549" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:16.549" endtime="20170811 20:55:16.550"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:16.550" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:16.550" endtime="20170811 20:55:16.550"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:16.990" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:16.551" endtime="20170811 20:55:16.990"></status>
</kw>
<msg timestamp="20170811 20:55:16.990" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:16.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:16.550" endtime="20170811 20:55:16.990"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:16.991" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:16.991" endtime="20170811 20:55:16.991"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:16.992" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:16.991" endtime="20170811 20:55:16.992"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:16.547" endtime="20170811 20:55:16.992"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:16.547" endtime="20170811 20:55:16.992"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:16.546" endtime="20170811 20:55:16.992"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:16.993" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:55:16.992" endtime="20170811 20:55:16.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:16.995" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:16.994" endtime="20170811 20:55:16.995"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:16.996" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:16.996" endtime="20170811 20:55:16.996"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:16.995" endtime="20170811 20:55:16.996"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:16.993" endtime="20170811 20:55:16.996"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:16.993" endtime="20170811 20:55:16.996"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:22.282" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:55:22.282" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:16.997" endtime="20170811 20:55:22.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:22.284" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:22.284" endtime="20170811 20:55:22.284"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:22.286" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:22.285" endtime="20170811 20:55:22.286"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:22.285" endtime="20170811 20:55:22.286"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:22.283" endtime="20170811 20:55:22.286"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:22.282" endtime="20170811 20:55:22.286"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:22.286" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:22.286" endtime="20170811 20:55:22.287"></status>
</kw>
<msg timestamp="20170811 20:55:22.287" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:16.545" endtime="20170811 20:55:22.287"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:22.287" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:22.287" endtime="20170811 20:55:22.288"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:22.288" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:22.288" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:22.288" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:22.288" endtime="20170811 20:55:22.288"></status>
</kw>
<msg timestamp="20170811 20:55:22.289" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170811 20:55:16.544" endtime="20170811 20:55:22.289"></status>
</kw>
<msg timestamp="20170811 20:55:22.289" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170811 20:55:16.544" endtime="20170811 20:55:22.289"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170811 20:55:22.290" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170811 20:55:22.289" endtime="20170811 20:55:22.290"></status>
</kw>
<status status="FAIL" starttime="20170811 20:55:16.544" endtime="20170811 20:55:22.290"></status>
</kw>
<status status="FAIL" starttime="20170811 20:55:16.543" endtime="20170811 20:55:22.290"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:32.295" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:32.294" endtime="20170811 20:55:32.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:32.296" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:32.295" endtime="20170811 20:55:32.296"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:32.296" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:32.296" endtime="20170811 20:55:32.296"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:32.297" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:32.297" endtime="20170811 20:55:32.297"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:32.626" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:32.298" endtime="20170811 20:55:32.626"></status>
</kw>
<msg timestamp="20170811 20:55:32.626" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:32.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:32.297" endtime="20170811 20:55:32.626"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:32.627" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:32.626" endtime="20170811 20:55:32.627"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:32.627" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:32.627" endtime="20170811 20:55:32.627"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:32.294" endtime="20170811 20:55:32.627"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:32.293" endtime="20170811 20:55:32.627"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:32.293" endtime="20170811 20:55:32.628"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:32.628" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:55:32.628" endtime="20170811 20:55:32.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:32.631" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:32.630" endtime="20170811 20:55:32.631"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:32.632" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:32.631" endtime="20170811 20:55:32.632"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:32.631" endtime="20170811 20:55:32.632"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:32.629" endtime="20170811 20:55:32.632"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:32.629" endtime="20170811 20:55:32.632"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:33.248" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:55:33.249" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:32.632" endtime="20170811 20:55:33.249"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:33.251" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:33.250" endtime="20170811 20:55:33.251"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:33.252" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:33.251" endtime="20170811 20:55:33.252"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:33.251" endtime="20170811 20:55:33.252"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:33.250" endtime="20170811 20:55:33.252"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:33.249" endtime="20170811 20:55:33.252"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:33.252" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:33.252" endtime="20170811 20:55:33.252"></status>
</kw>
<msg timestamp="20170811 20:55:33.253" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:32.292" endtime="20170811 20:55:33.253"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:33.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:33.253" endtime="20170811 20:55:33.253"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:33.254" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:33.254" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:33.254" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:33.254" endtime="20170811 20:55:33.254"></status>
</kw>
<msg timestamp="20170811 20:55:33.254" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:55:32.292" endtime="20170811 20:55:33.254"></status>
</kw>
<msg timestamp="20170811 20:55:33.255" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:55:32.291" endtime="20170811 20:55:33.255"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:55:33.255" endtime="20170811 20:55:33.255"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:32.291" endtime="20170811 20:55:33.255"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:33.262" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:33.262" endtime="20170811 20:55:33.262"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:33.263" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:33.263" endtime="20170811 20:55:33.263"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:33.264" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:33.263" endtime="20170811 20:55:33.264"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:33.264" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:33.264" endtime="20170811 20:55:33.264"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:33.644" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:33.265" endtime="20170811 20:55:33.644"></status>
</kw>
<msg timestamp="20170811 20:55:33.644" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:33.644" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:33.265" endtime="20170811 20:55:33.644"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:33.645" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:33.645" endtime="20170811 20:55:33.645"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:33.646" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:33.645" endtime="20170811 20:55:33.646"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:33.258" endtime="20170811 20:55:33.646"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:33.257" endtime="20170811 20:55:33.646"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:33.257" endtime="20170811 20:55:33.646"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:33.647" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:55:33.646" endtime="20170811 20:55:33.647"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:33.649" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:33.648" endtime="20170811 20:55:33.649"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:33.650" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:33.649" endtime="20170811 20:55:33.650"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:33.649" endtime="20170811 20:55:33.650"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:33.647" endtime="20170811 20:55:33.650"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:33.647" endtime="20170811 20:55:33.650"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:34.059" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:55:34.059" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:33.650" endtime="20170811 20:55:34.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:34.061" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:34.061" endtime="20170811 20:55:34.061"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:34.062" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:34.062" endtime="20170811 20:55:34.062"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:34.061" endtime="20170811 20:55:34.063"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:34.060" endtime="20170811 20:55:34.063"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:34.059" endtime="20170811 20:55:34.063"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:34.063" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:34.063" endtime="20170811 20:55:34.063"></status>
</kw>
<msg timestamp="20170811 20:55:34.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:33.256" endtime="20170811 20:55:34.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:34.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:34.064" endtime="20170811 20:55:34.064"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:34.065" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:34.065" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:34.065" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:34.064" endtime="20170811 20:55:34.065"></status>
</kw>
<msg timestamp="20170811 20:55:34.065" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170811 20:55:33.256" endtime="20170811 20:55:34.065"></status>
</kw>
<msg timestamp="20170811 20:55:34.065" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170811 20:55:33.255" endtime="20170811 20:55:34.065"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:55:34.066" endtime="20170811 20:55:34.066"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:34.071" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:34.070" endtime="20170811 20:55:34.071"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:34.071" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:34.071" endtime="20170811 20:55:34.072"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:34.072" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:34.072" endtime="20170811 20:55:34.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:34.073" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:34.072" endtime="20170811 20:55:34.073"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:34.792" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:34.073" endtime="20170811 20:55:34.792"></status>
</kw>
<msg timestamp="20170811 20:55:34.792" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:34.792" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:34.073" endtime="20170811 20:55:34.792"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:34.793" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:34.792" endtime="20170811 20:55:34.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:34.794" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:34.793" endtime="20170811 20:55:34.794"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:34.070" endtime="20170811 20:55:34.794"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:34.069" endtime="20170811 20:55:34.794"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:34.069" endtime="20170811 20:55:34.794"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:34.795" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170811 20:55:34.794" endtime="20170811 20:55:34.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:34.797" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:34.796" endtime="20170811 20:55:34.797"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:34.798" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:34.797" endtime="20170811 20:55:34.798"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:34.797" endtime="20170811 20:55:34.798"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:34.795" endtime="20170811 20:55:34.798"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:34.795" endtime="20170811 20:55:34.798"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:34.865" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170811 20:55:34.865" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:34.798" endtime="20170811 20:55:34.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:34.867" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:34.866" endtime="20170811 20:55:34.867"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:34.868" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:34.867" endtime="20170811 20:55:34.868"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:34.867" endtime="20170811 20:55:34.868"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:34.866" endtime="20170811 20:55:34.868"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:34.865" endtime="20170811 20:55:34.868"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:34.868" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:34.868" endtime="20170811 20:55:34.868"></status>
</kw>
<msg timestamp="20170811 20:55:34.869" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:34.068" endtime="20170811 20:55:34.869"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:34.869" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:34.869" endtime="20170811 20:55:34.869"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:34.870" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:34.870" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:34.870" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:34.870" endtime="20170811 20:55:34.870"></status>
</kw>
<msg timestamp="20170811 20:55:34.870" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170811 20:55:34.067" endtime="20170811 20:55:34.870"></status>
</kw>
<msg timestamp="20170811 20:55:34.871" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170811 20:55:34.067" endtime="20170811 20:55:34.871"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170811 20:55:34.871" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170811 20:55:34.871" endtime="20170811 20:55:34.871"></status>
</kw>
<status status="FAIL" starttime="20170811 20:55:34.067" endtime="20170811 20:55:34.872"></status>
</kw>
<msg timestamp="20170811 20:55:34.872" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 20:55:34.067" endtime="20170811 20:55:34.872"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:55:34.872" endtime="20170811 20:55:34.872"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:34.876" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:34.876" endtime="20170811 20:55:34.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:34.878" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:34.878" endtime="20170811 20:55:34.878"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:34.879" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:34.879" endtime="20170811 20:55:34.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:34.880" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:34.879" endtime="20170811 20:55:34.880"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:35.081" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:34.881" endtime="20170811 20:55:35.081"></status>
</kw>
<msg timestamp="20170811 20:55:35.081" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:35.081" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:34.881" endtime="20170811 20:55:35.081"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:35.082" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:35.082" endtime="20170811 20:55:35.082"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:35.083" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:35.082" endtime="20170811 20:55:35.083"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:34.875" endtime="20170811 20:55:35.083"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:34.875" endtime="20170811 20:55:35.083"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:34.874" endtime="20170811 20:55:35.083"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:35.084" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170811 20:55:35.084" endtime="20170811 20:55:35.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:35.087" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:35.086" endtime="20170811 20:55:35.087"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:35.088" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:35.088" endtime="20170811 20:55:35.089"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:35.087" endtime="20170811 20:55:35.089"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:35.085" endtime="20170811 20:55:35.089"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:35.085" endtime="20170811 20:55:35.089"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:35.225" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170811 20:55:35.226" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:35.089" endtime="20170811 20:55:35.226"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:35.228" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:35.227" endtime="20170811 20:55:35.228"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:35.229" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:35.228" endtime="20170811 20:55:35.229"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:35.228" endtime="20170811 20:55:35.229"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:35.227" endtime="20170811 20:55:35.229"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:35.226" endtime="20170811 20:55:35.229"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:35.229" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:35.229" endtime="20170811 20:55:35.229"></status>
</kw>
<msg timestamp="20170811 20:55:35.230" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:34.873" endtime="20170811 20:55:35.230"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:35.230" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:35.230" endtime="20170811 20:55:35.230"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:35.231" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:35.231" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:35.231" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:35.231" endtime="20170811 20:55:35.231"></status>
</kw>
<msg timestamp="20170811 20:55:35.231" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:55:34.873" endtime="20170811 20:55:35.231"></status>
</kw>
<msg timestamp="20170811 20:55:35.232" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:55:34.872" endtime="20170811 20:55:35.232"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170811 20:55:35.232" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170811 20:55:35.232" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170811 20:55:35.232" endtime="20170811 20:55:35.232"></status>
</kw>
<status status="FAIL" starttime="20170811 20:55:34.066" endtime="20170811 20:55:35.233"></status>
</kw>
<status status="FAIL" starttime="20170811 20:55:32.290" endtime="20170811 20:55:35.233"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:45.238" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:45.237" endtime="20170811 20:55:45.238"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:45.239" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:45.238" endtime="20170811 20:55:45.239"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:45.239" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:45.239" endtime="20170811 20:55:45.239"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:45.240" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:45.240" endtime="20170811 20:55:45.240"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:45.435" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:45.241" endtime="20170811 20:55:45.435"></status>
</kw>
<msg timestamp="20170811 20:55:45.435" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:45.435" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:45.240" endtime="20170811 20:55:45.435"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:45.436" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:45.435" endtime="20170811 20:55:45.436"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:45.436" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:45.436" endtime="20170811 20:55:45.436"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.237" endtime="20170811 20:55:45.437"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.237" endtime="20170811 20:55:45.437"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.236" endtime="20170811 20:55:45.437"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:45.437" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:55:45.437" endtime="20170811 20:55:45.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:45.439" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:45.439" endtime="20170811 20:55:45.439"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:45.440" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:45.440" endtime="20170811 20:55:45.440"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.439" endtime="20170811 20:55:45.441"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.438" endtime="20170811 20:55:45.441"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.438" endtime="20170811 20:55:45.441"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:45.513" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:55:45.513" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:45.441" endtime="20170811 20:55:45.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:45.514" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:45.514" endtime="20170811 20:55:45.514"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:45.515" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:45.515" endtime="20170811 20:55:45.516"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.515" endtime="20170811 20:55:45.516"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.513" endtime="20170811 20:55:45.516"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.513" endtime="20170811 20:55:45.516"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:45.516" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:45.516" endtime="20170811 20:55:45.516"></status>
</kw>
<msg timestamp="20170811 20:55:45.517" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:45.235" endtime="20170811 20:55:45.517"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:45.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:45.517" endtime="20170811 20:55:45.517"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:45.518" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:45.518" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:45.518" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:45.517" endtime="20170811 20:55:45.518"></status>
</kw>
<msg timestamp="20170811 20:55:45.518" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:55:45.234" endtime="20170811 20:55:45.518"></status>
</kw>
<msg timestamp="20170811 20:55:45.519" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:55:45.234" endtime="20170811 20:55:45.519"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:55:45.519" endtime="20170811 20:55:45.519"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.234" endtime="20170811 20:55:45.519"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:45.523" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:45.522" endtime="20170811 20:55:45.523"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:45.524" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:45.523" endtime="20170811 20:55:45.524"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:45.524" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:45.524" endtime="20170811 20:55:45.524"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:45.525" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:45.525" endtime="20170811 20:55:45.525"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:45.712" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:45.526" endtime="20170811 20:55:45.713"></status>
</kw>
<msg timestamp="20170811 20:55:45.713" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:45.713" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:45.525" endtime="20170811 20:55:45.713"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:45.713" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:45.713" endtime="20170811 20:55:45.714"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:45.714" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:45.714" endtime="20170811 20:55:45.715"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.522" endtime="20170811 20:55:45.715"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.522" endtime="20170811 20:55:45.715"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.521" endtime="20170811 20:55:45.715"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:45.715" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:55:45.715" endtime="20170811 20:55:45.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:45.718" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:45.717" endtime="20170811 20:55:45.718"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:45.719" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:45.719" endtime="20170811 20:55:45.719"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.719" endtime="20170811 20:55:45.720"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.716" endtime="20170811 20:55:45.720"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.716" endtime="20170811 20:55:45.720"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:45.808" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:55:45.809" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:45.720" endtime="20170811 20:55:45.809"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:45.810" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:45.810" endtime="20170811 20:55:45.811"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:45.811" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:45.811" endtime="20170811 20:55:45.811"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.811" endtime="20170811 20:55:45.812"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.809" endtime="20170811 20:55:45.812"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.809" endtime="20170811 20:55:45.812"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:45.812" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:45.812" endtime="20170811 20:55:45.812"></status>
</kw>
<msg timestamp="20170811 20:55:45.812" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:45.520" endtime="20170811 20:55:45.812"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:45.813" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:45.813" endtime="20170811 20:55:45.813"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:45.814" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:45.814" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:45.814" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:45.813" endtime="20170811 20:55:45.814"></status>
</kw>
<msg timestamp="20170811 20:55:45.814" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170811 20:55:45.520" endtime="20170811 20:55:45.814"></status>
</kw>
<msg timestamp="20170811 20:55:45.814" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170811 20:55:45.519" endtime="20170811 20:55:45.814"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:55:45.815" endtime="20170811 20:55:45.815"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:45.820" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:45.820" endtime="20170811 20:55:45.821"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:45.822" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:45.821" endtime="20170811 20:55:45.822"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:45.822" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:45.822" endtime="20170811 20:55:45.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:45.823" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:45.823" endtime="20170811 20:55:45.823"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:46.017" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:45.824" endtime="20170811 20:55:46.017"></status>
</kw>
<msg timestamp="20170811 20:55:46.017" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:46.017" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:45.823" endtime="20170811 20:55:46.017"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:46.018" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:46.018" endtime="20170811 20:55:46.018"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:46.019" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:46.018" endtime="20170811 20:55:46.019"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.819" endtime="20170811 20:55:46.019"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.818" endtime="20170811 20:55:46.019"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:45.818" endtime="20170811 20:55:46.019"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:46.020" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170811 20:55:46.019" endtime="20170811 20:55:46.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:46.022" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:46.021" endtime="20170811 20:55:46.022"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:46.023" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:46.022" endtime="20170811 20:55:46.023"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:46.022" endtime="20170811 20:55:46.023"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:46.020" endtime="20170811 20:55:46.023"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:46.020" endtime="20170811 20:55:46.023"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:46.124" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170811 20:55:46.124" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:46.023" endtime="20170811 20:55:46.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:46.126" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:46.125" endtime="20170811 20:55:46.126"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:46.127" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:46.127" endtime="20170811 20:55:46.127"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:46.126" endtime="20170811 20:55:46.127"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:46.125" endtime="20170811 20:55:46.128"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:46.124" endtime="20170811 20:55:46.128"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:46.128" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:46.128" endtime="20170811 20:55:46.128"></status>
</kw>
<msg timestamp="20170811 20:55:46.128" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:45.817" endtime="20170811 20:55:46.128"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:46.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:46.129" endtime="20170811 20:55:46.129"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:46.130" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:46.130" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:46.130" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:46.129" endtime="20170811 20:55:46.130"></status>
</kw>
<msg timestamp="20170811 20:55:46.130" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170811 20:55:45.816" endtime="20170811 20:55:46.130"></status>
</kw>
<msg timestamp="20170811 20:55:46.130" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170811 20:55:45.816" endtime="20170811 20:55:46.130"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170811 20:55:46.131" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170811 20:55:46.131" endtime="20170811 20:55:46.131"></status>
</kw>
<status status="FAIL" starttime="20170811 20:55:45.816" endtime="20170811 20:55:46.131"></status>
</kw>
<msg timestamp="20170811 20:55:46.131" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 20:55:45.816" endtime="20170811 20:55:46.131"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:55:46.132" endtime="20170811 20:55:46.132"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:46.136" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:46.136" endtime="20170811 20:55:46.137"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:46.137" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:46.137" endtime="20170811 20:55:46.137"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:46.138" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:46.137" endtime="20170811 20:55:46.138"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:46.138" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:46.138" endtime="20170811 20:55:46.139"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:46.392" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:46.139" endtime="20170811 20:55:46.392"></status>
</kw>
<msg timestamp="20170811 20:55:46.392" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:46.392" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:46.139" endtime="20170811 20:55:46.392"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:46.393" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:46.393" endtime="20170811 20:55:46.393"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:46.394" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:46.393" endtime="20170811 20:55:46.394"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:46.135" endtime="20170811 20:55:46.394"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:46.135" endtime="20170811 20:55:46.394"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:46.134" endtime="20170811 20:55:46.394"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:46.395" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170811 20:55:46.394" endtime="20170811 20:55:46.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:46.397" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:46.396" endtime="20170811 20:55:46.397"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:46.398" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:46.398" endtime="20170811 20:55:46.398"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:46.397" endtime="20170811 20:55:46.398"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:46.395" endtime="20170811 20:55:46.398"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:46.395" endtime="20170811 20:55:46.398"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:46.487" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170811 20:55:46.487" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:46.399" endtime="20170811 20:55:46.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:46.489" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:46.489" endtime="20170811 20:55:46.489"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:46.490" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:46.490" endtime="20170811 20:55:46.490"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:46.489" endtime="20170811 20:55:46.490"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:46.488" endtime="20170811 20:55:46.491"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:46.488" endtime="20170811 20:55:46.491"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:46.491" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:46.491" endtime="20170811 20:55:46.491"></status>
</kw>
<msg timestamp="20170811 20:55:46.491" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:46.133" endtime="20170811 20:55:46.491"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:46.492" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:46.492" endtime="20170811 20:55:46.492"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:46.492" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:46.493" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:46.493" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:46.492" endtime="20170811 20:55:46.493"></status>
</kw>
<msg timestamp="20170811 20:55:46.493" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:55:46.132" endtime="20170811 20:55:46.493"></status>
</kw>
<msg timestamp="20170811 20:55:46.493" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:55:46.132" endtime="20170811 20:55:46.493"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170811 20:55:46.494" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170811 20:55:46.494" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170811 20:55:46.493" endtime="20170811 20:55:46.494"></status>
</kw>
<status status="FAIL" starttime="20170811 20:55:45.815" endtime="20170811 20:55:46.494"></status>
</kw>
<status status="FAIL" starttime="20170811 20:55:45.233" endtime="20170811 20:55:46.494"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:56.499" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:56.499" endtime="20170811 20:55:56.500"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:56.500" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:56.500" endtime="20170811 20:55:56.500"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:56.501" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:56.501" endtime="20170811 20:55:56.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:56.502" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:56.501" endtime="20170811 20:55:56.502"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:56.706" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:56.502" endtime="20170811 20:55:56.706"></status>
</kw>
<msg timestamp="20170811 20:55:56.706" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:56.706" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:56.502" endtime="20170811 20:55:56.706"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:56.707" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:56.707" endtime="20170811 20:55:56.707"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:56.708" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:56.707" endtime="20170811 20:55:56.708"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:56.498" endtime="20170811 20:55:56.708"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:56.498" endtime="20170811 20:55:56.708"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:56.497" endtime="20170811 20:55:56.708"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:56.709" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:55:56.708" endtime="20170811 20:55:56.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:56.711" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:56.710" endtime="20170811 20:55:56.711"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:56.712" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:56.711" endtime="20170811 20:55:56.712"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:56.711" endtime="20170811 20:55:56.712"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:56.709" endtime="20170811 20:55:56.712"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:56.709" endtime="20170811 20:55:56.712"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:56.804" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:55:56.804" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:56.712" endtime="20170811 20:55:56.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:56.806" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:56.806" endtime="20170811 20:55:56.806"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:56.807" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:56.807" endtime="20170811 20:55:56.807"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:56.807" endtime="20170811 20:55:56.808"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:56.805" endtime="20170811 20:55:56.808"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:56.805" endtime="20170811 20:55:56.808"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:56.808" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:56.808" endtime="20170811 20:55:56.808"></status>
</kw>
<msg timestamp="20170811 20:55:56.808" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:56.497" endtime="20170811 20:55:56.808"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:56.809" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:56.809" endtime="20170811 20:55:56.809"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:56.810" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:56.810" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:56.810" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:56.810" endtime="20170811 20:55:56.810"></status>
</kw>
<msg timestamp="20170811 20:55:56.810" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:55:56.496" endtime="20170811 20:55:56.810"></status>
</kw>
<msg timestamp="20170811 20:55:56.811" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:55:56.496" endtime="20170811 20:55:56.811"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:55:56.811" endtime="20170811 20:55:56.811"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:56.495" endtime="20170811 20:55:56.811"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:56.815" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:56.815" endtime="20170811 20:55:56.816"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:56.816" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:56.816" endtime="20170811 20:55:56.816"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:56.817" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:56.817" endtime="20170811 20:55:56.817"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:56.817" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:56.817" endtime="20170811 20:55:56.818"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:57.020" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:56.818" endtime="20170811 20:55:57.020"></status>
</kw>
<msg timestamp="20170811 20:55:57.020" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:57.020" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:56.818" endtime="20170811 20:55:57.020"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:57.021" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:57.021" endtime="20170811 20:55:57.021"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:57.022" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:57.021" endtime="20170811 20:55:57.022"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:56.814" endtime="20170811 20:55:57.022"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:56.814" endtime="20170811 20:55:57.022"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:56.813" endtime="20170811 20:55:57.022"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:57.023" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:55:57.022" endtime="20170811 20:55:57.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:57.025" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:57.024" endtime="20170811 20:55:57.025"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:57.026" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:57.025" endtime="20170811 20:55:57.026"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.025" endtime="20170811 20:55:57.026"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.023" endtime="20170811 20:55:57.026"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.023" endtime="20170811 20:55:57.026"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:57.115" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:55:57.115" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:57.027" endtime="20170811 20:55:57.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:57.117" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:57.117" endtime="20170811 20:55:57.117"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:57.120" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:57.118" endtime="20170811 20:55:57.121"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.117" endtime="20170811 20:55:57.121"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.116" endtime="20170811 20:55:57.121"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.116" endtime="20170811 20:55:57.121"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:57.121" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:57.121" endtime="20170811 20:55:57.121"></status>
</kw>
<msg timestamp="20170811 20:55:57.122" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:56.812" endtime="20170811 20:55:57.122"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:57.122" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:57.122" endtime="20170811 20:55:57.122"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:57.123" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:57.123" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:57.123" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:57.123" endtime="20170811 20:55:57.123"></status>
</kw>
<msg timestamp="20170811 20:55:57.123" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170811 20:55:56.812" endtime="20170811 20:55:57.123"></status>
</kw>
<msg timestamp="20170811 20:55:57.124" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170811 20:55:56.811" endtime="20170811 20:55:57.124"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:55:57.124" endtime="20170811 20:55:57.124"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:57.129" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:57.129" endtime="20170811 20:55:57.130"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:57.130" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:57.130" endtime="20170811 20:55:57.130"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:57.131" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:57.131" endtime="20170811 20:55:57.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:57.132" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:57.132" endtime="20170811 20:55:57.132"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:57.325" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:57.133" endtime="20170811 20:55:57.325"></status>
</kw>
<msg timestamp="20170811 20:55:57.325" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:57.325" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:57.133" endtime="20170811 20:55:57.325"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:57.326" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:57.326" endtime="20170811 20:55:57.326"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:57.327" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:57.326" endtime="20170811 20:55:57.327"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.129" endtime="20170811 20:55:57.327"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.128" endtime="20170811 20:55:57.327"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.127" endtime="20170811 20:55:57.327"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:57.328" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170811 20:55:57.327" endtime="20170811 20:55:57.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:57.330" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:57.329" endtime="20170811 20:55:57.330"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:57.331" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:57.330" endtime="20170811 20:55:57.331"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.330" endtime="20170811 20:55:57.331"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.328" endtime="20170811 20:55:57.331"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.328" endtime="20170811 20:55:57.331"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:57.396" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170811 20:55:57.397" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:57.331" endtime="20170811 20:55:57.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:57.398" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:57.398" endtime="20170811 20:55:57.398"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:57.399" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:57.399" endtime="20170811 20:55:57.399"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.399" endtime="20170811 20:55:57.399"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.397" endtime="20170811 20:55:57.400"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.397" endtime="20170811 20:55:57.400"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:57.400" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:57.400" endtime="20170811 20:55:57.400"></status>
</kw>
<msg timestamp="20170811 20:55:57.400" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:57.127" endtime="20170811 20:55:57.400"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:57.401" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:57.401" endtime="20170811 20:55:57.401"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:57.402" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:57.402" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:57.402" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:57.401" endtime="20170811 20:55:57.402"></status>
</kw>
<msg timestamp="20170811 20:55:57.402" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170811 20:55:57.126" endtime="20170811 20:55:57.402"></status>
</kw>
<msg timestamp="20170811 20:55:57.402" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170811 20:55:57.126" endtime="20170811 20:55:57.402"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170811 20:55:57.403" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170811 20:55:57.403" endtime="20170811 20:55:57.403"></status>
</kw>
<status status="FAIL" starttime="20170811 20:55:57.125" endtime="20170811 20:55:57.403"></status>
</kw>
<msg timestamp="20170811 20:55:57.403" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 20:55:57.125" endtime="20170811 20:55:57.403"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:55:57.404" endtime="20170811 20:55:57.404"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:55:57.407" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:55:57.407" endtime="20170811 20:55:57.408"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:55:57.409" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:55:57.408" endtime="20170811 20:55:57.409"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:55:57.410" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:55:57.409" endtime="20170811 20:55:57.410"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:55:57.410" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:55:57.410" endtime="20170811 20:55:57.411"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:55:57.675" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:55:57.411" endtime="20170811 20:55:57.675"></status>
</kw>
<msg timestamp="20170811 20:55:57.675" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:55:57.675" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:57.411" endtime="20170811 20:55:57.675"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:55:57.676" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:57.675" endtime="20170811 20:55:57.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:57.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:57.676" endtime="20170811 20:55:57.677"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.407" endtime="20170811 20:55:57.677"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.406" endtime="20170811 20:55:57.677"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.406" endtime="20170811 20:55:57.677"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:55:57.677" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170811 20:55:57.677" endtime="20170811 20:55:57.677"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:57.679" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:57.679" endtime="20170811 20:55:57.680"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:57.680" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:55:57.680" endtime="20170811 20:55:57.681"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.680" endtime="20170811 20:55:57.681"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.678" endtime="20170811 20:55:57.681"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.678" endtime="20170811 20:55:57.681"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:55:57.841" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170811 20:55:57.841" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:57.681" endtime="20170811 20:55:57.841"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:55:57.843" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:57.842" endtime="20170811 20:55:57.843"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:55:57.844" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:55:57.843" endtime="20170811 20:55:57.844"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.843" endtime="20170811 20:55:57.844"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.842" endtime="20170811 20:55:57.844"></status>
</kw>
<status status="PASS" starttime="20170811 20:55:57.841" endtime="20170811 20:55:57.844"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:55:57.844" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:55:57.844" endtime="20170811 20:55:57.844"></status>
</kw>
<msg timestamp="20170811 20:55:57.845" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:55:57.405" endtime="20170811 20:55:57.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:55:57.846" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:55:57.845" endtime="20170811 20:55:57.846"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:55:57.846" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:55:57.846" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:55:57.846" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:55:57.846" endtime="20170811 20:55:57.847"></status>
</kw>
<msg timestamp="20170811 20:55:57.847" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:55:57.404" endtime="20170811 20:55:57.847"></status>
</kw>
<msg timestamp="20170811 20:55:57.847" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:55:57.404" endtime="20170811 20:55:57.847"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170811 20:55:57.848" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170811 20:55:57.848" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170811 20:55:57.847" endtime="20170811 20:55:57.848"></status>
</kw>
<status status="FAIL" starttime="20170811 20:55:57.125" endtime="20170811 20:55:57.848"></status>
</kw>
<status status="FAIL" starttime="20170811 20:55:56.495" endtime="20170811 20:55:57.848"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:56:07.853" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:56:07.853" endtime="20170811 20:56:07.854"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:56:07.854" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:56:07.854" endtime="20170811 20:56:07.854"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:56:07.855" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:56:07.855" endtime="20170811 20:56:07.855"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:56:07.856" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:56:07.855" endtime="20170811 20:56:07.856"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:56:08.151" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:56:07.856" endtime="20170811 20:56:08.151"></status>
</kw>
<msg timestamp="20170811 20:56:08.151" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:56:08.151" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:07.856" endtime="20170811 20:56:08.152"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:56:08.152" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:08.152" endtime="20170811 20:56:08.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:08.153" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:08.152" endtime="20170811 20:56:08.153"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:07.853" endtime="20170811 20:56:08.153"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:07.852" endtime="20170811 20:56:08.153"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:07.852" endtime="20170811 20:56:08.153"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:56:08.154" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:56:08.153" endtime="20170811 20:56:08.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:08.157" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:08.156" endtime="20170811 20:56:08.157"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:08.158" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:08.158" endtime="20170811 20:56:08.158"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:08.157" endtime="20170811 20:56:08.158"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:08.155" endtime="20170811 20:56:08.159"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:08.154" endtime="20170811 20:56:08.159"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:56:11.803" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:56:11.804" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:08.159" endtime="20170811 20:56:11.804"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:11.806" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:11.805" endtime="20170811 20:56:11.806"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:11.806" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:11.806" endtime="20170811 20:56:11.807"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:11.806" endtime="20170811 20:56:11.807"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:11.805" endtime="20170811 20:56:11.807"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:11.804" endtime="20170811 20:56:11.807"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:56:11.807" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:56:11.807" endtime="20170811 20:56:11.807"></status>
</kw>
<msg timestamp="20170811 20:56:11.807" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:07.851" endtime="20170811 20:56:11.808"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:11.808" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:11.808" endtime="20170811 20:56:11.808"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:56:11.809" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:56:11.809" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:56:11.809" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:56:11.808" endtime="20170811 20:56:11.809"></status>
</kw>
<msg timestamp="20170811 20:56:11.809" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:56:07.850" endtime="20170811 20:56:11.809"></status>
</kw>
<msg timestamp="20170811 20:56:11.809" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:56:07.849" endtime="20170811 20:56:11.810"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:56:11.810" endtime="20170811 20:56:11.810"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:07.849" endtime="20170811 20:56:11.810"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:56:11.814" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:56:11.813" endtime="20170811 20:56:11.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:56:11.815" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:56:11.814" endtime="20170811 20:56:11.815"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:56:11.815" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:56:11.815" endtime="20170811 20:56:11.815"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:56:11.816" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:56:11.816" endtime="20170811 20:56:11.816"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:56:12.560" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:56:11.817" endtime="20170811 20:56:12.560"></status>
</kw>
<msg timestamp="20170811 20:56:12.561" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:56:12.561" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:11.816" endtime="20170811 20:56:12.561"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:56:12.561" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:12.561" endtime="20170811 20:56:12.561"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:12.562" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:12.562" endtime="20170811 20:56:12.563"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:11.813" endtime="20170811 20:56:12.563"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:11.812" endtime="20170811 20:56:12.563"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:11.812" endtime="20170811 20:56:12.563"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:56:12.563" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:56:12.563" endtime="20170811 20:56:12.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:12.566" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:12.565" endtime="20170811 20:56:12.566"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:12.568" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:12.567" endtime="20170811 20:56:12.568"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:12.567" endtime="20170811 20:56:12.568"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:12.564" endtime="20170811 20:56:12.568"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:12.564" endtime="20170811 20:56:12.568"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:56:12.823" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:56:12.823" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:12.568" endtime="20170811 20:56:12.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:12.825" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:12.825" endtime="20170811 20:56:12.825"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:12.826" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:12.826" endtime="20170811 20:56:12.826"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:12.825" endtime="20170811 20:56:12.826"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:12.824" endtime="20170811 20:56:12.827"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:12.824" endtime="20170811 20:56:12.827"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:56:12.827" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:56:12.827" endtime="20170811 20:56:12.827"></status>
</kw>
<msg timestamp="20170811 20:56:12.827" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:11.811" endtime="20170811 20:56:12.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:12.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:12.828" endtime="20170811 20:56:12.828"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:56:12.829" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:56:12.829" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:56:12.829" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:56:12.828" endtime="20170811 20:56:12.829"></status>
</kw>
<msg timestamp="20170811 20:56:12.829" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170811 20:56:11.811" endtime="20170811 20:56:12.829"></status>
</kw>
<msg timestamp="20170811 20:56:12.829" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170811 20:56:11.810" endtime="20170811 20:56:12.829"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:56:12.830" endtime="20170811 20:56:12.830"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:56:12.835" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:56:12.835" endtime="20170811 20:56:12.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:56:12.836" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:56:12.836" endtime="20170811 20:56:12.836"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:56:12.836" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:56:12.836" endtime="20170811 20:56:12.837"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:56:12.837" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:56:12.837" endtime="20170811 20:56:12.837"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:56:13.102" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:56:12.838" endtime="20170811 20:56:13.102"></status>
</kw>
<msg timestamp="20170811 20:56:13.102" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:56:13.102" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:12.837" endtime="20170811 20:56:13.102"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:56:13.103" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:13.103" endtime="20170811 20:56:13.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:13.104" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:13.103" endtime="20170811 20:56:13.104"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:12.834" endtime="20170811 20:56:13.104"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:12.833" endtime="20170811 20:56:13.104"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:12.833" endtime="20170811 20:56:13.104"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:56:13.105" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170811 20:56:13.105" endtime="20170811 20:56:13.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:13.107" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:13.106" endtime="20170811 20:56:13.107"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:13.108" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:13.108" endtime="20170811 20:56:13.108"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:13.107" endtime="20170811 20:56:13.108"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:13.106" endtime="20170811 20:56:13.108"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:13.105" endtime="20170811 20:56:13.108"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:56:13.175" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170811 20:56:13.175" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:13.109" endtime="20170811 20:56:13.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:13.177" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:13.176" endtime="20170811 20:56:13.177"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:13.178" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:13.178" endtime="20170811 20:56:13.178"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:13.177" endtime="20170811 20:56:13.178"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:13.176" endtime="20170811 20:56:13.179"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:13.175" endtime="20170811 20:56:13.179"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:56:13.179" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:56:13.179" endtime="20170811 20:56:13.179"></status>
</kw>
<msg timestamp="20170811 20:56:13.179" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:12.832" endtime="20170811 20:56:13.179"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:13.180" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:13.180" endtime="20170811 20:56:13.180"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:56:13.180" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:56:13.181" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:56:13.181" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:56:13.180" endtime="20170811 20:56:13.181"></status>
</kw>
<msg timestamp="20170811 20:56:13.181" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170811 20:56:12.832" endtime="20170811 20:56:13.181"></status>
</kw>
<msg timestamp="20170811 20:56:13.181" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170811 20:56:12.831" endtime="20170811 20:56:13.181"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170811 20:56:13.182" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170811 20:56:13.182" endtime="20170811 20:56:13.182"></status>
</kw>
<status status="FAIL" starttime="20170811 20:56:12.831" endtime="20170811 20:56:13.182"></status>
</kw>
<msg timestamp="20170811 20:56:13.182" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 20:56:12.831" endtime="20170811 20:56:13.182"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:56:13.183" endtime="20170811 20:56:13.183"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:56:13.187" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:56:13.186" endtime="20170811 20:56:13.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:56:13.188" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:56:13.187" endtime="20170811 20:56:13.188"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:56:13.188" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:56:13.188" endtime="20170811 20:56:13.188"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:56:13.189" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:56:13.188" endtime="20170811 20:56:13.189"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:56:13.377" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:56:13.190" endtime="20170811 20:56:13.377"></status>
</kw>
<msg timestamp="20170811 20:56:13.377" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:56:13.377" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:13.189" endtime="20170811 20:56:13.377"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:56:13.378" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:13.378" endtime="20170811 20:56:13.378"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:13.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:13.378" endtime="20170811 20:56:13.379"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:13.186" endtime="20170811 20:56:13.379"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:13.185" endtime="20170811 20:56:13.379"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:13.185" endtime="20170811 20:56:13.379"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:56:13.380" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170811 20:56:13.379" endtime="20170811 20:56:13.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:13.382" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:13.381" endtime="20170811 20:56:13.382"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:13.383" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:13.383" endtime="20170811 20:56:13.383"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:13.382" endtime="20170811 20:56:13.383"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:13.380" endtime="20170811 20:56:13.383"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:13.380" endtime="20170811 20:56:13.383"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:56:13.481" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170811 20:56:13.481" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:13.384" endtime="20170811 20:56:13.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:13.483" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:13.482" endtime="20170811 20:56:13.483"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:13.484" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:13.483" endtime="20170811 20:56:13.484"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:13.483" endtime="20170811 20:56:13.484"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:13.482" endtime="20170811 20:56:13.484"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:13.481" endtime="20170811 20:56:13.484"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:56:13.484" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:56:13.484" endtime="20170811 20:56:13.485"></status>
</kw>
<msg timestamp="20170811 20:56:13.485" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:13.184" endtime="20170811 20:56:13.485"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:13.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:13.485" endtime="20170811 20:56:13.485"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:56:13.486" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:56:13.486" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:56:13.486" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:56:13.486" endtime="20170811 20:56:13.486"></status>
</kw>
<msg timestamp="20170811 20:56:13.487" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:56:13.183" endtime="20170811 20:56:13.487"></status>
</kw>
<msg timestamp="20170811 20:56:13.487" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:56:13.183" endtime="20170811 20:56:13.487"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170811 20:56:13.487" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170811 20:56:13.488" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170811 20:56:13.487" endtime="20170811 20:56:13.488"></status>
</kw>
<status status="FAIL" starttime="20170811 20:56:12.830" endtime="20170811 20:56:13.488"></status>
</kw>
<status status="FAIL" starttime="20170811 20:56:07.849" endtime="20170811 20:56:13.488"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:56:23.493" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:56:23.492" endtime="20170811 20:56:23.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:56:23.494" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:56:23.493" endtime="20170811 20:56:23.494"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:56:23.494" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:56:23.494" endtime="20170811 20:56:23.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:56:23.495" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:56:23.495" endtime="20170811 20:56:23.495"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:56:24.089" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:56:23.496" endtime="20170811 20:56:24.089"></status>
</kw>
<msg timestamp="20170811 20:56:24.089" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:56:24.089" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:23.495" endtime="20170811 20:56:24.089"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:56:24.090" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:24.090" endtime="20170811 20:56:24.090"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:24.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:24.090" endtime="20170811 20:56:24.091"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:23.492" endtime="20170811 20:56:24.091"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:23.491" endtime="20170811 20:56:24.091"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:23.491" endtime="20170811 20:56:24.091"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:56:24.092" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:56:24.091" endtime="20170811 20:56:24.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:24.094" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:24.093" endtime="20170811 20:56:24.094"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:24.095" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:24.094" endtime="20170811 20:56:24.095"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:24.094" endtime="20170811 20:56:24.095"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:24.093" endtime="20170811 20:56:24.095"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:24.092" endtime="20170811 20:56:24.095"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:56:30.473" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:56:30.474" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:24.095" endtime="20170811 20:56:30.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:30.476" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:30.475" endtime="20170811 20:56:30.476"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:30.477" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:30.476" endtime="20170811 20:56:30.477"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:30.476" endtime="20170811 20:56:30.477"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:30.475" endtime="20170811 20:56:30.477"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:30.474" endtime="20170811 20:56:30.477"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:56:30.477" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:56:30.477" endtime="20170811 20:56:30.478"></status>
</kw>
<msg timestamp="20170811 20:56:30.478" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:23.490" endtime="20170811 20:56:30.478"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:30.479" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:30.478" endtime="20170811 20:56:30.479"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:56:30.480" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:56:30.480" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:56:30.480" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:56:30.479" endtime="20170811 20:56:30.480"></status>
</kw>
<msg timestamp="20170811 20:56:30.480" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170811 20:56:23.490" endtime="20170811 20:56:30.480"></status>
</kw>
<msg timestamp="20170811 20:56:30.480" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170811 20:56:23.489" endtime="20170811 20:56:30.480"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170811 20:56:30.481" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170811 20:56:30.481" endtime="20170811 20:56:30.481"></status>
</kw>
<status status="FAIL" starttime="20170811 20:56:23.489" endtime="20170811 20:56:30.481"></status>
</kw>
<status status="FAIL" starttime="20170811 20:56:23.488" endtime="20170811 20:56:30.482"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:56:40.487" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:56:40.486" endtime="20170811 20:56:40.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:56:40.488" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:56:40.487" endtime="20170811 20:56:40.488"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:56:40.488" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:56:40.488" endtime="20170811 20:56:40.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:56:40.489" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:56:40.489" endtime="20170811 20:56:40.489"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:56:40.696" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:56:40.490" endtime="20170811 20:56:40.696"></status>
</kw>
<msg timestamp="20170811 20:56:40.696" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:56:40.696" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:40.489" endtime="20170811 20:56:40.696"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:56:40.697" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:40.696" endtime="20170811 20:56:40.697"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:40.697" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:40.697" endtime="20170811 20:56:40.697"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:40.486" endtime="20170811 20:56:40.697"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:40.485" endtime="20170811 20:56:40.698"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:40.484" endtime="20170811 20:56:40.698"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:56:40.698" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:56:40.698" endtime="20170811 20:56:40.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:40.700" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:40.700" endtime="20170811 20:56:40.701"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:40.701" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:40.701" endtime="20170811 20:56:40.702"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:40.701" endtime="20170811 20:56:40.702"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:40.699" endtime="20170811 20:56:40.702"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:40.699" endtime="20170811 20:56:40.702"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:56:40.863" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:56:40.863" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:40.702" endtime="20170811 20:56:40.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:40.866" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:40.865" endtime="20170811 20:56:40.866"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:40.866" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:40.866" endtime="20170811 20:56:40.867"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:40.866" endtime="20170811 20:56:40.867"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:40.864" endtime="20170811 20:56:40.867"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:40.864" endtime="20170811 20:56:40.867"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:56:40.867" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:56:40.867" endtime="20170811 20:56:40.867"></status>
</kw>
<msg timestamp="20170811 20:56:40.868" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:40.484" endtime="20170811 20:56:40.868"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:40.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:40.868" endtime="20170811 20:56:40.868"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:56:40.869" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:56:40.869" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:56:40.869" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:56:40.869" endtime="20170811 20:56:40.869"></status>
</kw>
<msg timestamp="20170811 20:56:40.869" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170811 20:56:40.483" endtime="20170811 20:56:40.869"></status>
</kw>
<msg timestamp="20170811 20:56:40.870" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170811 20:56:40.483" endtime="20170811 20:56:40.870"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170811 20:56:40.870" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170811 20:56:40.870" endtime="20170811 20:56:40.870"></status>
</kw>
<status status="FAIL" starttime="20170811 20:56:40.482" endtime="20170811 20:56:40.870"></status>
</kw>
<status status="FAIL" starttime="20170811 20:56:40.482" endtime="20170811 20:56:40.871"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:56:50.876" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:56:50.875" endtime="20170811 20:56:50.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:56:50.877" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:56:50.876" endtime="20170811 20:56:50.877"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:56:50.877" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:56:50.877" endtime="20170811 20:56:50.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:56:50.878" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:56:50.878" endtime="20170811 20:56:50.878"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:56:51.058" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:56:50.879" endtime="20170811 20:56:51.058"></status>
</kw>
<msg timestamp="20170811 20:56:51.058" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:56:51.058" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:50.878" endtime="20170811 20:56:51.058"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:56:51.059" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.058" endtime="20170811 20:56:51.059"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:51.060" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.059" endtime="20170811 20:56:51.060"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:50.875" endtime="20170811 20:56:51.060"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:50.874" endtime="20170811 20:56:51.060"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:50.874" endtime="20170811 20:56:51.060"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:56:51.061" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:56:51.060" endtime="20170811 20:56:51.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:51.063" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:51.062" endtime="20170811 20:56:51.063"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:51.064" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:51.063" endtime="20170811 20:56:51.064"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.063" endtime="20170811 20:56:51.064"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.061" endtime="20170811 20:56:51.064"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.061" endtime="20170811 20:56:51.064"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:56:51.147" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:56:51.147" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.064" endtime="20170811 20:56:51.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:51.149" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:51.149" endtime="20170811 20:56:51.149"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:51.150" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:51.150" endtime="20170811 20:56:51.150"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.149" endtime="20170811 20:56:51.150"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.148" endtime="20170811 20:56:51.150"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.148" endtime="20170811 20:56:51.150"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:56:51.151" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:56:51.151" endtime="20170811 20:56:51.151"></status>
</kw>
<msg timestamp="20170811 20:56:51.151" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:50.873" endtime="20170811 20:56:51.151"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:51.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.151" endtime="20170811 20:56:51.152"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:56:51.152" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:56:51.152" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:56:51.153" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:56:51.152" endtime="20170811 20:56:51.153"></status>
</kw>
<msg timestamp="20170811 20:56:51.153" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:56:50.872" endtime="20170811 20:56:51.153"></status>
</kw>
<msg timestamp="20170811 20:56:51.153" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:56:50.872" endtime="20170811 20:56:51.153"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:56:51.154" endtime="20170811 20:56:51.154"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:50.872" endtime="20170811 20:56:51.154"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:56:51.157" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:56:51.157" endtime="20170811 20:56:51.158"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:56:51.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:56:51.158" endtime="20170811 20:56:51.159"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:56:51.159" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:56:51.159" endtime="20170811 20:56:51.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:56:51.160" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:56:51.160" endtime="20170811 20:56:51.160"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:56:51.368" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:56:51.161" endtime="20170811 20:56:51.368"></status>
</kw>
<msg timestamp="20170811 20:56:51.368" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:56:51.368" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.160" endtime="20170811 20:56:51.368"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:56:51.369" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.369" endtime="20170811 20:56:51.369"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:51.370" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.369" endtime="20170811 20:56:51.370"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.157" endtime="20170811 20:56:51.370"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.156" endtime="20170811 20:56:51.370"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.156" endtime="20170811 20:56:51.370"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:56:51.371" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:56:51.370" endtime="20170811 20:56:51.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:51.373" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:51.372" endtime="20170811 20:56:51.373"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:51.374" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:51.374" endtime="20170811 20:56:51.374"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.373" endtime="20170811 20:56:51.374"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.372" endtime="20170811 20:56:51.374"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.371" endtime="20170811 20:56:51.374"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:56:51.486" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:56:51.486" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.374" endtime="20170811 20:56:51.486"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:51.488" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:51.487" endtime="20170811 20:56:51.488"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:51.489" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:51.488" endtime="20170811 20:56:51.489"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.488" endtime="20170811 20:56:51.489"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.487" endtime="20170811 20:56:51.489"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.486" endtime="20170811 20:56:51.489"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:56:51.489" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:56:51.489" endtime="20170811 20:56:51.489"></status>
</kw>
<msg timestamp="20170811 20:56:51.490" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.155" endtime="20170811 20:56:51.490"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:51.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.490" endtime="20170811 20:56:51.490"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:56:51.491" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:56:51.491" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:56:51.491" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:56:51.491" endtime="20170811 20:56:51.491"></status>
</kw>
<msg timestamp="20170811 20:56:51.492" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170811 20:56:51.154" endtime="20170811 20:56:51.492"></status>
</kw>
<msg timestamp="20170811 20:56:51.492" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170811 20:56:51.154" endtime="20170811 20:56:51.492"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:56:51.492" endtime="20170811 20:56:51.492"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:56:51.497" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:56:51.497" endtime="20170811 20:56:51.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:56:51.498" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:56:51.498" endtime="20170811 20:56:51.498"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:56:51.499" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:56:51.499" endtime="20170811 20:56:51.499"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:56:51.500" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:56:51.499" endtime="20170811 20:56:51.500"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:56:51.728" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:56:51.500" endtime="20170811 20:56:51.728"></status>
</kw>
<msg timestamp="20170811 20:56:51.728" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:56:51.728" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.500" endtime="20170811 20:56:51.728"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:56:51.729" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.729" endtime="20170811 20:56:51.729"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:51.730" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.729" endtime="20170811 20:56:51.730"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.496" endtime="20170811 20:56:51.730"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.496" endtime="20170811 20:56:51.730"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.495" endtime="20170811 20:56:51.730"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:56:51.731" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170811 20:56:51.730" endtime="20170811 20:56:51.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:51.733" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:51.732" endtime="20170811 20:56:51.733"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:51.734" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:51.734" endtime="20170811 20:56:51.734"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.733" endtime="20170811 20:56:51.734"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.732" endtime="20170811 20:56:51.734"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.731" endtime="20170811 20:56:51.734"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:56:51.826" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170811 20:56:51.826" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.735" endtime="20170811 20:56:51.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:51.828" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:51.828" endtime="20170811 20:56:51.828"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:51.829" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:51.829" endtime="20170811 20:56:51.829"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.828" endtime="20170811 20:56:51.829"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.827" endtime="20170811 20:56:51.830"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.827" endtime="20170811 20:56:51.830"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:56:51.830" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:56:51.830" endtime="20170811 20:56:51.830"></status>
</kw>
<msg timestamp="20170811 20:56:51.830" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.495" endtime="20170811 20:56:51.830"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:51.831" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.831" endtime="20170811 20:56:51.831"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:56:51.832" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:56:51.832" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:56:51.832" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:56:51.831" endtime="20170811 20:56:51.832"></status>
</kw>
<msg timestamp="20170811 20:56:51.832" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170811 20:56:51.494" endtime="20170811 20:56:51.832"></status>
</kw>
<msg timestamp="20170811 20:56:51.832" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170811 20:56:51.494" endtime="20170811 20:56:51.832"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170811 20:56:51.833" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170811 20:56:51.833" endtime="20170811 20:56:51.833"></status>
</kw>
<status status="FAIL" starttime="20170811 20:56:51.493" endtime="20170811 20:56:51.833"></status>
</kw>
<msg timestamp="20170811 20:56:51.833" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 20:56:51.493" endtime="20170811 20:56:51.833"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:56:51.834" endtime="20170811 20:56:51.834"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:56:51.837" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:56:51.837" endtime="20170811 20:56:51.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:56:51.838" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:56:51.838" endtime="20170811 20:56:51.838"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:56:51.839" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:56:51.839" endtime="20170811 20:56:51.839"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:56:51.840" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:56:51.839" endtime="20170811 20:56:51.840"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:56:52.058" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:56:51.840" endtime="20170811 20:56:52.058"></status>
</kw>
<msg timestamp="20170811 20:56:52.058" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:56:52.058" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.840" endtime="20170811 20:56:52.058"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:56:52.059" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:52.058" endtime="20170811 20:56:52.059"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:52.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:52.059" endtime="20170811 20:56:52.059"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.837" endtime="20170811 20:56:52.059"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.836" endtime="20170811 20:56:52.060"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:51.836" endtime="20170811 20:56:52.060"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:56:52.060" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170811 20:56:52.060" endtime="20170811 20:56:52.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:52.062" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:52.062" endtime="20170811 20:56:52.062"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:52.063" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:56:52.063" endtime="20170811 20:56:52.063"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:52.063" endtime="20170811 20:56:52.063"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:52.061" endtime="20170811 20:56:52.064"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:52.061" endtime="20170811 20:56:52.064"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:56:52.154" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170811 20:56:52.154" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:52.064" endtime="20170811 20:56:52.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:56:52.156" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:52.155" endtime="20170811 20:56:52.156"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:56:52.156" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:56:52.156" endtime="20170811 20:56:52.157"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:52.156" endtime="20170811 20:56:52.157"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:52.155" endtime="20170811 20:56:52.157"></status>
</kw>
<status status="PASS" starttime="20170811 20:56:52.154" endtime="20170811 20:56:52.157"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:56:52.157" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:56:52.157" endtime="20170811 20:56:52.157"></status>
</kw>
<msg timestamp="20170811 20:56:52.158" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:56:51.835" endtime="20170811 20:56:52.158"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:56:52.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:56:52.158" endtime="20170811 20:56:52.158"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:56:52.159" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:56:52.159" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:56:52.159" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:56:52.158" endtime="20170811 20:56:52.159"></status>
</kw>
<msg timestamp="20170811 20:56:52.159" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:56:51.834" endtime="20170811 20:56:52.159"></status>
</kw>
<msg timestamp="20170811 20:56:52.160" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:56:51.834" endtime="20170811 20:56:52.160"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170811 20:56:52.160" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170811 20:56:52.160" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170811 20:56:52.160" endtime="20170811 20:56:52.160"></status>
</kw>
<status status="FAIL" starttime="20170811 20:56:51.493" endtime="20170811 20:56:52.160"></status>
</kw>
<status status="FAIL" starttime="20170811 20:56:50.871" endtime="20170811 20:56:52.161"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:57:02.166" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:57:02.166" endtime="20170811 20:57:02.166"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:57:02.167" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:57:02.167" endtime="20170811 20:57:02.167"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:57:02.168" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:57:02.167" endtime="20170811 20:57:02.168"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:57:02.168" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:57:02.168" endtime="20170811 20:57:02.168"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:57:02.343" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:57:02.169" endtime="20170811 20:57:02.343"></status>
</kw>
<msg timestamp="20170811 20:57:02.343" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:57:02.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:02.169" endtime="20170811 20:57:02.343"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:57:02.344" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:02.343" endtime="20170811 20:57:02.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:02.345" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:02.344" endtime="20170811 20:57:02.345"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.165" endtime="20170811 20:57:02.345"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.164" endtime="20170811 20:57:02.345"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.164" endtime="20170811 20:57:02.345"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:57:02.345" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:57:02.345" endtime="20170811 20:57:02.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:02.348" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:02.347" endtime="20170811 20:57:02.348"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:02.349" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:02.348" endtime="20170811 20:57:02.349"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.348" endtime="20170811 20:57:02.349"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.346" endtime="20170811 20:57:02.349"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.346" endtime="20170811 20:57:02.349"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:57:02.433" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:57:02.433" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:02.349" endtime="20170811 20:57:02.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:02.434" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:02.434" endtime="20170811 20:57:02.434"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:02.436" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:02.435" endtime="20170811 20:57:02.436"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.435" endtime="20170811 20:57:02.436"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.433" endtime="20170811 20:57:02.436"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.433" endtime="20170811 20:57:02.436"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:57:02.436" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:57:02.436" endtime="20170811 20:57:02.437"></status>
</kw>
<msg timestamp="20170811 20:57:02.437" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:02.163" endtime="20170811 20:57:02.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:02.437" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:02.437" endtime="20170811 20:57:02.437"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:57:02.438" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:57:02.438" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:57:02.438" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:57:02.438" endtime="20170811 20:57:02.438"></status>
</kw>
<msg timestamp="20170811 20:57:02.438" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:57:02.163" endtime="20170811 20:57:02.438"></status>
</kw>
<msg timestamp="20170811 20:57:02.439" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:57:02.162" endtime="20170811 20:57:02.439"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:57:02.439" endtime="20170811 20:57:02.439"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.162" endtime="20170811 20:57:02.439"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:57:02.443" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:57:02.443" endtime="20170811 20:57:02.443"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:57:02.444" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:57:02.444" endtime="20170811 20:57:02.444"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:57:02.445" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:57:02.444" endtime="20170811 20:57:02.445"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:57:02.445" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:57:02.445" endtime="20170811 20:57:02.445"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:57:02.770" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:57:02.446" endtime="20170811 20:57:02.770"></status>
</kw>
<msg timestamp="20170811 20:57:02.770" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:57:02.770" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:02.446" endtime="20170811 20:57:02.770"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:57:02.771" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:02.771" endtime="20170811 20:57:02.771"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:02.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:02.771" endtime="20170811 20:57:02.772"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.442" endtime="20170811 20:57:02.772"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.442" endtime="20170811 20:57:02.772"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.441" endtime="20170811 20:57:02.772"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:57:02.773" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:57:02.772" endtime="20170811 20:57:02.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:02.775" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:02.774" endtime="20170811 20:57:02.775"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:02.776" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:02.776" endtime="20170811 20:57:02.776"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.775" endtime="20170811 20:57:02.776"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.773" endtime="20170811 20:57:02.776"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.773" endtime="20170811 20:57:02.776"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:57:02.865" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:57:02.865" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:02.777" endtime="20170811 20:57:02.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:02.867" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:02.867" endtime="20170811 20:57:02.867"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:02.868" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:02.868" endtime="20170811 20:57:02.868"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.867" endtime="20170811 20:57:02.868"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.866" endtime="20170811 20:57:02.868"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.866" endtime="20170811 20:57:02.868"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:57:02.869" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:57:02.869" endtime="20170811 20:57:02.869"></status>
</kw>
<msg timestamp="20170811 20:57:02.869" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:02.441" endtime="20170811 20:57:02.869"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:02.870" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:02.869" endtime="20170811 20:57:02.870"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:57:02.870" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:57:02.870" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:57:02.871" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:57:02.870" endtime="20170811 20:57:02.871"></status>
</kw>
<msg timestamp="20170811 20:57:02.871" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170811 20:57:02.440" endtime="20170811 20:57:02.871"></status>
</kw>
<msg timestamp="20170811 20:57:02.871" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170811 20:57:02.440" endtime="20170811 20:57:02.871"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:57:02.871" endtime="20170811 20:57:02.872"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:57:02.876" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:57:02.876" endtime="20170811 20:57:02.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:57:02.878" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:57:02.877" endtime="20170811 20:57:02.878"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:57:02.878" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:57:02.878" endtime="20170811 20:57:02.878"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:57:02.879" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:57:02.879" endtime="20170811 20:57:02.879"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:57:03.092" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:57:02.880" endtime="20170811 20:57:03.092"></status>
</kw>
<msg timestamp="20170811 20:57:03.092" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:57:03.092" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:02.879" endtime="20170811 20:57:03.092"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:57:03.093" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:03.092" endtime="20170811 20:57:03.093"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:03.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:03.093" endtime="20170811 20:57:03.093"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.875" endtime="20170811 20:57:03.094"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.875" endtime="20170811 20:57:03.094"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:02.875" endtime="20170811 20:57:03.094"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:57:03.094" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170811 20:57:03.094" endtime="20170811 20:57:03.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:03.096" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:03.096" endtime="20170811 20:57:03.096"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:03.097" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:03.097" endtime="20170811 20:57:03.097"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:03.097" endtime="20170811 20:57:03.098"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:03.095" endtime="20170811 20:57:03.098"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:03.095" endtime="20170811 20:57:03.098"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:57:03.180" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170811 20:57:03.180" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:03.098" endtime="20170811 20:57:03.180"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:03.182" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:03.181" endtime="20170811 20:57:03.182"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:03.183" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:03.183" endtime="20170811 20:57:03.183"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:03.182" endtime="20170811 20:57:03.183"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:03.181" endtime="20170811 20:57:03.183"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:03.181" endtime="20170811 20:57:03.183"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:57:03.184" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:57:03.184" endtime="20170811 20:57:03.184"></status>
</kw>
<msg timestamp="20170811 20:57:03.184" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:02.874" endtime="20170811 20:57:03.184"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:03.185" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:03.184" endtime="20170811 20:57:03.185"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:57:03.185" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:57:03.185" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:57:03.185" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:57:03.185" endtime="20170811 20:57:03.185"></status>
</kw>
<msg timestamp="20170811 20:57:03.186" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170811 20:57:02.873" endtime="20170811 20:57:03.186"></status>
</kw>
<msg timestamp="20170811 20:57:03.186" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170811 20:57:02.873" endtime="20170811 20:57:03.186"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170811 20:57:03.187" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170811 20:57:03.186" endtime="20170811 20:57:03.187"></status>
</kw>
<status status="FAIL" starttime="20170811 20:57:02.873" endtime="20170811 20:57:03.187"></status>
</kw>
<msg timestamp="20170811 20:57:03.187" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 20:57:02.872" endtime="20170811 20:57:03.187"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:57:03.187" endtime="20170811 20:57:03.187"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:57:03.191" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:57:03.191" endtime="20170811 20:57:03.192"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:57:03.192" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:57:03.192" endtime="20170811 20:57:03.193"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:57:03.193" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:57:03.193" endtime="20170811 20:57:03.193"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:57:03.194" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:57:03.193" endtime="20170811 20:57:03.194"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:57:03.371" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:57:03.194" endtime="20170811 20:57:03.371"></status>
</kw>
<msg timestamp="20170811 20:57:03.371" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:57:03.371" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:03.194" endtime="20170811 20:57:03.371"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:57:03.372" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:03.371" endtime="20170811 20:57:03.372"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:03.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:03.372" endtime="20170811 20:57:03.373"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:03.191" endtime="20170811 20:57:03.373"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:03.190" endtime="20170811 20:57:03.373"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:03.189" endtime="20170811 20:57:03.373"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:57:03.374" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170811 20:57:03.373" endtime="20170811 20:57:03.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:03.376" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:03.375" endtime="20170811 20:57:03.376"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:03.376" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:03.376" endtime="20170811 20:57:03.377"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:03.376" endtime="20170811 20:57:03.377"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:03.374" endtime="20170811 20:57:03.377"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:03.374" endtime="20170811 20:57:03.377"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:57:03.466" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170811 20:57:03.466" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:03.377" endtime="20170811 20:57:03.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:03.468" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:03.468" endtime="20170811 20:57:03.468"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:03.469" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:03.469" endtime="20170811 20:57:03.470"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:03.469" endtime="20170811 20:57:03.470"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:03.467" endtime="20170811 20:57:03.470"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:03.467" endtime="20170811 20:57:03.470"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:57:03.470" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:57:03.470" endtime="20170811 20:57:03.470"></status>
</kw>
<msg timestamp="20170811 20:57:03.470" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:03.189" endtime="20170811 20:57:03.471"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:03.471" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:03.471" endtime="20170811 20:57:03.471"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:57:03.472" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:57:03.472" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:57:03.472" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:57:03.471" endtime="20170811 20:57:03.472"></status>
</kw>
<msg timestamp="20170811 20:57:03.472" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:57:03.188" endtime="20170811 20:57:03.472"></status>
</kw>
<msg timestamp="20170811 20:57:03.472" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:57:03.188" endtime="20170811 20:57:03.472"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170811 20:57:03.473" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170811 20:57:03.473" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170811 20:57:03.473" endtime="20170811 20:57:03.473"></status>
</kw>
<status status="FAIL" starttime="20170811 20:57:02.872" endtime="20170811 20:57:03.473"></status>
</kw>
<status status="FAIL" starttime="20170811 20:57:02.161" endtime="20170811 20:57:03.474"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:57:13.478" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:57:13.478" endtime="20170811 20:57:13.479"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:57:13.479" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:57:13.479" endtime="20170811 20:57:13.479"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:57:13.480" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:57:13.480" endtime="20170811 20:57:13.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:57:13.481" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:57:13.480" endtime="20170811 20:57:13.481"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:57:13.670" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:57:13.481" endtime="20170811 20:57:13.670"></status>
</kw>
<msg timestamp="20170811 20:57:13.670" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:57:13.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:13.481" endtime="20170811 20:57:13.670"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:57:13.671" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:13.670" endtime="20170811 20:57:13.671"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:13.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:13.671" endtime="20170811 20:57:13.671"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:13.478" endtime="20170811 20:57:13.672"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:13.477" endtime="20170811 20:57:13.672"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:13.477" endtime="20170811 20:57:13.672"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:57:13.673" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:57:13.672" endtime="20170811 20:57:13.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:13.675" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:13.674" endtime="20170811 20:57:13.675"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:13.675" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:13.675" endtime="20170811 20:57:13.676"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:13.675" endtime="20170811 20:57:13.676"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:13.673" endtime="20170811 20:57:13.676"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:13.673" endtime="20170811 20:57:13.676"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:57:13.738" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:57:13.739" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:13.676" endtime="20170811 20:57:13.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:13.740" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:13.740" endtime="20170811 20:57:13.740"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:13.741" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:13.741" endtime="20170811 20:57:13.742"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:13.740" endtime="20170811 20:57:13.742"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:13.739" endtime="20170811 20:57:13.742"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:13.739" endtime="20170811 20:57:13.742"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:57:13.742" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:57:13.742" endtime="20170811 20:57:13.742"></status>
</kw>
<msg timestamp="20170811 20:57:13.743" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:13.476" endtime="20170811 20:57:13.743"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:13.743" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:13.743" endtime="20170811 20:57:13.743"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:57:13.744" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:57:13.744" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:57:13.744" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:57:13.744" endtime="20170811 20:57:13.744"></status>
</kw>
<msg timestamp="20170811 20:57:13.745" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:57:13.475" endtime="20170811 20:57:13.745"></status>
</kw>
<msg timestamp="20170811 20:57:13.745" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:57:13.475" endtime="20170811 20:57:13.745"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:57:13.746" endtime="20170811 20:57:13.746"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:13.475" endtime="20170811 20:57:13.746"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:57:13.750" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:57:13.749" endtime="20170811 20:57:13.753"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:57:13.753" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:57:13.753" endtime="20170811 20:57:13.754"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:57:13.754" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:57:13.754" endtime="20170811 20:57:13.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:57:13.755" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:57:13.755" endtime="20170811 20:57:13.755"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:57:13.955" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:57:13.756" endtime="20170811 20:57:13.955"></status>
</kw>
<msg timestamp="20170811 20:57:13.955" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:57:13.955" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:13.755" endtime="20170811 20:57:13.955"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:57:13.956" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:13.956" endtime="20170811 20:57:13.956"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:13.957" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:13.956" endtime="20170811 20:57:13.957"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:13.749" endtime="20170811 20:57:13.957"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:13.748" endtime="20170811 20:57:13.957"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:13.748" endtime="20170811 20:57:13.957"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:57:13.958" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:57:13.957" endtime="20170811 20:57:13.958"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:13.960" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:13.959" endtime="20170811 20:57:13.960"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:13.961" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:13.960" endtime="20170811 20:57:13.961"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:13.960" endtime="20170811 20:57:13.961"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:13.958" endtime="20170811 20:57:13.961"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:13.958" endtime="20170811 20:57:13.961"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:57:14.050" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:57:14.051" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:13.961" endtime="20170811 20:57:14.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:14.052" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:14.052" endtime="20170811 20:57:14.052"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:14.053" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:14.053" endtime="20170811 20:57:14.053"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:14.053" endtime="20170811 20:57:14.053"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:14.051" endtime="20170811 20:57:14.054"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:14.051" endtime="20170811 20:57:14.054"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:57:14.054" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:57:14.054" endtime="20170811 20:57:14.054"></status>
</kw>
<msg timestamp="20170811 20:57:14.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:13.747" endtime="20170811 20:57:14.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:14.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:14.055" endtime="20170811 20:57:14.055"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:57:14.056" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:57:14.056" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:57:14.056" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:57:14.055" endtime="20170811 20:57:14.056"></status>
</kw>
<msg timestamp="20170811 20:57:14.056" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170811 20:57:13.747" endtime="20170811 20:57:14.056"></status>
</kw>
<msg timestamp="20170811 20:57:14.056" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170811 20:57:13.746" endtime="20170811 20:57:14.056"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:57:14.057" endtime="20170811 20:57:14.057"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:57:14.062" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:57:14.061" endtime="20170811 20:57:14.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:57:14.063" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:57:14.062" endtime="20170811 20:57:14.063"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:57:14.063" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:57:14.063" endtime="20170811 20:57:14.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:57:14.064" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:57:14.063" endtime="20170811 20:57:14.064"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:57:14.264" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:57:14.065" endtime="20170811 20:57:14.264"></status>
</kw>
<msg timestamp="20170811 20:57:14.264" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:57:14.264" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:14.064" endtime="20170811 20:57:14.264"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:57:14.265" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:14.264" endtime="20170811 20:57:14.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:14.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:14.265" endtime="20170811 20:57:14.265"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:14.061" endtime="20170811 20:57:14.266"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:14.060" endtime="20170811 20:57:14.266"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:14.060" endtime="20170811 20:57:14.266"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:57:14.266" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170811 20:57:14.266" endtime="20170811 20:57:14.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:14.269" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:14.268" endtime="20170811 20:57:14.269"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:14.270" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:14.269" endtime="20170811 20:57:14.270"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:14.269" endtime="20170811 20:57:14.270"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:14.267" endtime="20170811 20:57:14.270"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:14.267" endtime="20170811 20:57:14.270"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:57:14.761" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170811 20:57:14.761" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:14.270" endtime="20170811 20:57:14.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:14.763" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:14.762" endtime="20170811 20:57:14.763"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:14.764" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:14.764" endtime="20170811 20:57:14.764"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:14.763" endtime="20170811 20:57:14.764"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:14.762" endtime="20170811 20:57:14.764"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:14.761" endtime="20170811 20:57:14.764"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:57:14.765" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:57:14.764" endtime="20170811 20:57:14.765"></status>
</kw>
<msg timestamp="20170811 20:57:14.765" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:14.059" endtime="20170811 20:57:14.765"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:14.765" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:14.765" endtime="20170811 20:57:14.766"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:57:14.766" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:57:14.766" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:57:14.766" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:57:14.766" endtime="20170811 20:57:14.766"></status>
</kw>
<msg timestamp="20170811 20:57:14.767" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170811 20:57:14.059" endtime="20170811 20:57:14.767"></status>
</kw>
<msg timestamp="20170811 20:57:14.767" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170811 20:57:14.058" endtime="20170811 20:57:14.767"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170811 20:57:14.767" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170811 20:57:14.767" endtime="20170811 20:57:14.768"></status>
</kw>
<status status="FAIL" starttime="20170811 20:57:14.058" endtime="20170811 20:57:14.768"></status>
</kw>
<msg timestamp="20170811 20:57:14.768" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 20:57:14.057" endtime="20170811 20:57:14.768"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:57:14.768" endtime="20170811 20:57:14.768"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:57:14.772" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:57:14.772" endtime="20170811 20:57:14.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:57:14.773" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:57:14.773" endtime="20170811 20:57:14.773"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:57:14.774" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:57:14.773" endtime="20170811 20:57:14.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:57:14.774" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:57:14.774" endtime="20170811 20:57:14.774"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:57:15.203" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:57:14.775" endtime="20170811 20:57:15.203"></status>
</kw>
<msg timestamp="20170811 20:57:15.204" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:57:15.204" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:14.775" endtime="20170811 20:57:15.204"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:57:15.204" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:15.204" endtime="20170811 20:57:15.204"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:15.205" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:15.205" endtime="20170811 20:57:15.205"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:14.771" endtime="20170811 20:57:15.205"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:14.771" endtime="20170811 20:57:15.205"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:14.770" endtime="20170811 20:57:15.205"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:57:15.206" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170811 20:57:15.206" endtime="20170811 20:57:15.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:15.208" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:15.207" endtime="20170811 20:57:15.208"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:15.209" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:15.209" endtime="20170811 20:57:15.209"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:15.208" endtime="20170811 20:57:15.209"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:15.207" endtime="20170811 20:57:15.209"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:15.206" endtime="20170811 20:57:15.209"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:57:16.035" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170811 20:57:16.035" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:15.210" endtime="20170811 20:57:16.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:16.037" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:16.037" endtime="20170811 20:57:16.037"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:16.038" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:16.038" endtime="20170811 20:57:16.038"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:16.037" endtime="20170811 20:57:16.038"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:16.036" endtime="20170811 20:57:16.038"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:16.036" endtime="20170811 20:57:16.038"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:57:16.039" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:57:16.039" endtime="20170811 20:57:16.039"></status>
</kw>
<msg timestamp="20170811 20:57:16.039" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:14.769" endtime="20170811 20:57:16.039"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:16.040" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:16.039" endtime="20170811 20:57:16.040"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:57:16.040" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:57:16.040" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:57:16.040" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:57:16.040" endtime="20170811 20:57:16.040"></status>
</kw>
<msg timestamp="20170811 20:57:16.041" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:57:14.769" endtime="20170811 20:57:16.041"></status>
</kw>
<msg timestamp="20170811 20:57:16.041" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:57:14.769" endtime="20170811 20:57:16.041"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170811 20:57:16.041" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170811 20:57:16.042" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170811 20:57:16.041" endtime="20170811 20:57:16.042"></status>
</kw>
<status status="FAIL" starttime="20170811 20:57:14.057" endtime="20170811 20:57:16.042"></status>
</kw>
<status status="FAIL" starttime="20170811 20:57:13.474" endtime="20170811 20:57:16.042"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:57:26.047" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:57:26.047" endtime="20170811 20:57:26.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:57:26.048" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:57:26.048" endtime="20170811 20:57:26.048"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:57:26.049" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:57:26.049" endtime="20170811 20:57:26.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:57:26.050" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:57:26.049" endtime="20170811 20:57:26.050"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:57:26.251" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:57:26.050" endtime="20170811 20:57:26.251"></status>
</kw>
<msg timestamp="20170811 20:57:26.251" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:57:26.251" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:26.050" endtime="20170811 20:57:26.251"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:57:26.252" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:26.252" endtime="20170811 20:57:26.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:26.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:26.252" endtime="20170811 20:57:26.253"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.046" endtime="20170811 20:57:26.253"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.046" endtime="20170811 20:57:26.253"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.045" endtime="20170811 20:57:26.253"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:57:26.254" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:57:26.253" endtime="20170811 20:57:26.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:26.256" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:26.255" endtime="20170811 20:57:26.256"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:26.257" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:26.256" endtime="20170811 20:57:26.257"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.256" endtime="20170811 20:57:26.257"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.254" endtime="20170811 20:57:26.257"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.254" endtime="20170811 20:57:26.257"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:57:26.320" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:57:26.320" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:26.257" endtime="20170811 20:57:26.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:26.322" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:26.321" endtime="20170811 20:57:26.322"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:26.323" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:26.323" endtime="20170811 20:57:26.323"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.322" endtime="20170811 20:57:26.324"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.321" endtime="20170811 20:57:26.324"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.320" endtime="20170811 20:57:26.324"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:57:26.324" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:57:26.324" endtime="20170811 20:57:26.324"></status>
</kw>
<msg timestamp="20170811 20:57:26.324" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:26.044" endtime="20170811 20:57:26.324"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:26.325" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:26.325" endtime="20170811 20:57:26.325"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:57:26.326" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:57:26.326" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:57:26.326" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:57:26.325" endtime="20170811 20:57:26.326"></status>
</kw>
<msg timestamp="20170811 20:57:26.326" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:57:26.044" endtime="20170811 20:57:26.326"></status>
</kw>
<msg timestamp="20170811 20:57:26.326" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:57:26.043" endtime="20170811 20:57:26.326"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:57:26.327" endtime="20170811 20:57:26.327"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.043" endtime="20170811 20:57:26.327"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:57:26.331" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:57:26.330" endtime="20170811 20:57:26.331"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:57:26.331" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:57:26.331" endtime="20170811 20:57:26.331"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:57:26.332" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:57:26.332" endtime="20170811 20:57:26.332"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:57:26.333" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:57:26.332" endtime="20170811 20:57:26.333"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:57:26.518" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:57:26.334" endtime="20170811 20:57:26.518"></status>
</kw>
<msg timestamp="20170811 20:57:26.518" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:57:26.519" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:26.333" endtime="20170811 20:57:26.519"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:57:26.519" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:26.519" endtime="20170811 20:57:26.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:26.520" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:26.520" endtime="20170811 20:57:26.520"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.330" endtime="20170811 20:57:26.520"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.329" endtime="20170811 20:57:26.520"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.329" endtime="20170811 20:57:26.520"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:57:26.521" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:57:26.521" endtime="20170811 20:57:26.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:26.523" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:26.522" endtime="20170811 20:57:26.524"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:26.524" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:26.524" endtime="20170811 20:57:26.524"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.524" endtime="20170811 20:57:26.525"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.522" endtime="20170811 20:57:26.525"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.521" endtime="20170811 20:57:26.525"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:57:26.614" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:57:26.614" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:26.525" endtime="20170811 20:57:26.614"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:26.616" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:26.615" endtime="20170811 20:57:26.616"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:26.617" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:26.616" endtime="20170811 20:57:26.617"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.616" endtime="20170811 20:57:26.617"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.615" endtime="20170811 20:57:26.617"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.614" endtime="20170811 20:57:26.617"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:57:26.617" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:57:26.617" endtime="20170811 20:57:26.617"></status>
</kw>
<msg timestamp="20170811 20:57:26.618" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:26.328" endtime="20170811 20:57:26.618"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:26.618" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:26.618" endtime="20170811 20:57:26.618"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:57:26.619" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:57:26.619" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:57:26.619" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:57:26.619" endtime="20170811 20:57:26.619"></status>
</kw>
<msg timestamp="20170811 20:57:26.619" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170811 20:57:26.328" endtime="20170811 20:57:26.619"></status>
</kw>
<msg timestamp="20170811 20:57:26.620" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170811 20:57:26.327" endtime="20170811 20:57:26.620"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:57:26.620" endtime="20170811 20:57:26.620"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:57:26.625" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:57:26.625" endtime="20170811 20:57:26.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:57:26.626" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:57:26.626" endtime="20170811 20:57:26.626"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:57:26.627" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:57:26.626" endtime="20170811 20:57:26.627"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:57:26.627" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:57:26.627" endtime="20170811 20:57:26.627"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:57:27.266" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:57:26.628" endtime="20170811 20:57:27.266"></status>
</kw>
<msg timestamp="20170811 20:57:27.266" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:57:27.266" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:26.628" endtime="20170811 20:57:27.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:57:27.267" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:27.267" endtime="20170811 20:57:27.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:27.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:27.267" endtime="20170811 20:57:27.268"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.624" endtime="20170811 20:57:27.268"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.624" endtime="20170811 20:57:27.268"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:26.623" endtime="20170811 20:57:27.268"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:57:27.269" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170811 20:57:27.268" endtime="20170811 20:57:27.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:27.271" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:27.270" endtime="20170811 20:57:27.271"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:27.272" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:27.272" endtime="20170811 20:57:27.272"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:27.271" endtime="20170811 20:57:27.272"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:27.270" endtime="20170811 20:57:27.272"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:27.269" endtime="20170811 20:57:27.272"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:57:28.222" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170811 20:57:28.222" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:27.273" endtime="20170811 20:57:28.222"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:28.224" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:28.223" endtime="20170811 20:57:28.224"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:28.225" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:28.225" endtime="20170811 20:57:28.225"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:28.224" endtime="20170811 20:57:28.225"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:28.223" endtime="20170811 20:57:28.225"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:28.222" endtime="20170811 20:57:28.225"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:57:28.226" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:57:28.226" endtime="20170811 20:57:28.226"></status>
</kw>
<msg timestamp="20170811 20:57:28.226" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:26.622" endtime="20170811 20:57:28.226"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:28.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:28.226" endtime="20170811 20:57:28.227"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:57:28.227" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:57:28.227" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:57:28.227" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:57:28.227" endtime="20170811 20:57:28.227"></status>
</kw>
<msg timestamp="20170811 20:57:28.228" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170811 20:57:26.622" endtime="20170811 20:57:28.228"></status>
</kw>
<msg timestamp="20170811 20:57:28.228" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170811 20:57:26.621" endtime="20170811 20:57:28.228"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170811 20:57:28.229" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170811 20:57:28.228" endtime="20170811 20:57:28.229"></status>
</kw>
<status status="FAIL" starttime="20170811 20:57:26.621" endtime="20170811 20:57:28.229"></status>
</kw>
<msg timestamp="20170811 20:57:28.229" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 20:57:26.621" endtime="20170811 20:57:28.229"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:57:28.229" endtime="20170811 20:57:28.229"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:57:28.233" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:57:28.233" endtime="20170811 20:57:28.234"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:57:28.234" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:57:28.234" endtime="20170811 20:57:28.234"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:57:28.235" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:57:28.235" endtime="20170811 20:57:28.235"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:57:28.236" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:57:28.235" endtime="20170811 20:57:28.236"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:57:29.207" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:57:28.236" endtime="20170811 20:57:29.208"></status>
</kw>
<msg timestamp="20170811 20:57:29.208" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:57:29.208" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:28.236" endtime="20170811 20:57:29.208"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:57:29.209" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:29.208" endtime="20170811 20:57:29.209"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:29.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:29.209" endtime="20170811 20:57:29.209"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:28.233" endtime="20170811 20:57:29.209"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:28.232" endtime="20170811 20:57:29.210"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:28.231" endtime="20170811 20:57:29.210"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:57:29.210" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170811 20:57:29.210" endtime="20170811 20:57:29.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:29.212" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:29.212" endtime="20170811 20:57:29.212"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:29.213" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:29.213" endtime="20170811 20:57:29.213"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:29.213" endtime="20170811 20:57:29.213"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:29.211" endtime="20170811 20:57:29.214"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:29.210" endtime="20170811 20:57:29.214"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:57:29.304" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170811 20:57:29.304" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:29.214" endtime="20170811 20:57:29.304"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:29.307" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:29.306" endtime="20170811 20:57:29.307"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:29.308" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:29.308" endtime="20170811 20:57:29.308"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:29.307" endtime="20170811 20:57:29.309"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:29.305" endtime="20170811 20:57:29.309"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:29.304" endtime="20170811 20:57:29.309"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:57:29.309" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:57:29.309" endtime="20170811 20:57:29.309"></status>
</kw>
<msg timestamp="20170811 20:57:29.309" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:28.231" endtime="20170811 20:57:29.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:29.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:29.310" endtime="20170811 20:57:29.310"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:57:29.311" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:57:29.311" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:57:29.311" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:57:29.310" endtime="20170811 20:57:29.311"></status>
</kw>
<msg timestamp="20170811 20:57:29.311" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:57:28.230" endtime="20170811 20:57:29.311"></status>
</kw>
<msg timestamp="20170811 20:57:29.311" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:57:28.230" endtime="20170811 20:57:29.311"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170811 20:57:29.312" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170811 20:57:29.312" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170811 20:57:29.312" endtime="20170811 20:57:29.312"></status>
</kw>
<status status="FAIL" starttime="20170811 20:57:26.620" endtime="20170811 20:57:29.312"></status>
</kw>
<status status="FAIL" starttime="20170811 20:57:26.043" endtime="20170811 20:57:29.313"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:57:39.318" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:57:39.317" endtime="20170811 20:57:39.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:57:39.318" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:57:39.318" endtime="20170811 20:57:39.319"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:57:39.319" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:57:39.319" endtime="20170811 20:57:39.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:57:39.320" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:57:39.319" endtime="20170811 20:57:39.320"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:57:39.497" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:57:39.320" endtime="20170811 20:57:39.497"></status>
</kw>
<msg timestamp="20170811 20:57:39.497" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:57:39.497" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:39.320" endtime="20170811 20:57:39.497"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:57:39.498" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:39.497" endtime="20170811 20:57:39.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:39.498" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:39.498" endtime="20170811 20:57:39.499"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:39.317" endtime="20170811 20:57:39.499"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:39.316" endtime="20170811 20:57:39.499"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:39.316" endtime="20170811 20:57:39.499"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:57:39.499" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:57:39.499" endtime="20170811 20:57:39.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:39.501" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:39.501" endtime="20170811 20:57:39.502"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:39.503" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:39.502" endtime="20170811 20:57:39.503"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:39.502" endtime="20170811 20:57:39.503"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:39.500" endtime="20170811 20:57:39.503"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:39.500" endtime="20170811 20:57:39.503"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:57:41.020" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:57:41.020" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:39.503" endtime="20170811 20:57:41.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:41.022" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:41.022" endtime="20170811 20:57:41.022"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:41.023" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:41.023" endtime="20170811 20:57:41.023"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:41.022" endtime="20170811 20:57:41.023"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:41.021" endtime="20170811 20:57:41.024"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:41.021" endtime="20170811 20:57:41.024"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:57:41.024" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:57:41.024" endtime="20170811 20:57:41.024"></status>
</kw>
<msg timestamp="20170811 20:57:41.024" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:39.315" endtime="20170811 20:57:41.024"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:41.025" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:41.025" endtime="20170811 20:57:41.025"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:57:41.026" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:57:41.026" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:57:41.026" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:57:41.025" endtime="20170811 20:57:41.026"></status>
</kw>
<msg timestamp="20170811 20:57:41.026" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170811 20:57:39.314" endtime="20170811 20:57:41.026"></status>
</kw>
<msg timestamp="20170811 20:57:41.026" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170811 20:57:39.314" endtime="20170811 20:57:41.026"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170811 20:57:41.027" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170811 20:57:41.027" endtime="20170811 20:57:41.027"></status>
</kw>
<status status="FAIL" starttime="20170811 20:57:39.314" endtime="20170811 20:57:41.027"></status>
</kw>
<status status="FAIL" starttime="20170811 20:57:39.313" endtime="20170811 20:57:41.027"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:57:51.033" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:57:51.032" endtime="20170811 20:57:51.033"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:57:51.034" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:57:51.033" endtime="20170811 20:57:51.034"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:57:51.034" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:57:51.034" endtime="20170811 20:57:51.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:57:51.035" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:57:51.035" endtime="20170811 20:57:51.035"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:57:51.645" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:57:51.036" endtime="20170811 20:57:51.646"></status>
</kw>
<msg timestamp="20170811 20:57:51.646" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:57:51.646" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:51.035" endtime="20170811 20:57:51.646"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:57:51.646" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:51.646" endtime="20170811 20:57:51.647"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:51.647" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:51.647" endtime="20170811 20:57:51.647"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:51.031" endtime="20170811 20:57:51.648"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:51.031" endtime="20170811 20:57:51.648"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:51.030" endtime="20170811 20:57:51.648"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:57:51.648" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:57:51.648" endtime="20170811 20:57:51.648"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:51.650" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:51.650" endtime="20170811 20:57:51.650"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:51.651" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:57:51.651" endtime="20170811 20:57:51.651"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:51.651" endtime="20170811 20:57:51.652"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:51.649" endtime="20170811 20:57:51.652"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:51.649" endtime="20170811 20:57:51.652"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:57:52.343" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:57:52.343" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:51.652" endtime="20170811 20:57:52.343"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:57:52.345" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:52.344" endtime="20170811 20:57:52.345"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:57:52.349" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:57:52.348" endtime="20170811 20:57:52.349"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:52.345" endtime="20170811 20:57:52.349"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:52.344" endtime="20170811 20:57:52.349"></status>
</kw>
<status status="PASS" starttime="20170811 20:57:52.343" endtime="20170811 20:57:52.349"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:57:52.350" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:57:52.349" endtime="20170811 20:57:52.350"></status>
</kw>
<msg timestamp="20170811 20:57:52.350" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:57:51.030" endtime="20170811 20:57:52.350"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:57:52.350" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:57:52.350" endtime="20170811 20:57:52.351"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:57:52.351" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:57:52.351" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:57:52.351" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:57:52.351" endtime="20170811 20:57:52.351"></status>
</kw>
<msg timestamp="20170811 20:57:52.352" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170811 20:57:51.029" endtime="20170811 20:57:52.352"></status>
</kw>
<msg timestamp="20170811 20:57:52.352" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170811 20:57:51.029" endtime="20170811 20:57:52.352"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170811 20:57:52.353" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170811 20:57:52.352" endtime="20170811 20:57:52.353"></status>
</kw>
<status status="FAIL" starttime="20170811 20:57:51.028" endtime="20170811 20:57:52.353"></status>
</kw>
<status status="FAIL" starttime="20170811 20:57:51.028" endtime="20170811 20:57:52.353"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:58:02.358" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:58:02.358" endtime="20170811 20:58:02.358"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:58:02.359" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:58:02.359" endtime="20170811 20:58:02.359"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:58:02.360" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:58:02.359" endtime="20170811 20:58:02.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:58:02.360" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:58:02.360" endtime="20170811 20:58:02.360"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:58:02.593" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:58:02.361" endtime="20170811 20:58:02.593"></status>
</kw>
<msg timestamp="20170811 20:58:02.593" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:58:02.593" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:02.360" endtime="20170811 20:58:02.593"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:58:02.594" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:02.594" endtime="20170811 20:58:02.594"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:02.595" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:02.594" endtime="20170811 20:58:02.595"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:02.357" endtime="20170811 20:58:02.595"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:02.357" endtime="20170811 20:58:02.595"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:02.356" endtime="20170811 20:58:02.595"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:58:02.596" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:58:02.595" endtime="20170811 20:58:02.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:02.598" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:02.597" endtime="20170811 20:58:02.598"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:02.599" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:02.598" endtime="20170811 20:58:02.599"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:02.598" endtime="20170811 20:58:02.599"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:02.596" endtime="20170811 20:58:02.599"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:02.596" endtime="20170811 20:58:02.599"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:58:02.723" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:58:02.724" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:02.599" endtime="20170811 20:58:02.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:02.725" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:02.725" endtime="20170811 20:58:02.725"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:02.726" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:02.726" endtime="20170811 20:58:02.726"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:02.726" endtime="20170811 20:58:02.727"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:02.724" endtime="20170811 20:58:02.727"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:02.724" endtime="20170811 20:58:02.727"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:58:02.727" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:58:02.727" endtime="20170811 20:58:02.727"></status>
</kw>
<msg timestamp="20170811 20:58:02.727" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:02.355" endtime="20170811 20:58:02.727"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:02.728" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:02.728" endtime="20170811 20:58:02.728"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:58:02.729" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:58:02.729" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:58:02.729" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:58:02.728" endtime="20170811 20:58:02.729"></status>
</kw>
<msg timestamp="20170811 20:58:02.729" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:58:02.355" endtime="20170811 20:58:02.729"></status>
</kw>
<msg timestamp="20170811 20:58:02.729" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:58:02.354" endtime="20170811 20:58:02.729"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:58:02.730" endtime="20170811 20:58:02.730"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:02.354" endtime="20170811 20:58:02.730"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:58:02.734" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:58:02.734" endtime="20170811 20:58:02.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:58:02.736" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:58:02.735" endtime="20170811 20:58:02.736"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:58:02.736" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:58:02.736" endtime="20170811 20:58:02.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:58:02.737" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:58:02.737" endtime="20170811 20:58:02.737"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:58:02.940" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:58:02.738" endtime="20170811 20:58:02.940"></status>
</kw>
<msg timestamp="20170811 20:58:02.941" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:58:02.941" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:02.737" endtime="20170811 20:58:02.941"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:58:02.941" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:02.941" endtime="20170811 20:58:02.941"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:02.942" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:02.942" endtime="20170811 20:58:02.942"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:02.733" endtime="20170811 20:58:02.942"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:02.733" endtime="20170811 20:58:02.942"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:02.732" endtime="20170811 20:58:02.942"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:58:02.943" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:58:02.943" endtime="20170811 20:58:02.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:02.945" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:02.944" endtime="20170811 20:58:02.945"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:02.946" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:02.946" endtime="20170811 20:58:02.946"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:02.945" endtime="20170811 20:58:02.946"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:02.944" endtime="20170811 20:58:02.946"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:02.943" endtime="20170811 20:58:02.946"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:58:03.060" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:58:03.060" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:02.947" endtime="20170811 20:58:03.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:03.062" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:03.062" endtime="20170811 20:58:03.062"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:03.063" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:03.063" endtime="20170811 20:58:03.063"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.062" endtime="20170811 20:58:03.063"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.061" endtime="20170811 20:58:03.063"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.061" endtime="20170811 20:58:03.064"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:58:03.064" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:58:03.064" endtime="20170811 20:58:03.064"></status>
</kw>
<msg timestamp="20170811 20:58:03.064" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:02.731" endtime="20170811 20:58:03.064"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:03.065" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:03.064" endtime="20170811 20:58:03.065"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:58:03.065" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:58:03.065" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:58:03.066" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:58:03.065" endtime="20170811 20:58:03.066"></status>
</kw>
<msg timestamp="20170811 20:58:03.066" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170811 20:58:02.731" endtime="20170811 20:58:03.066"></status>
</kw>
<msg timestamp="20170811 20:58:03.066" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170811 20:58:02.730" endtime="20170811 20:58:03.066"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:58:03.066" endtime="20170811 20:58:03.067"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:58:03.072" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:58:03.071" endtime="20170811 20:58:03.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:58:03.073" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:58:03.072" endtime="20170811 20:58:03.073"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:58:03.073" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:58:03.073" endtime="20170811 20:58:03.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:58:03.074" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:58:03.073" endtime="20170811 20:58:03.074"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:58:03.336" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:58:03.075" endtime="20170811 20:58:03.336"></status>
</kw>
<msg timestamp="20170811 20:58:03.336" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:58:03.336" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:03.074" endtime="20170811 20:58:03.336"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:58:03.337" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:03.337" endtime="20170811 20:58:03.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:03.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:03.338" endtime="20170811 20:58:03.338"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.071" endtime="20170811 20:58:03.339"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.070" endtime="20170811 20:58:03.339"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.070" endtime="20170811 20:58:03.339"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:58:03.339" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170811 20:58:03.339" endtime="20170811 20:58:03.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:03.342" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:03.341" endtime="20170811 20:58:03.342"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:03.343" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:03.342" endtime="20170811 20:58:03.343"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.342" endtime="20170811 20:58:03.343"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.340" endtime="20170811 20:58:03.343"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.340" endtime="20170811 20:58:03.343"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:58:03.426" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170811 20:58:03.426" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:03.343" endtime="20170811 20:58:03.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:03.428" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:03.427" endtime="20170811 20:58:03.428"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:03.429" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:03.428" endtime="20170811 20:58:03.429"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.428" endtime="20170811 20:58:03.429"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.427" endtime="20170811 20:58:03.429"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.426" endtime="20170811 20:58:03.429"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:58:03.429" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:58:03.429" endtime="20170811 20:58:03.429"></status>
</kw>
<msg timestamp="20170811 20:58:03.430" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:03.069" endtime="20170811 20:58:03.430"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:03.430" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:03.430" endtime="20170811 20:58:03.430"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:58:03.431" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:58:03.431" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:58:03.431" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:58:03.431" endtime="20170811 20:58:03.431"></status>
</kw>
<msg timestamp="20170811 20:58:03.431" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170811 20:58:03.069" endtime="20170811 20:58:03.431"></status>
</kw>
<msg timestamp="20170811 20:58:03.432" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170811 20:58:03.068" endtime="20170811 20:58:03.432"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170811 20:58:03.432" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170811 20:58:03.432" endtime="20170811 20:58:03.432"></status>
</kw>
<status status="FAIL" starttime="20170811 20:58:03.068" endtime="20170811 20:58:03.432"></status>
</kw>
<msg timestamp="20170811 20:58:03.433" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 20:58:03.067" endtime="20170811 20:58:03.433"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:58:03.433" endtime="20170811 20:58:03.433"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:58:03.437" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:58:03.437" endtime="20170811 20:58:03.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:58:03.438" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:58:03.438" endtime="20170811 20:58:03.438"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:58:03.439" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:58:03.439" endtime="20170811 20:58:03.439"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:58:03.440" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:58:03.440" endtime="20170811 20:58:03.440"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:58:03.640" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:58:03.441" endtime="20170811 20:58:03.640"></status>
</kw>
<msg timestamp="20170811 20:58:03.640" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:58:03.640" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:03.440" endtime="20170811 20:58:03.640"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:58:03.641" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:03.641" endtime="20170811 20:58:03.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:03.642" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:03.641" endtime="20170811 20:58:03.642"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.436" endtime="20170811 20:58:03.642"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.436" endtime="20170811 20:58:03.642"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.435" endtime="20170811 20:58:03.642"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:58:03.643" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170811 20:58:03.642" endtime="20170811 20:58:03.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:03.645" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:03.644" endtime="20170811 20:58:03.645"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:03.646" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:03.646" endtime="20170811 20:58:03.646"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.645" endtime="20170811 20:58:03.646"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.644" endtime="20170811 20:58:03.646"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.643" endtime="20170811 20:58:03.646"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:58:03.753" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170811 20:58:03.753" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:03.646" endtime="20170811 20:58:03.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:03.756" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:03.755" endtime="20170811 20:58:03.756"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:03.757" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:03.757" endtime="20170811 20:58:03.757"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.756" endtime="20170811 20:58:03.758"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.755" endtime="20170811 20:58:03.758"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:03.754" endtime="20170811 20:58:03.758"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:58:03.758" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:58:03.758" endtime="20170811 20:58:03.758"></status>
</kw>
<msg timestamp="20170811 20:58:03.758" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:03.434" endtime="20170811 20:58:03.758"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:03.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:03.759" endtime="20170811 20:58:03.759"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:58:03.760" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:58:03.760" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:58:03.760" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:58:03.759" endtime="20170811 20:58:03.760"></status>
</kw>
<msg timestamp="20170811 20:58:03.760" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:58:03.434" endtime="20170811 20:58:03.760"></status>
</kw>
<msg timestamp="20170811 20:58:03.760" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:58:03.433" endtime="20170811 20:58:03.760"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170811 20:58:03.761" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170811 20:58:03.761" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170811 20:58:03.761" endtime="20170811 20:58:03.761"></status>
</kw>
<status status="FAIL" starttime="20170811 20:58:03.067" endtime="20170811 20:58:03.761"></status>
</kw>
<status status="FAIL" starttime="20170811 20:58:02.353" endtime="20170811 20:58:03.762"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:58:13.767" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:58:13.767" endtime="20170811 20:58:13.767"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:58:13.768" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:58:13.768" endtime="20170811 20:58:13.768"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:58:13.769" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:58:13.768" endtime="20170811 20:58:13.769"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:58:13.769" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:58:13.769" endtime="20170811 20:58:13.769"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:58:13.994" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:58:13.770" endtime="20170811 20:58:13.994"></status>
</kw>
<msg timestamp="20170811 20:58:13.994" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:58:13.994" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:13.770" endtime="20170811 20:58:13.994"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:58:13.995" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:13.994" endtime="20170811 20:58:13.995"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:13.995" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:13.995" endtime="20170811 20:58:13.995"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:13.766" endtime="20170811 20:58:13.996"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:13.765" endtime="20170811 20:58:13.996"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:13.765" endtime="20170811 20:58:13.996"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:58:13.996" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:58:13.996" endtime="20170811 20:58:13.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:13.998" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:13.998" endtime="20170811 20:58:13.999"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:13.999" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:13.999" endtime="20170811 20:58:13.999"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:13.999" endtime="20170811 20:58:14.000"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:13.997" endtime="20170811 20:58:14.000"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:13.997" endtime="20170811 20:58:14.000"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:58:14.062" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:58:14.062" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.000" endtime="20170811 20:58:14.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:14.064" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:14.064" endtime="20170811 20:58:14.064"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:14.066" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:14.065" endtime="20170811 20:58:14.066"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.065" endtime="20170811 20:58:14.066"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.063" endtime="20170811 20:58:14.066"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.063" endtime="20170811 20:58:14.066"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:58:14.066" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:58:14.066" endtime="20170811 20:58:14.066"></status>
</kw>
<msg timestamp="20170811 20:58:14.067" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:13.764" endtime="20170811 20:58:14.067"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:14.067" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.067" endtime="20170811 20:58:14.067"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:58:14.068" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:58:14.068" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:58:14.068" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:58:14.068" endtime="20170811 20:58:14.068"></status>
</kw>
<msg timestamp="20170811 20:58:14.068" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:58:13.763" endtime="20170811 20:58:14.068"></status>
</kw>
<msg timestamp="20170811 20:58:14.069" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:58:13.763" endtime="20170811 20:58:14.069"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:58:14.069" endtime="20170811 20:58:14.069"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:13.763" endtime="20170811 20:58:14.069"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:58:14.073" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:58:14.073" endtime="20170811 20:58:14.074"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:58:14.074" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:58:14.074" endtime="20170811 20:58:14.074"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:58:14.075" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:58:14.074" endtime="20170811 20:58:14.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:58:14.075" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:58:14.075" endtime="20170811 20:58:14.075"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:58:14.265" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:58:14.076" endtime="20170811 20:58:14.265"></status>
</kw>
<msg timestamp="20170811 20:58:14.265" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:58:14.265" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.076" endtime="20170811 20:58:14.265"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:58:14.266" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.265" endtime="20170811 20:58:14.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:14.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.266" endtime="20170811 20:58:14.266"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.072" endtime="20170811 20:58:14.266"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.072" endtime="20170811 20:58:14.266"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.071" endtime="20170811 20:58:14.267"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:58:14.267" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:58:14.267" endtime="20170811 20:58:14.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:14.270" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:14.269" endtime="20170811 20:58:14.270"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:14.271" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:14.270" endtime="20170811 20:58:14.271"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.270" endtime="20170811 20:58:14.271"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.268" endtime="20170811 20:58:14.271"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.267" endtime="20170811 20:58:14.271"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:58:14.360" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:58:14.360" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.271" endtime="20170811 20:58:14.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:14.362" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:14.361" endtime="20170811 20:58:14.362"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:14.363" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:14.362" endtime="20170811 20:58:14.363"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.362" endtime="20170811 20:58:14.363"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.361" endtime="20170811 20:58:14.363"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.360" endtime="20170811 20:58:14.363"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:58:14.364" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:58:14.363" endtime="20170811 20:58:14.364"></status>
</kw>
<msg timestamp="20170811 20:58:14.364" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.070" endtime="20170811 20:58:14.364"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:14.365" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.365" endtime="20170811 20:58:14.365"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:58:14.365" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:58:14.366" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:58:14.366" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:58:14.365" endtime="20170811 20:58:14.366"></status>
</kw>
<msg timestamp="20170811 20:58:14.366" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170811 20:58:14.070" endtime="20170811 20:58:14.366"></status>
</kw>
<msg timestamp="20170811 20:58:14.366" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170811 20:58:14.070" endtime="20170811 20:58:14.366"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:58:14.367" endtime="20170811 20:58:14.367"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:58:14.372" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:58:14.372" endtime="20170811 20:58:14.373"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:58:14.374" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:58:14.373" endtime="20170811 20:58:14.374"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:58:14.374" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:58:14.374" endtime="20170811 20:58:14.374"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:58:14.375" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:58:14.375" endtime="20170811 20:58:14.375"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:58:14.552" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:58:14.376" endtime="20170811 20:58:14.552"></status>
</kw>
<msg timestamp="20170811 20:58:14.552" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:58:14.552" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.375" endtime="20170811 20:58:14.552"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:58:14.553" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.552" endtime="20170811 20:58:14.553"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:14.553" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.553" endtime="20170811 20:58:14.554"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.371" endtime="20170811 20:58:14.554"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.370" endtime="20170811 20:58:14.554"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.369" endtime="20170811 20:58:14.554"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:58:14.555" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170811 20:58:14.554" endtime="20170811 20:58:14.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:14.557" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:14.556" endtime="20170811 20:58:14.557"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:14.558" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:14.558" endtime="20170811 20:58:14.558"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.557" endtime="20170811 20:58:14.558"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.555" endtime="20170811 20:58:14.558"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.555" endtime="20170811 20:58:14.558"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:58:14.624" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170811 20:58:14.624" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.558" endtime="20170811 20:58:14.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:14.626" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:14.626" endtime="20170811 20:58:14.626"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:14.627" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:14.627" endtime="20170811 20:58:14.627"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.626" endtime="20170811 20:58:14.627"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.625" endtime="20170811 20:58:14.627"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.625" endtime="20170811 20:58:14.628"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:58:14.628" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:58:14.628" endtime="20170811 20:58:14.628"></status>
</kw>
<msg timestamp="20170811 20:58:14.628" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.369" endtime="20170811 20:58:14.628"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:14.629" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.628" endtime="20170811 20:58:14.629"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:58:14.629" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:58:14.629" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:58:14.630" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:58:14.629" endtime="20170811 20:58:14.630"></status>
</kw>
<msg timestamp="20170811 20:58:14.630" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170811 20:58:14.368" endtime="20170811 20:58:14.630"></status>
</kw>
<msg timestamp="20170811 20:58:14.630" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170811 20:58:14.368" endtime="20170811 20:58:14.630"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170811 20:58:14.631" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170811 20:58:14.630" endtime="20170811 20:58:14.631"></status>
</kw>
<status status="FAIL" starttime="20170811 20:58:14.368" endtime="20170811 20:58:14.631"></status>
</kw>
<msg timestamp="20170811 20:58:14.631" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 20:58:14.367" endtime="20170811 20:58:14.631"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:58:14.631" endtime="20170811 20:58:14.632"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:58:14.636" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:58:14.635" endtime="20170811 20:58:14.636"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:58:14.637" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:58:14.636" endtime="20170811 20:58:14.637"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:58:14.637" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:58:14.637" endtime="20170811 20:58:14.637"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:58:14.638" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:58:14.638" endtime="20170811 20:58:14.638"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:58:14.910" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:58:14.639" endtime="20170811 20:58:14.910"></status>
</kw>
<msg timestamp="20170811 20:58:14.910" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:58:14.910" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.638" endtime="20170811 20:58:14.910"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:58:14.911" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.911" endtime="20170811 20:58:14.911"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:14.912" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.911" endtime="20170811 20:58:14.912"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.635" endtime="20170811 20:58:14.912"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.634" endtime="20170811 20:58:14.912"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.634" endtime="20170811 20:58:14.912"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:58:14.913" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170811 20:58:14.912" endtime="20170811 20:58:14.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:14.915" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:14.914" endtime="20170811 20:58:14.915"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:14.916" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:14.915" endtime="20170811 20:58:14.916"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.915" endtime="20170811 20:58:14.916"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.913" endtime="20170811 20:58:14.916"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:14.913" endtime="20170811 20:58:14.916"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:58:15.134" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170811 20:58:15.135" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.916" endtime="20170811 20:58:15.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:15.137" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:15.137" endtime="20170811 20:58:15.137"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:15.138" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:15.138" endtime="20170811 20:58:15.138"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:15.137" endtime="20170811 20:58:15.138"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:15.136" endtime="20170811 20:58:15.138"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:15.135" endtime="20170811 20:58:15.139"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:58:15.139" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:58:15.139" endtime="20170811 20:58:15.139"></status>
</kw>
<msg timestamp="20170811 20:58:15.139" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:14.633" endtime="20170811 20:58:15.139"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:15.140" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:15.139" endtime="20170811 20:58:15.140"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:58:15.140" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:58:15.140" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:58:15.141" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:58:15.140" endtime="20170811 20:58:15.141"></status>
</kw>
<msg timestamp="20170811 20:58:15.141" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:58:14.632" endtime="20170811 20:58:15.141"></status>
</kw>
<msg timestamp="20170811 20:58:15.141" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170811 20:58:14.632" endtime="20170811 20:58:15.141"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170811 20:58:15.142" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170811 20:58:15.142" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170811 20:58:15.141" endtime="20170811 20:58:15.142"></status>
</kw>
<status status="FAIL" starttime="20170811 20:58:14.367" endtime="20170811 20:58:15.142"></status>
</kw>
<status status="FAIL" starttime="20170811 20:58:13.762" endtime="20170811 20:58:15.142"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:58:25.147" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:58:25.147" endtime="20170811 20:58:25.148"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:58:25.148" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:58:25.148" endtime="20170811 20:58:25.148"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:58:25.149" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:58:25.148" endtime="20170811 20:58:25.149"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:58:25.149" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:58:25.149" endtime="20170811 20:58:25.150"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:58:26.061" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:58:25.150" endtime="20170811 20:58:26.061"></status>
</kw>
<msg timestamp="20170811 20:58:26.061" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:58:26.061" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:25.150" endtime="20170811 20:58:26.061"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:58:26.062" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:26.062" endtime="20170811 20:58:26.062"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:26.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:26.062" endtime="20170811 20:58:26.063"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:25.146" endtime="20170811 20:58:26.063"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:25.146" endtime="20170811 20:58:26.063"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:25.145" endtime="20170811 20:58:26.063"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:58:26.064" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:58:26.063" endtime="20170811 20:58:26.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:26.066" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:26.065" endtime="20170811 20:58:26.066"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:26.067" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:26.066" endtime="20170811 20:58:26.067"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:26.066" endtime="20170811 20:58:26.067"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:26.064" endtime="20170811 20:58:26.067"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:26.064" endtime="20170811 20:58:26.067"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:58:26.431" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:58:26.431" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:26.067" endtime="20170811 20:58:26.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:26.433" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:26.433" endtime="20170811 20:58:26.433"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:26.434" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:26.434" endtime="20170811 20:58:26.434"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:26.433" endtime="20170811 20:58:26.434"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:26.432" endtime="20170811 20:58:26.434"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:26.432" endtime="20170811 20:58:26.435"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:58:26.435" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:58:26.435" endtime="20170811 20:58:26.435"></status>
</kw>
<msg timestamp="20170811 20:58:26.435" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:25.145" endtime="20170811 20:58:26.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:26.436" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:26.435" endtime="20170811 20:58:26.436"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:58:26.436" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:58:26.436" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:58:26.437" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:58:26.436" endtime="20170811 20:58:26.437"></status>
</kw>
<msg timestamp="20170811 20:58:26.437" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:58:25.144" endtime="20170811 20:58:26.437"></status>
</kw>
<msg timestamp="20170811 20:58:26.437" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:58:25.144" endtime="20170811 20:58:26.437"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:58:26.437" endtime="20170811 20:58:26.438"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:25.143" endtime="20170811 20:58:26.438"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:58:26.441" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:58:26.441" endtime="20170811 20:58:26.442"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:58:26.443" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:58:26.442" endtime="20170811 20:58:26.443"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:58:26.443" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:58:26.443" endtime="20170811 20:58:26.443"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:58:26.444" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:58:26.444" endtime="20170811 20:58:26.444"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:58:26.651" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:58:26.445" endtime="20170811 20:58:26.651"></status>
</kw>
<msg timestamp="20170811 20:58:26.651" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:58:26.651" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:26.444" endtime="20170811 20:58:26.651"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:58:26.652" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:26.651" endtime="20170811 20:58:26.652"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:26.652" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:26.652" endtime="20170811 20:58:26.652"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:26.441" endtime="20170811 20:58:26.653"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:26.440" endtime="20170811 20:58:26.653"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:26.440" endtime="20170811 20:58:26.653"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:58:26.653" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:58:26.653" endtime="20170811 20:58:26.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:26.655" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:26.655" endtime="20170811 20:58:26.655"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:26.656" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:26.656" endtime="20170811 20:58:26.656"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:26.656" endtime="20170811 20:58:26.657"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:26.654" endtime="20170811 20:58:26.657"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:26.654" endtime="20170811 20:58:26.657"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:58:26.776" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:58:26.776" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:26.657" endtime="20170811 20:58:26.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:26.778" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:26.777" endtime="20170811 20:58:26.778"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:26.779" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:26.779" endtime="20170811 20:58:26.779"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:26.778" endtime="20170811 20:58:26.779"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:26.777" endtime="20170811 20:58:26.779"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:26.777" endtime="20170811 20:58:26.779"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:58:26.780" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:58:26.779" endtime="20170811 20:58:26.780"></status>
</kw>
<msg timestamp="20170811 20:58:26.780" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:26.439" endtime="20170811 20:58:26.780"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:26.780" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:26.780" endtime="20170811 20:58:26.781"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:58:26.781" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:58:26.781" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:58:26.781" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:58:26.781" endtime="20170811 20:58:26.781"></status>
</kw>
<msg timestamp="20170811 20:58:26.782" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 20:58:26.438" endtime="20170811 20:58:26.782"></status>
</kw>
<msg timestamp="20170811 20:58:26.782" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 20:58:26.438" endtime="20170811 20:58:26.782"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 20:58:26.783" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 20:58:26.782" endtime="20170811 20:58:26.783"></status>
</kw>
<status status="FAIL" starttime="20170811 20:58:25.143" endtime="20170811 20:58:26.783"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:58:36.790" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:58:36.789" endtime="20170811 20:58:36.790"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:58:36.791" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:58:36.790" endtime="20170811 20:58:36.791"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:58:36.791" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:58:36.791" endtime="20170811 20:58:36.791"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:58:36.792" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:58:36.791" endtime="20170811 20:58:36.792"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:58:36.982" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:58:36.793" endtime="20170811 20:58:36.982"></status>
</kw>
<msg timestamp="20170811 20:58:36.982" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:58:36.982" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:36.792" endtime="20170811 20:58:36.982"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:58:36.983" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:36.983" endtime="20170811 20:58:36.983"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:36.984" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:36.983" endtime="20170811 20:58:36.984"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:36.789" endtime="20170811 20:58:36.984"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:36.788" endtime="20170811 20:58:36.984"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:36.788" endtime="20170811 20:58:36.984"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:58:36.985" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:58:36.984" endtime="20170811 20:58:36.985"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:36.987" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:36.986" endtime="20170811 20:58:36.987"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:36.988" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:36.988" endtime="20170811 20:58:36.988"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:36.987" endtime="20170811 20:58:36.989"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:36.986" endtime="20170811 20:58:36.989"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:36.985" endtime="20170811 20:58:36.989"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:58:37.171" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:58:37.171" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:36.989" endtime="20170811 20:58:37.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:37.173" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:37.173" endtime="20170811 20:58:37.173"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:37.174" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:37.174" endtime="20170811 20:58:37.174"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:37.174" endtime="20170811 20:58:37.174"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:37.172" endtime="20170811 20:58:37.175"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:37.172" endtime="20170811 20:58:37.175"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:58:37.175" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:58:37.175" endtime="20170811 20:58:37.175"></status>
</kw>
<msg timestamp="20170811 20:58:37.176" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:36.787" endtime="20170811 20:58:37.176"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:37.177" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:37.176" endtime="20170811 20:58:37.177"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:58:37.177" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:58:37.178" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:58:37.178" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:58:37.177" endtime="20170811 20:58:37.178"></status>
</kw>
<msg timestamp="20170811 20:58:37.178" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:58:36.785" endtime="20170811 20:58:37.178"></status>
</kw>
<msg timestamp="20170811 20:58:37.179" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:58:36.785" endtime="20170811 20:58:37.179"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:58:37.179" endtime="20170811 20:58:37.179"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:36.784" endtime="20170811 20:58:37.180"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:58:37.185" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:58:37.184" endtime="20170811 20:58:37.185"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:58:37.186" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:58:37.186" endtime="20170811 20:58:37.186"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:58:37.187" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:58:37.186" endtime="20170811 20:58:37.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:58:37.188" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:58:37.187" endtime="20170811 20:58:37.188"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:58:37.385" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:58:37.189" endtime="20170811 20:58:37.385"></status>
</kw>
<msg timestamp="20170811 20:58:37.385" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:58:37.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:37.188" endtime="20170811 20:58:37.385"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:58:37.386" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:37.386" endtime="20170811 20:58:37.386"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:37.387" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:37.386" endtime="20170811 20:58:37.387"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:37.183" endtime="20170811 20:58:37.387"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:37.183" endtime="20170811 20:58:37.387"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:37.182" endtime="20170811 20:58:37.387"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:58:37.388" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:58:37.387" endtime="20170811 20:58:37.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:37.391" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:37.390" endtime="20170811 20:58:37.391"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:37.392" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:37.392" endtime="20170811 20:58:37.392"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:37.391" endtime="20170811 20:58:37.392"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:37.389" endtime="20170811 20:58:37.392"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:37.388" endtime="20170811 20:58:37.393"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:58:37.481" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:58:37.481" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:37.393" endtime="20170811 20:58:37.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:37.483" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:37.482" endtime="20170811 20:58:37.483"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:37.484" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:37.483" endtime="20170811 20:58:37.484"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:37.483" endtime="20170811 20:58:37.484"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:37.482" endtime="20170811 20:58:37.484"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:37.481" endtime="20170811 20:58:37.484"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:58:37.484" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:58:37.484" endtime="20170811 20:58:37.485"></status>
</kw>
<msg timestamp="20170811 20:58:37.485" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:37.181" endtime="20170811 20:58:37.485"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:37.486" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:37.485" endtime="20170811 20:58:37.486"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:58:37.486" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:58:37.487" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:58:37.487" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:58:37.486" endtime="20170811 20:58:37.487"></status>
</kw>
<msg timestamp="20170811 20:58:37.487" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 20:58:37.180" endtime="20170811 20:58:37.487"></status>
</kw>
<msg timestamp="20170811 20:58:37.487" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 20:58:37.180" endtime="20170811 20:58:37.487"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 20:58:37.488" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 20:58:37.488" endtime="20170811 20:58:37.488"></status>
</kw>
<status status="FAIL" starttime="20170811 20:58:36.784" endtime="20170811 20:58:37.488"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:58:47.493" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:58:47.493" endtime="20170811 20:58:47.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:58:47.494" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:58:47.494" endtime="20170811 20:58:47.494"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:58:47.495" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:58:47.495" endtime="20170811 20:58:47.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:58:47.496" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:58:47.495" endtime="20170811 20:58:47.496"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:58:47.716" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:58:47.496" endtime="20170811 20:58:47.716"></status>
</kw>
<msg timestamp="20170811 20:58:47.716" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:58:47.718" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:47.496" endtime="20170811 20:58:47.718"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:58:47.719" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:47.718" endtime="20170811 20:58:47.719"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:47.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:47.719" endtime="20170811 20:58:47.719"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:47.492" endtime="20170811 20:58:47.719"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:47.492" endtime="20170811 20:58:47.720"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:47.491" endtime="20170811 20:58:47.720"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:58:47.720" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:58:47.720" endtime="20170811 20:58:47.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:47.722" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:47.722" endtime="20170811 20:58:47.722"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:47.723" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:47.723" endtime="20170811 20:58:47.723"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:47.723" endtime="20170811 20:58:47.724"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:47.721" endtime="20170811 20:58:47.724"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:47.721" endtime="20170811 20:58:47.724"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:58:47.812" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:58:47.812" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:47.724" endtime="20170811 20:58:47.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:47.814" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:47.814" endtime="20170811 20:58:47.814"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:47.815" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:47.815" endtime="20170811 20:58:47.815"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:47.814" endtime="20170811 20:58:47.815"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:47.813" endtime="20170811 20:58:47.816"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:47.813" endtime="20170811 20:58:47.816"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:58:47.816" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:58:47.816" endtime="20170811 20:58:47.816"></status>
</kw>
<msg timestamp="20170811 20:58:47.816" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:47.490" endtime="20170811 20:58:47.816"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:47.819" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:47.818" endtime="20170811 20:58:47.819"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:58:47.820" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:58:47.820" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:58:47.820" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:58:47.819" endtime="20170811 20:58:47.820"></status>
</kw>
<msg timestamp="20170811 20:58:47.820" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:58:47.490" endtime="20170811 20:58:47.820"></status>
</kw>
<msg timestamp="20170811 20:58:47.821" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:58:47.489" endtime="20170811 20:58:47.821"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:58:47.821" endtime="20170811 20:58:47.822"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:47.489" endtime="20170811 20:58:47.822"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:58:47.827" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:58:47.826" endtime="20170811 20:58:47.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:58:47.828" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:58:47.828" endtime="20170811 20:58:47.828"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:58:47.829" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:58:47.828" endtime="20170811 20:58:47.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:58:47.829" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:58:47.829" endtime="20170811 20:58:47.829"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:58:48.077" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:58:47.830" endtime="20170811 20:58:48.077"></status>
</kw>
<msg timestamp="20170811 20:58:48.077" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:58:48.077" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:47.830" endtime="20170811 20:58:48.077"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:58:48.078" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:48.077" endtime="20170811 20:58:48.078"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:48.078" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:48.078" endtime="20170811 20:58:48.078"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:47.826" endtime="20170811 20:58:48.079"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:47.825" endtime="20170811 20:58:48.079"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:47.824" endtime="20170811 20:58:48.079"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:58:48.079" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:58:48.079" endtime="20170811 20:58:48.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:48.082" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:48.081" endtime="20170811 20:58:48.082"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:48.083" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:48.082" endtime="20170811 20:58:48.083"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:48.082" endtime="20170811 20:58:48.083"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:48.080" endtime="20170811 20:58:48.083"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:48.080" endtime="20170811 20:58:48.083"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:58:48.178" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:58:48.178" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:48.084" endtime="20170811 20:58:48.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:48.180" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:48.180" endtime="20170811 20:58:48.180"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:48.181" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:48.181" endtime="20170811 20:58:48.181"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:48.180" endtime="20170811 20:58:48.181"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:48.179" endtime="20170811 20:58:48.182"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:48.179" endtime="20170811 20:58:48.182"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:58:48.182" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:58:48.182" endtime="20170811 20:58:48.182"></status>
</kw>
<msg timestamp="20170811 20:58:48.182" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:47.823" endtime="20170811 20:58:48.182"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:48.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:48.183" endtime="20170811 20:58:48.183"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:58:48.184" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:58:48.184" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:58:48.184" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:58:48.183" endtime="20170811 20:58:48.184"></status>
</kw>
<msg timestamp="20170811 20:58:48.184" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 20:58:47.822" endtime="20170811 20:58:48.184"></status>
</kw>
<msg timestamp="20170811 20:58:48.184" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 20:58:47.822" endtime="20170811 20:58:48.184"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 20:58:48.185" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 20:58:48.185" endtime="20170811 20:58:48.185"></status>
</kw>
<status status="FAIL" starttime="20170811 20:58:47.489" endtime="20170811 20:58:48.185"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:58:58.190" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:58:58.190" endtime="20170811 20:58:58.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:58:58.191" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:58:58.191" endtime="20170811 20:58:58.191"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:58:58.192" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:58:58.191" endtime="20170811 20:58:58.192"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:58:58.193" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:58:58.192" endtime="20170811 20:58:58.193"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:58:58.376" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:58:58.194" endtime="20170811 20:58:58.376"></status>
</kw>
<msg timestamp="20170811 20:58:58.377" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:58:58.377" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:58.193" endtime="20170811 20:58:58.377"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:58:58.377" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:58.377" endtime="20170811 20:58:58.377"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:58.378" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:58.378" endtime="20170811 20:58:58.378"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.189" endtime="20170811 20:58:58.378"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.189" endtime="20170811 20:58:58.378"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.188" endtime="20170811 20:58:58.378"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:58:58.379" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:58:58.379" endtime="20170811 20:58:58.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:58.381" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:58.380" endtime="20170811 20:58:58.381"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:58.382" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:58.382" endtime="20170811 20:58:58.382"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.381" endtime="20170811 20:58:58.382"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.380" endtime="20170811 20:58:58.382"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.379" endtime="20170811 20:58:58.382"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:58:58.476" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:58:58.476" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:58.383" endtime="20170811 20:58:58.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:58.478" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:58.477" endtime="20170811 20:58:58.478"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:58.478" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:58.478" endtime="20170811 20:58:58.479"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.478" endtime="20170811 20:58:58.479"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.477" endtime="20170811 20:58:58.479"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.476" endtime="20170811 20:58:58.479"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:58:58.479" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:58:58.479" endtime="20170811 20:58:58.479"></status>
</kw>
<msg timestamp="20170811 20:58:58.480" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:58.188" endtime="20170811 20:58:58.480"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:58.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:58.480" endtime="20170811 20:58:58.480"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:58:58.481" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:58:58.481" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:58:58.481" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:58:58.480" endtime="20170811 20:58:58.481"></status>
</kw>
<msg timestamp="20170811 20:58:58.481" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:58:58.187" endtime="20170811 20:58:58.481"></status>
</kw>
<msg timestamp="20170811 20:58:58.482" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:58:58.187" endtime="20170811 20:58:58.482"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:58:58.482" endtime="20170811 20:58:58.482"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.186" endtime="20170811 20:58:58.482"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:58:58.486" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:58:58.486" endtime="20170811 20:58:58.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:58:58.487" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:58:58.487" endtime="20170811 20:58:58.487"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:58:58.488" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:58:58.487" endtime="20170811 20:58:58.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:58:58.488" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:58:58.488" endtime="20170811 20:58:58.488"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:58:58.742" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:58:58.489" endtime="20170811 20:58:58.742"></status>
</kw>
<msg timestamp="20170811 20:58:58.742" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:58:58.742" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:58.489" endtime="20170811 20:58:58.742"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:58:58.743" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:58.743" endtime="20170811 20:58:58.743"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:58.744" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:58.744" endtime="20170811 20:58:58.744"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.485" endtime="20170811 20:58:58.745"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.485" endtime="20170811 20:58:58.745"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.484" endtime="20170811 20:58:58.745"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:58:58.746" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:58:58.745" endtime="20170811 20:58:58.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:58.749" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:58.748" endtime="20170811 20:58:58.749"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:58.750" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:58:58.750" endtime="20170811 20:58:58.750"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.749" endtime="20170811 20:58:58.750"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.747" endtime="20170811 20:58:58.751"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.746" endtime="20170811 20:58:58.751"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:58:58.889" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:58:58.889" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:58.751" endtime="20170811 20:58:58.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:58:58.891" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:58.891" endtime="20170811 20:58:58.891"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:58:58.893" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:58:58.892" endtime="20170811 20:58:58.893"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.891" endtime="20170811 20:58:58.893"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.890" endtime="20170811 20:58:58.893"></status>
</kw>
<status status="PASS" starttime="20170811 20:58:58.890" endtime="20170811 20:58:58.893"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:58:58.893" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:58:58.893" endtime="20170811 20:58:58.894"></status>
</kw>
<msg timestamp="20170811 20:58:58.894" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:58:58.483" endtime="20170811 20:58:58.894"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:58:58.894" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:58:58.894" endtime="20170811 20:58:58.894"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:58:58.895" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:58:58.895" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:58:58.895" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:58:58.895" endtime="20170811 20:58:58.895"></status>
</kw>
<msg timestamp="20170811 20:58:58.895" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 20:58:58.483" endtime="20170811 20:58:58.895"></status>
</kw>
<msg timestamp="20170811 20:58:58.896" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 20:58:58.482" endtime="20170811 20:58:58.896"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 20:58:58.896" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 20:58:58.896" endtime="20170811 20:58:58.896"></status>
</kw>
<status status="FAIL" starttime="20170811 20:58:58.186" endtime="20170811 20:58:58.897"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:59:08.902" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:59:08.901" endtime="20170811 20:59:08.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:59:08.902" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:59:08.902" endtime="20170811 20:59:08.903"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:59:08.903" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:59:08.903" endtime="20170811 20:59:08.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:59:08.904" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:59:08.903" endtime="20170811 20:59:08.904"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:59:09.090" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:59:08.905" endtime="20170811 20:59:09.090"></status>
</kw>
<msg timestamp="20170811 20:59:09.090" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:59:09.090" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:08.904" endtime="20170811 20:59:09.090"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:59:09.091" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:09.091" endtime="20170811 20:59:09.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:09.092" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:09.092" endtime="20170811 20:59:09.092"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:08.901" endtime="20170811 20:59:09.092"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:08.900" endtime="20170811 20:59:09.092"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:08.900" endtime="20170811 20:59:09.092"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:59:09.093" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:59:09.093" endtime="20170811 20:59:09.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:09.095" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:09.094" endtime="20170811 20:59:09.095"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:09.096" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:09.096" endtime="20170811 20:59:09.096"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:09.095" endtime="20170811 20:59:09.096"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:09.094" endtime="20170811 20:59:09.096"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:09.093" endtime="20170811 20:59:09.096"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:59:09.160" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:59:09.160" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:09.097" endtime="20170811 20:59:09.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:09.162" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:09.162" endtime="20170811 20:59:09.162"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:09.163" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:09.163" endtime="20170811 20:59:09.163"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:09.162" endtime="20170811 20:59:09.163"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:09.161" endtime="20170811 20:59:09.163"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:09.161" endtime="20170811 20:59:09.164"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:59:09.164" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:59:09.164" endtime="20170811 20:59:09.164"></status>
</kw>
<msg timestamp="20170811 20:59:09.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:08.899" endtime="20170811 20:59:09.165"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:09.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:09.165" endtime="20170811 20:59:09.166"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:59:09.166" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:59:09.166" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:59:09.167" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:59:09.166" endtime="20170811 20:59:09.167"></status>
</kw>
<msg timestamp="20170811 20:59:09.167" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:59:08.898" endtime="20170811 20:59:09.167"></status>
</kw>
<msg timestamp="20170811 20:59:09.167" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:59:08.898" endtime="20170811 20:59:09.168"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:59:09.168" endtime="20170811 20:59:09.168"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:08.898" endtime="20170811 20:59:09.168"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:59:09.172" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:59:09.172" endtime="20170811 20:59:09.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:59:09.177" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:59:09.177" endtime="20170811 20:59:09.178"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:59:09.178" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:59:09.178" endtime="20170811 20:59:09.178"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:59:09.179" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:59:09.178" endtime="20170811 20:59:09.179"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:59:09.399" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:59:09.181" endtime="20170811 20:59:09.399"></status>
</kw>
<msg timestamp="20170811 20:59:09.400" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:59:09.400" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:09.179" endtime="20170811 20:59:09.400"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:59:09.400" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:09.400" endtime="20170811 20:59:09.400"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:09.401" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:09.401" endtime="20170811 20:59:09.401"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:09.171" endtime="20170811 20:59:09.401"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:09.171" endtime="20170811 20:59:09.401"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:09.170" endtime="20170811 20:59:09.401"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:59:09.402" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:59:09.402" endtime="20170811 20:59:09.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:09.404" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:09.404" endtime="20170811 20:59:09.404"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:09.405" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:09.405" endtime="20170811 20:59:09.405"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:09.405" endtime="20170811 20:59:09.405"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:09.403" endtime="20170811 20:59:09.406"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:09.402" endtime="20170811 20:59:09.406"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:59:09.505" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:59:09.505" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:09.406" endtime="20170811 20:59:09.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:09.507" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:09.507" endtime="20170811 20:59:09.507"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:09.508" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:09.508" endtime="20170811 20:59:09.508"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:09.507" endtime="20170811 20:59:09.508"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:09.506" endtime="20170811 20:59:09.508"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:09.506" endtime="20170811 20:59:09.508"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:59:09.509" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:59:09.509" endtime="20170811 20:59:09.509"></status>
</kw>
<msg timestamp="20170811 20:59:09.509" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:09.169" endtime="20170811 20:59:09.509"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:09.510" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:09.509" endtime="20170811 20:59:09.510"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:59:09.510" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:59:09.510" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:59:09.510" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:59:09.510" endtime="20170811 20:59:09.510"></status>
</kw>
<msg timestamp="20170811 20:59:09.511" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 20:59:09.169" endtime="20170811 20:59:09.511"></status>
</kw>
<msg timestamp="20170811 20:59:09.511" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 20:59:09.169" endtime="20170811 20:59:09.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 20:59:09.512" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 20:59:09.511" endtime="20170811 20:59:09.512"></status>
</kw>
<status status="FAIL" starttime="20170811 20:59:08.897" endtime="20170811 20:59:09.512"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:59:19.517" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:59:19.517" endtime="20170811 20:59:19.518"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:59:19.518" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:59:19.518" endtime="20170811 20:59:19.518"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:59:19.519" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:59:19.518" endtime="20170811 20:59:19.519"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:59:19.519" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:59:19.519" endtime="20170811 20:59:19.519"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:59:19.720" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:59:19.520" endtime="20170811 20:59:19.720"></status>
</kw>
<msg timestamp="20170811 20:59:19.720" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:59:19.720" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:19.520" endtime="20170811 20:59:19.720"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:59:19.721" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:19.720" endtime="20170811 20:59:19.721"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:19.721" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:19.721" endtime="20170811 20:59:19.721"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:19.516" endtime="20170811 20:59:19.721"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:19.516" endtime="20170811 20:59:19.722"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:19.515" endtime="20170811 20:59:19.722"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:59:19.722" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:59:19.722" endtime="20170811 20:59:19.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:19.724" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:19.724" endtime="20170811 20:59:19.724"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:19.726" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:19.725" endtime="20170811 20:59:19.726"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:19.725" endtime="20170811 20:59:19.726"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:19.723" endtime="20170811 20:59:19.726"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:19.723" endtime="20170811 20:59:19.726"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:59:19.789" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:59:19.789" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:19.726" endtime="20170811 20:59:19.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:19.791" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:19.790" endtime="20170811 20:59:19.791"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:19.792" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:19.792" endtime="20170811 20:59:19.792"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:19.791" endtime="20170811 20:59:19.792"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:19.790" endtime="20170811 20:59:19.792"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:19.789" endtime="20170811 20:59:19.792"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:59:19.793" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:59:19.792" endtime="20170811 20:59:19.793"></status>
</kw>
<msg timestamp="20170811 20:59:19.793" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:19.515" endtime="20170811 20:59:19.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:19.793" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:19.793" endtime="20170811 20:59:19.794"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:59:19.794" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:59:19.794" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:59:19.794" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:59:19.794" endtime="20170811 20:59:19.794"></status>
</kw>
<msg timestamp="20170811 20:59:19.795" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:59:19.514" endtime="20170811 20:59:19.795"></status>
</kw>
<msg timestamp="20170811 20:59:19.795" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:59:19.513" endtime="20170811 20:59:19.795"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:59:19.796" endtime="20170811 20:59:19.796"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:19.513" endtime="20170811 20:59:19.796"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:59:19.799" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:59:19.799" endtime="20170811 20:59:19.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:59:19.800" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:59:19.800" endtime="20170811 20:59:19.800"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:59:19.801" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:59:19.801" endtime="20170811 20:59:19.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:59:19.802" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:59:19.801" endtime="20170811 20:59:19.802"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:59:19.981" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:59:19.802" endtime="20170811 20:59:19.981"></status>
</kw>
<msg timestamp="20170811 20:59:19.981" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:59:19.981" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:19.802" endtime="20170811 20:59:19.982"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:59:19.982" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:19.982" endtime="20170811 20:59:19.982"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:19.983" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:19.983" endtime="20170811 20:59:19.983"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:19.799" endtime="20170811 20:59:19.984"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:19.798" endtime="20170811 20:59:19.984"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:19.798" endtime="20170811 20:59:19.984"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:59:19.985" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:59:19.984" endtime="20170811 20:59:19.985"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:19.988" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:19.987" endtime="20170811 20:59:19.988"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:19.989" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:19.989" endtime="20170811 20:59:19.989"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:19.988" endtime="20170811 20:59:19.989"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:19.986" endtime="20170811 20:59:19.989"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:19.985" endtime="20170811 20:59:19.989"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:59:20.078" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:59:20.078" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:19.990" endtime="20170811 20:59:20.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:20.080" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:20.079" endtime="20170811 20:59:20.080"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:20.081" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:20.080" endtime="20170811 20:59:20.081"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:20.080" endtime="20170811 20:59:20.081"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:20.079" endtime="20170811 20:59:20.081"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:20.078" endtime="20170811 20:59:20.081"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:59:20.081" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:59:20.081" endtime="20170811 20:59:20.081"></status>
</kw>
<msg timestamp="20170811 20:59:20.082" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:19.797" endtime="20170811 20:59:20.082"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:20.082" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:20.082" endtime="20170811 20:59:20.082"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:59:20.083" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:59:20.083" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:59:20.083" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:59:20.083" endtime="20170811 20:59:20.083"></status>
</kw>
<msg timestamp="20170811 20:59:20.083" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 20:59:19.797" endtime="20170811 20:59:20.083"></status>
</kw>
<msg timestamp="20170811 20:59:20.084" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 20:59:19.796" endtime="20170811 20:59:20.084"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 20:59:20.084" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 20:59:20.084" endtime="20170811 20:59:20.084"></status>
</kw>
<status status="FAIL" starttime="20170811 20:59:19.512" endtime="20170811 20:59:20.085"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:59:30.090" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:59:30.090" endtime="20170811 20:59:30.091"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:59:30.091" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:59:30.091" endtime="20170811 20:59:30.091"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:59:30.092" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:59:30.091" endtime="20170811 20:59:30.092"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:59:30.092" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:59:30.092" endtime="20170811 20:59:30.092"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:59:30.346" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:59:30.093" endtime="20170811 20:59:30.346"></status>
</kw>
<msg timestamp="20170811 20:59:30.346" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:59:30.346" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:30.093" endtime="20170811 20:59:30.346"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:59:30.347" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:30.347" endtime="20170811 20:59:30.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:30.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:30.347" endtime="20170811 20:59:30.348"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.089" endtime="20170811 20:59:30.348"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.088" endtime="20170811 20:59:30.348"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.088" endtime="20170811 20:59:30.348"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:59:30.349" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:59:30.348" endtime="20170811 20:59:30.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:30.351" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:30.350" endtime="20170811 20:59:30.351"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:30.352" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:30.351" endtime="20170811 20:59:30.352"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.351" endtime="20170811 20:59:30.352"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.349" endtime="20170811 20:59:30.352"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.349" endtime="20170811 20:59:30.352"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:59:30.429" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:59:30.429" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:30.352" endtime="20170811 20:59:30.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:30.430" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:30.430" endtime="20170811 20:59:30.430"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:30.432" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:30.431" endtime="20170811 20:59:30.432"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.431" endtime="20170811 20:59:30.432"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.429" endtime="20170811 20:59:30.432"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.429" endtime="20170811 20:59:30.432"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:59:30.432" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:59:30.432" endtime="20170811 20:59:30.433"></status>
</kw>
<msg timestamp="20170811 20:59:30.433" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:30.087" endtime="20170811 20:59:30.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:30.433" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:30.433" endtime="20170811 20:59:30.434"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:59:30.434" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:59:30.434" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:59:30.434" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:59:30.434" endtime="20170811 20:59:30.434"></status>
</kw>
<msg timestamp="20170811 20:59:30.435" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:59:30.086" endtime="20170811 20:59:30.435"></status>
</kw>
<msg timestamp="20170811 20:59:30.435" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:59:30.086" endtime="20170811 20:59:30.435"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:59:30.435" endtime="20170811 20:59:30.436"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.086" endtime="20170811 20:59:30.436"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:59:30.439" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:59:30.439" endtime="20170811 20:59:30.439"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:59:30.440" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:59:30.440" endtime="20170811 20:59:30.440"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:59:30.441" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:59:30.440" endtime="20170811 20:59:30.441"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:59:30.441" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:59:30.441" endtime="20170811 20:59:30.441"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:59:30.653" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:59:30.442" endtime="20170811 20:59:30.653"></status>
</kw>
<msg timestamp="20170811 20:59:30.653" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:59:30.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:30.442" endtime="20170811 20:59:30.653"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:59:30.654" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:30.654" endtime="20170811 20:59:30.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:30.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:30.654" endtime="20170811 20:59:30.655"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.438" endtime="20170811 20:59:30.655"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.438" endtime="20170811 20:59:30.655"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.437" endtime="20170811 20:59:30.655"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:59:30.656" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:59:30.655" endtime="20170811 20:59:30.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:30.659" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:30.658" endtime="20170811 20:59:30.659"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:30.660" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:30.660" endtime="20170811 20:59:30.661"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.659" endtime="20170811 20:59:30.661"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.657" endtime="20170811 20:59:30.661"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.656" endtime="20170811 20:59:30.661"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:59:30.750" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:59:30.750" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:30.661" endtime="20170811 20:59:30.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:30.752" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:30.751" endtime="20170811 20:59:30.752"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:30.752" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:30.752" endtime="20170811 20:59:30.753"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.752" endtime="20170811 20:59:30.753"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.751" endtime="20170811 20:59:30.753"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:30.750" endtime="20170811 20:59:30.753"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:59:30.753" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:59:30.753" endtime="20170811 20:59:30.753"></status>
</kw>
<msg timestamp="20170811 20:59:30.753" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:30.437" endtime="20170811 20:59:30.754"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:30.754" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:30.754" endtime="20170811 20:59:30.754"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:59:30.755" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:59:30.755" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:59:30.755" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:59:30.755" endtime="20170811 20:59:30.755"></status>
</kw>
<msg timestamp="20170811 20:59:30.755" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 20:59:30.436" endtime="20170811 20:59:30.755"></status>
</kw>
<msg timestamp="20170811 20:59:30.756" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 20:59:30.436" endtime="20170811 20:59:30.756"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 20:59:30.756" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 20:59:30.756" endtime="20170811 20:59:30.756"></status>
</kw>
<status status="FAIL" starttime="20170811 20:59:30.085" endtime="20170811 20:59:30.757"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:59:40.762" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:59:40.761" endtime="20170811 20:59:40.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:59:40.763" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:59:40.762" endtime="20170811 20:59:40.763"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:59:40.763" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:59:40.763" endtime="20170811 20:59:40.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:59:40.764" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:59:40.764" endtime="20170811 20:59:40.764"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:59:40.967" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:59:40.765" endtime="20170811 20:59:40.967"></status>
</kw>
<msg timestamp="20170811 20:59:40.968" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:59:40.968" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:40.765" endtime="20170811 20:59:40.968"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:59:40.968" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:40.968" endtime="20170811 20:59:40.968"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:40.969" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:40.969" endtime="20170811 20:59:40.969"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:40.761" endtime="20170811 20:59:40.969"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:40.760" endtime="20170811 20:59:40.969"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:40.760" endtime="20170811 20:59:40.969"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:59:40.970" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:59:40.970" endtime="20170811 20:59:40.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:40.972" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:40.972" endtime="20170811 20:59:40.972"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:40.973" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:40.973" endtime="20170811 20:59:40.973"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:40.972" endtime="20170811 20:59:40.973"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:40.971" endtime="20170811 20:59:40.973"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:40.970" endtime="20170811 20:59:40.974"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:59:41.037" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:59:41.037" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:40.974" endtime="20170811 20:59:41.037"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:41.039" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:41.038" endtime="20170811 20:59:41.039"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:41.040" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:41.040" endtime="20170811 20:59:41.040"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:41.039" endtime="20170811 20:59:41.040"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:41.038" endtime="20170811 20:59:41.040"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:41.037" endtime="20170811 20:59:41.040"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:59:41.041" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:59:41.041" endtime="20170811 20:59:41.041"></status>
</kw>
<msg timestamp="20170811 20:59:41.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:40.759" endtime="20170811 20:59:41.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:41.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:41.041" endtime="20170811 20:59:41.042"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:59:41.042" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:59:41.042" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:59:41.042" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:59:41.042" endtime="20170811 20:59:41.042"></status>
</kw>
<msg timestamp="20170811 20:59:41.043" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:59:40.758" endtime="20170811 20:59:41.043"></status>
</kw>
<msg timestamp="20170811 20:59:41.043" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:59:40.758" endtime="20170811 20:59:41.043"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:59:41.043" endtime="20170811 20:59:41.044"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:40.758" endtime="20170811 20:59:41.044"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:59:41.048" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:59:41.047" endtime="20170811 20:59:41.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:59:41.049" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:59:41.048" endtime="20170811 20:59:41.049"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:59:41.049" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:59:41.049" endtime="20170811 20:59:41.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:59:41.050" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:59:41.050" endtime="20170811 20:59:41.050"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:59:41.260" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:59:41.051" endtime="20170811 20:59:41.260"></status>
</kw>
<msg timestamp="20170811 20:59:41.260" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:59:41.260" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:41.050" endtime="20170811 20:59:41.260"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:59:41.261" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:41.260" endtime="20170811 20:59:41.261"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:41.261" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:41.261" endtime="20170811 20:59:41.262"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:41.047" endtime="20170811 20:59:41.262"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:41.046" endtime="20170811 20:59:41.262"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:41.045" endtime="20170811 20:59:41.262"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:59:41.263" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:59:41.262" endtime="20170811 20:59:41.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:41.265" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:41.264" endtime="20170811 20:59:41.265"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:41.266" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:41.265" endtime="20170811 20:59:41.266"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:41.265" endtime="20170811 20:59:41.266"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:41.263" endtime="20170811 20:59:41.266"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:41.263" endtime="20170811 20:59:41.266"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:59:41.375" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:59:41.376" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:41.266" endtime="20170811 20:59:41.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:41.377" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:41.377" endtime="20170811 20:59:41.377"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:41.379" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:41.378" endtime="20170811 20:59:41.379"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:41.378" endtime="20170811 20:59:41.379"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:41.376" endtime="20170811 20:59:41.379"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:41.376" endtime="20170811 20:59:41.379"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:59:41.379" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:59:41.379" endtime="20170811 20:59:41.379"></status>
</kw>
<msg timestamp="20170811 20:59:41.380" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:41.045" endtime="20170811 20:59:41.380"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:41.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:41.380" endtime="20170811 20:59:41.380"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:59:41.381" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:59:41.381" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:59:41.381" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:59:41.381" endtime="20170811 20:59:41.381"></status>
</kw>
<msg timestamp="20170811 20:59:41.381" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 20:59:41.044" endtime="20170811 20:59:41.381"></status>
</kw>
<msg timestamp="20170811 20:59:41.382" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 20:59:41.044" endtime="20170811 20:59:41.382"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 20:59:41.382" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 20:59:41.382" endtime="20170811 20:59:41.382"></status>
</kw>
<status status="FAIL" starttime="20170811 20:59:40.757" endtime="20170811 20:59:41.383"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:59:51.388" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:59:51.387" endtime="20170811 20:59:51.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:59:51.389" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:59:51.389" endtime="20170811 20:59:51.389"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:59:51.390" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:59:51.390" endtime="20170811 20:59:51.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:59:51.391" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:59:51.391" endtime="20170811 20:59:51.391"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:59:51.588" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:59:51.392" endtime="20170811 20:59:51.588"></status>
</kw>
<msg timestamp="20170811 20:59:51.588" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:59:51.589" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:51.392" endtime="20170811 20:59:51.589"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:59:51.589" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:51.589" endtime="20170811 20:59:51.589"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:51.590" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:51.590" endtime="20170811 20:59:51.590"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.387" endtime="20170811 20:59:51.590"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.386" endtime="20170811 20:59:51.590"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.386" endtime="20170811 20:59:51.590"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:59:51.591" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 20:59:51.590" endtime="20170811 20:59:51.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:51.593" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:51.592" endtime="20170811 20:59:51.593"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:51.594" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:51.594" endtime="20170811 20:59:51.594"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.593" endtime="20170811 20:59:51.594"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.592" endtime="20170811 20:59:51.595"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.591" endtime="20170811 20:59:51.595"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:59:51.673" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 20:59:51.673" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:51.595" endtime="20170811 20:59:51.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:51.675" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:51.674" endtime="20170811 20:59:51.675"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:51.676" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:51.675" endtime="20170811 20:59:51.676"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.675" endtime="20170811 20:59:51.676"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.674" endtime="20170811 20:59:51.676"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.673" endtime="20170811 20:59:51.676"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:59:51.676" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:59:51.676" endtime="20170811 20:59:51.676"></status>
</kw>
<msg timestamp="20170811 20:59:51.677" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:51.385" endtime="20170811 20:59:51.677"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:51.677" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:51.677" endtime="20170811 20:59:51.677"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:59:51.678" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:59:51.678" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:59:51.678" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:59:51.678" endtime="20170811 20:59:51.678"></status>
</kw>
<msg timestamp="20170811 20:59:51.678" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 20:59:51.384" endtime="20170811 20:59:51.678"></status>
</kw>
<msg timestamp="20170811 20:59:51.679" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 20:59:51.384" endtime="20170811 20:59:51.679"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 20:59:51.679" endtime="20170811 20:59:51.679"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.384" endtime="20170811 20:59:51.679"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 20:59:51.683" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 20:59:51.682" endtime="20170811 20:59:51.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 20:59:51.684" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 20:59:51.684" endtime="20170811 20:59:51.684"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 20:59:51.685" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 20:59:51.684" endtime="20170811 20:59:51.685"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 20:59:51.685" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 20:59:51.685" endtime="20170811 20:59:51.685"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 20:59:51.862" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 20:59:51.686" endtime="20170811 20:59:51.863"></status>
</kw>
<msg timestamp="20170811 20:59:51.863" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 20:59:51.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:51.686" endtime="20170811 20:59:51.863"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 20:59:51.863" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:51.863" endtime="20170811 20:59:51.864"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:51.864" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:51.864" endtime="20170811 20:59:51.864"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.682" endtime="20170811 20:59:51.864"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.682" endtime="20170811 20:59:51.865"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.681" endtime="20170811 20:59:51.865"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 20:59:51.865" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 20:59:51.865" endtime="20170811 20:59:51.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:51.867" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:51.867" endtime="20170811 20:59:51.867"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:51.868" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 20:59:51.868" endtime="20170811 20:59:51.868"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.868" endtime="20170811 20:59:51.869"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.866" endtime="20170811 20:59:51.869"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.866" endtime="20170811 20:59:51.869"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 20:59:51.969" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 20:59:51.969" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:51.869" endtime="20170811 20:59:51.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 20:59:51.970" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:51.970" endtime="20170811 20:59:51.971"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 20:59:51.971" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 20:59:51.971" endtime="20170811 20:59:51.972"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.971" endtime="20170811 20:59:51.972"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.970" endtime="20170811 20:59:51.972"></status>
</kw>
<status status="PASS" starttime="20170811 20:59:51.969" endtime="20170811 20:59:51.972"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 20:59:51.972" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 20:59:51.972" endtime="20170811 20:59:51.972"></status>
</kw>
<msg timestamp="20170811 20:59:51.972" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 20:59:51.680" endtime="20170811 20:59:51.973"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 20:59:51.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 20:59:51.973" endtime="20170811 20:59:51.973"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 20:59:51.974" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 20:59:51.974" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 20:59:51.974" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 20:59:51.973" endtime="20170811 20:59:51.974"></status>
</kw>
<msg timestamp="20170811 20:59:51.974" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 20:59:51.680" endtime="20170811 20:59:51.974"></status>
</kw>
<msg timestamp="20170811 20:59:51.975" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 20:59:51.679" endtime="20170811 20:59:51.975"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 20:59:51.975" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 20:59:51.975" endtime="20170811 20:59:51.975"></status>
</kw>
<status status="FAIL" starttime="20170811 20:59:51.383" endtime="20170811 20:59:51.976"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:00:01.984" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:00:01.983" endtime="20170811 21:00:01.984"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:00:01.985" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:00:01.985" endtime="20170811 21:00:01.985"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:00:01.986" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:00:01.985" endtime="20170811 21:00:01.986"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:00:01.986" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:00:01.986" endtime="20170811 21:00:01.986"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:00:02.185" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:00:01.987" endtime="20170811 21:00:02.186"></status>
</kw>
<msg timestamp="20170811 21:00:02.186" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:00:02.186" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:01.987" endtime="20170811 21:00:02.186"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:00:02.186" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:02.186" endtime="20170811 21:00:02.187"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:02.187" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:02.187" endtime="20170811 21:00:02.187"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:01.983" endtime="20170811 21:00:02.187"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:01.982" endtime="20170811 21:00:02.188"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:01.982" endtime="20170811 21:00:02.188"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:00:02.188" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:00:02.188" endtime="20170811 21:00:02.188"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:02.190" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:02.190" endtime="20170811 21:00:02.190"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:02.192" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:02.191" endtime="20170811 21:00:02.192"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:02.191" endtime="20170811 21:00:02.192"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:02.189" endtime="20170811 21:00:02.192"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:02.189" endtime="20170811 21:00:02.192"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:00:02.256" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:00:02.257" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:02.192" endtime="20170811 21:00:02.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:02.258" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:02.258" endtime="20170811 21:00:02.258"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:02.259" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:02.259" endtime="20170811 21:00:02.259"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:02.259" endtime="20170811 21:00:02.259"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:02.257" endtime="20170811 21:00:02.260"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:02.257" endtime="20170811 21:00:02.260"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:00:02.260" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:00:02.260" endtime="20170811 21:00:02.260"></status>
</kw>
<msg timestamp="20170811 21:00:02.260" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:01.981" endtime="20170811 21:00:02.260"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:02.261" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:02.261" endtime="20170811 21:00:02.261"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:00:02.262" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:00:02.262" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:00:02.262" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:00:02.261" endtime="20170811 21:00:02.262"></status>
</kw>
<msg timestamp="20170811 21:00:02.262" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:00:01.977" endtime="20170811 21:00:02.262"></status>
</kw>
<msg timestamp="20170811 21:00:02.262" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:00:01.977" endtime="20170811 21:00:02.262"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:00:02.263" endtime="20170811 21:00:02.263"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:01.977" endtime="20170811 21:00:02.263"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:00:02.267" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:00:02.266" endtime="20170811 21:00:02.267"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:00:02.267" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:00:02.267" endtime="20170811 21:00:02.267"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:00:02.268" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:00:02.268" endtime="20170811 21:00:02.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:00:02.269" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:00:02.268" endtime="20170811 21:00:02.269"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:00:02.456" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:00:02.270" endtime="20170811 21:00:02.456"></status>
</kw>
<msg timestamp="20170811 21:00:02.456" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:00:02.456" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:02.269" endtime="20170811 21:00:02.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:00:02.457" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:02.457" endtime="20170811 21:00:02.457"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:02.458" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:02.457" endtime="20170811 21:00:02.458"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:02.266" endtime="20170811 21:00:02.458"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:02.265" endtime="20170811 21:00:02.458"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:02.265" endtime="20170811 21:00:02.458"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:00:02.459" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:00:02.458" endtime="20170811 21:00:02.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:02.461" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:02.460" endtime="20170811 21:00:02.461"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:02.462" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:02.461" endtime="20170811 21:00:02.462"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:02.461" endtime="20170811 21:00:02.462"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:02.459" endtime="20170811 21:00:02.462"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:02.459" endtime="20170811 21:00:02.462"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:00:02.564" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:00:02.564" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:02.462" endtime="20170811 21:00:02.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:02.566" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:02.565" endtime="20170811 21:00:02.566"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:02.567" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:02.566" endtime="20170811 21:00:02.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:02.566" endtime="20170811 21:00:02.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:02.565" endtime="20170811 21:00:02.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:02.564" endtime="20170811 21:00:02.567"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:00:02.567" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:00:02.567" endtime="20170811 21:00:02.567"></status>
</kw>
<msg timestamp="20170811 21:00:02.568" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:02.264" endtime="20170811 21:00:02.568"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:02.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:02.568" endtime="20170811 21:00:02.568"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:00:02.569" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:00:02.569" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:00:02.569" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:00:02.569" endtime="20170811 21:00:02.569"></status>
</kw>
<msg timestamp="20170811 21:00:02.569" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:00:02.264" endtime="20170811 21:00:02.570"></status>
</kw>
<msg timestamp="20170811 21:00:02.570" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:00:02.263" endtime="20170811 21:00:02.570"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:00:02.570" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:00:02.570" endtime="20170811 21:00:02.571"></status>
</kw>
<status status="FAIL" starttime="20170811 21:00:01.976" endtime="20170811 21:00:02.571"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:00:12.577" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:00:12.576" endtime="20170811 21:00:12.577"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:00:12.578" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:00:12.577" endtime="20170811 21:00:12.578"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:00:12.578" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:00:12.578" endtime="20170811 21:00:12.578"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:00:12.579" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:00:12.578" endtime="20170811 21:00:12.579"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:00:12.855" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:00:12.580" endtime="20170811 21:00:12.856"></status>
</kw>
<msg timestamp="20170811 21:00:12.856" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:00:12.856" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:12.579" endtime="20170811 21:00:12.856"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:00:12.856" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:12.856" endtime="20170811 21:00:12.856"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:12.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:12.857" endtime="20170811 21:00:12.857"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:12.575" endtime="20170811 21:00:12.857"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:12.575" endtime="20170811 21:00:12.857"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:12.574" endtime="20170811 21:00:12.858"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:00:12.858" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:00:12.858" endtime="20170811 21:00:12.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:12.860" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:12.859" endtime="20170811 21:00:12.860"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:12.861" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:12.861" endtime="20170811 21:00:12.861"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:12.860" endtime="20170811 21:00:12.861"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:12.859" endtime="20170811 21:00:12.862"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:12.858" endtime="20170811 21:00:12.862"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:00:12.925" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:00:12.925" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:12.862" endtime="20170811 21:00:12.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:12.927" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:12.927" endtime="20170811 21:00:12.927"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:12.929" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:12.929" endtime="20170811 21:00:12.929"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:12.928" endtime="20170811 21:00:12.929"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:12.926" endtime="20170811 21:00:12.929"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:12.925" endtime="20170811 21:00:12.929"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:00:12.930" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:00:12.930" endtime="20170811 21:00:12.930"></status>
</kw>
<msg timestamp="20170811 21:00:12.930" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:12.573" endtime="20170811 21:00:12.930"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:12.931" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:12.930" endtime="20170811 21:00:12.931"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:00:12.931" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:00:12.931" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:00:12.931" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:00:12.931" endtime="20170811 21:00:12.931"></status>
</kw>
<msg timestamp="20170811 21:00:12.932" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:00:12.573" endtime="20170811 21:00:12.932"></status>
</kw>
<msg timestamp="20170811 21:00:12.932" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:00:12.572" endtime="20170811 21:00:12.932"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:00:12.932" endtime="20170811 21:00:12.933"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:12.572" endtime="20170811 21:00:12.933"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:00:12.936" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:00:12.936" endtime="20170811 21:00:12.937"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:00:12.937" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:00:12.937" endtime="20170811 21:00:12.937"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:00:12.938" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:00:12.938" endtime="20170811 21:00:12.938"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:00:12.938" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:00:12.938" endtime="20170811 21:00:12.939"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:00:13.145" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:00:12.939" endtime="20170811 21:00:13.145"></status>
</kw>
<msg timestamp="20170811 21:00:13.145" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:00:13.146" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:12.939" endtime="20170811 21:00:13.146"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:00:13.146" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:13.146" endtime="20170811 21:00:13.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:13.147" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:13.147" endtime="20170811 21:00:13.147"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:12.935" endtime="20170811 21:00:13.147"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:12.935" endtime="20170811 21:00:13.147"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:12.934" endtime="20170811 21:00:13.147"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:00:13.148" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:00:13.148" endtime="20170811 21:00:13.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:13.150" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:13.149" endtime="20170811 21:00:13.150"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:13.151" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:13.151" endtime="20170811 21:00:13.151"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:13.151" endtime="20170811 21:00:13.151"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:13.149" endtime="20170811 21:00:13.152"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:13.148" endtime="20170811 21:00:13.152"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:00:13.255" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:00:13.256" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:13.152" endtime="20170811 21:00:13.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:13.257" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:13.257" endtime="20170811 21:00:13.257"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:13.258" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:13.258" endtime="20170811 21:00:13.258"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:13.257" endtime="20170811 21:00:13.258"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:13.256" endtime="20170811 21:00:13.259"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:13.256" endtime="20170811 21:00:13.259"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:00:13.259" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:00:13.259" endtime="20170811 21:00:13.259"></status>
</kw>
<msg timestamp="20170811 21:00:13.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:12.934" endtime="20170811 21:00:13.259"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:13.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:13.260" endtime="20170811 21:00:13.260"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:00:13.261" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:00:13.261" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:00:13.261" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:00:13.260" endtime="20170811 21:00:13.261"></status>
</kw>
<msg timestamp="20170811 21:00:13.261" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:00:12.933" endtime="20170811 21:00:13.261"></status>
</kw>
<msg timestamp="20170811 21:00:13.261" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:00:12.933" endtime="20170811 21:00:13.261"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:00:13.262" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:00:13.262" endtime="20170811 21:00:13.262"></status>
</kw>
<status status="FAIL" starttime="20170811 21:00:12.571" endtime="20170811 21:00:13.262"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:00:23.268" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:00:23.267" endtime="20170811 21:00:23.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:00:23.269" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:00:23.268" endtime="20170811 21:00:23.269"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:00:23.269" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:00:23.269" endtime="20170811 21:00:23.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:00:23.270" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:00:23.270" endtime="20170811 21:00:23.270"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:00:23.566" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:00:23.271" endtime="20170811 21:00:23.566"></status>
</kw>
<msg timestamp="20170811 21:00:23.566" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:00:23.566" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:23.271" endtime="20170811 21:00:23.566"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:00:23.567" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:23.566" endtime="20170811 21:00:23.567"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:23.567" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:23.567" endtime="20170811 21:00:23.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.267" endtime="20170811 21:00:23.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.266" endtime="20170811 21:00:23.568"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.266" endtime="20170811 21:00:23.568"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:00:23.568" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:00:23.568" endtime="20170811 21:00:23.568"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:23.570" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:23.570" endtime="20170811 21:00:23.570"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:23.571" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:23.571" endtime="20170811 21:00:23.571"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.571" endtime="20170811 21:00:23.572"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.569" endtime="20170811 21:00:23.572"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.569" endtime="20170811 21:00:23.572"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:00:23.634" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:00:23.635" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:23.572" endtime="20170811 21:00:23.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:23.636" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:23.636" endtime="20170811 21:00:23.636"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:23.637" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:23.637" endtime="20170811 21:00:23.637"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.637" endtime="20170811 21:00:23.638"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.635" endtime="20170811 21:00:23.638"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.635" endtime="20170811 21:00:23.638"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:00:23.638" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:00:23.638" endtime="20170811 21:00:23.638"></status>
</kw>
<msg timestamp="20170811 21:00:23.639" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:23.265" endtime="20170811 21:00:23.639"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:23.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:23.639" endtime="20170811 21:00:23.640"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:00:23.641" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:00:23.641" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:00:23.641" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:00:23.640" endtime="20170811 21:00:23.641"></status>
</kw>
<msg timestamp="20170811 21:00:23.641" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:00:23.264" endtime="20170811 21:00:23.641"></status>
</kw>
<msg timestamp="20170811 21:00:23.642" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:00:23.264" endtime="20170811 21:00:23.642"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:00:23.642" endtime="20170811 21:00:23.642"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.263" endtime="20170811 21:00:23.643"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:00:23.648" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:00:23.648" endtime="20170811 21:00:23.649"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:00:23.649" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:00:23.649" endtime="20170811 21:00:23.649"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:00:23.650" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:00:23.649" endtime="20170811 21:00:23.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:00:23.650" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:00:23.650" endtime="20170811 21:00:23.650"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:00:23.834" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:00:23.651" endtime="20170811 21:00:23.834"></status>
</kw>
<msg timestamp="20170811 21:00:23.834" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:00:23.834" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:23.651" endtime="20170811 21:00:23.834"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:00:23.835" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:23.835" endtime="20170811 21:00:23.835"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:23.836" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:23.835" endtime="20170811 21:00:23.836"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.647" endtime="20170811 21:00:23.836"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.646" endtime="20170811 21:00:23.836"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.645" endtime="20170811 21:00:23.836"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:00:23.837" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:00:23.836" endtime="20170811 21:00:23.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:23.839" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:23.838" endtime="20170811 21:00:23.839"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:23.840" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:23.840" endtime="20170811 21:00:23.840"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.839" endtime="20170811 21:00:23.840"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.838" endtime="20170811 21:00:23.840"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.837" endtime="20170811 21:00:23.840"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:00:23.942" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:00:23.942" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:23.840" endtime="20170811 21:00:23.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:23.944" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:23.943" endtime="20170811 21:00:23.944"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:23.945" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:23.945" endtime="20170811 21:00:23.946"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.944" endtime="20170811 21:00:23.946"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.943" endtime="20170811 21:00:23.946"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:23.942" endtime="20170811 21:00:23.946"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:00:23.946" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:00:23.946" endtime="20170811 21:00:23.946"></status>
</kw>
<msg timestamp="20170811 21:00:23.946" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:23.644" endtime="20170811 21:00:23.947"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:23.947" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:23.947" endtime="20170811 21:00:23.947"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:00:23.948" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:00:23.948" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:00:23.948" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:00:23.947" endtime="20170811 21:00:23.948"></status>
</kw>
<msg timestamp="20170811 21:00:23.948" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:00:23.643" endtime="20170811 21:00:23.948"></status>
</kw>
<msg timestamp="20170811 21:00:23.949" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:00:23.643" endtime="20170811 21:00:23.949"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:00:23.950" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:00:23.949" endtime="20170811 21:00:23.950"></status>
</kw>
<status status="FAIL" starttime="20170811 21:00:23.263" endtime="20170811 21:00:23.950"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:00:33.955" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:00:33.954" endtime="20170811 21:00:33.955"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:00:33.956" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:00:33.955" endtime="20170811 21:00:33.956"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:00:33.956" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:00:33.956" endtime="20170811 21:00:33.956"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:00:33.957" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:00:33.957" endtime="20170811 21:00:33.957"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:00:34.162" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:00:33.958" endtime="20170811 21:00:34.162"></status>
</kw>
<msg timestamp="20170811 21:00:34.163" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:00:34.163" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:33.957" endtime="20170811 21:00:34.163"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:00:34.163" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:34.163" endtime="20170811 21:00:34.164"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:34.164" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:34.164" endtime="20170811 21:00:34.165"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:33.954" endtime="20170811 21:00:34.165"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:33.953" endtime="20170811 21:00:34.165"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:33.953" endtime="20170811 21:00:34.165"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:00:34.166" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:00:34.165" endtime="20170811 21:00:34.166"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:34.168" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:34.167" endtime="20170811 21:00:34.168"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:34.168" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:34.168" endtime="20170811 21:00:34.169"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:34.168" endtime="20170811 21:00:34.169"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:34.166" endtime="20170811 21:00:34.169"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:34.166" endtime="20170811 21:00:34.169"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:00:34.278" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:00:34.278" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:34.169" endtime="20170811 21:00:34.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:34.280" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:34.280" endtime="20170811 21:00:34.280"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:34.281" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:34.281" endtime="20170811 21:00:34.281"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:34.280" endtime="20170811 21:00:34.281"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:34.279" endtime="20170811 21:00:34.281"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:34.279" endtime="20170811 21:00:34.281"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:00:34.282" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:00:34.282" endtime="20170811 21:00:34.282"></status>
</kw>
<msg timestamp="20170811 21:00:34.282" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:33.952" endtime="20170811 21:00:34.282"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:34.283" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:34.282" endtime="20170811 21:00:34.283"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:00:34.283" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:00:34.283" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:00:34.283" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:00:34.283" endtime="20170811 21:00:34.283"></status>
</kw>
<msg timestamp="20170811 21:00:34.284" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:00:33.952" endtime="20170811 21:00:34.284"></status>
</kw>
<msg timestamp="20170811 21:00:34.284" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:00:33.951" endtime="20170811 21:00:34.284"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:00:34.284" endtime="20170811 21:00:34.285"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:33.951" endtime="20170811 21:00:34.285"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:00:34.288" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:00:34.288" endtime="20170811 21:00:34.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:00:34.290" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:00:34.289" endtime="20170811 21:00:34.290"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:00:34.290" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:00:34.290" endtime="20170811 21:00:34.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:00:34.291" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:00:34.291" endtime="20170811 21:00:34.291"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:00:34.546" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:00:34.292" endtime="20170811 21:00:34.546"></status>
</kw>
<msg timestamp="20170811 21:00:34.546" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:00:34.546" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:34.291" endtime="20170811 21:00:34.546"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:00:34.547" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:34.546" endtime="20170811 21:00:34.547"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:34.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:34.547" endtime="20170811 21:00:34.547"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:34.287" endtime="20170811 21:00:34.548"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:34.287" endtime="20170811 21:00:34.548"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:34.287" endtime="20170811 21:00:34.548"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:00:34.548" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:00:34.548" endtime="20170811 21:00:34.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:34.550" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:34.550" endtime="20170811 21:00:34.550"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:34.551" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:34.551" endtime="20170811 21:00:34.551"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:34.551" endtime="20170811 21:00:34.551"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:34.549" endtime="20170811 21:00:34.552"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:34.549" endtime="20170811 21:00:34.552"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:00:34.640" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:00:34.640" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:34.552" endtime="20170811 21:00:34.640"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:34.642" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:34.641" endtime="20170811 21:00:34.642"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:34.643" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:34.643" endtime="20170811 21:00:34.643"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:34.642" endtime="20170811 21:00:34.643"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:34.641" endtime="20170811 21:00:34.643"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:34.640" endtime="20170811 21:00:34.643"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:00:34.644" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:00:34.644" endtime="20170811 21:00:34.644"></status>
</kw>
<msg timestamp="20170811 21:00:34.644" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:34.286" endtime="20170811 21:00:34.644"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:34.645" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:34.644" endtime="20170811 21:00:34.645"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:00:34.645" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:00:34.646" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:00:34.646" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:00:34.645" endtime="20170811 21:00:34.646"></status>
</kw>
<msg timestamp="20170811 21:00:34.646" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:00:34.285" endtime="20170811 21:00:34.646"></status>
</kw>
<msg timestamp="20170811 21:00:34.646" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:00:34.285" endtime="20170811 21:00:34.646"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:00:34.647" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:00:34.647" endtime="20170811 21:00:34.647"></status>
</kw>
<status status="FAIL" starttime="20170811 21:00:33.950" endtime="20170811 21:00:34.647"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:00:44.653" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:00:44.652" endtime="20170811 21:00:44.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:00:44.654" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:00:44.653" endtime="20170811 21:00:44.654"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:00:44.654" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:00:44.654" endtime="20170811 21:00:44.654"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:00:44.655" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:00:44.655" endtime="20170811 21:00:44.655"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:00:44.834" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:00:44.656" endtime="20170811 21:00:44.834"></status>
</kw>
<msg timestamp="20170811 21:00:44.834" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:00:44.835" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:44.655" endtime="20170811 21:00:44.835"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:00:44.835" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:44.835" endtime="20170811 21:00:44.835"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:44.836" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:44.836" endtime="20170811 21:00:44.836"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:44.652" endtime="20170811 21:00:44.836"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:44.651" endtime="20170811 21:00:44.836"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:44.651" endtime="20170811 21:00:44.836"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:00:44.837" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:00:44.837" endtime="20170811 21:00:44.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:44.839" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:44.838" endtime="20170811 21:00:44.839"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:44.843" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:44.840" endtime="20170811 21:00:44.843"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:44.839" endtime="20170811 21:00:44.843"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:44.838" endtime="20170811 21:00:44.843"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:44.837" endtime="20170811 21:00:44.843"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:00:44.927" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:00:44.927" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:44.844" endtime="20170811 21:00:44.927"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:44.929" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:44.928" endtime="20170811 21:00:44.929"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:44.930" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:44.929" endtime="20170811 21:00:44.930"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:44.929" endtime="20170811 21:00:44.930"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:44.928" endtime="20170811 21:00:44.930"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:44.927" endtime="20170811 21:00:44.930"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:00:44.930" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:00:44.930" endtime="20170811 21:00:44.930"></status>
</kw>
<msg timestamp="20170811 21:00:44.931" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:44.650" endtime="20170811 21:00:44.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:44.931" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:44.931" endtime="20170811 21:00:44.931"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:00:44.932" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:00:44.932" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:00:44.932" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:00:44.932" endtime="20170811 21:00:44.932"></status>
</kw>
<msg timestamp="20170811 21:00:44.932" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:00:44.649" endtime="20170811 21:00:44.933"></status>
</kw>
<msg timestamp="20170811 21:00:44.933" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:00:44.649" endtime="20170811 21:00:44.933"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:00:44.933" endtime="20170811 21:00:44.933"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:44.648" endtime="20170811 21:00:44.934"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:00:44.937" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:00:44.937" endtime="20170811 21:00:44.938"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:00:44.938" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:00:44.938" endtime="20170811 21:00:44.938"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:00:44.939" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:00:44.938" endtime="20170811 21:00:44.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:00:44.939" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:00:44.939" endtime="20170811 21:00:44.939"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:00:45.151" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:00:44.940" endtime="20170811 21:00:45.151"></status>
</kw>
<msg timestamp="20170811 21:00:45.152" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:00:45.152" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:44.940" endtime="20170811 21:00:45.152"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:00:45.152" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:45.152" endtime="20170811 21:00:45.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:45.153" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:45.153" endtime="20170811 21:00:45.153"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:44.936" endtime="20170811 21:00:45.153"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:44.936" endtime="20170811 21:00:45.153"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:44.935" endtime="20170811 21:00:45.153"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:00:45.154" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:00:45.154" endtime="20170811 21:00:45.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:45.156" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:45.155" endtime="20170811 21:00:45.156"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:45.157" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:45.157" endtime="20170811 21:00:45.157"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:45.156" endtime="20170811 21:00:45.157"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:45.155" endtime="20170811 21:00:45.157"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:45.154" endtime="20170811 21:00:45.157"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:00:45.314" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:00:45.314" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:45.158" endtime="20170811 21:00:45.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:45.316" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:45.315" endtime="20170811 21:00:45.316"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:45.317" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:45.317" endtime="20170811 21:00:45.317"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:45.316" endtime="20170811 21:00:45.317"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:45.315" endtime="20170811 21:00:45.317"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:45.314" endtime="20170811 21:00:45.317"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:00:45.318" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:00:45.317" endtime="20170811 21:00:45.318"></status>
</kw>
<msg timestamp="20170811 21:00:45.318" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:44.935" endtime="20170811 21:00:45.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:45.318" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:45.318" endtime="20170811 21:00:45.319"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:00:45.319" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:00:45.319" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:00:45.319" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:00:45.319" endtime="20170811 21:00:45.319"></status>
</kw>
<msg timestamp="20170811 21:00:45.320" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:00:44.934" endtime="20170811 21:00:45.320"></status>
</kw>
<msg timestamp="20170811 21:00:45.320" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:00:44.934" endtime="20170811 21:00:45.320"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:00:45.320" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:00:45.320" endtime="20170811 21:00:45.321"></status>
</kw>
<status status="FAIL" starttime="20170811 21:00:44.648" endtime="20170811 21:00:45.321"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:00:55.327" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:00:55.327" endtime="20170811 21:00:55.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:00:55.329" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:00:55.328" endtime="20170811 21:00:55.329"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:00:55.330" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:00:55.329" endtime="20170811 21:00:55.330"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:00:55.331" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:00:55.330" endtime="20170811 21:00:55.331"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:00:55.522" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:00:55.332" endtime="20170811 21:00:55.523"></status>
</kw>
<msg timestamp="20170811 21:00:55.523" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:00:55.523" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:55.331" endtime="20170811 21:00:55.523"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:00:55.523" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:55.523" endtime="20170811 21:00:55.524"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:55.524" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:55.524" endtime="20170811 21:00:55.524"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:55.326" endtime="20170811 21:00:55.524"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:55.325" endtime="20170811 21:00:55.524"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:55.324" endtime="20170811 21:00:55.525"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:00:55.525" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:00:55.525" endtime="20170811 21:00:55.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:55.527" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:55.527" endtime="20170811 21:00:55.527"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:55.528" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:55.528" endtime="20170811 21:00:55.528"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:55.527" endtime="20170811 21:00:55.528"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:55.526" endtime="20170811 21:00:55.529"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:55.526" endtime="20170811 21:00:55.529"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:00:55.605" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:00:55.606" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:55.529" endtime="20170811 21:00:55.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:55.607" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:55.607" endtime="20170811 21:00:55.607"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:55.609" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:55.608" endtime="20170811 21:00:55.609"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:55.608" endtime="20170811 21:00:55.609"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:55.606" endtime="20170811 21:00:55.609"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:55.606" endtime="20170811 21:00:55.609"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:00:55.609" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:00:55.609" endtime="20170811 21:00:55.609"></status>
</kw>
<msg timestamp="20170811 21:00:55.610" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:55.323" endtime="20170811 21:00:55.610"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:55.610" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:55.610" endtime="20170811 21:00:55.610"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:00:55.611" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:00:55.611" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:00:55.611" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:00:55.611" endtime="20170811 21:00:55.611"></status>
</kw>
<msg timestamp="20170811 21:00:55.611" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:00:55.322" endtime="20170811 21:00:55.612"></status>
</kw>
<msg timestamp="20170811 21:00:55.612" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:00:55.322" endtime="20170811 21:00:55.612"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:00:55.612" endtime="20170811 21:00:55.612"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:55.322" endtime="20170811 21:00:55.612"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:00:55.616" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:00:55.616" endtime="20170811 21:00:55.616"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:00:55.617" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:00:55.617" endtime="20170811 21:00:55.617"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:00:55.618" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:00:55.617" endtime="20170811 21:00:55.618"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:00:55.618" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:00:55.618" endtime="20170811 21:00:55.618"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:00:55.877" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:00:55.619" endtime="20170811 21:00:55.878"></status>
</kw>
<msg timestamp="20170811 21:00:55.878" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:00:55.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:55.618" endtime="20170811 21:00:55.878"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:00:55.878" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:55.878" endtime="20170811 21:00:55.878"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:55.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:55.879" endtime="20170811 21:00:55.879"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:55.615" endtime="20170811 21:00:55.879"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:55.615" endtime="20170811 21:00:55.879"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:55.614" endtime="20170811 21:00:55.879"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:00:55.880" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:00:55.880" endtime="20170811 21:00:55.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:55.882" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:55.881" endtime="20170811 21:00:55.883"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:55.883" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:00:55.883" endtime="20170811 21:00:55.884"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:55.883" endtime="20170811 21:00:55.884"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:55.881" endtime="20170811 21:00:55.884"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:55.880" endtime="20170811 21:00:55.884"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:00:56.022" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:00:56.023" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:55.884" endtime="20170811 21:00:56.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:00:56.024" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:56.024" endtime="20170811 21:00:56.024"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:00:56.025" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:00:56.025" endtime="20170811 21:00:56.025"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:56.024" endtime="20170811 21:00:56.025"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:56.023" endtime="20170811 21:00:56.026"></status>
</kw>
<status status="PASS" starttime="20170811 21:00:56.023" endtime="20170811 21:00:56.026"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:00:56.026" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:00:56.026" endtime="20170811 21:00:56.026"></status>
</kw>
<msg timestamp="20170811 21:00:56.026" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:00:55.613" endtime="20170811 21:00:56.026"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:00:56.027" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:00:56.027" endtime="20170811 21:00:56.027"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:00:56.028" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:00:56.028" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:00:56.028" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:00:56.027" endtime="20170811 21:00:56.028"></status>
</kw>
<msg timestamp="20170811 21:00:56.028" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:00:55.613" endtime="20170811 21:00:56.028"></status>
</kw>
<msg timestamp="20170811 21:00:56.028" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:00:55.613" endtime="20170811 21:00:56.028"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:00:56.029" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:00:56.029" endtime="20170811 21:00:56.029"></status>
</kw>
<status status="FAIL" starttime="20170811 21:00:55.321" endtime="20170811 21:00:56.029"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:01:06.034" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:01:06.034" endtime="20170811 21:01:06.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:01:06.035" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:01:06.035" endtime="20170811 21:01:06.035"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:01:06.036" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:01:06.035" endtime="20170811 21:01:06.036"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:01:06.037" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:01:06.036" endtime="20170811 21:01:06.037"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:01:06.237" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:01:06.038" endtime="20170811 21:01:06.237"></status>
</kw>
<msg timestamp="20170811 21:01:06.237" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:01:06.237" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:06.037" endtime="20170811 21:01:06.237"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:01:06.238" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:06.237" endtime="20170811 21:01:06.238"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:06.238" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:06.238" endtime="20170811 21:01:06.239"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.033" endtime="20170811 21:01:06.239"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.033" endtime="20170811 21:01:06.239"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.032" endtime="20170811 21:01:06.239"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:01:06.239" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:01:06.239" endtime="20170811 21:01:06.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:06.241" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:06.241" endtime="20170811 21:01:06.241"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:06.242" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:06.242" endtime="20170811 21:01:06.242"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.242" endtime="20170811 21:01:06.243"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.240" endtime="20170811 21:01:06.243"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.240" endtime="20170811 21:01:06.243"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:01:06.307" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:01:06.307" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:06.243" endtime="20170811 21:01:06.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:06.309" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:06.308" endtime="20170811 21:01:06.309"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:06.310" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:06.310" endtime="20170811 21:01:06.310"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.309" endtime="20170811 21:01:06.310"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.308" endtime="20170811 21:01:06.310"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.307" endtime="20170811 21:01:06.310"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:01:06.311" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:01:06.310" endtime="20170811 21:01:06.311"></status>
</kw>
<msg timestamp="20170811 21:01:06.311" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:06.031" endtime="20170811 21:01:06.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:06.312" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:06.311" endtime="20170811 21:01:06.312"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:01:06.312" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:01:06.312" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:01:06.312" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:01:06.312" endtime="20170811 21:01:06.312"></status>
</kw>
<msg timestamp="20170811 21:01:06.313" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:01:06.031" endtime="20170811 21:01:06.313"></status>
</kw>
<msg timestamp="20170811 21:01:06.313" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:01:06.031" endtime="20170811 21:01:06.313"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:01:06.313" endtime="20170811 21:01:06.314"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.030" endtime="20170811 21:01:06.314"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:01:06.318" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:01:06.317" endtime="20170811 21:01:06.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:01:06.319" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:01:06.318" endtime="20170811 21:01:06.319"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:01:06.319" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:01:06.319" endtime="20170811 21:01:06.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:01:06.320" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:01:06.320" endtime="20170811 21:01:06.320"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:01:06.530" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:01:06.321" endtime="20170811 21:01:06.531"></status>
</kw>
<msg timestamp="20170811 21:01:06.531" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:01:06.531" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:06.320" endtime="20170811 21:01:06.531"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:01:06.531" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:06.531" endtime="20170811 21:01:06.531"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:06.532" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:06.532" endtime="20170811 21:01:06.532"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.317" endtime="20170811 21:01:06.532"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.316" endtime="20170811 21:01:06.532"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.315" endtime="20170811 21:01:06.533"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:01:06.533" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:01:06.533" endtime="20170811 21:01:06.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:06.535" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:06.535" endtime="20170811 21:01:06.535"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:06.536" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:06.536" endtime="20170811 21:01:06.536"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.535" endtime="20170811 21:01:06.536"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.534" endtime="20170811 21:01:06.537"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.533" endtime="20170811 21:01:06.537"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:01:06.653" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:01:06.653" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:06.537" endtime="20170811 21:01:06.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:06.655" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:06.654" endtime="20170811 21:01:06.655"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:06.656" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:06.656" endtime="20170811 21:01:06.656"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.655" endtime="20170811 21:01:06.656"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.654" endtime="20170811 21:01:06.656"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:06.653" endtime="20170811 21:01:06.656"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:01:06.657" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:01:06.657" endtime="20170811 21:01:06.657"></status>
</kw>
<msg timestamp="20170811 21:01:06.657" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:06.315" endtime="20170811 21:01:06.657"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:06.658" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:06.657" endtime="20170811 21:01:06.658"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:01:06.658" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:01:06.658" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:01:06.658" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:01:06.658" endtime="20170811 21:01:06.659"></status>
</kw>
<msg timestamp="20170811 21:01:06.659" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:01:06.314" endtime="20170811 21:01:06.659"></status>
</kw>
<msg timestamp="20170811 21:01:06.659" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:01:06.314" endtime="20170811 21:01:06.659"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:01:06.660" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:01:06.659" endtime="20170811 21:01:06.660"></status>
</kw>
<status status="FAIL" starttime="20170811 21:01:06.030" endtime="20170811 21:01:06.660"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:01:16.665" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:01:16.664" endtime="20170811 21:01:16.665"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:01:16.666" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:01:16.666" endtime="20170811 21:01:16.666"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:01:16.667" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:01:16.666" endtime="20170811 21:01:16.667"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:01:16.667" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:01:16.667" endtime="20170811 21:01:16.667"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:01:16.920" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:01:16.668" endtime="20170811 21:01:16.921"></status>
</kw>
<msg timestamp="20170811 21:01:16.921" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:01:16.921" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:16.668" endtime="20170811 21:01:16.921"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:01:16.921" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:16.921" endtime="20170811 21:01:16.922"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:16.922" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:16.922" endtime="20170811 21:01:16.922"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:16.664" endtime="20170811 21:01:16.922"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:16.663" endtime="20170811 21:01:16.922"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:16.663" endtime="20170811 21:01:16.923"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:01:16.923" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:01:16.923" endtime="20170811 21:01:16.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:16.925" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:16.925" endtime="20170811 21:01:16.925"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:16.926" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:16.926" endtime="20170811 21:01:16.926"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:16.925" endtime="20170811 21:01:16.926"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:16.924" endtime="20170811 21:01:16.926"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:16.923" endtime="20170811 21:01:16.927"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:01:16.989" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:01:16.989" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:16.927" endtime="20170811 21:01:16.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:16.991" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:16.990" endtime="20170811 21:01:16.991"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:16.992" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:16.992" endtime="20170811 21:01:16.992"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:16.991" endtime="20170811 21:01:16.992"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:16.990" endtime="20170811 21:01:16.992"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:16.989" endtime="20170811 21:01:16.992"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:01:16.993" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:01:16.992" endtime="20170811 21:01:16.993"></status>
</kw>
<msg timestamp="20170811 21:01:16.993" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:16.662" endtime="20170811 21:01:16.993"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:16.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:16.993" endtime="20170811 21:01:16.994"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:01:16.994" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:01:16.994" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:01:16.994" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:01:16.994" endtime="20170811 21:01:16.994"></status>
</kw>
<msg timestamp="20170811 21:01:16.995" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:01:16.662" endtime="20170811 21:01:16.995"></status>
</kw>
<msg timestamp="20170811 21:01:16.995" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:01:16.661" endtime="20170811 21:01:16.995"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:01:16.995" endtime="20170811 21:01:16.995"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:16.661" endtime="20170811 21:01:16.996"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:01:16.999" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:01:16.999" endtime="20170811 21:01:17.000"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:01:17.001" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:01:17.000" endtime="20170811 21:01:17.001"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:01:17.001" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:01:17.001" endtime="20170811 21:01:17.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:01:17.002" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:01:17.001" endtime="20170811 21:01:17.002"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:01:17.178" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:01:17.003" endtime="20170811 21:01:17.178"></status>
</kw>
<msg timestamp="20170811 21:01:17.179" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:01:17.179" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:17.002" endtime="20170811 21:01:17.179"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:01:17.179" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:17.179" endtime="20170811 21:01:17.179"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:17.180" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:17.180" endtime="20170811 21:01:17.180"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:16.998" endtime="20170811 21:01:17.180"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:16.998" endtime="20170811 21:01:17.180"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:16.997" endtime="20170811 21:01:17.181"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:01:17.181" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:01:17.181" endtime="20170811 21:01:17.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:17.183" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:17.182" endtime="20170811 21:01:17.183"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:17.184" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:17.184" endtime="20170811 21:01:17.184"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:17.183" endtime="20170811 21:01:17.184"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:17.182" endtime="20170811 21:01:17.184"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:17.181" endtime="20170811 21:01:17.184"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:01:17.297" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:01:17.298" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:17.185" endtime="20170811 21:01:17.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:17.299" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:17.299" endtime="20170811 21:01:17.299"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:17.300" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:17.300" endtime="20170811 21:01:17.300"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:17.300" endtime="20170811 21:01:17.300"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:17.298" endtime="20170811 21:01:17.301"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:17.298" endtime="20170811 21:01:17.301"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:01:17.301" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:01:17.301" endtime="20170811 21:01:17.301"></status>
</kw>
<msg timestamp="20170811 21:01:17.301" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:16.997" endtime="20170811 21:01:17.301"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:17.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:17.302" endtime="20170811 21:01:17.302"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:01:17.303" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:01:17.303" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:01:17.303" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:01:17.302" endtime="20170811 21:01:17.303"></status>
</kw>
<msg timestamp="20170811 21:01:17.303" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:01:16.996" endtime="20170811 21:01:17.303"></status>
</kw>
<msg timestamp="20170811 21:01:17.303" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:01:16.996" endtime="20170811 21:01:17.303"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:01:17.304" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:01:17.304" endtime="20170811 21:01:17.304"></status>
</kw>
<status status="FAIL" starttime="20170811 21:01:16.660" endtime="20170811 21:01:17.304"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:01:27.310" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:01:27.309" endtime="20170811 21:01:27.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:01:27.311" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:01:27.310" endtime="20170811 21:01:27.311"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:01:27.311" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:01:27.311" endtime="20170811 21:01:27.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:01:27.312" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:01:27.312" endtime="20170811 21:01:27.312"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:01:27.560" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:01:27.313" endtime="20170811 21:01:27.560"></status>
</kw>
<msg timestamp="20170811 21:01:27.560" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:01:27.561" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:27.312" endtime="20170811 21:01:27.561"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:01:27.561" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:27.561" endtime="20170811 21:01:27.561"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:27.562" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:27.562" endtime="20170811 21:01:27.562"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:27.309" endtime="20170811 21:01:27.562"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:27.308" endtime="20170811 21:01:27.562"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:27.308" endtime="20170811 21:01:27.562"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:01:27.563" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:01:27.563" endtime="20170811 21:01:27.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:27.565" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:27.564" endtime="20170811 21:01:27.565"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:27.566" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:27.566" endtime="20170811 21:01:27.566"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:27.565" endtime="20170811 21:01:27.566"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:27.564" endtime="20170811 21:01:27.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:27.563" endtime="20170811 21:01:27.567"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:01:27.711" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:01:27.711" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:27.567" endtime="20170811 21:01:27.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:27.713" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:27.713" endtime="20170811 21:01:27.713"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:27.714" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:27.714" endtime="20170811 21:01:27.714"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:27.714" endtime="20170811 21:01:27.714"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:27.712" endtime="20170811 21:01:27.715"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:27.712" endtime="20170811 21:01:27.715"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:01:27.715" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:01:27.715" endtime="20170811 21:01:27.715"></status>
</kw>
<msg timestamp="20170811 21:01:27.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:27.307" endtime="20170811 21:01:27.715"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:27.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:27.716" endtime="20170811 21:01:27.716"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:01:27.717" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:01:27.717" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:01:27.717" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:01:27.716" endtime="20170811 21:01:27.717"></status>
</kw>
<msg timestamp="20170811 21:01:27.717" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:01:27.306" endtime="20170811 21:01:27.717"></status>
</kw>
<msg timestamp="20170811 21:01:27.717" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:01:27.306" endtime="20170811 21:01:27.717"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:01:27.718" endtime="20170811 21:01:27.718"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:27.305" endtime="20170811 21:01:27.718"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:01:27.722" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:01:27.721" endtime="20170811 21:01:27.722"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:01:27.723" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:01:27.722" endtime="20170811 21:01:27.723"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:01:27.723" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:01:27.723" endtime="20170811 21:01:27.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:01:27.724" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:01:27.723" endtime="20170811 21:01:27.724"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:01:27.958" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:01:27.725" endtime="20170811 21:01:27.958"></status>
</kw>
<msg timestamp="20170811 21:01:27.958" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:01:27.959" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:27.724" endtime="20170811 21:01:27.959"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:01:27.959" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:27.959" endtime="20170811 21:01:27.959"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:27.960" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:27.960" endtime="20170811 21:01:27.960"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:27.721" endtime="20170811 21:01:27.960"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:27.720" endtime="20170811 21:01:27.960"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:27.720" endtime="20170811 21:01:27.960"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:01:27.961" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:01:27.961" endtime="20170811 21:01:27.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:27.963" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:27.962" endtime="20170811 21:01:27.963"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:27.964" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:27.964" endtime="20170811 21:01:27.964"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:27.963" endtime="20170811 21:01:27.964"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:27.962" endtime="20170811 21:01:27.964"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:27.961" endtime="20170811 21:01:27.964"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:01:28.085" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:01:28.085" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:27.964" endtime="20170811 21:01:28.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:28.087" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:28.086" endtime="20170811 21:01:28.087"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:28.088" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:28.088" endtime="20170811 21:01:28.088"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:28.087" endtime="20170811 21:01:28.088"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:28.086" endtime="20170811 21:01:28.088"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:28.086" endtime="20170811 21:01:28.088"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:01:28.089" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:01:28.089" endtime="20170811 21:01:28.089"></status>
</kw>
<msg timestamp="20170811 21:01:28.089" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:27.719" endtime="20170811 21:01:28.089"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:28.090" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:28.089" endtime="20170811 21:01:28.090"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:01:28.090" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:01:28.090" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:01:28.090" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:01:28.090" endtime="20170811 21:01:28.090"></status>
</kw>
<msg timestamp="20170811 21:01:28.091" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:01:27.719" endtime="20170811 21:01:28.091"></status>
</kw>
<msg timestamp="20170811 21:01:28.091" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:01:27.718" endtime="20170811 21:01:28.091"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:01:28.092" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:01:28.091" endtime="20170811 21:01:28.092"></status>
</kw>
<status status="FAIL" starttime="20170811 21:01:27.305" endtime="20170811 21:01:28.092"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:01:38.098" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:01:38.098" endtime="20170811 21:01:38.099"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:01:38.099" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:01:38.099" endtime="20170811 21:01:38.099"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:01:38.100" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:01:38.099" endtime="20170811 21:01:38.100"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:01:38.100" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:01:38.100" endtime="20170811 21:01:38.101"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:01:38.547" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:01:38.101" endtime="20170811 21:01:38.547"></status>
</kw>
<msg timestamp="20170811 21:01:38.547" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:01:38.547" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:38.101" endtime="20170811 21:01:38.547"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:01:38.548" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:38.548" endtime="20170811 21:01:38.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:38.549" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:38.548" endtime="20170811 21:01:38.549"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:38.097" endtime="20170811 21:01:38.549"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:38.096" endtime="20170811 21:01:38.549"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:38.096" endtime="20170811 21:01:38.549"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:01:38.550" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:01:38.549" endtime="20170811 21:01:38.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:38.552" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:38.551" endtime="20170811 21:01:38.552"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:38.553" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:38.552" endtime="20170811 21:01:38.553"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:38.552" endtime="20170811 21:01:38.553"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:38.550" endtime="20170811 21:01:38.553"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:38.550" endtime="20170811 21:01:38.553"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:01:38.793" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:01:38.794" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:38.553" endtime="20170811 21:01:38.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:38.795" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:38.795" endtime="20170811 21:01:38.795"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:38.797" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:38.796" endtime="20170811 21:01:38.797"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:38.796" endtime="20170811 21:01:38.797"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:38.794" endtime="20170811 21:01:38.797"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:38.794" endtime="20170811 21:01:38.797"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:01:38.797" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:01:38.797" endtime="20170811 21:01:38.798"></status>
</kw>
<msg timestamp="20170811 21:01:38.798" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:38.095" endtime="20170811 21:01:38.798"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:38.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:38.798" endtime="20170811 21:01:38.798"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:01:38.799" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:01:38.799" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:01:38.799" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:01:38.799" endtime="20170811 21:01:38.799"></status>
</kw>
<msg timestamp="20170811 21:01:38.799" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:01:38.094" endtime="20170811 21:01:38.799"></status>
</kw>
<msg timestamp="20170811 21:01:38.800" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:01:38.094" endtime="20170811 21:01:38.800"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:01:38.800" endtime="20170811 21:01:38.800"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:38.094" endtime="20170811 21:01:38.800"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:01:38.804" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:01:38.804" endtime="20170811 21:01:38.804"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:01:38.805" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:01:38.805" endtime="20170811 21:01:38.805"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:01:38.805" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:01:38.805" endtime="20170811 21:01:38.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:01:38.806" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:01:38.806" endtime="20170811 21:01:38.806"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:01:39.280" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:01:38.807" endtime="20170811 21:01:39.280"></status>
</kw>
<msg timestamp="20170811 21:01:39.280" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:01:39.280" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:38.807" endtime="20170811 21:01:39.280"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:01:39.281" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:39.281" endtime="20170811 21:01:39.281"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:39.282" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:39.281" endtime="20170811 21:01:39.282"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:38.803" endtime="20170811 21:01:39.282"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:38.803" endtime="20170811 21:01:39.282"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:38.802" endtime="20170811 21:01:39.282"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:01:39.283" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:01:39.282" endtime="20170811 21:01:39.283"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:39.285" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:39.284" endtime="20170811 21:01:39.285"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:39.286" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:39.286" endtime="20170811 21:01:39.286"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:39.285" endtime="20170811 21:01:39.286"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:39.283" endtime="20170811 21:01:39.286"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:39.283" endtime="20170811 21:01:39.286"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:01:39.458" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:01:39.458" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:39.287" endtime="20170811 21:01:39.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:39.460" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:39.459" endtime="20170811 21:01:39.460"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:39.460" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:39.460" endtime="20170811 21:01:39.461"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:39.460" endtime="20170811 21:01:39.461"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:39.459" endtime="20170811 21:01:39.461"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:39.458" endtime="20170811 21:01:39.461"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:01:39.461" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:01:39.461" endtime="20170811 21:01:39.461"></status>
</kw>
<msg timestamp="20170811 21:01:39.462" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:38.801" endtime="20170811 21:01:39.462"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:39.462" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:39.462" endtime="20170811 21:01:39.462"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:01:39.463" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:01:39.463" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:01:39.463" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:01:39.462" endtime="20170811 21:01:39.463"></status>
</kw>
<msg timestamp="20170811 21:01:39.463" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:01:38.801" endtime="20170811 21:01:39.463"></status>
</kw>
<msg timestamp="20170811 21:01:39.464" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:01:38.801" endtime="20170811 21:01:39.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:01:39.464" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:01:39.464" endtime="20170811 21:01:39.464"></status>
</kw>
<status status="FAIL" starttime="20170811 21:01:38.093" endtime="20170811 21:01:39.465"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:01:49.470" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:01:49.469" endtime="20170811 21:01:49.470"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:01:49.471" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:01:49.470" endtime="20170811 21:01:49.471"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:01:49.471" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:01:49.471" endtime="20170811 21:01:49.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:01:49.473" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:01:49.472" endtime="20170811 21:01:49.473"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:01:49.694" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:01:49.473" endtime="20170811 21:01:49.694"></status>
</kw>
<msg timestamp="20170811 21:01:49.694" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:01:49.694" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:49.473" endtime="20170811 21:01:49.694"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:01:49.695" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:49.695" endtime="20170811 21:01:49.695"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:49.696" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:49.695" endtime="20170811 21:01:49.696"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:49.469" endtime="20170811 21:01:49.696"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:49.468" endtime="20170811 21:01:49.696"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:49.468" endtime="20170811 21:01:49.696"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:01:49.697" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:01:49.696" endtime="20170811 21:01:49.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:49.699" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:49.698" endtime="20170811 21:01:49.699"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:49.700" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:49.700" endtime="20170811 21:01:49.700"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:49.699" endtime="20170811 21:01:49.700"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:49.698" endtime="20170811 21:01:49.700"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:49.697" endtime="20170811 21:01:49.700"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:01:49.792" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:01:49.792" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:49.701" endtime="20170811 21:01:49.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:49.794" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:49.794" endtime="20170811 21:01:49.794"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:49.795" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:49.795" endtime="20170811 21:01:49.795"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:49.794" endtime="20170811 21:01:49.795"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:49.793" endtime="20170811 21:01:49.795"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:49.793" endtime="20170811 21:01:49.796"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:01:49.796" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:01:49.796" endtime="20170811 21:01:49.796"></status>
</kw>
<msg timestamp="20170811 21:01:49.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:49.467" endtime="20170811 21:01:49.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:49.797" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:49.797" endtime="20170811 21:01:49.797"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:01:49.797" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:01:49.798" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:01:49.798" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:01:49.797" endtime="20170811 21:01:49.798"></status>
</kw>
<msg timestamp="20170811 21:01:49.798" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:01:49.467" endtime="20170811 21:01:49.798"></status>
</kw>
<msg timestamp="20170811 21:01:49.798" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:01:49.466" endtime="20170811 21:01:49.798"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:01:49.799" endtime="20170811 21:01:49.799"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:49.466" endtime="20170811 21:01:49.799"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:01:49.803" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:01:49.803" endtime="20170811 21:01:49.804"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:01:49.805" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:01:49.804" endtime="20170811 21:01:49.805"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:01:49.806" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:01:49.805" endtime="20170811 21:01:49.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:01:49.806" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:01:49.806" endtime="20170811 21:01:49.806"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:01:50.065" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:01:49.807" endtime="20170811 21:01:50.065"></status>
</kw>
<msg timestamp="20170811 21:01:50.065" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:01:50.065" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:49.807" endtime="20170811 21:01:50.065"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:01:50.066" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:50.065" endtime="20170811 21:01:50.066"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:50.066" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:50.066" endtime="20170811 21:01:50.066"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:49.802" endtime="20170811 21:01:50.067"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:49.801" endtime="20170811 21:01:50.067"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:49.801" endtime="20170811 21:01:50.067"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:01:50.067" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:01:50.067" endtime="20170811 21:01:50.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:50.069" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:50.069" endtime="20170811 21:01:50.070"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:50.070" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:01:50.070" endtime="20170811 21:01:50.071"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:50.070" endtime="20170811 21:01:50.071"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:50.068" endtime="20170811 21:01:50.071"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:50.068" endtime="20170811 21:01:50.071"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:01:50.160" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:01:50.160" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:50.071" endtime="20170811 21:01:50.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:01:50.162" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:50.161" endtime="20170811 21:01:50.162"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:01:50.163" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:01:50.163" endtime="20170811 21:01:50.163"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:50.162" endtime="20170811 21:01:50.163"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:50.161" endtime="20170811 21:01:50.163"></status>
</kw>
<status status="PASS" starttime="20170811 21:01:50.160" endtime="20170811 21:01:50.163"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:01:50.164" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:01:50.164" endtime="20170811 21:01:50.164"></status>
</kw>
<msg timestamp="20170811 21:01:50.164" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:01:49.800" endtime="20170811 21:01:50.164"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:01:50.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:01:50.165" endtime="20170811 21:01:50.165"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:01:50.165" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:01:50.166" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:01:50.166" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:01:50.165" endtime="20170811 21:01:50.166"></status>
</kw>
<msg timestamp="20170811 21:01:50.166" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:01:49.799" endtime="20170811 21:01:50.166"></status>
</kw>
<msg timestamp="20170811 21:01:50.166" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:01:49.799" endtime="20170811 21:01:50.166"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:01:50.167" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:01:50.167" endtime="20170811 21:01:50.167"></status>
</kw>
<status status="FAIL" starttime="20170811 21:01:49.465" endtime="20170811 21:01:50.167"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:02:00.172" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:02:00.172" endtime="20170811 21:02:00.173"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:02:00.173" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:02:00.173" endtime="20170811 21:02:00.174"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:02:00.175" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:02:00.175" endtime="20170811 21:02:00.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:02:00.176" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:02:00.176" endtime="20170811 21:02:00.176"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:02:00.401" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:02:00.177" endtime="20170811 21:02:00.401"></status>
</kw>
<msg timestamp="20170811 21:02:00.401" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:02:00.401" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:00.177" endtime="20170811 21:02:00.401"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:02:00.402" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:00.401" endtime="20170811 21:02:00.402"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:00.402" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:00.402" endtime="20170811 21:02:00.402"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.172" endtime="20170811 21:02:00.403"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.171" endtime="20170811 21:02:00.403"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.171" endtime="20170811 21:02:00.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:02:00.403" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:02:00.403" endtime="20170811 21:02:00.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:00.406" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:00.405" endtime="20170811 21:02:00.406"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:00.407" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:00.406" endtime="20170811 21:02:00.407"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.406" endtime="20170811 21:02:00.407"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.404" endtime="20170811 21:02:00.407"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.404" endtime="20170811 21:02:00.407"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:02:00.497" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:02:00.497" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:00.407" endtime="20170811 21:02:00.497"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:00.499" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:00.498" endtime="20170811 21:02:00.499"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:00.500" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:00.499" endtime="20170811 21:02:00.500"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.499" endtime="20170811 21:02:00.500"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.498" endtime="20170811 21:02:00.500"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.497" endtime="20170811 21:02:00.500"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:02:00.501" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:02:00.500" endtime="20170811 21:02:00.501"></status>
</kw>
<msg timestamp="20170811 21:02:00.501" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:00.170" endtime="20170811 21:02:00.501"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:00.502" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:00.501" endtime="20170811 21:02:00.502"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:02:00.502" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:02:00.502" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:02:00.502" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:02:00.502" endtime="20170811 21:02:00.502"></status>
</kw>
<msg timestamp="20170811 21:02:00.503" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:02:00.169" endtime="20170811 21:02:00.503"></status>
</kw>
<msg timestamp="20170811 21:02:00.503" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:02:00.169" endtime="20170811 21:02:00.503"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:02:00.503" endtime="20170811 21:02:00.504"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.169" endtime="20170811 21:02:00.504"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:02:00.507" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:02:00.507" endtime="20170811 21:02:00.508"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:02:00.509" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:02:00.509" endtime="20170811 21:02:00.509"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:02:00.509" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:02:00.509" endtime="20170811 21:02:00.510"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:02:00.510" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:02:00.510" endtime="20170811 21:02:00.510"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:02:00.751" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:02:00.511" endtime="20170811 21:02:00.751"></status>
</kw>
<msg timestamp="20170811 21:02:00.752" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:02:00.752" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:00.510" endtime="20170811 21:02:00.752"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:02:00.752" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:00.752" endtime="20170811 21:02:00.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:00.753" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:00.753" endtime="20170811 21:02:00.753"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.506" endtime="20170811 21:02:00.753"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.506" endtime="20170811 21:02:00.753"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.505" endtime="20170811 21:02:00.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:02:00.754" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:02:00.754" endtime="20170811 21:02:00.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:00.756" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:00.755" endtime="20170811 21:02:00.756"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:00.757" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:00.757" endtime="20170811 21:02:00.757"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.756" endtime="20170811 21:02:00.757"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.755" endtime="20170811 21:02:00.757"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.754" endtime="20170811 21:02:00.758"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:02:00.848" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:02:00.848" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:00.758" endtime="20170811 21:02:00.848"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:00.850" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:00.850" endtime="20170811 21:02:00.850"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:00.851" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:00.851" endtime="20170811 21:02:00.851"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.850" endtime="20170811 21:02:00.851"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.849" endtime="20170811 21:02:00.851"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:00.849" endtime="20170811 21:02:00.851"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:02:00.852" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:02:00.852" endtime="20170811 21:02:00.852"></status>
</kw>
<msg timestamp="20170811 21:02:00.852" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:00.505" endtime="20170811 21:02:00.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:00.853" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:00.852" endtime="20170811 21:02:00.853"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:02:00.853" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:02:00.853" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:02:00.854" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:02:00.853" endtime="20170811 21:02:00.854"></status>
</kw>
<msg timestamp="20170811 21:02:00.854" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:02:00.504" endtime="20170811 21:02:00.854"></status>
</kw>
<msg timestamp="20170811 21:02:00.854" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:02:00.504" endtime="20170811 21:02:00.854"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:02:00.855" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:02:00.854" endtime="20170811 21:02:00.855"></status>
</kw>
<status status="FAIL" starttime="20170811 21:02:00.168" endtime="20170811 21:02:00.855"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:02:10.861" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:02:10.860" endtime="20170811 21:02:10.861"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:02:10.862" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:02:10.861" endtime="20170811 21:02:10.862"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:02:10.862" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:02:10.862" endtime="20170811 21:02:10.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:02:10.863" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:02:10.862" endtime="20170811 21:02:10.863"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:02:11.123" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:02:10.864" endtime="20170811 21:02:11.123"></status>
</kw>
<msg timestamp="20170811 21:02:11.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:02:11.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:10.863" endtime="20170811 21:02:11.124"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:02:11.124" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:11.124" endtime="20170811 21:02:11.124"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:11.126" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:11.125" endtime="20170811 21:02:11.126"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:10.860" endtime="20170811 21:02:11.126"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:10.859" endtime="20170811 21:02:11.126"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:10.859" endtime="20170811 21:02:11.126"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:02:11.127" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:02:11.127" endtime="20170811 21:02:11.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:11.129" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:11.128" endtime="20170811 21:02:11.129"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:11.130" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:11.130" endtime="20170811 21:02:11.130"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:11.129" endtime="20170811 21:02:11.131"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:11.128" endtime="20170811 21:02:11.131"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:11.127" endtime="20170811 21:02:11.131"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:02:11.193" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:02:11.194" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:11.131" endtime="20170811 21:02:11.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:11.196" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:11.195" endtime="20170811 21:02:11.196"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:11.196" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:11.196" endtime="20170811 21:02:11.197"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:11.196" endtime="20170811 21:02:11.197"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:11.195" endtime="20170811 21:02:11.197"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:11.194" endtime="20170811 21:02:11.197"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:02:11.197" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:02:11.197" endtime="20170811 21:02:11.197"></status>
</kw>
<msg timestamp="20170811 21:02:11.198" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:10.858" endtime="20170811 21:02:11.198"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:11.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:11.198" endtime="20170811 21:02:11.198"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:02:11.199" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:02:11.199" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:02:11.199" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:02:11.199" endtime="20170811 21:02:11.199"></status>
</kw>
<msg timestamp="20170811 21:02:11.199" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:02:10.857" endtime="20170811 21:02:11.199"></status>
</kw>
<msg timestamp="20170811 21:02:11.200" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:02:10.857" endtime="20170811 21:02:11.200"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:02:11.200" endtime="20170811 21:02:11.200"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:10.856" endtime="20170811 21:02:11.200"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:02:11.204" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:02:11.204" endtime="20170811 21:02:11.204"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:02:11.205" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:02:11.204" endtime="20170811 21:02:11.205"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:02:11.205" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:02:11.205" endtime="20170811 21:02:11.205"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:02:11.206" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:02:11.206" endtime="20170811 21:02:11.206"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:02:11.417" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:02:11.207" endtime="20170811 21:02:11.417"></status>
</kw>
<msg timestamp="20170811 21:02:11.417" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:02:11.418" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:11.206" endtime="20170811 21:02:11.418"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:02:11.418" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:11.418" endtime="20170811 21:02:11.418"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:11.419" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:11.419" endtime="20170811 21:02:11.419"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:11.203" endtime="20170811 21:02:11.419"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:11.203" endtime="20170811 21:02:11.419"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:11.202" endtime="20170811 21:02:11.419"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:02:11.420" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:02:11.420" endtime="20170811 21:02:11.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:11.422" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:11.421" endtime="20170811 21:02:11.422"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:11.423" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:11.423" endtime="20170811 21:02:11.423"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:11.422" endtime="20170811 21:02:11.423"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:11.421" endtime="20170811 21:02:11.423"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:11.420" endtime="20170811 21:02:11.423"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:02:11.652" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:02:11.652" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:11.424" endtime="20170811 21:02:11.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:11.654" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:11.654" endtime="20170811 21:02:11.654"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:11.655" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:11.655" endtime="20170811 21:02:11.655"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:11.654" endtime="20170811 21:02:11.655"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:11.653" endtime="20170811 21:02:11.656"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:11.653" endtime="20170811 21:02:11.656"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:02:11.656" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:02:11.656" endtime="20170811 21:02:11.656"></status>
</kw>
<msg timestamp="20170811 21:02:11.656" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:11.201" endtime="20170811 21:02:11.656"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:11.657" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:11.657" endtime="20170811 21:02:11.657"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:02:11.658" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:02:11.658" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:02:11.658" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:02:11.657" endtime="20170811 21:02:11.658"></status>
</kw>
<msg timestamp="20170811 21:02:11.658" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:02:11.201" endtime="20170811 21:02:11.658"></status>
</kw>
<msg timestamp="20170811 21:02:11.658" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:02:11.200" endtime="20170811 21:02:11.658"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:02:11.659" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:02:11.659" endtime="20170811 21:02:11.659"></status>
</kw>
<status status="FAIL" starttime="20170811 21:02:10.856" endtime="20170811 21:02:11.659"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:02:21.668" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:02:21.668" endtime="20170811 21:02:21.669"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:02:21.670" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:02:21.669" endtime="20170811 21:02:21.670"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:02:21.670" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:02:21.670" endtime="20170811 21:02:21.670"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:02:21.671" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:02:21.671" endtime="20170811 21:02:21.671"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:02:21.891" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:02:21.672" endtime="20170811 21:02:21.891"></status>
</kw>
<msg timestamp="20170811 21:02:21.891" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:02:21.891" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:21.671" endtime="20170811 21:02:21.891"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:02:21.892" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:21.892" endtime="20170811 21:02:21.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:21.893" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:21.892" endtime="20170811 21:02:21.893"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:21.667" endtime="20170811 21:02:21.893"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:21.663" endtime="20170811 21:02:21.893"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:21.662" endtime="20170811 21:02:21.893"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:02:21.894" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:02:21.893" endtime="20170811 21:02:21.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:21.896" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:21.895" endtime="20170811 21:02:21.896"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:21.897" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:21.896" endtime="20170811 21:02:21.897"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:21.896" endtime="20170811 21:02:21.897"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:21.894" endtime="20170811 21:02:21.897"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:21.894" endtime="20170811 21:02:21.897"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:02:21.959" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:02:21.959" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:21.897" endtime="20170811 21:02:21.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:21.961" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:21.960" endtime="20170811 21:02:21.961"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:21.962" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:21.962" endtime="20170811 21:02:21.962"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:21.961" endtime="20170811 21:02:21.962"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:21.960" endtime="20170811 21:02:21.962"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:21.959" endtime="20170811 21:02:21.962"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:02:21.963" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:02:21.963" endtime="20170811 21:02:21.963"></status>
</kw>
<msg timestamp="20170811 21:02:21.963" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:21.662" endtime="20170811 21:02:21.963"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:21.964" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:21.963" endtime="20170811 21:02:21.964"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:02:21.964" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:02:21.964" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:02:21.964" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:02:21.964" endtime="20170811 21:02:21.964"></status>
</kw>
<msg timestamp="20170811 21:02:21.965" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:02:21.661" endtime="20170811 21:02:21.965"></status>
</kw>
<msg timestamp="20170811 21:02:21.965" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:02:21.661" endtime="20170811 21:02:21.965"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:02:21.965" endtime="20170811 21:02:21.966"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:21.660" endtime="20170811 21:02:21.966"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:02:21.969" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:02:21.969" endtime="20170811 21:02:21.970"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:02:21.970" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:02:21.970" endtime="20170811 21:02:21.970"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:02:21.971" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:02:21.971" endtime="20170811 21:02:21.971"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:02:21.972" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:02:21.971" endtime="20170811 21:02:21.972"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:02:22.149" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:02:21.972" endtime="20170811 21:02:22.150"></status>
</kw>
<msg timestamp="20170811 21:02:22.150" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:02:22.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:21.972" endtime="20170811 21:02:22.150"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:02:22.150" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:22.150" endtime="20170811 21:02:22.150"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:22.151" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:22.151" endtime="20170811 21:02:22.151"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:21.969" endtime="20170811 21:02:22.151"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:21.968" endtime="20170811 21:02:22.151"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:21.968" endtime="20170811 21:02:22.151"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:02:22.152" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:02:22.152" endtime="20170811 21:02:22.152"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:22.156" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:22.154" endtime="20170811 21:02:22.156"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:22.157" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:22.157" endtime="20170811 21:02:22.157"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:22.156" endtime="20170811 21:02:22.158"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:22.153" endtime="20170811 21:02:22.158"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:22.153" endtime="20170811 21:02:22.158"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:02:22.246" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:02:22.246" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:22.158" endtime="20170811 21:02:22.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:22.248" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:22.248" endtime="20170811 21:02:22.248"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:22.249" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:22.249" endtime="20170811 21:02:22.249"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:22.249" endtime="20170811 21:02:22.249"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:22.247" endtime="20170811 21:02:22.250"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:22.247" endtime="20170811 21:02:22.250"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:02:22.250" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:02:22.250" endtime="20170811 21:02:22.250"></status>
</kw>
<msg timestamp="20170811 21:02:22.250" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:21.967" endtime="20170811 21:02:22.250"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:22.251" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:22.251" endtime="20170811 21:02:22.251"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:02:22.252" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:02:22.252" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:02:22.252" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:02:22.251" endtime="20170811 21:02:22.252"></status>
</kw>
<msg timestamp="20170811 21:02:22.252" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:02:21.966" endtime="20170811 21:02:22.252"></status>
</kw>
<msg timestamp="20170811 21:02:22.252" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:02:21.966" endtime="20170811 21:02:22.252"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:02:22.253" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:02:22.253" endtime="20170811 21:02:22.253"></status>
</kw>
<status status="FAIL" starttime="20170811 21:02:21.660" endtime="20170811 21:02:22.253"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:02:32.258" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:02:32.258" endtime="20170811 21:02:32.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:02:32.259" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:02:32.259" endtime="20170811 21:02:32.259"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:02:32.260" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:02:32.259" endtime="20170811 21:02:32.260"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:02:32.261" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:02:32.260" endtime="20170811 21:02:32.261"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:02:32.442" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:02:32.262" endtime="20170811 21:02:32.442"></status>
</kw>
<msg timestamp="20170811 21:02:32.442" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:02:32.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:32.261" endtime="20170811 21:02:32.442"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:02:32.443" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:32.442" endtime="20170811 21:02:32.443"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:32.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:32.443" endtime="20170811 21:02:32.444"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.257" endtime="20170811 21:02:32.444"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.257" endtime="20170811 21:02:32.444"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.256" endtime="20170811 21:02:32.444"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:02:32.444" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:02:32.444" endtime="20170811 21:02:32.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:32.448" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:32.446" endtime="20170811 21:02:32.448"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:32.449" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:32.449" endtime="20170811 21:02:32.449"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.448" endtime="20170811 21:02:32.449"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.445" endtime="20170811 21:02:32.449"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.445" endtime="20170811 21:02:32.449"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:02:32.524" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:02:32.524" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:32.450" endtime="20170811 21:02:32.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:32.525" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:32.525" endtime="20170811 21:02:32.525"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:32.526" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:32.526" endtime="20170811 21:02:32.526"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.526" endtime="20170811 21:02:32.527"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.524" endtime="20170811 21:02:32.527"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.524" endtime="20170811 21:02:32.527"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:02:32.527" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:02:32.527" endtime="20170811 21:02:32.527"></status>
</kw>
<msg timestamp="20170811 21:02:32.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:32.256" endtime="20170811 21:02:32.528"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:32.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:32.528" endtime="20170811 21:02:32.528"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:02:32.529" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:02:32.529" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:02:32.529" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:02:32.529" endtime="20170811 21:02:32.529"></status>
</kw>
<msg timestamp="20170811 21:02:32.529" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:02:32.255" endtime="20170811 21:02:32.529"></status>
</kw>
<msg timestamp="20170811 21:02:32.530" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:02:32.255" endtime="20170811 21:02:32.530"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:02:32.530" endtime="20170811 21:02:32.530"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.254" endtime="20170811 21:02:32.530"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:02:32.534" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:02:32.534" endtime="20170811 21:02:32.534"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:02:32.535" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:02:32.535" endtime="20170811 21:02:32.535"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:02:32.536" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:02:32.535" endtime="20170811 21:02:32.536"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:02:32.536" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:02:32.536" endtime="20170811 21:02:32.537"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:02:32.746" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:02:32.537" endtime="20170811 21:02:32.746"></status>
</kw>
<msg timestamp="20170811 21:02:32.746" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:02:32.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:32.537" endtime="20170811 21:02:32.746"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:02:32.747" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:32.746" endtime="20170811 21:02:32.747"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:32.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:32.747" endtime="20170811 21:02:32.748"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.533" endtime="20170811 21:02:32.748"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.533" endtime="20170811 21:02:32.748"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.532" endtime="20170811 21:02:32.748"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:02:32.748" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:02:32.748" endtime="20170811 21:02:32.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:32.751" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:32.750" endtime="20170811 21:02:32.751"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:32.752" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:32.752" endtime="20170811 21:02:32.752"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.751" endtime="20170811 21:02:32.752"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.749" endtime="20170811 21:02:32.752"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.749" endtime="20170811 21:02:32.752"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:02:32.841" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:02:32.841" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:32.753" endtime="20170811 21:02:32.841"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:32.843" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:32.842" endtime="20170811 21:02:32.843"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:32.844" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:32.844" endtime="20170811 21:02:32.844"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.843" endtime="20170811 21:02:32.844"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.842" endtime="20170811 21:02:32.844"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:32.841" endtime="20170811 21:02:32.844"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:02:32.845" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:02:32.845" endtime="20170811 21:02:32.845"></status>
</kw>
<msg timestamp="20170811 21:02:32.845" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:32.531" endtime="20170811 21:02:32.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:32.846" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:32.845" endtime="20170811 21:02:32.846"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:02:32.846" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:02:32.846" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:02:32.846" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:02:32.846" endtime="20170811 21:02:32.846"></status>
</kw>
<msg timestamp="20170811 21:02:32.847" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:02:32.531" endtime="20170811 21:02:32.847"></status>
</kw>
<msg timestamp="20170811 21:02:32.847" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:02:32.530" endtime="20170811 21:02:32.847"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:02:32.848" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:02:32.847" endtime="20170811 21:02:32.848"></status>
</kw>
<status status="FAIL" starttime="20170811 21:02:32.254" endtime="20170811 21:02:32.848"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:02:42.853" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:02:42.853" endtime="20170811 21:02:42.854"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:02:42.854" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:02:42.854" endtime="20170811 21:02:42.854"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:02:42.856" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:02:42.855" endtime="20170811 21:02:42.856"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:02:42.856" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:02:42.856" endtime="20170811 21:02:42.856"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:02:43.048" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:02:42.857" endtime="20170811 21:02:43.048"></status>
</kw>
<msg timestamp="20170811 21:02:43.048" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:02:43.048" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:42.857" endtime="20170811 21:02:43.049"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:02:43.049" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:43.049" endtime="20170811 21:02:43.049"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:43.050" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:43.050" endtime="20170811 21:02:43.050"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:42.852" endtime="20170811 21:02:43.050"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:42.852" endtime="20170811 21:02:43.050"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:42.851" endtime="20170811 21:02:43.050"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:02:43.051" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:02:43.051" endtime="20170811 21:02:43.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:43.053" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:43.052" endtime="20170811 21:02:43.053"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:43.054" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:43.054" endtime="20170811 21:02:43.054"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:43.053" endtime="20170811 21:02:43.054"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:43.052" endtime="20170811 21:02:43.054"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:43.051" endtime="20170811 21:02:43.054"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:02:43.134" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:02:43.134" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:43.054" endtime="20170811 21:02:43.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:43.136" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:43.135" endtime="20170811 21:02:43.136"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:43.137" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:43.137" endtime="20170811 21:02:43.137"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:43.136" endtime="20170811 21:02:43.137"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:43.135" endtime="20170811 21:02:43.137"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:43.134" endtime="20170811 21:02:43.137"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:02:43.138" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:02:43.138" endtime="20170811 21:02:43.138"></status>
</kw>
<msg timestamp="20170811 21:02:43.138" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:42.851" endtime="20170811 21:02:43.138"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:43.139" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:43.138" endtime="20170811 21:02:43.139"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:02:43.139" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:02:43.139" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:02:43.139" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:02:43.139" endtime="20170811 21:02:43.139"></status>
</kw>
<msg timestamp="20170811 21:02:43.140" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:02:42.850" endtime="20170811 21:02:43.140"></status>
</kw>
<msg timestamp="20170811 21:02:43.140" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:02:42.850" endtime="20170811 21:02:43.140"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:02:43.140" endtime="20170811 21:02:43.141"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:42.849" endtime="20170811 21:02:43.141"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:02:43.144" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:02:43.144" endtime="20170811 21:02:43.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:02:43.146" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:02:43.145" endtime="20170811 21:02:43.146"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:02:43.147" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:02:43.146" endtime="20170811 21:02:43.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:02:43.147" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:02:43.147" endtime="20170811 21:02:43.147"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:02:43.372" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:02:43.148" endtime="20170811 21:02:43.372"></status>
</kw>
<msg timestamp="20170811 21:02:43.372" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:02:43.372" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:43.148" endtime="20170811 21:02:43.372"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:02:43.373" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:43.372" endtime="20170811 21:02:43.373"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:43.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:43.373" endtime="20170811 21:02:43.373"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:43.143" endtime="20170811 21:02:43.374"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:43.143" endtime="20170811 21:02:43.374"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:43.142" endtime="20170811 21:02:43.374"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:02:43.374" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:02:43.374" endtime="20170811 21:02:43.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:43.376" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:43.376" endtime="20170811 21:02:43.377"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:43.377" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:43.377" endtime="20170811 21:02:43.378"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:43.377" endtime="20170811 21:02:43.378"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:43.375" endtime="20170811 21:02:43.378"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:43.375" endtime="20170811 21:02:43.378"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:02:43.467" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:02:43.467" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:43.378" endtime="20170811 21:02:43.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:43.469" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:43.468" endtime="20170811 21:02:43.469"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:43.470" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:43.469" endtime="20170811 21:02:43.470"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:43.469" endtime="20170811 21:02:43.470"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:43.468" endtime="20170811 21:02:43.470"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:43.467" endtime="20170811 21:02:43.470"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:02:43.470" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:02:43.470" endtime="20170811 21:02:43.471"></status>
</kw>
<msg timestamp="20170811 21:02:43.471" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:43.142" endtime="20170811 21:02:43.471"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:43.471" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:43.471" endtime="20170811 21:02:43.471"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:02:43.472" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:02:43.472" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:02:43.472" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:02:43.472" endtime="20170811 21:02:43.472"></status>
</kw>
<msg timestamp="20170811 21:02:43.472" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:02:43.141" endtime="20170811 21:02:43.472"></status>
</kw>
<msg timestamp="20170811 21:02:43.473" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:02:43.141" endtime="20170811 21:02:43.473"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:02:43.473" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:02:43.473" endtime="20170811 21:02:43.473"></status>
</kw>
<status status="FAIL" starttime="20170811 21:02:42.849" endtime="20170811 21:02:43.474"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:02:53.479" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:02:53.479" endtime="20170811 21:02:53.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:02:53.480" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:02:53.480" endtime="20170811 21:02:53.480"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:02:53.481" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:02:53.481" endtime="20170811 21:02:53.481"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:02:53.482" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:02:53.481" endtime="20170811 21:02:53.482"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:02:55.061" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:02:53.482" endtime="20170811 21:02:55.061"></status>
</kw>
<msg timestamp="20170811 21:02:55.061" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:02:55.061" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:53.482" endtime="20170811 21:02:55.061"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:02:55.062" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:55.062" endtime="20170811 21:02:55.062"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:55.063" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:55.062" endtime="20170811 21:02:55.063"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:53.478" endtime="20170811 21:02:55.063"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:53.478" endtime="20170811 21:02:55.063"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:53.477" endtime="20170811 21:02:55.063"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:02:55.064" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:02:55.064" endtime="20170811 21:02:55.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:55.066" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:55.065" endtime="20170811 21:02:55.066"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:55.067" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:55.067" endtime="20170811 21:02:55.067"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:55.066" endtime="20170811 21:02:55.067"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:55.065" endtime="20170811 21:02:55.068"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:55.064" endtime="20170811 21:02:55.068"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:02:58.311" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:02:58.312" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:55.068" endtime="20170811 21:02:58.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:58.314" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:58.313" endtime="20170811 21:02:58.314"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:58.315" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:02:58.315" endtime="20170811 21:02:58.315"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:58.314" endtime="20170811 21:02:58.315"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:58.313" endtime="20170811 21:02:58.315"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:58.312" endtime="20170811 21:02:58.315"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:02:58.316" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:02:58.316" endtime="20170811 21:02:58.316"></status>
</kw>
<msg timestamp="20170811 21:02:58.316" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:53.477" endtime="20170811 21:02:58.316"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:58.317" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:58.316" endtime="20170811 21:02:58.317"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:02:58.317" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:02:58.317" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:02:58.317" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:02:58.317" endtime="20170811 21:02:58.317"></status>
</kw>
<msg timestamp="20170811 21:02:58.318" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170811 21:02:53.475" endtime="20170811 21:02:58.318"></status>
</kw>
<msg timestamp="20170811 21:02:58.318" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170811 21:02:53.475" endtime="20170811 21:02:58.318"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:02:58.318" endtime="20170811 21:02:58.319"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:53.475" endtime="20170811 21:02:58.319"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:02:58.322" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:02:58.322" endtime="20170811 21:02:58.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:02:58.323" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:02:58.323" endtime="20170811 21:02:58.323"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:02:58.324" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:02:58.323" endtime="20170811 21:02:58.324"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:02:58.324" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:02:58.324" endtime="20170811 21:02:58.324"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:02:58.509" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:02:58.325" endtime="20170811 21:02:58.509"></status>
</kw>
<msg timestamp="20170811 21:02:58.509" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:02:58.509" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:58.325" endtime="20170811 21:02:58.509"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:02:58.510" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:58.509" endtime="20170811 21:02:58.510"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:02:58.510" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:02:58.510" endtime="20170811 21:02:58.511"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:58.321" endtime="20170811 21:02:58.511"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:58.321" endtime="20170811 21:02:58.511"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:58.320" endtime="20170811 21:02:58.511"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:02:58.512" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:02:58.511" endtime="20170811 21:02:58.512"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:02:58.514" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:58.513" endtime="20170811 21:02:58.514"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:02:58.515" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:02:58.514" endtime="20170811 21:02:58.515"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:58.514" endtime="20170811 21:02:58.515"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:58.512" endtime="20170811 21:02:58.515"></status>
</kw>
<status status="PASS" starttime="20170811 21:02:58.512" endtime="20170811 21:02:58.515"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:03:00.528" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:03:00.528" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:58.515" endtime="20170811 21:03:00.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:03:00.530" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:03:00.529" endtime="20170811 21:03:00.530"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:03:00.531" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:03:00.530" endtime="20170811 21:03:00.531"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:00.530" endtime="20170811 21:03:00.531"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:00.529" endtime="20170811 21:03:00.531"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:00.528" endtime="20170811 21:03:00.531"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:03:00.532" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:03:00.531" endtime="20170811 21:03:00.532"></status>
</kw>
<msg timestamp="20170811 21:03:00.532" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:02:58.320" endtime="20170811 21:03:00.532"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:03:00.532" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:03:00.532" endtime="20170811 21:03:00.533"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:03:00.533" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:03:00.533" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:03:00.533" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:03:00.533" endtime="20170811 21:03:00.533"></status>
</kw>
<msg timestamp="20170811 21:03:00.533" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170811 21:02:58.319" endtime="20170811 21:03:00.534"></status>
</kw>
<msg timestamp="20170811 21:03:00.534" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170811 21:02:58.319" endtime="20170811 21:03:00.534"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170811 21:03:00.534" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:03:00.534" endtime="20170811 21:03:00.535"></status>
</kw>
<status status="FAIL" starttime="20170811 21:02:53.474" endtime="20170811 21:03:00.535"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:03:10.540" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:03:10.540" endtime="20170811 21:03:10.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:03:10.541" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:03:10.541" endtime="20170811 21:03:10.541"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:03:10.542" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:03:10.541" endtime="20170811 21:03:10.542"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:03:10.542" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:03:10.542" endtime="20170811 21:03:10.542"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:03:10.984" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:03:10.543" endtime="20170811 21:03:10.984"></status>
</kw>
<msg timestamp="20170811 21:03:10.984" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:03:10.984" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:03:10.543" endtime="20170811 21:03:10.984"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:03:10.985" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:03:10.985" endtime="20170811 21:03:10.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:03:10.986" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:03:10.985" endtime="20170811 21:03:10.986"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:10.539" endtime="20170811 21:03:10.986"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:10.539" endtime="20170811 21:03:10.986"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:10.538" endtime="20170811 21:03:10.986"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:03:10.987" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:03:10.986" endtime="20170811 21:03:10.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:03:10.989" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:03:10.988" endtime="20170811 21:03:10.989"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:03:10.990" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:03:10.989" endtime="20170811 21:03:10.990"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:10.989" endtime="20170811 21:03:10.990"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:10.987" endtime="20170811 21:03:10.990"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:10.987" endtime="20170811 21:03:10.990"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:03:11.197" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:03:11.197" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:03:10.990" endtime="20170811 21:03:11.197"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:03:11.199" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:03:11.199" endtime="20170811 21:03:11.199"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:03:11.206" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:03:11.205" endtime="20170811 21:03:11.206"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:11.200" endtime="20170811 21:03:11.206"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:11.198" endtime="20170811 21:03:11.206"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:11.198" endtime="20170811 21:03:11.206"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:03:11.207" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:03:11.207" endtime="20170811 21:03:11.207"></status>
</kw>
<msg timestamp="20170811 21:03:11.208" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:03:10.537" endtime="20170811 21:03:11.208"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:03:11.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:03:11.208" endtime="20170811 21:03:11.209"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:03:11.209" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:03:11.210" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:03:11.210" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:03:11.209" endtime="20170811 21:03:11.210"></status>
</kw>
<msg timestamp="20170811 21:03:11.210" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170811 21:03:10.537" endtime="20170811 21:03:11.210"></status>
</kw>
<msg timestamp="20170811 21:03:11.211" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170811 21:03:10.536" endtime="20170811 21:03:11.211"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170811 21:03:11.212" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170811 21:03:11.211" endtime="20170811 21:03:11.212"></status>
</kw>
<status status="FAIL" starttime="20170811 21:03:10.536" endtime="20170811 21:03:11.212"></status>
</kw>
<status status="FAIL" starttime="20170811 21:03:10.535" endtime="20170811 21:03:11.212"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:03:21.217" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:03:21.217" endtime="20170811 21:03:21.217"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:03:21.218" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:03:21.218" endtime="20170811 21:03:21.218"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:03:21.219" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:03:21.218" endtime="20170811 21:03:21.219"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:03:21.219" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:03:21.219" endtime="20170811 21:03:21.219"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:03:21.434" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:03:21.220" endtime="20170811 21:03:21.434"></status>
</kw>
<msg timestamp="20170811 21:03:21.434" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:03:21.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:03:21.219" endtime="20170811 21:03:21.434"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:03:21.435" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:03:21.434" endtime="20170811 21:03:21.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:03:21.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:03:21.435" endtime="20170811 21:03:21.435"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:21.216" endtime="20170811 21:03:21.436"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:21.216" endtime="20170811 21:03:21.436"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:21.215" endtime="20170811 21:03:21.436"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:03:21.436" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:03:21.436" endtime="20170811 21:03:21.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:03:21.438" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:03:21.438" endtime="20170811 21:03:21.439"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:03:21.439" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:03:21.439" endtime="20170811 21:03:21.439"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:21.439" endtime="20170811 21:03:21.440"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:21.437" endtime="20170811 21:03:21.440"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:21.437" endtime="20170811 21:03:21.440"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:03:21.504" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:03:21.505" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:03:21.440" endtime="20170811 21:03:21.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:03:21.506" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:03:21.506" endtime="20170811 21:03:21.506"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:03:21.507" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:03:21.507" endtime="20170811 21:03:21.507"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:21.507" endtime="20170811 21:03:21.508"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:21.505" endtime="20170811 21:03:21.508"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:21.505" endtime="20170811 21:03:21.508"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:03:21.508" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:03:21.508" endtime="20170811 21:03:21.508"></status>
</kw>
<msg timestamp="20170811 21:03:21.508" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:03:21.214" endtime="20170811 21:03:21.509"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:03:21.509" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:03:21.509" endtime="20170811 21:03:21.509"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:03:21.510" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:03:21.510" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:03:21.510" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:03:21.509" endtime="20170811 21:03:21.510"></status>
</kw>
<msg timestamp="20170811 21:03:21.510" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170811 21:03:21.214" endtime="20170811 21:03:21.510"></status>
</kw>
<msg timestamp="20170811 21:03:21.511" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170811 21:03:21.213" endtime="20170811 21:03:21.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170811 21:03:21.511" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170811 21:03:21.511" endtime="20170811 21:03:21.511"></status>
</kw>
<status status="FAIL" starttime="20170811 21:03:21.213" endtime="20170811 21:03:21.511"></status>
</kw>
<status status="FAIL" starttime="20170811 21:03:21.213" endtime="20170811 21:03:21.512"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:03:31.517" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:03:31.517" endtime="20170811 21:03:31.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:03:31.518" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:03:31.518" endtime="20170811 21:03:31.518"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:03:31.519" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:03:31.518" endtime="20170811 21:03:31.519"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:03:31.519" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:03:31.519" endtime="20170811 21:03:31.519"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:03:31.736" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:03:31.520" endtime="20170811 21:03:31.736"></status>
</kw>
<msg timestamp="20170811 21:03:31.737" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:03:31.737" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:03:31.520" endtime="20170811 21:03:31.737"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:03:31.738" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:03:31.737" endtime="20170811 21:03:31.738"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:03:31.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:03:31.738" endtime="20170811 21:03:31.739"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:31.516" endtime="20170811 21:03:31.739"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:31.515" endtime="20170811 21:03:31.739"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:31.515" endtime="20170811 21:03:31.739"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:03:31.740" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:03:31.739" endtime="20170811 21:03:31.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:03:31.742" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:03:31.741" endtime="20170811 21:03:31.742"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:03:31.743" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:03:31.742" endtime="20170811 21:03:31.743"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:31.742" endtime="20170811 21:03:31.743"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:31.740" endtime="20170811 21:03:31.743"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:31.740" endtime="20170811 21:03:31.743"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:03:31.843" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:03:31.844" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:03:31.743" endtime="20170811 21:03:31.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:03:31.845" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:03:31.845" endtime="20170811 21:03:31.845"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:03:31.847" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:03:31.846" endtime="20170811 21:03:31.847"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:31.846" endtime="20170811 21:03:31.847"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:31.844" endtime="20170811 21:03:31.847"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:31.844" endtime="20170811 21:03:31.847"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:03:31.847" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:03:31.847" endtime="20170811 21:03:31.848"></status>
</kw>
<msg timestamp="20170811 21:03:31.848" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:03:31.514" endtime="20170811 21:03:31.848"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:03:31.848" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:03:31.848" endtime="20170811 21:03:31.849"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:03:31.849" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:03:31.849" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:03:31.849" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:03:31.849" endtime="20170811 21:03:31.849"></status>
</kw>
<msg timestamp="20170811 21:03:31.850" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170811 21:03:31.514" endtime="20170811 21:03:31.850"></status>
</kw>
<msg timestamp="20170811 21:03:31.850" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170811 21:03:31.513" endtime="20170811 21:03:31.850"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170811 21:03:31.850" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170811 21:03:31.850" endtime="20170811 21:03:31.851"></status>
</kw>
<status status="FAIL" starttime="20170811 21:03:31.513" endtime="20170811 21:03:31.851"></status>
</kw>
<status status="FAIL" starttime="20170811 21:03:31.512" endtime="20170811 21:03:31.851"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:03:41.856" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:03:41.855" endtime="20170811 21:03:41.856"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:03:41.857" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:03:41.856" endtime="20170811 21:03:41.857"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:03:41.858" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:03:41.857" endtime="20170811 21:03:41.858"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:03:41.858" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:03:41.858" endtime="20170811 21:03:41.858"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:03:42.048" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:03:41.859" endtime="20170811 21:03:42.049"></status>
</kw>
<msg timestamp="20170811 21:03:42.049" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:03:42.049" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:03:41.859" endtime="20170811 21:03:42.049"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:03:42.050" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:03:42.049" endtime="20170811 21:03:42.050"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:03:42.050" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:03:42.050" endtime="20170811 21:03:42.050"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:41.855" endtime="20170811 21:03:42.050"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:41.855" endtime="20170811 21:03:42.050"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:41.854" endtime="20170811 21:03:42.051"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:03:42.051" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:03:42.051" endtime="20170811 21:03:42.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:03:42.053" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:03:42.053" endtime="20170811 21:03:42.053"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:03:42.054" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:03:42.054" endtime="20170811 21:03:42.054"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:42.053" endtime="20170811 21:03:42.054"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:42.052" endtime="20170811 21:03:42.055"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:42.051" endtime="20170811 21:03:42.055"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:03:42.128" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:03:42.128" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:03:42.055" endtime="20170811 21:03:42.128"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:03:42.130" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:03:42.129" endtime="20170811 21:03:42.130"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:03:42.131" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:03:42.130" endtime="20170811 21:03:42.131"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:42.130" endtime="20170811 21:03:42.131"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:42.129" endtime="20170811 21:03:42.131"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:42.128" endtime="20170811 21:03:42.131"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:03:42.132" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:03:42.131" endtime="20170811 21:03:42.132"></status>
</kw>
<msg timestamp="20170811 21:03:42.132" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:03:41.853" endtime="20170811 21:03:42.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:03:42.132" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:03:42.132" endtime="20170811 21:03:42.133"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:03:42.133" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:03:42.133" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:03:42.133" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:03:42.133" endtime="20170811 21:03:42.133"></status>
</kw>
<msg timestamp="20170811 21:03:42.134" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170811 21:03:41.853" endtime="20170811 21:03:42.134"></status>
</kw>
<msg timestamp="20170811 21:03:42.134" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170811 21:03:41.852" endtime="20170811 21:03:42.134"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170811 21:03:42.135" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170811 21:03:42.134" endtime="20170811 21:03:42.135"></status>
</kw>
<status status="FAIL" starttime="20170811 21:03:41.852" endtime="20170811 21:03:42.135"></status>
</kw>
<status status="FAIL" starttime="20170811 21:03:41.851" endtime="20170811 21:03:42.135"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:03:52.140" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:03:52.140" endtime="20170811 21:03:52.141"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:03:52.141" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:03:52.141" endtime="20170811 21:03:52.142"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:03:52.142" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:03:52.142" endtime="20170811 21:03:52.142"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:03:52.143" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:03:52.142" endtime="20170811 21:03:52.143"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:03:52.329" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:03:52.143" endtime="20170811 21:03:52.329"></status>
</kw>
<msg timestamp="20170811 21:03:52.329" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:03:52.329" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:03:52.143" endtime="20170811 21:03:52.329"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:03:52.330" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:03:52.329" endtime="20170811 21:03:52.330"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:03:52.330" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:03:52.330" endtime="20170811 21:03:52.331"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:52.139" endtime="20170811 21:03:52.331"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:52.139" endtime="20170811 21:03:52.331"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:52.138" endtime="20170811 21:03:52.331"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:03:52.332" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:03:52.331" endtime="20170811 21:03:52.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:03:52.334" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:03:52.333" endtime="20170811 21:03:52.334"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:03:52.335" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:03:52.334" endtime="20170811 21:03:52.335"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:52.334" endtime="20170811 21:03:52.335"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:52.332" endtime="20170811 21:03:52.335"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:52.332" endtime="20170811 21:03:52.335"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:03:52.412" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:03:52.412" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:03:52.335" endtime="20170811 21:03:52.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:03:52.414" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:03:52.413" endtime="20170811 21:03:52.414"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:03:52.415" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:03:52.414" endtime="20170811 21:03:52.415"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:52.414" endtime="20170811 21:03:52.415"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:52.413" endtime="20170811 21:03:52.415"></status>
</kw>
<status status="PASS" starttime="20170811 21:03:52.412" endtime="20170811 21:03:52.415"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:03:52.416" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:03:52.416" endtime="20170811 21:03:52.416"></status>
</kw>
<msg timestamp="20170811 21:03:52.416" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:03:52.137" endtime="20170811 21:03:52.416"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:03:52.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:03:52.416" endtime="20170811 21:03:52.417"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:03:52.417" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:03:52.417" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:03:52.417" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:03:52.417" endtime="20170811 21:03:52.417"></status>
</kw>
<msg timestamp="20170811 21:03:52.418" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170811 21:03:52.137" endtime="20170811 21:03:52.418"></status>
</kw>
<msg timestamp="20170811 21:03:52.418" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170811 21:03:52.136" endtime="20170811 21:03:52.418"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170811 21:03:52.419" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170811 21:03:52.418" endtime="20170811 21:03:52.419"></status>
</kw>
<status status="FAIL" starttime="20170811 21:03:52.136" endtime="20170811 21:03:52.419"></status>
</kw>
<status status="FAIL" starttime="20170811 21:03:52.135" endtime="20170811 21:03:52.419"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:04:02.424" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:04:02.424" endtime="20170811 21:04:02.425"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:04:02.425" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:04:02.425" endtime="20170811 21:04:02.425"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:04:02.426" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:04:02.426" endtime="20170811 21:04:02.426"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:04:02.427" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:04:02.426" endtime="20170811 21:04:02.427"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:04:02.642" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:04:02.427" endtime="20170811 21:04:02.642"></status>
</kw>
<msg timestamp="20170811 21:04:02.642" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:02.642" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:02.427" endtime="20170811 21:04:02.642"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:04:02.643" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:02.642" endtime="20170811 21:04:02.643"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:02.643" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:02.643" endtime="20170811 21:04:02.643"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:02.423" endtime="20170811 21:04:02.643"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:02.423" endtime="20170811 21:04:02.644"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:02.422" endtime="20170811 21:04:02.644"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:04:02.644" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:04:02.644" endtime="20170811 21:04:02.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:04:02.646" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:04:02.646" endtime="20170811 21:04:02.646"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:04:02.647" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:04:02.647" endtime="20170811 21:04:02.647"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:02.646" endtime="20170811 21:04:02.647"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:02.645" endtime="20170811 21:04:02.647"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:02.645" endtime="20170811 21:04:02.648"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:04:02.711" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:04:02.711" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:02.648" endtime="20170811 21:04:02.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:04:02.713" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:04:02.713" endtime="20170811 21:04:02.713"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:04:02.714" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:04:02.714" endtime="20170811 21:04:02.714"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:02.713" endtime="20170811 21:04:02.714"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:02.712" endtime="20170811 21:04:02.714"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:02.712" endtime="20170811 21:04:02.715"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:04:02.715" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:04:02.715" endtime="20170811 21:04:02.715"></status>
</kw>
<msg timestamp="20170811 21:04:02.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:02.422" endtime="20170811 21:04:02.715"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:02.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:02.715" endtime="20170811 21:04:02.716"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:04:02.716" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:04:02.716" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:04:02.717" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:04:02.716" endtime="20170811 21:04:02.717"></status>
</kw>
<msg timestamp="20170811 21:04:02.717" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170811 21:04:02.421" endtime="20170811 21:04:02.717"></status>
</kw>
<msg timestamp="20170811 21:04:02.717" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170811 21:04:02.421" endtime="20170811 21:04:02.717"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170811 21:04:02.718" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170811 21:04:02.717" endtime="20170811 21:04:02.718"></status>
</kw>
<status status="FAIL" starttime="20170811 21:04:02.420" endtime="20170811 21:04:02.718"></status>
</kw>
<status status="FAIL" starttime="20170811 21:04:02.420" endtime="20170811 21:04:02.718"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:04:12.724" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:04:12.723" endtime="20170811 21:04:12.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:04:12.725" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:04:12.724" endtime="20170811 21:04:12.725"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:04:12.725" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:04:12.725" endtime="20170811 21:04:12.725"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:04:12.726" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:04:12.726" endtime="20170811 21:04:12.726"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:04:14.249" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:04:12.727" endtime="20170811 21:04:14.250"></status>
</kw>
<msg timestamp="20170811 21:04:14.250" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:14.250" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:12.726" endtime="20170811 21:04:14.250"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:04:14.251" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:14.250" endtime="20170811 21:04:14.251"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:14.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:14.251" endtime="20170811 21:04:14.252"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:12.722" endtime="20170811 21:04:14.252"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:12.722" endtime="20170811 21:04:14.252"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:12.721" endtime="20170811 21:04:14.252"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:04:14.253" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170811 21:04:14.252" endtime="20170811 21:04:14.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:04:14.255" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:04:14.254" endtime="20170811 21:04:14.255"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:04:14.256" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:04:14.255" endtime="20170811 21:04:14.256"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:14.255" endtime="20170811 21:04:14.256"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:14.253" endtime="20170811 21:04:14.256"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:14.253" endtime="20170811 21:04:14.256"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:04:20.712" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170811 21:04:20.713" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:14.256" endtime="20170811 21:04:20.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:04:20.715" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:04:20.714" endtime="20170811 21:04:20.715"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:04:20.716" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:04:20.715" endtime="20170811 21:04:20.716"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:20.715" endtime="20170811 21:04:20.716"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:20.714" endtime="20170811 21:04:20.716"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:20.713" endtime="20170811 21:04:20.716"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:04:20.717" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:04:20.717" endtime="20170811 21:04:20.717"></status>
</kw>
<msg timestamp="20170811 21:04:20.717" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:12.721" endtime="20170811 21:04:20.717"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:20.718" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:20.717" endtime="20170811 21:04:20.718"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:04:20.718" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:04:20.718" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:04:20.718" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:04:20.718" endtime="20170811 21:04:20.719"></status>
</kw>
<msg timestamp="20170811 21:04:20.719" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170811 21:04:12.720" endtime="20170811 21:04:20.719"></status>
</kw>
<msg timestamp="20170811 21:04:20.719" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170811 21:04:12.720" endtime="20170811 21:04:20.719"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170811 21:04:20.720" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170811 21:04:20.720" endtime="20170811 21:04:20.720"></status>
</kw>
<status status="FAIL" starttime="20170811 21:04:12.719" endtime="20170811 21:04:20.720"></status>
</kw>
<status status="FAIL" starttime="20170811 21:04:12.719" endtime="20170811 21:04:20.720"></status>
</kw>
<msg timestamp="20170811 21:04:20.720" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</msg>
<status status="FAIL" starttime="20170811 20:54:04.109" endtime="20170811 21:04:20.721"></status>
</kw>
<status status="FAIL" starttime="20170811 20:54:03.251" endtime="20170811 21:04:20.721"></status>
</kw>
<status status="FAIL" starttime="20170811 20:53:55.691" endtime="20170811 21:04:20.721"></status>
</kw>
<status status="FAIL" starttime="20170811 20:53:55.690" endtime="20170811 21:04:20.721"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:04:20.726" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:04:20.726" endtime="20170811 21:04:20.727"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:04:20.727" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:04:20.727" endtime="20170811 21:04:20.728"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:04:20.728" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:04:20.728" endtime="20170811 21:04:20.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:04:20.730" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:04:20.729" endtime="20170811 21:04:20.730"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:04:21.398" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:04:20.731" endtime="20170811 21:04:21.398"></status>
</kw>
<msg timestamp="20170811 21:04:21.399" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:21.399" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:20.730" endtime="20170811 21:04:21.399"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:04:21.399" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:21.399" endtime="20170811 21:04:21.399"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:21.400" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:21.400" endtime="20170811 21:04:21.400"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:20.725" endtime="20170811 21:04:21.400"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:20.725" endtime="20170811 21:04:21.400"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:20.724" endtime="20170811 21:04:21.400"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:04:21.401" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170811 21:04:21.401" endtime="20170811 21:04:21.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:04:21.403" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:04:21.402" endtime="20170811 21:04:21.403"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:04:21.404" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170811 21:04:21.404" endtime="20170811 21:04:21.404"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:21.403" endtime="20170811 21:04:21.404"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:21.402" endtime="20170811 21:04:21.404"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:21.401" endtime="20170811 21:04:21.405"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:04:21.628" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170811 21:04:21.628" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:21.405" endtime="20170811 21:04:21.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170811 21:04:21.630" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:04:21.629" endtime="20170811 21:04:21.630"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170811 21:04:21.631" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170811 21:04:21.631" endtime="20170811 21:04:21.631"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:21.630" endtime="20170811 21:04:21.631"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:21.629" endtime="20170811 21:04:21.631"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:21.628" endtime="20170811 21:04:21.631"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:04:21.632" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:04:21.632" endtime="20170811 21:04:21.632"></status>
</kw>
<msg timestamp="20170811 21:04:21.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:20.723" endtime="20170811 21:04:21.632"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:21.633" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:21.632" endtime="20170811 21:04:21.633"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:04:21.634" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:04:21.634" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:04:21.634" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:04:21.633" endtime="20170811 21:04:21.634"></status>
</kw>
<msg timestamp="20170811 21:04:21.634" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170811 21:04:20.723" endtime="20170811 21:04:21.634"></status>
</kw>
<msg timestamp="20170811 21:04:21.635" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20170811 21:04:20.722" endtime="20170811 21:04:21.635"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170811 21:04:21.636" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" starttime="20170811 21:04:21.636" endtime="20170811 21:04:21.636"></status>
</kw>
<msg timestamp="20170811 21:04:21.637" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 21:04:21.635" endtime="20170811 21:04:21.637"></status>
</kw>
<msg timestamp="20170811 21:04:21.637" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 21:04:20.722" endtime="20170811 21:04:21.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170811 21:04:21.678" level="INFO">Length is 9</msg>
<status status="PASS" starttime="20170811 21:04:21.677" endtime="20170811 21:04:21.678"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170811 21:04:21.687" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170811 21:04:24.693" level="INFO">${RC} = 0</msg>
<msg timestamp="20170811 21:04:24.694" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.783 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.624 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status status="PASS" starttime="20170811 21:04:21.678" endtime="20170811 21:04:24.694"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170811 21:04:24.697" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.783 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.624 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=164 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.590 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.590/41.648/164.597/70.984 ms</msg>
<status status="PASS" starttime="20170811 21:04:24.696" endtime="20170811 21:04:24.697"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:24.698" endtime="20170811 21:04:24.698"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:21.677" endtime="20170811 21:04:24.698"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170811 21:04:24.717" level="INFO">${cur_time} = 2017-08-11 21:04:24:716633</msg>
<status status="PASS" starttime="20170811 21:04:24.716" endtime="20170811 21:04:24.717"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170811 21:04:24.718" level="INFO">${cur_time} = 20170811210424716633</msg>
<status status="PASS" starttime="20170811 21:04:24.717" endtime="20170811 21:04:24.718"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.716" endtime="20170811 21:04:24.718"></status>
</kw>
<msg timestamp="20170811 21:04:24.718" level="INFO">${FFDC_TIME} = 20170811210424716633</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170811 21:04:24.731" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20170811 21:04:24.730" endtime="20170811 21:04:24.731"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170811 21:04:24.731" level="INFO">${suite_name} = 20170811210424716633_TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20170811 21:04:24.731" endtime="20170811 21:04:24.731"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170811 21:04:24.732" level="INFO">${test_name} = PowerOnTest</msg>
<status status="PASS" starttime="20170811 21:04:24.732" endtime="20170811 21:04:24.732"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170811 21:04:24.733" level="INFO">${test_name} = 20170811210424716633_PowerOnTest</msg>
<status status="PASS" starttime="20170811 21:04:24.732" endtime="20170811 21:04:24.733"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.730" endtime="20170811 21:04:24.733"></status>
</kw>
<msg timestamp="20170811 21:04:24.733" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/</msg>
<msg timestamp="20170811 21:04:24.733" level="INFO">${FFDC_PREFIX} = 20170811210424716633_</msg>
<msg timestamp="20170811 21:04:24.764" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/</arg>
</arguments>
<msg timestamp="20170811 21:04:24.766" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:24.765" endtime="20170811 21:04:24.766"></status>
</kw>
<msg timestamp="20170811 21:04:24.773" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:24.804" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:24.803" endtime="20170811 21:04:24.804"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.802" endtime="20170811 21:04:24.804"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:24.805" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:24.805" endtime="20170811 21:04:24.805"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.804" endtime="20170811 21:04:24.805"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:24.807" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:24.806" endtime="20170811 21:04:24.807"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.805" endtime="20170811 21:04:24.807"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:24.813" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:24.808" endtime="20170811 21:04:24.813"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.807" endtime="20170811 21:04:24.813"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:24.814" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:24.814" endtime="20170811 21:04:24.814"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.813" endtime="20170811 21:04:24.814"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:24.816" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:24.815" endtime="20170811 21:04:24.816"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.815" endtime="20170811 21:04:24.816"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:24.817" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:24.817" endtime="20170811 21:04:24.817"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.816" endtime="20170811 21:04:24.817"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:24.818" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:24.818" endtime="20170811 21:04:24.818"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.817" endtime="20170811 21:04:24.819"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:24.820" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:24.819" endtime="20170811 21:04:24.820"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.819" endtime="20170811 21:04:24.820"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:24.821" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:24.821" endtime="20170811 21:04:24.822"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.820" endtime="20170811 21:04:24.822"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:24.823" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:24.822" endtime="20170811 21:04:24.823"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.822" endtime="20170811 21:04:24.823"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:24.824" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:24.824" endtime="20170811 21:04:24.824"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.823" endtime="20170811 21:04:24.824"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:24.826" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:24.825" endtime="20170811 21:04:24.826"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.824" endtime="20170811 21:04:24.826"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170811 21:04:24.871" level="INFO">width=80
host=9.3.21.61
height=24
port=22
alias=bmc_connection
term_type=vt100
index=1
newline=

prompt=# 
encoding=UTF-8
path_separator=/
timeout=25 seconds</msg>
<msg timestamp="20170811 21:04:24.871" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170811 21:04:26.907" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170811 21:04:26.923" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170811 21:04:26.923" level="INFO">${stderr} = </msg>
<msg timestamp="20170811 21:04:26.924" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20170811 21:04:24.826" endtime="20170811 21:04:26.924"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170811 21:04:26.925" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170811 21:04:26.924" endtime="20170811 21:04:26.926"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170811 21:04:26.926" level="INFO">Length is 11</msg>
<status status="PASS" starttime="20170811 21:04:26.926" endtime="20170811 21:04:26.926"></status>
</kw>
<msg timestamp="20170811 21:04:26.926" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" starttime="20170811 21:04:24.826" endtime="20170811 21:04:26.926"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:26.928" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:26.927" endtime="20170811 21:04:26.928"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.927" endtime="20170811 21:04:26.928"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.820" endtime="20170811 21:04:26.928"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:26.929" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:26.929" endtime="20170811 21:04:26.929"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.928" endtime="20170811 21:04:26.929"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170811 21:04:26.930" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status status="PASS" starttime="20170811 21:04:26.930" endtime="20170811 21:04:26.930"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:26.931" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:26.931" endtime="20170811 21:04:26.931"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.930" endtime="20170811 21:04:26.931"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:26.933" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:26.932" endtime="20170811 21:04:26.933"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.932" endtime="20170811 21:04:26.933"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.930" endtime="20170811 21:04:26.933"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:26.934" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:26.934" endtime="20170811 21:04:26.934"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.933" endtime="20170811 21:04:26.934"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:26.935" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:26.935" endtime="20170811 21:04:26.936"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.935" endtime="20170811 21:04:26.936"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.933" endtime="20170811 21:04:26.936"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:26.939" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:26.939" endtime="20170811 21:04:26.939"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.936" endtime="20170811 21:04:26.939"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:26.941" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:26.940" endtime="20170811 21:04:26.941"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.939" endtime="20170811 21:04:26.941"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.936" endtime="20170811 21:04:26.941"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.930" endtime="20170811 21:04:26.941"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:26.942" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:26.942" endtime="20170811 21:04:26.942"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.941" endtime="20170811 21:04:26.942"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:24.802" endtime="20170811 21:04:26.942"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170811 21:04:26.953" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" starttime="20170811 21:04:26.953" endtime="20170811 21:04:26.953"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170811 21:04:26.955" level="INFO">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('SEL Log', 'Collect eSEL Log') | ('BMC Specific Files', 'BMC FFDC Files') | ('Core Files', 'SCP Coredu...</msg>
<status status="PASS" starttime="20170811 21:04:26.954" endtime="20170811 21:04:26.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:26.956" endtime="20170811 21:04:26.956"></status>
</kw>
<msg timestamp="20170811 21:04:26.956" level="INFO">@{ffdc_function_list} = [ Get Request FFDC | FFDC Generic Report | SEL Log | BMC Specific Files | Core Files | OS FFDC ]</msg>
<status status="PASS" starttime="20170811 21:04:26.955" endtime="20170811 21:04:26.956"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:26.958" endtime="20170811 21:04:26.958"></status>
</kw>
<msg timestamp="20170811 21:04:26.958" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:26.958" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170811 21:04:26.957" endtime="20170811 21:04:26.958"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:26.959" endtime="20170811 21:04:26.959"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170811 21:04:27.012" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" starttime="20170811 21:04:27.011" endtime="20170811 21:04:27.012"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170811 21:04:27.013" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_led', '/org/op...</msg>
<status status="PASS" starttime="20170811 21:04:27.013" endtime="20170811 21:04:27.013"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170811 21:04:27.014" level="INFO">${logpath} = /tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_sensor_list.txt</msg>
<status status="PASS" starttime="20170811 21:04:27.013" endtime="20170811 21:04:27.014"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:04:27.017" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:04:27.017" endtime="20170811 21:04:27.017"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:04:27.018" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:04:27.018" endtime="20170811 21:04:27.018"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:04:27.019" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:04:27.018" endtime="20170811 21:04:27.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:04:27.019" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:04:27.019" endtime="20170811 21:04:27.019"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:04:27.207" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:04:27.020" endtime="20170811 21:04:27.207"></status>
</kw>
<msg timestamp="20170811 21:04:27.207" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:27.207" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:27.020" endtime="20170811 21:04:27.207"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:04:27.208" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:27.207" endtime="20170811 21:04:27.208"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:27.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:27.208" endtime="20170811 21:04:27.209"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:27.016" endtime="20170811 21:04:27.209"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:27.016" endtime="20170811 21:04:27.209"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:27.015" endtime="20170811 21:04:27.209"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:04:27.210" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" starttime="20170811 21:04:27.209" endtime="20170811 21:04:27.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:27.210" endtime="20170811 21:04:27.210"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:04:27.444" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170811 21:04:27.444" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:27.211" endtime="20170811 21:04:27.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:27.445" endtime="20170811 21:04:27.445"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:04:27.446" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:04:27.445" endtime="20170811 21:04:27.446"></status>
</kw>
<msg timestamp="20170811 21:04:27.446" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:27.014" endtime="20170811 21:04:27.446"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:27.447" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:27.447" endtime="20170811 21:04:27.447"></status>
</kw>
<msg timestamp="20170811 21:04:27.447" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170811 21:04:27.446" endtime="20170811 21:04:27.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:27.448" endtime="20170811 21:04:27.448"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170811 21:04:27.450" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:04:27.450" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170811 21:04:27.450" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" starttime="20170811 21:04:27.449" endtime="20170811 21:04:27.450"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:27.452" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_sensor_list.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:27.451" endtime="20170811 21:04:27.452"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:27.450" endtime="20170811 21:04:27.452"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:27.013" endtime="20170811 21:04:27.452"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170811 21:04:27.453" level="INFO">${logpath} = /tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_record_log.txt</msg>
<status status="PASS" starttime="20170811 21:04:27.453" endtime="20170811 21:04:27.453"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:04:27.456" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:04:27.456" endtime="20170811 21:04:27.457"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:04:27.457" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:04:27.457" endtime="20170811 21:04:27.457"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:04:27.458" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:04:27.458" endtime="20170811 21:04:27.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:04:27.459" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:04:27.458" endtime="20170811 21:04:27.459"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:04:27.950" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:04:27.459" endtime="20170811 21:04:27.950"></status>
</kw>
<msg timestamp="20170811 21:04:27.950" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:27.950" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:27.459" endtime="20170811 21:04:27.950"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:04:27.951" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:27.951" endtime="20170811 21:04:27.951"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:27.952" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:27.951" endtime="20170811 21:04:27.952"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:27.455" endtime="20170811 21:04:27.952"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:27.455" endtime="20170811 21:04:27.952"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:27.454" endtime="20170811 21:04:27.952"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:04:27.953" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" starttime="20170811 21:04:27.952" endtime="20170811 21:04:27.953"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:27.953" endtime="20170811 21:04:27.953"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:04:27.996" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170811 21:04:27.996" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:27.953" endtime="20170811 21:04:27.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:27.997" endtime="20170811 21:04:27.997"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:04:27.997" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:04:27.997" endtime="20170811 21:04:27.997"></status>
</kw>
<msg timestamp="20170811 21:04:27.998" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:27.453" endtime="20170811 21:04:27.998"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:27.999" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170811 21:04:27.999" level="FAIL">404 != 200</msg>
<status status="FAIL" starttime="20170811 21:04:27.998" endtime="20170811 21:04:27.999"></status>
</kw>
<msg timestamp="20170811 21:04:27.999" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 21:04:27.998" endtime="20170811 21:04:27.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170811 21:04:28.000" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170811 21:04:28.000" endtime="20170811 21:04:28.000"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:27.999" endtime="20170811 21:04:28.000"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:27.453" endtime="20170811 21:04:28.000"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170811 21:04:28.001" level="INFO">${logpath} = /tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_elog.txt</msg>
<status status="PASS" starttime="20170811 21:04:28.001" endtime="20170811 21:04:28.001"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:04:28.004" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:04:28.004" endtime="20170811 21:04:28.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:04:28.005" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:04:28.005" endtime="20170811 21:04:28.005"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:04:28.006" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:04:28.006" endtime="20170811 21:04:28.006"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:04:28.007" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:04:28.006" endtime="20170811 21:04:28.007"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:04:28.726" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:04:28.008" endtime="20170811 21:04:28.726"></status>
</kw>
<msg timestamp="20170811 21:04:28.727" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:28.727" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:28.007" endtime="20170811 21:04:28.727"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:04:28.727" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:28.727" endtime="20170811 21:04:28.727"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:28.728" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:28.728" endtime="20170811 21:04:28.728"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:28.003" endtime="20170811 21:04:28.728"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:28.003" endtime="20170811 21:04:28.728"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:28.002" endtime="20170811 21:04:28.728"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:04:28.729" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" starttime="20170811 21:04:28.729" endtime="20170811 21:04:28.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:28.729" endtime="20170811 21:04:28.730"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:04:29.059" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170811 21:04:29.059" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:28.730" endtime="20170811 21:04:29.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:29.060" endtime="20170811 21:04:29.060"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:04:29.061" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:04:29.060" endtime="20170811 21:04:29.061"></status>
</kw>
<msg timestamp="20170811 21:04:29.061" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:28.001" endtime="20170811 21:04:29.061"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:29.062" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:29.062" endtime="20170811 21:04:29.062"></status>
</kw>
<msg timestamp="20170811 21:04:29.062" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170811 21:04:29.061" endtime="20170811 21:04:29.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:29.063" endtime="20170811 21:04:29.063"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170811 21:04:29.064" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502483897297, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502484535153, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502484901579, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502484968680, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502485040653, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502485110017, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:04:29.064" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170811 21:04:29.064" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [],
            "Id": 2,
            "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFile...</msg>
<status status="PASS" starttime="20170811 21:04:29.063" endtime="20170811 21:04:29.064"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:29.066" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_elog.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:29.065" endtime="20170811 21:04:29.066"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.064" endtime="20170811 21:04:29.066"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:28.000" endtime="20170811 21:04:29.066"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170811 21:04:29.067" level="INFO">${logpath} = /tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_led.txt</msg>
<status status="PASS" starttime="20170811 21:04:29.066" endtime="20170811 21:04:29.067"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:04:29.070" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:04:29.069" endtime="20170811 21:04:29.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:04:29.071" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:04:29.070" endtime="20170811 21:04:29.071"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:04:29.071" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:04:29.071" endtime="20170811 21:04:29.071"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:04:29.072" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:04:29.072" endtime="20170811 21:04:29.072"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:04:29.261" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:04:29.073" endtime="20170811 21:04:29.261"></status>
</kw>
<msg timestamp="20170811 21:04:29.261" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:29.261" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:29.072" endtime="20170811 21:04:29.261"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:04:29.262" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:29.262" endtime="20170811 21:04:29.262"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:29.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:29.262" endtime="20170811 21:04:29.263"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.069" endtime="20170811 21:04:29.263"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.068" endtime="20170811 21:04:29.263"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.068" endtime="20170811 21:04:29.263"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:04:29.264" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" starttime="20170811 21:04:29.263" endtime="20170811 21:04:29.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:29.264" endtime="20170811 21:04:29.264"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:04:29.306" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170811 21:04:29.307" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:29.265" endtime="20170811 21:04:29.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:29.307" endtime="20170811 21:04:29.307"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:04:29.308" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:04:29.308" endtime="20170811 21:04:29.308"></status>
</kw>
<msg timestamp="20170811 21:04:29.308" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:29.067" endtime="20170811 21:04:29.308"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:29.309" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170811 21:04:29.309" level="FAIL">404 != 200</msg>
<status status="FAIL" starttime="20170811 21:04:29.309" endtime="20170811 21:04:29.309"></status>
</kw>
<msg timestamp="20170811 21:04:29.309" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 21:04:29.308" endtime="20170811 21:04:29.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170811 21:04:29.310" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170811 21:04:29.310" endtime="20170811 21:04:29.311"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.310" endtime="20170811 21:04:29.311"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.066" endtime="20170811 21:04:29.311"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170811 21:04:29.311" level="INFO">${logpath} = /tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_inventory.txt</msg>
<status status="PASS" starttime="20170811 21:04:29.311" endtime="20170811 21:04:29.311"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:04:29.316" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:04:29.315" endtime="20170811 21:04:29.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:04:29.317" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:04:29.317" endtime="20170811 21:04:29.317"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:04:29.318" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:04:29.317" endtime="20170811 21:04:29.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:04:29.318" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:04:29.318" endtime="20170811 21:04:29.318"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:04:29.506" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:04:29.319" endtime="20170811 21:04:29.506"></status>
</kw>
<msg timestamp="20170811 21:04:29.506" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:29.506" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:29.319" endtime="20170811 21:04:29.506"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:04:29.507" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:29.506" endtime="20170811 21:04:29.507"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:29.507" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:29.507" endtime="20170811 21:04:29.507"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.314" endtime="20170811 21:04:29.508"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.314" endtime="20170811 21:04:29.508"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.313" endtime="20170811 21:04:29.508"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:04:29.508" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" starttime="20170811 21:04:29.508" endtime="20170811 21:04:29.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:29.509" endtime="20170811 21:04:29.509"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:04:29.810" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170811 21:04:29.810" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:29.509" endtime="20170811 21:04:29.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:29.810" endtime="20170811 21:04:29.811"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:04:29.811" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:04:29.811" endtime="20170811 21:04:29.811"></status>
</kw>
<msg timestamp="20170811 21:04:29.812" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:29.312" endtime="20170811 21:04:29.812"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:29.813" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:29.812" endtime="20170811 21:04:29.813"></status>
</kw>
<msg timestamp="20170811 21:04:29.813" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170811 21:04:29.812" endtime="20170811 21:04:29.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:29.813" endtime="20170811 21:04:29.813"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170811 21:04:29.814" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:04:29.814" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170811 21:04:29.814" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" starttime="20170811 21:04:29.814" endtime="20170811 21:04:29.815"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:29.816" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_inventory.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:29.815" endtime="20170811 21:04:29.816"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.815" endtime="20170811 21:04:29.816"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.311" endtime="20170811 21:04:29.816"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:27.013" endtime="20170811 21:04:29.816"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:27.012" endtime="20170811 21:04:29.817"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:27.012" endtime="20170811 21:04:29.817"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:27.012" endtime="20170811 21:04:29.817"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:27.011" endtime="20170811 21:04:29.817"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.959" endtime="20170811 21:04:29.817"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.957" endtime="20170811 21:04:29.817"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.956" endtime="20170811 21:04:29.817"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:29.819" endtime="20170811 21:04:29.820"></status>
</kw>
<msg timestamp="20170811 21:04:29.820" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:29.820" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170811 21:04:29.818" endtime="20170811 21:04:29.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:29.820" endtime="20170811 21:04:29.821"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170811 21:04:29.876" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status status="PASS" starttime="20170811 21:04:29.876" endtime="20170811 21:04:29.876"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170811 21:04:29.878" level="INFO">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') ]</msg>
<status status="PASS" starttime="20170811 21:04:29.877" endtime="20170811 21:04:29.878"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170811 21:04:29.883" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" starttime="20170811 21:04:29.878" endtime="20170811 21:04:29.883"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:29.886" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:29.886" endtime="20170811 21:04:29.886"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.885" endtime="20170811 21:04:29.886"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:29.887" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:29.887" endtime="20170811 21:04:29.888"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.886" endtime="20170811 21:04:29.888"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:29.889" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:29.889" endtime="20170811 21:04:29.889"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.888" endtime="20170811 21:04:29.889"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:29.890" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:29.890" endtime="20170811 21:04:29.890"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.889" endtime="20170811 21:04:29.890"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.884" endtime="20170811 21:04:29.891"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.884" endtime="20170811 21:04:29.891"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 21:04:29.891" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" starttime="20170811 21:04:29.891" endtime="20170811 21:04:29.891"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170811 21:04:30.036" level="INFO">width=80
host=9.3.21.61
height=24
port=22
alias=bmc_connection
term_type=vt100
index=1
newline=

prompt=# 
encoding=UTF-8
path_separator=/
timeout=25 seconds</msg>
<msg timestamp="20170811 21:04:30.037" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170811 21:04:30.104" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170811 21:04:29.960" endtime="20170811 21:04:30.104"></status>
</kw>
<msg timestamp="20170811 21:04:30.104" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:30.104" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Fri Aug 11 20:24:30 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" starttime="20170811 21:04:29.892" endtime="20170811 21:04:30.104"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170811 21:04:30.105" level="INFO">${stdout} = Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Fri Aug 11 20:24:30 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" starttime="20170811 21:04:30.105" endtime="20170811 21:04:30.105"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170811 21:04:30.105" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170811 21:04:30.105" endtime="20170811 21:04:30.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:30.112" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:30.112" endtime="20170811 21:04:30.112"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.111" endtime="20170811 21:04:30.113"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.106" endtime="20170811 21:04:30.113"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.883" endtime="20170811 21:04:30.113"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.883" endtime="20170811 21:04:30.113"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:30.116" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:30.115" endtime="20170811 21:04:30.116"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.115" endtime="20170811 21:04:30.116"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:30.117" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:30.117" endtime="20170811 21:04:30.117"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.116" endtime="20170811 21:04:30.117"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:30.119" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:30.118" endtime="20170811 21:04:30.119"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.118" endtime="20170811 21:04:30.119"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:30.120" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:30.120" endtime="20170811 21:04:30.120"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.119" endtime="20170811 21:04:30.120"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.114" endtime="20170811 21:04:30.120"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.114" endtime="20170811 21:04:30.120"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 21:04:30.121" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" starttime="20170811 21:04:30.121" endtime="20170811 21:04:30.121"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170811 21:04:30.245" level="INFO">width=80
host=9.3.21.61
height=24
port=22
alias=bmc_connection
term_type=vt100
index=1
newline=

prompt=# 
encoding=UTF-8
path_separator=/
timeout=25 seconds</msg>
<msg timestamp="20170811 21:04:30.245" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170811 21:04:30.312" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170811 21:04:30.182" endtime="20170811 21:04:30.312"></status>
</kw>
<msg timestamp="20170811 21:04:30.312" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:30.313" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" starttime="20170811 21:04:30.121" endtime="20170811 21:04:30.313"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170811 21:04:30.313" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status status="PASS" starttime="20170811 21:04:30.313" endtime="20170811 21:04:30.313"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170811 21:04:30.314" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170811 21:04:30.314" endtime="20170811 21:04:30.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:30.320" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:30.320" endtime="20170811 21:04:30.321"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.319" endtime="20170811 21:04:30.321"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.314" endtime="20170811 21:04:30.321"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.113" endtime="20170811 21:04:30.321"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.113" endtime="20170811 21:04:30.321"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:30.324" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:30.323" endtime="20170811 21:04:30.324"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.323" endtime="20170811 21:04:30.324"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:30.325" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:30.325" endtime="20170811 21:04:30.325"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.324" endtime="20170811 21:04:30.326"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:30.327" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:30.326" endtime="20170811 21:04:30.327"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.326" endtime="20170811 21:04:30.327"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:30.328" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:30.328" endtime="20170811 21:04:30.328"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.327" endtime="20170811 21:04:30.328"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.322" endtime="20170811 21:04:30.328"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.322" endtime="20170811 21:04:30.328"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 21:04:30.329" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" starttime="20170811 21:04:30.329" endtime="20170811 21:04:30.329"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170811 21:04:30.462" level="INFO">width=80
host=9.3.21.61
height=24
port=22
alias=bmc_connection
term_type=vt100
index=1
newline=

prompt=# 
encoding=UTF-8
path_separator=/
timeout=25 seconds</msg>
<msg timestamp="20170811 21:04:30.462" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170811 21:04:30.690" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170811 21:04:30.393" endtime="20170811 21:04:30.690"></status>
</kw>
<msg timestamp="20170811 21:04:30.690" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:30.690" level="INFO">${ret_values} = (u' 21:04:34 up 16 min,  load average: 2.67, 1.67, 1.34', u'', 0)</msg>
<status status="PASS" starttime="20170811 21:04:30.329" endtime="20170811 21:04:30.690"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170811 21:04:30.691" level="INFO">${stdout} =  21:04:34 up 16 min,  load average: 2.67, 1.67, 1.34</msg>
<status status="PASS" starttime="20170811 21:04:30.691" endtime="20170811 21:04:30.691"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170811 21:04:30.692" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170811 21:04:30.691" endtime="20170811 21:04:30.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:30.701" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:30.700" endtime="20170811 21:04:30.701"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.699" endtime="20170811 21:04:30.701"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.692" endtime="20170811 21:04:30.701"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.321" endtime="20170811 21:04:30.701"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.321" endtime="20170811 21:04:30.701"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.883" endtime="20170811 21:04:30.701"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.877" endtime="20170811 21:04:30.701"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.877" endtime="20170811 21:04:30.701"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170811 21:04:30.703" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" starttime="20170811 21:04:30.702" endtime="20170811 21:04:30.703"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170811 21:04:30.703" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" starttime="20170811 21:04:30.703" endtime="20170811 21:04:30.703"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:30.706" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:30.706" endtime="20170811 21:04:30.707"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.705" endtime="20170811 21:04:30.707"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:30.708" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:30.708" endtime="20170811 21:04:30.708"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.707" endtime="20170811 21:04:30.708"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:30.709" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:30.709" endtime="20170811 21:04:30.709"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.708" endtime="20170811 21:04:30.709"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:30.711" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:30.710" endtime="20170811 21:04:30.711"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.710" endtime="20170811 21:04:30.711"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.705" endtime="20170811 21:04:30.711"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.705" endtime="20170811 21:04:30.711"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 21:04:30.712" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" starttime="20170811 21:04:30.711" endtime="20170811 21:04:30.712"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170811 21:04:30.839" level="INFO">width=80
host=9.3.21.61
height=24
port=22
alias=bmc_connection
term_type=vt100
index=1
newline=

prompt=# 
encoding=UTF-8
path_separator=/
timeout=25 seconds</msg>
<msg timestamp="20170811 21:04:30.840" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170811 21:04:31.069" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170811 21:04:30.772" endtime="20170811 21:04:31.069"></status>
</kw>
<msg timestamp="20170811 21:04:31.069" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:31.069" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-191"\nVERSION_ID="v1.99.8-191-gabbe307"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" starttime="20170811 21:04:30.712" endtime="20170811 21:04:31.069"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170811 21:04:31.070" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-191"
VERSION_ID="v1.99.8-191-gabbe307"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" starttime="20170811 21:04:31.070" endtime="20170811 21:04:31.070"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170811 21:04:31.071" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170811 21:04:31.070" endtime="20170811 21:04:31.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:31.080" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:31.080" endtime="20170811 21:04:31.080"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:31.079" endtime="20170811 21:04:31.080"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:31.071" endtime="20170811 21:04:31.080"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.704" endtime="20170811 21:04:31.081"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.704" endtime="20170811 21:04:31.081"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.703" endtime="20170811 21:04:31.081"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.702" endtime="20170811 21:04:31.081"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:30.702" endtime="20170811 21:04:31.081"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170811 21:04:31.082" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" starttime="20170811 21:04:31.081" endtime="20170811 21:04:31.082"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170811 21:04:31.083" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" starttime="20170811 21:04:31.082" endtime="20170811 21:04:31.083"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:31.086" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:31.085" endtime="20170811 21:04:31.086"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:31.085" endtime="20170811 21:04:31.086"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:31.087" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:31.087" endtime="20170811 21:04:31.087"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:31.086" endtime="20170811 21:04:31.087"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:31.088" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:31.088" endtime="20170811 21:04:31.088"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:31.087" endtime="20170811 21:04:31.089"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:31.090" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:31.089" endtime="20170811 21:04:31.090"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:31.089" endtime="20170811 21:04:31.090"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:31.084" endtime="20170811 21:04:31.090"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:31.084" endtime="20170811 21:04:31.090"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 21:04:31.091" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" starttime="20170811 21:04:31.090" endtime="20170811 21:04:31.091"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170811 21:04:31.222" level="INFO">width=80
host=9.3.21.61
height=24
port=22
alias=bmc_connection
term_type=vt100
index=1
newline=

prompt=# 
encoding=UTF-8
path_separator=/
timeout=25 seconds</msg>
<msg timestamp="20170811 21:04:31.222" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170811 21:04:35.189" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170811 21:04:31.146" endtime="20170811 21:04:35.189"></status>
</kw>
<msg timestamp="20170811 21:04:35.189" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:35.189" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.R...</msg>
<status status="PASS" starttime="20170811 21:04:31.091" endtime="20170811 21:04:35.189"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170811 21:04:35.190" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<status status="PASS" starttime="20170811 21:04:35.190" endtime="20170811 21:04:35.190"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170811 21:04:35.191" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170811 21:04:35.190" endtime="20170811 21:04:35.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:35.197" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:35.197" endtime="20170811 21:04:35.197"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:35.196" endtime="20170811 21:04:35.198"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:35.191" endtime="20170811 21:04:35.198"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:31.083" endtime="20170811 21:04:35.198"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:31.083" endtime="20170811 21:04:35.198"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:31.083" endtime="20170811 21:04:35.198"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:31.081" endtime="20170811 21:04:35.198"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:31.081" endtime="20170811 21:04:35.198"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.876" endtime="20170811 21:04:35.198"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.875" endtime="20170811 21:04:35.198"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.821" endtime="20170811 21:04:35.198"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.817" endtime="20170811 21:04:35.198"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:29.817" endtime="20170811 21:04:35.198"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:35.200" endtime="20170811 21:04:35.200"></status>
</kw>
<msg timestamp="20170811 21:04:35.200" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:35.201" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170811 21:04:35.200" endtime="20170811 21:04:35.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:35.201" endtime="20170811 21:04:35.201"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:04:35.248" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:04:35.248" endtime="20170811 21:04:35.249"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:04:35.249" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:04:35.249" endtime="20170811 21:04:35.249"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:04:35.250" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:04:35.249" endtime="20170811 21:04:35.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:04:35.250" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:04:35.250" endtime="20170811 21:04:35.251"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:04:35.939" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:04:35.251" endtime="20170811 21:04:35.939"></status>
</kw>
<msg timestamp="20170811 21:04:35.940" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:35.940" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:35.251" endtime="20170811 21:04:35.940"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:04:35.940" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:35.940" endtime="20170811 21:04:35.940"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:35.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:35.941" endtime="20170811 21:04:35.941"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:35.247" endtime="20170811 21:04:35.941"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:35.247" endtime="20170811 21:04:35.941"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:35.246" endtime="20170811 21:04:35.941"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:04:35.942" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" starttime="20170811 21:04:35.942" endtime="20170811 21:04:35.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:35.942" endtime="20170811 21:04:35.943"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:04:36.527" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170811 21:04:36.527" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:35.943" endtime="20170811 21:04:36.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:36.527" endtime="20170811 21:04:36.528"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:04:36.528" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:04:36.528" endtime="20170811 21:04:36.528"></status>
</kw>
<msg timestamp="20170811 21:04:36.529" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:35.246" endtime="20170811 21:04:36.529"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:36.530" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:36.530" endtime="20170811 21:04:36.530"></status>
</kw>
<msg timestamp="20170811 21:04:36.530" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170811 21:04:36.529" endtime="20170811 21:04:36.530"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:36.531" endtime="20170811 21:04:36.531"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:04:36.532" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502483897297, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502484535153, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502484901579, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502484968680, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502485040653, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502485110017, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:04:36.532" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:04:36.532" level="INFO">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/2': {u'Message': u'xyz.openbmc_project.Software.Version.Error.ManifestFileFailure', u'Id': 2, u'Resolved': 0, u'AdditionalData': [], u'associations': []...</msg>
<status status="PASS" starttime="20170811 21:04:36.531" endtime="20170811 21:04:36.532"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170811 21:04:36.533" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/entry/5', u'/xyz/openbmc_project/logging/entr...</msg>
<status status="PASS" starttime="20170811 21:04:36.532" endtime="20170811 21:04:36.533"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170811 21:04:36.533" level="INFO">${logpath} = /tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_esel</msg>
<status status="PASS" starttime="20170811 21:04:36.533" endtime="20170811 21:04:36.533"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170811 21:04:36.534" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_esel"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:36.533" endtime="20170811 21:04:36.534"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:36.535" endtime="20170811 21:04:36.535"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:04:36.538" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:04:36.538" endtime="20170811 21:04:36.539"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:04:36.539" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:04:36.539" endtime="20170811 21:04:36.539"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:04:36.540" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:04:36.540" endtime="20170811 21:04:36.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:04:36.541" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:04:36.540" endtime="20170811 21:04:36.541"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:04:36.725" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:04:36.542" endtime="20170811 21:04:36.725"></status>
</kw>
<msg timestamp="20170811 21:04:36.725" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:36.725" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:36.542" endtime="20170811 21:04:36.725"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:04:36.726" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:36.726" endtime="20170811 21:04:36.726"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:36.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:36.726" endtime="20170811 21:04:36.727"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:36.538" endtime="20170811 21:04:36.727"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:36.537" endtime="20170811 21:04:36.727"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:36.537" endtime="20170811 21:04:36.727"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:04:36.728" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" starttime="20170811 21:04:36.727" endtime="20170811 21:04:36.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:36.728" endtime="20170811 21:04:36.728"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:04:36.844" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170811 21:04:36.844" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:36.729" endtime="20170811 21:04:36.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:36.845" endtime="20170811 21:04:36.845"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:04:36.846" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:04:36.845" endtime="20170811 21:04:36.846"></status>
</kw>
<msg timestamp="20170811 21:04:36.846" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:36.536" endtime="20170811 21:04:36.846"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:36.846" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:36.846" endtime="20170811 21:04:36.847"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:04:36.847" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:04:36.847" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:04:36.847" level="INFO">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:04:36.847" endtime="20170811 21:04:36.847"></status>
</kw>
<msg timestamp="20170811 21:04:36.848" level="INFO">${esel_data} = []</msg>
<status status="PASS" starttime="20170811 21:04:36.535" endtime="20170811 21:04:36.848"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170811 21:04:36.848" level="INFO">Length is 0</msg>
<msg timestamp="20170811 21:04:36.848" level="INFO">${length} = 0</msg>
<status status="PASS" starttime="20170811 21:04:36.848" endtime="20170811 21:04:36.848"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170811 21:04:36.849" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170811 21:04:36.848" endtime="20170811 21:04:36.849"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:36.534" endtime="20170811 21:04:36.849"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:36.849" endtime="20170811 21:04:36.850"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:04:36.853" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:04:36.853" endtime="20170811 21:04:36.854"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:04:36.854" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:04:36.854" endtime="20170811 21:04:36.855"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:04:36.855" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:04:36.855" endtime="20170811 21:04:36.855"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:04:36.856" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:04:36.855" endtime="20170811 21:04:36.856"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:04:37.118" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:04:36.856" endtime="20170811 21:04:37.118"></status>
</kw>
<msg timestamp="20170811 21:04:37.118" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:37.118" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:36.856" endtime="20170811 21:04:37.118"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:04:37.119" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.119" endtime="20170811 21:04:37.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:37.120" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.119" endtime="20170811 21:04:37.120"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:36.852" endtime="20170811 21:04:37.120"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:36.852" endtime="20170811 21:04:37.120"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:36.851" endtime="20170811 21:04:37.120"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:04:37.121" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status status="PASS" starttime="20170811 21:04:37.120" endtime="20170811 21:04:37.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:37.121" endtime="20170811 21:04:37.121"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:04:37.204" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170811 21:04:37.204" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.122" endtime="20170811 21:04:37.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:37.205" endtime="20170811 21:04:37.206"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:04:37.206" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:04:37.206" endtime="20170811 21:04:37.206"></status>
</kw>
<msg timestamp="20170811 21:04:37.206" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:36.851" endtime="20170811 21:04:37.206"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:37.207" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.207" endtime="20170811 21:04:37.207"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:04:37.207" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:04:37.208" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:04:37.208" level="INFO">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:04:37.207" endtime="20170811 21:04:37.208"></status>
</kw>
<msg timestamp="20170811 21:04:37.208" level="INFO">${esel_data} = []</msg>
<status status="PASS" starttime="20170811 21:04:36.850" endtime="20170811 21:04:37.208"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170811 21:04:37.209" level="INFO">Length is 0</msg>
<msg timestamp="20170811 21:04:37.209" level="INFO">${length} = 0</msg>
<status status="PASS" starttime="20170811 21:04:37.208" endtime="20170811 21:04:37.209"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170811 21:04:37.209" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170811 21:04:37.209" endtime="20170811 21:04:37.210"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:36.849" endtime="20170811 21:04:37.210"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:37.210" endtime="20170811 21:04:37.211"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:04:37.214" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:04:37.213" endtime="20170811 21:04:37.215"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:04:37.215" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:04:37.215" endtime="20170811 21:04:37.215"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:04:37.216" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:04:37.215" endtime="20170811 21:04:37.216"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:04:37.216" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:04:37.216" endtime="20170811 21:04:37.216"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:04:37.427" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:04:37.217" endtime="20170811 21:04:37.427"></status>
</kw>
<msg timestamp="20170811 21:04:37.427" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:37.427" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.217" endtime="20170811 21:04:37.427"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:04:37.428" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.428" endtime="20170811 21:04:37.428"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:37.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.428" endtime="20170811 21:04:37.429"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:37.213" endtime="20170811 21:04:37.429"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:37.213" endtime="20170811 21:04:37.429"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:37.212" endtime="20170811 21:04:37.429"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:04:37.430" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status status="PASS" starttime="20170811 21:04:37.429" endtime="20170811 21:04:37.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:37.430" endtime="20170811 21:04:37.430"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:04:37.514" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170811 21:04:37.514" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.431" endtime="20170811 21:04:37.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:37.515" endtime="20170811 21:04:37.515"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:04:37.515" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:04:37.515" endtime="20170811 21:04:37.515"></status>
</kw>
<msg timestamp="20170811 21:04:37.516" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.211" endtime="20170811 21:04:37.516"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:37.516" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.516" endtime="20170811 21:04:37.516"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:04:37.517" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:04:37.517" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:04:37.517" level="INFO">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:04:37.517" endtime="20170811 21:04:37.517"></status>
</kw>
<msg timestamp="20170811 21:04:37.517" level="INFO">${esel_data} = []</msg>
<status status="PASS" starttime="20170811 21:04:37.211" endtime="20170811 21:04:37.517"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170811 21:04:37.518" level="INFO">Length is 0</msg>
<msg timestamp="20170811 21:04:37.518" level="INFO">${length} = 0</msg>
<status status="PASS" starttime="20170811 21:04:37.518" endtime="20170811 21:04:37.518"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170811 21:04:37.519" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170811 21:04:37.518" endtime="20170811 21:04:37.519"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:37.210" endtime="20170811 21:04:37.519"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:37.519" endtime="20170811 21:04:37.520"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:04:37.523" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:04:37.523" endtime="20170811 21:04:37.524"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:04:37.524" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:04:37.524" endtime="20170811 21:04:37.524"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:04:37.525" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:04:37.525" endtime="20170811 21:04:37.525"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:04:37.526" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:04:37.525" endtime="20170811 21:04:37.526"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:04:37.707" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:04:37.526" endtime="20170811 21:04:37.707"></status>
</kw>
<msg timestamp="20170811 21:04:37.707" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:37.707" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.526" endtime="20170811 21:04:37.707"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:04:37.708" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.708" endtime="20170811 21:04:37.708"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:37.709" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.708" endtime="20170811 21:04:37.709"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:37.522" endtime="20170811 21:04:37.709"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:37.522" endtime="20170811 21:04:37.709"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:37.521" endtime="20170811 21:04:37.709"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:04:37.710" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status status="PASS" starttime="20170811 21:04:37.709" endtime="20170811 21:04:37.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:37.710" endtime="20170811 21:04:37.710"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:04:37.796" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170811 21:04:37.796" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.711" endtime="20170811 21:04:37.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:37.797" endtime="20170811 21:04:37.797"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:04:37.797" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:04:37.797" endtime="20170811 21:04:37.797"></status>
</kw>
<msg timestamp="20170811 21:04:37.798" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.520" endtime="20170811 21:04:37.798"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:37.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.798" endtime="20170811 21:04:37.798"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:04:37.799" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:04:37.799" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:04:37.799" level="INFO">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:04:37.799" endtime="20170811 21:04:37.799"></status>
</kw>
<msg timestamp="20170811 21:04:37.799" level="INFO">${esel_data} = []</msg>
<status status="PASS" starttime="20170811 21:04:37.520" endtime="20170811 21:04:37.799"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170811 21:04:37.800" level="INFO">Length is 0</msg>
<msg timestamp="20170811 21:04:37.800" level="INFO">${length} = 0</msg>
<status status="PASS" starttime="20170811 21:04:37.800" endtime="20170811 21:04:37.800"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170811 21:04:37.801" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170811 21:04:37.800" endtime="20170811 21:04:37.801"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:37.519" endtime="20170811 21:04:37.801"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/6">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:37.801" endtime="20170811 21:04:37.802"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:04:37.805" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:04:37.805" endtime="20170811 21:04:37.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:04:37.806" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:04:37.806" endtime="20170811 21:04:37.806"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:04:37.807" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:04:37.806" endtime="20170811 21:04:37.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:04:37.807" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:04:37.807" endtime="20170811 21:04:37.808"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:04:38.006" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:04:37.808" endtime="20170811 21:04:38.006"></status>
</kw>
<msg timestamp="20170811 21:04:38.006" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:38.006" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.808" endtime="20170811 21:04:38.007"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:04:38.007" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:38.007" endtime="20170811 21:04:38.007"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:38.008" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:38.007" endtime="20170811 21:04:38.008"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:37.804" endtime="20170811 21:04:38.008"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:37.804" endtime="20170811 21:04:38.008"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:37.803" endtime="20170811 21:04:38.008"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:04:38.009" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status status="PASS" starttime="20170811 21:04:38.008" endtime="20170811 21:04:38.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:38.009" endtime="20170811 21:04:38.010"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:04:38.129" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170811 21:04:38.129" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:38.010" endtime="20170811 21:04:38.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:38.129" endtime="20170811 21:04:38.129"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:04:38.130" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:04:38.130" endtime="20170811 21:04:38.130"></status>
</kw>
<msg timestamp="20170811 21:04:38.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:37.802" endtime="20170811 21:04:38.130"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:38.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:38.130" endtime="20170811 21:04:38.131"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:04:38.131" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:04:38.131" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:04:38.132" level="INFO">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:04:38.131" endtime="20170811 21:04:38.132"></status>
</kw>
<msg timestamp="20170811 21:04:38.132" level="INFO">${esel_data} = []</msg>
<status status="PASS" starttime="20170811 21:04:37.802" endtime="20170811 21:04:38.132"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170811 21:04:38.132" level="INFO">Length is 0</msg>
<msg timestamp="20170811 21:04:38.132" level="INFO">${length} = 0</msg>
<status status="PASS" starttime="20170811 21:04:38.132" endtime="20170811 21:04:38.132"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170811 21:04:38.133" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170811 21:04:38.133" endtime="20170811 21:04:38.133"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:37.801" endtime="20170811 21:04:38.133"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/7">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:38.134" endtime="20170811 21:04:38.134"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170811 21:04:38.137" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170811 21:04:38.137" endtime="20170811 21:04:38.138"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170811 21:04:38.139" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170811 21:04:38.138" endtime="20170811 21:04:38.139"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170811 21:04:38.139" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170811 21:04:38.139" endtime="20170811 21:04:38.139"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170811 21:04:38.140" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170811 21:04:38.140" endtime="20170811 21:04:38.140"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170811 21:04:38.435" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170811 21:04:38.141" endtime="20170811 21:04:38.435"></status>
</kw>
<msg timestamp="20170811 21:04:38.435" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:38.435" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:38.140" endtime="20170811 21:04:38.435"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170811 21:04:38.436" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:38.435" endtime="20170811 21:04:38.436"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:38.436" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:38.436" endtime="20170811 21:04:38.437"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.136" endtime="20170811 21:04:38.437"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.136" endtime="20170811 21:04:38.437"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.135" endtime="20170811 21:04:38.437"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170811 21:04:38.437" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status status="PASS" starttime="20170811 21:04:38.437" endtime="20170811 21:04:38.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:38.438" endtime="20170811 21:04:38.438"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170811 21:04:38.519" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170811 21:04:38.519" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:38.438" endtime="20170811 21:04:38.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:38.519" endtime="20170811 21:04:38.519"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170811 21:04:38.520" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170811 21:04:38.520" endtime="20170811 21:04:38.520"></status>
</kw>
<msg timestamp="20170811 21:04:38.520" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170811 21:04:38.135" endtime="20170811 21:04:38.520"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170811 21:04:38.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170811 21:04:38.521" endtime="20170811 21:04:38.521"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170811 21:04:38.522" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170811 21:04:38.522" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170811 21:04:38.522" level="INFO">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170811 21:04:38.521" endtime="20170811 21:04:38.522"></status>
</kw>
<msg timestamp="20170811 21:04:38.522" level="INFO">${esel_data} = []</msg>
<status status="PASS" starttime="20170811 21:04:38.134" endtime="20170811 21:04:38.522"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170811 21:04:38.523" level="INFO">Length is 0</msg>
<msg timestamp="20170811 21:04:38.523" level="INFO">${length} = 0</msg>
<status status="PASS" starttime="20170811 21:04:38.522" endtime="20170811 21:04:38.523"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170811 21:04:38.523" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170811 21:04:38.523" endtime="20170811 21:04:38.524"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.133" endtime="20170811 21:04:38.524"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:36.534" endtime="20170811 21:04:38.524"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170811 21:04:38.528" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170811 21:04:38.532" level="INFO">${out} = </msg>
<status status="PASS" starttime="20170811 21:04:38.524" endtime="20170811 21:04:38.532"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170811 21:04:38.536" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" starttime="20170811 21:04:38.535" endtime="20170811 21:04:38.536"></status>
</kw>
<msg timestamp="20170811 21:04:38.536" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170811 21:04:38.534" endtime="20170811 21:04:38.536"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170811 21:04:38.537" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170811 21:04:38.537" endtime="20170811 21:04:38.537"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:35.245" endtime="20170811 21:04:38.538"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:35.201" endtime="20170811 21:04:38.538"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:35.199" endtime="20170811 21:04:38.538"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:35.199" endtime="20170811 21:04:38.539"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:38.542" endtime="20170811 21:04:38.542"></status>
</kw>
<msg timestamp="20170811 21:04:38.542" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:38.543" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170811 21:04:38.541" endtime="20170811 21:04:38.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:38.543" endtime="20170811 21:04:38.544"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170811 21:04:38.584" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" starttime="20170811 21:04:38.583" endtime="20170811 21:04:38.584"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170811 21:04:38.585" level="INFO">@{cmd_list} = [ ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_proc_list', 'top -n 1 -b') | (...</msg>
<status status="PASS" starttime="20170811 21:04:38.585" endtime="20170811 21:04:38.585"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170811 21:04:38.586" level="INFO">${logpath} = /tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_dmesg.txt</msg>
<status status="PASS" starttime="20170811 21:04:38.586" endtime="20170811 21:04:38.586"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:38.587" endtime="20170811 21:04:38.587"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 21:04:38.596" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" starttime="20170811 21:04:38.588" endtime="20170811 21:04:38.596"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170811 21:04:38.723" level="INFO">width=80
host=9.3.21.61
height=24
port=22
alias=bmc_connection
term_type=vt100
index=1
newline=

prompt=# 
encoding=UTF-8
path_separator=/
timeout=25 seconds</msg>
<msg timestamp="20170811 21:04:38.723" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170811 21:04:38.782" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170811 21:04:38.657" endtime="20170811 21:04:38.782"></status>
</kw>
<msg timestamp="20170811 21:04:38.782" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:38.782" level="INFO">${ret_values} = (u"[  535.500000]  slave@01:00: engine[17]: type 1b, version 1, addr 58000 size 8000\n[  535.500000]  slave@01:00: engine[18]: type 1b, version 1, addr 60000 size 8000\n[  535.500000]  slave@01:00: en...</msg>
<status status="PASS" starttime="20170811 21:04:38.596" endtime="20170811 21:04:38.782"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170811 21:04:38.783" level="INFO">${stdout} = [  535.500000]  slave@01:00: engine[17]: type 1b, version 1, addr 58000 size 8000
[  535.500000]  slave@01:00: engine[18]: type 1b, version 1, addr 60000 size 8000
[  535.500000]  slave@01:00: engine[...</msg>
<status status="PASS" starttime="20170811 21:04:38.783" endtime="20170811 21:04:38.783"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170811 21:04:38.784" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170811 21:04:38.783" endtime="20170811 21:04:38.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:38.791" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_dmesg.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:38.790" endtime="20170811 21:04:38.791"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.789" endtime="20170811 21:04:38.791"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.784" endtime="20170811 21:04:38.791"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.586" endtime="20170811 21:04:38.791"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.585" endtime="20170811 21:04:38.791"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170811 21:04:38.792" level="INFO">${logpath} = /tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_meminfo.txt</msg>
<status status="PASS" starttime="20170811 21:04:38.792" endtime="20170811 21:04:38.792"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:38.793" endtime="20170811 21:04:38.793"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 21:04:38.794" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" starttime="20170811 21:04:38.794" endtime="20170811 21:04:38.794"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170811 21:04:38.917" level="INFO">width=80
host=9.3.21.61
height=24
port=22
alias=bmc_connection
term_type=vt100
index=1
newline=

prompt=# 
encoding=UTF-8
path_separator=/
timeout=25 seconds</msg>
<msg timestamp="20170811 21:04:38.918" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170811 21:04:38.975" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170811 21:04:38.852" endtime="20170811 21:04:38.975"></status>
</kw>
<msg timestamp="20170811 21:04:38.975" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:38.975" level="INFO">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          268376 kB\nMemAvailable:     317636 kB\nBuffers:           11788 kB\nCached:            54084 kB\nSwapCached:            0 kB\nActive:           10596...</msg>
<status status="PASS" starttime="20170811 21:04:38.794" endtime="20170811 21:04:38.975"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170811 21:04:38.976" level="INFO">${stdout} = MemTotal:         432268 kB
MemFree:          268376 kB
MemAvailable:     317636 kB
Buffers:           11788 kB
Cached:            54084 kB
SwapCached:            0 kB
Active:           105964 kB
Inac...</msg>
<status status="PASS" starttime="20170811 21:04:38.975" endtime="20170811 21:04:38.976"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170811 21:04:38.976" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170811 21:04:38.976" endtime="20170811 21:04:38.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:38.983" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_meminfo.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:38.983" endtime="20170811 21:04:38.983"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.982" endtime="20170811 21:04:38.984"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.977" endtime="20170811 21:04:38.984"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.792" endtime="20170811 21:04:38.984"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.791" endtime="20170811 21:04:38.984"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170811 21:04:38.985" level="INFO">${logpath} = /tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_journalctl.txt</msg>
<status status="PASS" starttime="20170811 21:04:38.984" endtime="20170811 21:04:38.985"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:38.986" endtime="20170811 21:04:38.986"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 21:04:38.987" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" starttime="20170811 21:04:38.986" endtime="20170811 21:04:38.987"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170811 21:04:39.115" level="INFO">width=80
host=9.3.21.61
height=24
port=22
alias=bmc_connection
term_type=vt100
index=1
newline=

prompt=# 
encoding=UTF-8
path_separator=/
timeout=25 seconds</msg>
<msg timestamp="20170811 21:04:39.115" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170811 21:04:43.080" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170811 21:04:39.041" endtime="20170811 21:04:43.081"></status>
</kw>
<msg timestamp="20170811 21:04:43.081" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:43.086" level="INFO">${ret_values} = (u'-- Logs begin at Fri 2017-08-11 20:47:57 UTC, end at Fri 2017-08-11 21:04:42 UTC. --\nAug 11 20:47:57 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 11 20:47:57 witherspoon kernel: Linu...</msg>
<status status="PASS" starttime="20170811 21:04:38.987" endtime="20170811 21:04:43.086"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170811 21:04:43.088" level="INFO">${stdout} = -- Logs begin at Fri 2017-08-11 20:47:57 UTC, end at Fri 2017-08-11 21:04:42 UTC. --
Aug 11 20:47:57 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 11 20:47:57 witherspoon kernel: Linux ver...</msg>
<status status="PASS" starttime="20170811 21:04:43.086" endtime="20170811 21:04:43.088"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170811 21:04:43.089" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170811 21:04:43.088" endtime="20170811 21:04:43.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:43.098" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_journalctl.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:43.096" endtime="20170811 21:04:43.098"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:43.094" endtime="20170811 21:04:43.098"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:43.089" endtime="20170811 21:04:43.098"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.985" endtime="20170811 21:04:43.098"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.984" endtime="20170811 21:04:43.098"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170811 21:04:43.099" level="INFO">${logpath} = /tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" starttime="20170811 21:04:43.099" endtime="20170811 21:04:43.099"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:43.100" endtime="20170811 21:04:43.101"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 21:04:43.102" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" starttime="20170811 21:04:43.101" endtime="20170811 21:04:43.102"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170811 21:04:43.226" level="INFO">width=80
host=9.3.21.61
height=24
port=22
alias=bmc_connection
term_type=vt100
index=1
newline=

prompt=# 
encoding=UTF-8
path_separator=/
timeout=25 seconds</msg>
<msg timestamp="20170811 21:04:43.226" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170811 21:04:43.890" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170811 21:04:43.162" endtime="20170811 21:04:43.890"></status>
</kw>
<msg timestamp="20170811 21:04:43.890" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:43.891" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug 11 21:04 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug 11 21:04 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" starttime="20170811 21:04:43.102" endtime="20170811 21:04:43.892"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170811 21:04:43.892" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug 11 21:04 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug 11 21:04 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" starttime="20170811 21:04:43.892" endtime="20170811 21:04:43.893"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170811 21:04:43.893" level="INFO">${stderr} = ls: /proc/3817/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" starttime="20170811 21:04:43.893" endtime="20170811 21:04:43.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:43.901" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:43.900" endtime="20170811 21:04:43.901"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:43.899" endtime="20170811 21:04:43.901"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:43.893" endtime="20170811 21:04:43.901"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:43.100" endtime="20170811 21:04:43.901"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:43.098" endtime="20170811 21:04:43.901"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170811 21:04:43.902" level="INFO">${logpath} = /tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_proc_list.txt</msg>
<status status="PASS" starttime="20170811 21:04:43.902" endtime="20170811 21:04:43.902"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:43.903" endtime="20170811 21:04:43.903"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 21:04:43.904" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" starttime="20170811 21:04:43.904" endtime="20170811 21:04:43.904"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170811 21:04:44.031" level="INFO">width=80
host=9.3.21.61
height=24
port=22
alias=bmc_connection
term_type=vt100
index=1
newline=

prompt=# 
encoding=UTF-8
path_separator=/
timeout=25 seconds</msg>
<msg timestamp="20170811 21:04:44.031" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170811 21:04:44.349" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170811 21:04:43.962" endtime="20170811 21:04:44.349"></status>
</kw>
<msg timestamp="20170811 21:04:44.349" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:44.349" level="INFO">${ret_values} = (u'Mem: 164140K used, 268128K free, 14988K shrd, 11788K buff, 54088K cached\nCPU:   0% usr   0% sys   0% nic 100% idle   0% io   0% irq   0% sirq\nLoad average: 2.43 1.67 1.35 1/169 3818\n  PID  PPID ...</msg>
<status status="PASS" starttime="20170811 21:04:43.904" endtime="20170811 21:04:44.349"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170811 21:04:44.350" level="INFO">${stdout} = Mem: 164140K used, 268128K free, 14988K shrd, 11788K buff, 54088K cached
CPU:   0% usr   0% sys   0% nic 100% idle   0% io   0% irq   0% sirq
Load average: 2.43 1.67 1.35 1/169 3818
  PID  PPID USER  ...</msg>
<status status="PASS" starttime="20170811 21:04:44.350" endtime="20170811 21:04:44.350"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170811 21:04:44.351" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170811 21:04:44.350" endtime="20170811 21:04:44.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:44.358" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_proc_list.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:44.357" endtime="20170811 21:04:44.358"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:44.356" endtime="20170811 21:04:44.358"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:44.351" endtime="20170811 21:04:44.358"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:43.902" endtime="20170811 21:04:44.358"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:43.901" endtime="20170811 21:04:44.358"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170811 21:04:44.359" level="INFO">${logpath} = /tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_procinfo.txt</msg>
<status status="PASS" starttime="20170811 21:04:44.359" endtime="20170811 21:04:44.359"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:44.360" endtime="20170811 21:04:44.360"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 21:04:44.361" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" starttime="20170811 21:04:44.361" endtime="20170811 21:04:44.361"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170811 21:04:44.490" level="INFO">width=80
host=9.3.21.61
height=24
port=22
alias=bmc_connection
term_type=vt100
index=1
newline=

prompt=# 
encoding=UTF-8
path_separator=/
timeout=25 seconds</msg>
<msg timestamp="20170811 21:04:44.491" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170811 21:04:44.558" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170811 21:04:44.414" endtime="20170811 21:04:44.558"></status>
</kw>
<msg timestamp="20170811 21:04:44.558" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:44.558" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" starttime="20170811 21:04:44.361" endtime="20170811 21:04:44.558"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170811 21:04:44.559" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" starttime="20170811 21:04:44.559" endtime="20170811 21:04:44.559"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170811 21:04:44.560" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170811 21:04:44.559" endtime="20170811 21:04:44.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170811 21:04:44.566" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_procinfo.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/20170811210424716633_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:44.566" endtime="20170811 21:04:44.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:44.565" endtime="20170811 21:04:44.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:44.560" endtime="20170811 21:04:44.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:44.359" endtime="20170811 21:04:44.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:44.358" endtime="20170811 21:04:44.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.585" endtime="20170811 21:04:44.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.584" endtime="20170811 21:04:44.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.584" endtime="20170811 21:04:44.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.584" endtime="20170811 21:04:44.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.583" endtime="20170811 21:04:44.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.544" endtime="20170811 21:04:44.567"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.540" endtime="20170811 21:04:44.568"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:38.539" endtime="20170811 21:04:44.568"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:44.569" endtime="20170811 21:04:44.570"></status>
</kw>
<msg timestamp="20170811 21:04:44.570" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:44.570" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170811 21:04:44.569" endtime="20170811 21:04:44.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:44.570" endtime="20170811 21:04:44.570"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170811 21:04:44.676" level="INFO">width=80
host=9.3.21.61
height=24
port=22
alias=bmc_connection
term_type=vt100
index=1
newline=

prompt=# 
encoding=UTF-8
path_separator=/
timeout=25 seconds</msg>
<msg timestamp="20170811 21:04:44.676" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170811 21:04:44.724" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170811 21:04:44.743" level="INFO">${core_files} = /tmp/core_phosphor-hwmon-.1687</msg>
<msg timestamp="20170811 21:04:44.744" level="INFO">${stderr} = </msg>
<msg timestamp="20170811 21:04:44.744" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20170811 21:04:44.612" endtime="20170811 21:04:44.744"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170811 21:04:44.744" level="INFO">@{core_list} = [ /tmp/core_phosphor-hwmon-.1687 ]</msg>
<status status="PASS" starttime="20170811 21:04:44.744" endtime="20170811 21:04:44.744"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:44.765" endtime="20170811 21:04:44.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:44.781" endtime="20170811 21:04:45.448"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:44.780" endtime="20170811 21:04:45.448"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:44.779" endtime="20170811 21:04:45.448"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:44.764" endtime="20170811 21:04:45.448"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:44.745" endtime="20170811 21:04:45.448"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.1687">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:45.449" endtime="20170811 21:04:45.699"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170811 21:04:45.752" level="INFO">width=80
host=9.3.21.61
height=24
port=22
alias=bmc_connection
term_type=vt100
index=1
newline=

prompt=# 
encoding=UTF-8
path_separator=/
timeout=25 seconds</msg>
<msg timestamp="20170811 21:04:45.756" level="INFO">Executing command 'rm /tmp/core_phosphor-hwmon-.1687'.</msg>
<msg timestamp="20170811 21:04:45.825" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170811 21:04:45.700" endtime="20170811 21:04:45.846"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:45.449" endtime="20170811 21:04:45.846"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:45.449" endtime="20170811 21:04:45.846"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:44.611" endtime="20170811 21:04:45.846"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:44.570" endtime="20170811 21:04:45.846"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:44.568" endtime="20170811 21:04:45.847"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:44.568" endtime="20170811 21:04:45.847"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:45.849" endtime="20170811 21:04:45.849"></status>
</kw>
<msg timestamp="20170811 21:04:45.849" level="INFO">${status} = PASS</msg>
<msg timestamp="20170811 21:04:45.849" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170811 21:04:45.848" endtime="20170811 21:04:45.849"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:45.849" endtime="20170811 21:04:45.850"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170811 21:04:45.901" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170811 21:04:45.900" endtime="20170811 21:04:45.901"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:45.899" endtime="20170811 21:04:45.901"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:45.850" endtime="20170811 21:04:45.901"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:45.847" endtime="20170811 21:04:45.901"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:45.847" endtime="20170811 21:04:45.901"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.956" endtime="20170811 21:04:45.901"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.954" endtime="20170811 21:04:45.901"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.953" endtime="20170811 21:04:45.901"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.953" endtime="20170811 21:04:45.901"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20170811 21:04:45.913" endtime="20170811 21:04:45.913"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:45.902" endtime="20170811 21:04:45.913"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:26.952" endtime="20170811 21:04:45.913"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:21.638" endtime="20170811 21:04:45.914"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:21.637" endtime="20170811 21:04:45.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:45.914" endtime="20170811 21:04:45.914"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170811 21:04:45.927" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170811 21:04:45.915" endtime="20170811 21:04:45.927"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170811 21:04:45.928" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/9215/obmc-robot/logs/20170811210424716633_TestsTestBasicPoweron/20170811210424716633_PowerOnTest/</msg>
<status status="PASS" starttime="20170811 21:04:45.927" endtime="20170811 21:04:45.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:45.928" endtime="20170811 21:04:45.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:45.929" endtime="20170811 21:04:45.930"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170811 21:04:45.930" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs"&gt;/tmp/fspcibld/9215/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20170811 21:04:45.930" endtime="20170811 21:04:45.931"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170811 21:04:45.931" level="INFO" html="yes">File '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20170811 21:04:45.931" endtime="20170811 21:04:45.932"></status>
</kw>
<msg timestamp="20170811 21:04:45.932" level="INFO">${exist} = True</msg>
<status status="PASS" starttime="20170811 21:04:45.931" endtime="20170811 21:04:45.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:45.932" endtime="20170811 21:04:45.932"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:45.932" endtime="20170811 21:04:45.933"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170811 21:04:45.934" level="INFO">${cur_time} = 2017-08-11 21:04:45:933753</msg>
<status status="PASS" starttime="20170811 21:04:45.934" endtime="20170811 21:04:45.934"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170811 21:04:45.935" level="INFO">${cur_time} = 20170811210445933753</msg>
<status status="PASS" starttime="20170811 21:04:45.934" endtime="20170811 21:04:45.935"></status>
</kw>
<msg timestamp="20170811 21:04:45.935" level="INFO">${cur_time} = 20170811210445933753</msg>
<status status="PASS" starttime="20170811 21:04:45.933" endtime="20170811 21:04:45.935"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170811 21:04:45.936" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/9215/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:45.935" endtime="20170811 21:04:45.936"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:45.914" endtime="20170811 21:04:45.936"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:20.722" endtime="20170811 21:04:45.936"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170811 21:04:45.939" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170811 21:04:45.938" endtime="20170811 21:04:45.939"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170811 21:04:45.940" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170811 21:04:45.939" endtime="20170811 21:04:45.940"></status>
</kw>
<msg timestamp="20170811 21:04:45.940" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status status="PASS" starttime="20170811 21:04:45.938" endtime="20170811 21:04:45.940"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 21:04:45.941" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170811 21:04:45.941" endtime="20170811 21:04:45.941"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:45.941" endtime="20170811 21:04:45.941"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170811 21:04:45.947" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170811 21:04:45.951" level="INFO">${rc} = 0</msg>
<msg timestamp="20170811 21:04:45.951" level="INFO">${output} = /tmp/fspcibld/9215/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170811 21:04:45.942" endtime="20170811 21:04:45.951"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:45.953" endtime="20170811 21:04:45.954"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:45.955" endtime="20170811 21:04:45.955"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 21:04:45.956" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" starttime="20170811 21:04:45.956" endtime="20170811 21:04:45.956"></status>
</kw>
<msg timestamp="20170811 21:04:45.957" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status status="PASS" starttime="20170811 21:04:45.940" endtime="20170811 21:04:45.957"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 21:04:45.958" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170811 21:04:45.957" endtime="20170811 21:04:45.958"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:45.958" endtime="20170811 21:04:45.958"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170811 21:04:45.967" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170811 21:04:45.993" level="INFO">${rc} = 0</msg>
<msg timestamp="20170811 21:04:45.993" level="INFO">${os_con_pid} = </msg>
<status status="PASS" starttime="20170811 21:04:45.959" endtime="20170811 21:04:45.994"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:46.007" endtime="20170811 21:04:46.010"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170811 21:04:46.011" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20170811 21:04:46.011" endtime="20170811 21:04:46.011"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:46.012" endtime="20170811 21:04:46.013"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170811 21:04:46.014" level="INFO">${rc} = None</msg>
<msg timestamp="20170811 21:04:46.014" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20170811 21:04:46.013" endtime="20170811 21:04:46.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:46.014" endtime="20170811 21:04:46.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170811 21:04:46.020" level="INFO" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/9215/obmc-robot/logs/9.3.21.61_os_console"&gt;/tmp/fspcibld/9215/obmc-robot/logs/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170811 21:04:46.016" endtime="20170811 21:04:46.020"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:46.016" endtime="20170811 21:04:46.020"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:46.015" endtime="20170811 21:04:46.020"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170811 21:04:46.021" level="INFO">${output} = </msg>
<status status="PASS" starttime="20170811 21:04:46.020" endtime="20170811 21:04:46.021"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170811 21:04:46.021" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20170811 21:04:46.021" endtime="20170811 21:04:46.021"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" starttime="20170811 21:04:46.022" endtime="20170811 21:04:46.117"></status>
</kw>
<msg timestamp="20170811 21:04:46.124" level="INFO">${rc} = 0</msg>
<msg timestamp="20170811 21:04:46.126" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
</msg>
<status status="PASS" starttime="20170811 21:04:46.022" endtime="20170811 21:04:46.126"></status>
</kw>
<msg timestamp="20170811 21:04:46.130" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
</msg>
<status status="PASS" starttime="20170811 21:04:45.937" endtime="20170811 21:04:46.131"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170811 21:04:46.141" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
</msg>
<status status="PASS" starttime="20170811 21:04:46.139" endtime="20170811 21:04:46.141"></status>
</kw>
<status status="PASS" starttime="20170811 21:04:20.721" endtime="20170811 21:04:46.141"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status critical="yes" status="FAIL" starttime="20170811 20:53:55.489" endtime="20170811 21:04:46.141">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" starttime="20170811 20:53:55.451" endtime="20170811 21:04:46.147"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" starttime="20170811 20:53:49.171" endtime="20170811 21:04:46.155"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" fail="1" pass="1" name="Tests">Tests</stat>
<stat id="s1-s1" fail="0" pass="1" name="Security">Tests.Security</stat>
<stat id="s1-s1-s1" fail="0" pass="1" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" fail="1" pass="0" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
