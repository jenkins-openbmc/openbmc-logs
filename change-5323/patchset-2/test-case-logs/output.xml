<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170725 17:41:15.698">
<suite id="s1" name="Tests" source="/tmp/fspcibld/2705/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:41:16.133">Dictionary does not contain key 'host'.</msg>
<status endtime="20170725 17:41:16.133" starttime="20170725 17:41:16.132" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:16.133">${has_host} = False</msg>
<status endtime="20170725 17:41:16.133" starttime="20170725 17:41:16.132" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170725 17:41:16.134" starttime="20170725 17:41:16.133" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:16.134" starttime="20170725 17:41:16.133" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:16.135">${port_num} = 22</msg>
<status endtime="20170725 17:41:16.135" starttime="20170725 17:41:16.135" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:16.136">${SSH_PORT} = 22</msg>
<status endtime="20170725 17:41:16.136" starttime="20170725 17:41:16.136" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:16.137">${https_num} = 443</msg>
<status endtime="20170725 17:41:16.137" starttime="20170725 17:41:16.136" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:16.137">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170725 17:41:16.137" starttime="20170725 17:41:16.137" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:16.137" starttime="20170725 17:41:16.135" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:16.137" starttime="20170725 17:41:16.134" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:41:16.138">Dictionary does not contain key 'port'.</msg>
<status endtime="20170725 17:41:16.138" starttime="20170725 17:41:16.138" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:16.138">${has_port} = False</msg>
<status endtime="20170725 17:41:16.139" starttime="20170725 17:41:16.138" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170725 17:41:16.140" starttime="20170725 17:41:16.140" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170725 17:41:16.141" starttime="20170725 17:41:16.140" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:16.141" starttime="20170725 17:41:16.139" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:16.141" starttime="20170725 17:41:16.139" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:16.141">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170725 17:41:17.937">Read output: root@witherspoon:~#</msg>
<status endtime="20170725 17:41:17.938" starttime="20170725 17:41:16.141" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:17.938" starttime="20170725 17:41:16.131" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:17.939">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170725 17:41:18.016">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170725 17:41:18.016">${output} = VERSION_ID="v1.99.8-80-ga23ff27"</msg>
<msg level="INFO" timestamp="20170725 17:41:18.016">${stderr} = </msg>
<status endtime="20170725 17:41:18.016" starttime="20170725 17:41:17.939" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:18.016">Length is 0</msg>
<status endtime="20170725 17:41:18.017" starttime="20170725 17:41:18.016" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:18.017">VERSION_ID="v1.99.8-80-ga23ff27"</msg>
<status endtime="20170725 17:41:18.017" starttime="20170725 17:41:18.017" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:18.017" starttime="20170725 17:41:17.938" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:18.017" starttime="20170725 17:41:17.938" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:18.019">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170725 17:41:18.156">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170725 17:41:18.156">${stdout} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-redbud-ibm-OP...</msg>
<msg level="INFO" timestamp="20170725 17:41:18.156">${stderr} = </msg>
<status endtime="20170725 17:41:18.156" starttime="20170725 17:41:18.018" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:18.156">Length is 0</msg>
<status endtime="20170725 17:41:18.156" starttime="20170725 17:41:18.156" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:18.157">${pnor_details} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-redbud-ibm-OP...</msg>
<status endtime="20170725 17:41:18.157" starttime="20170725 17:41:18.018" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:18.157">PNOR_INFO=Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-redbud-ibm-OP9_v1.17_1.68
	op-build-v1.17-177-gdd8f32b-dirty
	buildroot-2017.05-93-g9b91216
	skiboot-v5.7-rc2-p7582c9b
	hostboot-3fa8be9
	linux-4.12.1-openpower1-p899da6c
	petitboot-v1.5.0-pc8fef8e
	machine-xml-efdf4aa
	occ-1647d53
	hostboot-binaries-6a7251e
	capp-ucode-9c73e9f
	sbe-02021c6-p056301c
</msg>
<status endtime="20170725 17:41:18.158" starttime="20170725 17:41:18.157" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:18.158" starttime="20170725 17:41:18.018" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:18.158" starttime="20170725 17:41:18.017" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:18.339">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:41:18.340">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170725 17:41:19.081">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170725 17:41:19.082">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170725 17:41:19.159">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170725 17:41:19.166">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170725 17:41:19.166">${stderr} = </msg>
<msg level="INFO" timestamp="20170725 17:41:19.167">${rc} = 0</msg>
<status endtime="20170725 17:41:19.167" starttime="20170725 17:41:18.160" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:19.167">Length is 0</msg>
<status endtime="20170725 17:41:19.167" starttime="20170725 17:41:19.167" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:19.168">Length is 11</msg>
<status endtime="20170725 17:41:19.168" starttime="20170725 17:41:19.167" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:19.168">${bmc_model} = Witherspoon</msg>
<status endtime="20170725 17:41:19.168" starttime="20170725 17:41:18.159" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:19.168">BMC Model=Witherspoon</msg>
<status endtime="20170725 17:41:19.168" starttime="20170725 17:41:19.168" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:19.169" starttime="20170725 17:41:18.159" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:19.169" starttime="20170725 17:41:18.159" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:41:19.171">Dictionary does not contain key 'host'.</msg>
<status endtime="20170725 17:41:19.171" starttime="20170725 17:41:19.170" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:19.171">${has_host} = False</msg>
<status endtime="20170725 17:41:19.171" starttime="20170725 17:41:19.170" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170725 17:41:19.172" starttime="20170725 17:41:19.172" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:19.172" starttime="20170725 17:41:19.171" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:19.174">${port_num} = 22</msg>
<status endtime="20170725 17:41:19.174" starttime="20170725 17:41:19.173" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:19.174">${SSH_PORT} = 22</msg>
<status endtime="20170725 17:41:19.174" starttime="20170725 17:41:19.174" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:19.175">${https_num} = 443</msg>
<status endtime="20170725 17:41:19.175" starttime="20170725 17:41:19.174" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:19.175">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170725 17:41:19.175" starttime="20170725 17:41:19.175" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:19.176" starttime="20170725 17:41:19.173" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:19.176" starttime="20170725 17:41:19.172" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:41:19.177">Dictionary does not contain key 'port'.</msg>
<status endtime="20170725 17:41:19.177" starttime="20170725 17:41:19.176" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:19.177">${has_port} = False</msg>
<status endtime="20170725 17:41:19.177" starttime="20170725 17:41:19.176" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170725 17:41:19.178" starttime="20170725 17:41:19.178" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170725 17:41:19.179" starttime="20170725 17:41:19.179" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:19.179" starttime="20170725 17:41:19.178" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:19.179" starttime="20170725 17:41:19.177" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:19.180">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170725 17:41:20.927">Read output: root@witherspoon:~#</msg>
<status endtime="20170725 17:41:20.927" starttime="20170725 17:41:19.179" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:20.927" starttime="20170725 17:41:19.169" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:20.928">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170725 17:41:21.006">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170725 17:41:21.006">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170725 17:41:21.006">${stderr} = </msg>
<status endtime="20170725 17:41:21.006" starttime="20170725 17:41:20.928" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.007">Length is 0</msg>
<status endtime="20170725 17:41:21.007" starttime="20170725 17:41:21.006" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.007">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170725 17:41:21.007" starttime="20170725 17:41:20.927" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170725 17:41:21.007" starttime="20170725 17:41:21.007" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.008" starttime="20170725 17:41:19.169" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.008" starttime="20170725 17:41:19.169" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170725 17:41:21.008" starttime="20170725 17:41:21.008" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.009" starttime="20170725 17:41:16.131" status="PASS"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/fspcibld/2705/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/fspcibld/2705/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.091">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:41:21.091" starttime="20170725 17:41:21.090" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.092">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:41:21.092" starttime="20170725 17:41:21.092" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.093">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:41:21.093" starttime="20170725 17:41:21.092" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.093">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:41:21.093" starttime="20170725 17:41:21.093" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.284">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:41:21.284" starttime="20170725 17:41:21.094" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.284">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:41:21.284">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:21.284" starttime="20170725 17:41:21.094" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.285">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:21.285" starttime="20170725 17:41:21.284" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.285">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:21.286" starttime="20170725 17:41:21.285" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.286" starttime="20170725 17:41:21.090" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.286" starttime="20170725 17:41:21.089" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.286" starttime="20170725 17:41:21.089" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.290">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:41:21.291" starttime="20170725 17:41:21.290" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.291">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:41:21.291" starttime="20170725 17:41:21.291" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.292">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:41:21.292" starttime="20170725 17:41:21.292" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.293">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:41:21.293" starttime="20170725 17:41:21.292" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.484">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:41:21.484" starttime="20170725 17:41:21.293" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.484">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:41:21.485">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:21.485" starttime="20170725 17:41:21.293" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.485">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:21.485" starttime="20170725 17:41:21.485" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.486">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:21.486" starttime="20170725 17:41:21.486" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.486" starttime="20170725 17:41:21.290" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.486" starttime="20170725 17:41:21.289" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.486" starttime="20170725 17:41:21.289" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.487">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170725 17:41:21.487" starttime="20170725 17:41:21.487" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.489">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:41:21.489" starttime="20170725 17:41:21.488" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.490">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:41:21.490" starttime="20170725 17:41:21.490" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.490" starttime="20170725 17:41:21.489" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.490" starttime="20170725 17:41:21.488" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.490" starttime="20170725 17:41:21.487" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.659">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:41:21.660">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:21.660" starttime="20170725 17:41:21.491" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.662">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:41:21.662" starttime="20170725 17:41:21.661" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.662">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:41:21.663" starttime="20170725 17:41:21.662" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.663" starttime="20170725 17:41:21.662" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.663" starttime="20170725 17:41:21.660" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.663" starttime="20170725 17:41:21.660" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:41:21.663">Delete All Sessions</msg>
<status endtime="20170725 17:41:21.663" starttime="20170725 17:41:21.663" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.664">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:21.664" starttime="20170725 17:41:21.288" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.664">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:21.665" starttime="20170725 17:41:21.664" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.665">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:41:21.665">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:41:21.666">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170725 17:41:21.666" starttime="20170725 17:41:21.665" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.666">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170725 17:41:21.666" starttime="20170725 17:41:21.287" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.667">${host_state} = Running</msg>
<status endtime="20170725 17:41:21.667" starttime="20170725 17:41:21.287" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:41:21.668">Running != Quiesced</msg>
<status endtime="20170725 17:41:21.668" starttime="20170725 17:41:21.668" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.668">${status} = False</msg>
<status endtime="20170725 17:41:21.668" starttime="20170725 17:41:21.667" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.669">${status} = False</msg>
<status endtime="20170725 17:41:21.669" starttime="20170725 17:41:21.286" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170725 17:41:21.669" starttime="20170725 17:41:21.669" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170725 17:41:21.670" starttime="20170725 17:41:21.669" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.679">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170725 17:41:21.679" starttime="20170725 17:41:21.670" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.687">${FFDC_DIR_PATH} = </msg>
<status endtime="20170725 17:41:21.687" starttime="20170725 17:41:21.679" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.689">${cur_time} = 2017-07-25 17:41:21:688760</msg>
<status endtime="20170725 17:41:21.689" starttime="20170725 17:41:21.689" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.690">${cur_time} = 20170725174121688760</msg>
<status endtime="20170725 17:41:21.690" starttime="20170725 17:41:21.689" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.690" starttime="20170725 17:41:21.688" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.694">${FFDC_TIME} = 20170725174121688760</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.695">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170725 17:41:21.695" starttime="20170725 17:41:21.695" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.696">${suite_name} = 20170725174121688760_TestsSecurityTestSsl</msg>
<status endtime="20170725 17:41:21.696" starttime="20170725 17:41:21.695" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.696">${test_name} = TestSSLConnection</msg>
<status endtime="20170725 17:41:21.696" starttime="20170725 17:41:21.696" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.697">${test_name} = 20170725174121688760_TestSSLConnection</msg>
<status endtime="20170725 17:41:21.697" starttime="20170725 17:41:21.696" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.697" starttime="20170725 17:41:21.694" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.697">${FFDC_DIR_PATH} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174121688760_TestsSecurityTestSsl/20170725174121688760_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170725 17:41:21.702">${FFDC_PREFIX} = 20170725174121688760_</msg>
<status endtime="20170725 17:41:21.702" starttime="20170725 17:41:21.688" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.702" starttime="20170725 17:41:21.687" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170725 17:41:21.703" starttime="20170725 17:41:21.702" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.703" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs"&gt;/tmp/fspcibld/2705/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170725 17:41:21.703" starttime="20170725 17:41:21.703" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:41:21.705">File '/tmp/fspcibld/2705/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170725 17:41:21.705" starttime="20170725 17:41:21.704" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.705">${exist} = False</msg>
<status endtime="20170725 17:41:21.705" starttime="20170725 17:41:21.704" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.706" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:41:21.706" starttime="20170725 17:41:21.706" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.706" starttime="20170725 17:41:21.705" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170725 17:41:21.707" starttime="20170725 17:41:21.706" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.708">${cur_time} = 2017-07-25 17:41:21:707455</msg>
<status endtime="20170725 17:41:21.708" starttime="20170725 17:41:21.707" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.708">${cur_time} = 20170725174121707455</msg>
<status endtime="20170725 17:41:21.708" starttime="20170725 17:41:21.708" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.708">${cur_time} = 20170725174121707455</msg>
<status endtime="20170725 17:41:21.708" starttime="20170725 17:41:21.707" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.709" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:41:21.709" starttime="20170725 17:41:21.709" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.709" starttime="20170725 17:41:21.670" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.710" starttime="20170725 17:41:21.286" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170725 17:41:21.710" critical="yes" starttime="20170725 17:41:21.088" status="PASS"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:41:21.710">Delete All Sessions</msg>
<status endtime="20170725 17:41:21.710" starttime="20170725 17:41:21.710" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170725 17:41:21.710" starttime="20170725 17:41:21.011" status="PASS"></status>
</suite>
<status endtime="20170725 17:41:21.712" starttime="20170725 17:41:21.009" status="PASS"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/fspcibld/2705/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.747">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170725 17:41:21.748" starttime="20170725 17:41:21.747" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.748">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170725 17:41:21.749" starttime="20170725 17:41:21.748" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.749">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170725 17:41:21.749" starttime="20170725 17:41:21.747" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.751">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170725 17:41:21.751" starttime="20170725 17:41:21.750" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.751">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170725 17:41:21.751" starttime="20170725 17:41:21.751" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.751">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170725 17:41:21.752" starttime="20170725 17:41:21.750" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.752">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170725 17:41:21.752" starttime="20170725 17:41:21.752" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170725 17:41:21.753" starttime="20170725 17:41:21.753" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.757">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170725 17:41:21.760">${rc} = 0</msg>
<msg level="INFO" timestamp="20170725 17:41:21.760">${output} = /tmp/fspcibld/2705/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170725 17:41:21.760" starttime="20170725 17:41:21.753" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170725 17:41:21.763" starttime="20170725 17:41:21.762" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170725 17:41:21.763" starttime="20170725 17:41:21.763" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.764">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170725 17:41:21.764" starttime="20170725 17:41:21.764" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.765">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170725 17:41:21.765" starttime="20170725 17:41:21.752" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.765">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170725 17:41:21.765" starttime="20170725 17:41:21.765" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170725 17:41:21.766" starttime="20170725 17:41:21.765" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.769">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170725 17:41:21.779">${rc} = 0</msg>
<msg level="INFO" timestamp="20170725 17:41:21.779">${os_con_pid} = </msg>
<status endtime="20170725 17:41:21.779" starttime="20170725 17:41:21.766" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170725 17:41:21.791" starttime="20170725 17:41:21.788" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.791">${cmd_buf} = kill -9 </msg>
<status endtime="20170725 17:41:21.791" starttime="20170725 17:41:21.791" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170725 17:41:21.794" starttime="20170725 17:41:21.792" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.795">${rc} = None</msg>
<msg level="INFO" timestamp="20170725 17:41:21.796">${output} = None</msg>
<status endtime="20170725 17:41:21.796" starttime="20170725 17:41:21.795" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170725 17:41:21.797" starttime="20170725 17:41:21.796" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:41:21.801">Source file '/tmp/9.3.21.61_os_console' does not exist.</msg>
<status endtime="20170725 17:41:21.801" starttime="20170725 17:41:21.800" status="FAIL"></status>
</kw>
<status endtime="20170725 17:41:21.801" starttime="20170725 17:41:21.799" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.802" starttime="20170725 17:41:21.798" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.802">${output} = </msg>
<status endtime="20170725 17:41:21.802" starttime="20170725 17:41:21.802" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.804">${loc_quiet} = 1</msg>
<status endtime="20170725 17:41:21.804" starttime="20170725 17:41:21.803" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170725 17:41:21.856" starttime="20170725 17:41:21.805" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.857">${rc} = 1</msg>
<msg level="INFO" timestamp="20170725 17:41:21.857">${output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170725 17:41:21.857" starttime="20170725 17:41:21.804" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.858">${log_output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170725 17:41:21.858" starttime="20170725 17:41:21.749" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.860" html="yes">Created file '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170725 17:41:21.860" starttime="20170725 17:41:21.859" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.861">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170725 17:41:21.861" starttime="20170725 17:41:21.861" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170725 17:41:21.862" starttime="20170725 17:41:21.861" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.865">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170725 17:41:21.868">${rc} = 0</msg>
<msg level="INFO" timestamp="20170725 17:41:21.868">${output} = /tmp/fspcibld/2705/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170725 17:41:21.868" starttime="20170725 17:41:21.862" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170725 17:41:21.870" starttime="20170725 17:41:21.870" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170725 17:41:21.871" starttime="20170725 17:41:21.871" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.872">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170725 17:41:21.872" starttime="20170725 17:41:21.872" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:21.872">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170725 17:41:21.873" starttime="20170725 17:41:21.860" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.875">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170725 17:41:21.875" starttime="20170725 17:41:21.873" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170725 17:41:21.876" starttime="20170725 17:41:21.875" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.892">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170725 17:41:21.909">${rc} = 0</msg>
<msg level="INFO" timestamp="20170725 17:41:21.909">${output} = </msg>
<status endtime="20170725 17:41:21.910" starttime="20170725 17:41:21.876" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170725 17:41:21.924" starttime="20170725 17:41:21.921" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:21.925" starttime="20170725 17:41:21.746" status="PASS"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.927">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.933">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170725 17:41:21.933" starttime="20170725 17:41:21.931" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.935">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170725 17:41:21.935" starttime="20170725 17:41:21.934" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:21.943">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:41:21.947" starttime="20170725 17:41:21.942" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.948">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:41:21.948" starttime="20170725 17:41:21.947" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.948">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:41:21.948" starttime="20170725 17:41:21.948" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:21.949">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:41:21.949" starttime="20170725 17:41:21.949" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:22.298">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:41:22.298" starttime="20170725 17:41:21.950" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:22.298">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:41:22.298">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:22.298" starttime="20170725 17:41:21.949" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:22.299">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:22.299" starttime="20170725 17:41:22.299" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:22.300">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:22.300" starttime="20170725 17:41:22.299" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:22.300" starttime="20170725 17:41:21.939" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:22.300" starttime="20170725 17:41:21.938" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:22.300" starttime="20170725 17:41:21.937" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:22.301">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170725 17:41:22.301" starttime="20170725 17:41:22.300" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:22.301">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:41:22.301" starttime="20170725 17:41:22.301" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170725 17:41:22.302" starttime="20170725 17:41:22.302" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:22.303">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status endtime="20170725 17:41:22.303" starttime="20170725 17:41:22.303" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:22.304">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170725 17:41:22.305" starttime="20170725 17:41:22.304" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:22.305" starttime="20170725 17:41:22.304" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:22.305" starttime="20170725 17:41:22.302" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:22.735">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170725 17:41:22.735">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:22.735" starttime="20170725 17:41:22.305" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:22.737">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:41:22.737" starttime="20170725 17:41:22.736" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:22.738">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:41:22.738" starttime="20170725 17:41:22.737" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:22.738" starttime="20170725 17:41:22.737" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:22.738" starttime="20170725 17:41:22.735" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:41:22.739">Delete All Sessions</msg>
<status endtime="20170725 17:41:22.739" starttime="20170725 17:41:22.738" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:22.739">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:22.739" starttime="20170725 17:41:21.935" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:22.740">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:22.740" starttime="20170725 17:41:22.739" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:22.740">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:41:22.740">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:41:22.740">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170725 17:41:22.740" starttime="20170725 17:41:22.740" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:22.740" starttime="20170725 17:41:21.933" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170725 17:41:22.741" starttime="20170725 17:41:22.741" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:22.746">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:41:22.746" starttime="20170725 17:41:22.746" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:22.747">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:41:22.747" starttime="20170725 17:41:22.746" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:22.747">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:41:22.747" starttime="20170725 17:41:22.747" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:22.748">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:41:22.748" starttime="20170725 17:41:22.748" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:24.402">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:41:24.402" starttime="20170725 17:41:22.749" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:24.402">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:41:24.402">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:24.402" starttime="20170725 17:41:22.748" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:24.403">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:24.403" starttime="20170725 17:41:24.403" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:24.404">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:24.404" starttime="20170725 17:41:24.404" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:24.405" starttime="20170725 17:41:22.745" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:24.405" starttime="20170725 17:41:22.745" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:24.405" starttime="20170725 17:41:22.744" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:24.406">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:41:24.406" starttime="20170725 17:41:24.405" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:24.409">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:41:24.409" starttime="20170725 17:41:24.408" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:24.410">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:41:24.410" starttime="20170725 17:41:24.409" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:24.410" starttime="20170725 17:41:24.409" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:24.410" starttime="20170725 17:41:24.407" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:24.410" starttime="20170725 17:41:24.406" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:31.675">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:41:31.676">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:31.676" starttime="20170725 17:41:24.411" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:31.678">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:41:31.678" starttime="20170725 17:41:31.677" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:31.679">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:41:31.679" starttime="20170725 17:41:31.679" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:31.679" starttime="20170725 17:41:31.678" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:31.679" starttime="20170725 17:41:31.677" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:31.679" starttime="20170725 17:41:31.676" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:41:31.680">Delete All Sessions</msg>
<status endtime="20170725 17:41:31.680" starttime="20170725 17:41:31.680" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:31.680">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:31.680" starttime="20170725 17:41:22.743" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:31.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:31.681" starttime="20170725 17:41:31.680" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:31.681">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:41:31.681">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:41:31.681">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:41:31.682" starttime="20170725 17:41:31.681" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:31.682">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:41:31.682" starttime="20170725 17:41:22.743" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:31.682">${power_state} = On</msg>
<status endtime="20170725 17:41:31.682" starttime="20170725 17:41:22.742" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:41:31.683">Off != On</msg>
<status endtime="20170725 17:41:31.683" starttime="20170725 17:41:31.682" status="FAIL"></status>
</kw>
<status endtime="20170725 17:41:31.683" starttime="20170725 17:41:22.742" status="FAIL"></status>
</kw>
<status endtime="20170725 17:41:31.683" starttime="20170725 17:41:22.742" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:41.691">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:41:41.691" starttime="20170725 17:41:41.690" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:41.692">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:41:41.692" starttime="20170725 17:41:41.692" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:41.693">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:41:41.693" starttime="20170725 17:41:41.693" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:41.694">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:41:41.694" starttime="20170725 17:41:41.694" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:42.102">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:41:42.102" starttime="20170725 17:41:41.695" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:42.102">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:41:42.102">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:42.102" starttime="20170725 17:41:41.695" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:42.103">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:42.103" starttime="20170725 17:41:42.102" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:42.104">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:42.104" starttime="20170725 17:41:42.103" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:42.104" starttime="20170725 17:41:41.689" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:42.104" starttime="20170725 17:41:41.689" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:42.104" starttime="20170725 17:41:41.687" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:42.105">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:41:42.105" starttime="20170725 17:41:42.105" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:42.108">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:41:42.108" starttime="20170725 17:41:42.107" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:42.109">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:41:42.109" starttime="20170725 17:41:42.109" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:42.109" starttime="20170725 17:41:42.108" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:42.110" starttime="20170725 17:41:42.106" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:42.110" starttime="20170725 17:41:42.105" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:42.392">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:41:42.393">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:42.393" starttime="20170725 17:41:42.110" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:42.395">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:41:42.395" starttime="20170725 17:41:42.394" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:42.396">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:41:42.396" starttime="20170725 17:41:42.395" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:42.396" starttime="20170725 17:41:42.395" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:42.396" starttime="20170725 17:41:42.393" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:42.396" starttime="20170725 17:41:42.393" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:41:42.396">Delete All Sessions</msg>
<status endtime="20170725 17:41:42.397" starttime="20170725 17:41:42.396" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:42.397">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:42.397" starttime="20170725 17:41:41.686" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:42.398">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:42.398" starttime="20170725 17:41:42.397" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:42.399">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:41:42.399">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:41:42.399">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170725 17:41:42.399" starttime="20170725 17:41:42.398" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:42.399">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170725 17:41:42.399" starttime="20170725 17:41:41.685" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:42.400">${power_state} = Off</msg>
<status endtime="20170725 17:41:42.400" starttime="20170725 17:41:41.685" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170725 17:41:42.400" starttime="20170725 17:41:42.400" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:42.401" starttime="20170725 17:41:41.685" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:42.406">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:41:42.406" starttime="20170725 17:41:42.405" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:42.407">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:41:42.407" starttime="20170725 17:41:42.407" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:42.408">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:41:42.408" starttime="20170725 17:41:42.407" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:42.409">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:41:42.409" starttime="20170725 17:41:42.409" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:42.863">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:41:42.863" starttime="20170725 17:41:42.410" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:42.863">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:41:42.863">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:42.863" starttime="20170725 17:41:42.410" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:42.864">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:42.864" starttime="20170725 17:41:42.863" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:42.864">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:42.864" starttime="20170725 17:41:42.864" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:42.865" starttime="20170725 17:41:42.405" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:42.865" starttime="20170725 17:41:42.404" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:42.865" starttime="20170725 17:41:42.403" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:42.865">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170725 17:41:42.865" starttime="20170725 17:41:42.865" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:42.868">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:41:42.868" starttime="20170725 17:41:42.867" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:42.869">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:41:42.869" starttime="20170725 17:41:42.868" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:42.869" starttime="20170725 17:41:42.868" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:42.869" starttime="20170725 17:41:42.866" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:42.869" starttime="20170725 17:41:42.866" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.075">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:41:43.075">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:43.075" starttime="20170725 17:41:42.869" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.077">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:41:43.077" starttime="20170725 17:41:43.076" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.078">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:41:43.078" starttime="20170725 17:41:43.077" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.078" starttime="20170725 17:41:43.077" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.078" starttime="20170725 17:41:43.076" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.078" starttime="20170725 17:41:43.075" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:41:43.078">Delete All Sessions</msg>
<status endtime="20170725 17:41:43.079" starttime="20170725 17:41:43.078" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:43.079">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:43.079" starttime="20170725 17:41:42.402" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.079">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:43.080" starttime="20170725 17:41:43.079" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.080">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:41:43.080">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:41:43.080">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170725 17:41:43.080" starttime="20170725 17:41:43.080" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:43.081">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170725 17:41:43.081" starttime="20170725 17:41:42.401" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:43.081">${host_state} = Off</msg>
<status endtime="20170725 17:41:43.081" starttime="20170725 17:41:42.401" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170725 17:41:43.081" starttime="20170725 17:41:43.081" status="PASS"></status>
</kw>
<kw name="Is OS Off" library="utils">
<doc>Check if boot progress is "Off".</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.085">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:41:43.086" starttime="20170725 17:41:43.085" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.086">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:41:43.086" starttime="20170725 17:41:43.086" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.087">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:41:43.087" starttime="20170725 17:41:43.087" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.088">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:41:43.088" starttime="20170725 17:41:43.087" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.285">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:41:43.285" starttime="20170725 17:41:43.089" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:43.285">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:41:43.285">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:43.285" starttime="20170725 17:41:43.088" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.286">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:43.286" starttime="20170725 17:41:43.286" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:43.287" starttime="20170725 17:41:43.286" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.287" starttime="20170725 17:41:43.085" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.287" starttime="20170725 17:41:43.084" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.287" starttime="20170725 17:41:43.083" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.287">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170725 17:41:43.287" starttime="20170725 17:41:43.287" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.290">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170725 17:41:43.290" starttime="20170725 17:41:43.289" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.290">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170725 17:41:43.291" starttime="20170725 17:41:43.290" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.291" starttime="20170725 17:41:43.290" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.291" starttime="20170725 17:41:43.288" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.291" starttime="20170725 17:41:43.288" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.374">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:41:43.374">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:43.374" starttime="20170725 17:41:43.291" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.376">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:41:43.376" starttime="20170725 17:41:43.375" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.377">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:41:43.377" starttime="20170725 17:41:43.376" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.377" starttime="20170725 17:41:43.376" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.377" starttime="20170725 17:41:43.375" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.377" starttime="20170725 17:41:43.374" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:41:43.377">Delete All Sessions</msg>
<status endtime="20170725 17:41:43.377" starttime="20170725 17:41:43.377" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:43.378">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:43.378" starttime="20170725 17:41:43.083" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.378">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:43.378" starttime="20170725 17:41:43.378" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.379">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:41:43.379">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:41:43.379">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170725 17:41:43.379" starttime="20170725 17:41:43.379" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:43.379">${state} = Off</msg>
<status endtime="20170725 17:41:43.379" starttime="20170725 17:41:43.082" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:43.380">${boot_progress} = Off</msg>
<status endtime="20170725 17:41:43.380" starttime="20170725 17:41:43.082" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status endtime="20170725 17:41:43.380" starttime="20170725 17:41:43.380" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.380" starttime="20170725 17:41:43.082" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.380" starttime="20170725 17:41:41.684" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.380" starttime="20170725 17:41:22.741" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.381" starttime="20170725 17:41:21.930" status="PASS"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.382">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170725 17:41:43.382" starttime="20170725 17:41:43.381" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.383">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170725 17:41:43.383" starttime="20170725 17:41:43.382" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.386">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:41:43.386" starttime="20170725 17:41:43.385" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.387">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:41:43.387" starttime="20170725 17:41:43.386" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.387">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:41:43.387" starttime="20170725 17:41:43.387" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.388">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:41:43.388" starttime="20170725 17:41:43.388" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.571">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:41:43.571" starttime="20170725 17:41:43.389" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:43.571">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:41:43.571">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:43.572" starttime="20170725 17:41:43.388" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.572">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:43.572" starttime="20170725 17:41:43.572" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.573">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:43.573" starttime="20170725 17:41:43.572" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.573" starttime="20170725 17:41:43.385" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.573" starttime="20170725 17:41:43.384" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.573" starttime="20170725 17:41:43.384" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.574">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170725 17:41:43.574" starttime="20170725 17:41:43.573" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.574">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:41:43.574" starttime="20170725 17:41:43.574" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170725 17:41:43.575" starttime="20170725 17:41:43.575" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.577">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Ty...</msg>
<status endtime="20170725 17:41:43.577" starttime="20170725 17:41:43.576" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.577">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170725 17:41:43.578" starttime="20170725 17:41:43.577" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.578" starttime="20170725 17:41:43.577" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.578" starttime="20170725 17:41:43.575" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.776">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170725 17:41:43.776">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:43.776" starttime="20170725 17:41:43.578" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.777">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:41:43.777" starttime="20170725 17:41:43.777" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.778">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:41:43.778" starttime="20170725 17:41:43.778" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.778" starttime="20170725 17:41:43.777" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.778" starttime="20170725 17:41:43.776" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:41:43.779">Delete All Sessions</msg>
<status endtime="20170725 17:41:43.779" starttime="20170725 17:41:43.779" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:43.779">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:43.779" starttime="20170725 17:41:43.383" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.780">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:43.780" starttime="20170725 17:41:43.779" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.780">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:41:43.780">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:41:43.780">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170725 17:41:43.781" starttime="20170725 17:41:43.780" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:43.781" starttime="20170725 17:41:43.382" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170725 17:41:43.781" starttime="20170725 17:41:43.781" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:43.786">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:41:43.787" starttime="20170725 17:41:43.786" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.787">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:41:43.787" starttime="20170725 17:41:43.787" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.788">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:41:43.788" starttime="20170725 17:41:43.788" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:43.789">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:41:43.789" starttime="20170725 17:41:43.788" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:45.186">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:41:45.186" starttime="20170725 17:41:43.789" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:45.186">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:41:45.186">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:45.186" starttime="20170725 17:41:43.789" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:45.187">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:45.187" starttime="20170725 17:41:45.186" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:45.187">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:45.188" starttime="20170725 17:41:45.187" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:45.188" starttime="20170725 17:41:43.786" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:45.188" starttime="20170725 17:41:43.785" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:45.188" starttime="20170725 17:41:43.784" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:45.188">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:41:45.188" starttime="20170725 17:41:45.188" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:45.190">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:41:45.191" starttime="20170725 17:41:45.190" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:45.191">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:41:45.191" starttime="20170725 17:41:45.191" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:45.192" starttime="20170725 17:41:45.191" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:45.192" starttime="20170725 17:41:45.189" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:45.192" starttime="20170725 17:41:45.189" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:52.475">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:41:52.476">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:52.476" starttime="20170725 17:41:45.192" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:52.478">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:41:52.478" starttime="20170725 17:41:52.477" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:52.478">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:41:52.479" starttime="20170725 17:41:52.478" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:52.479" starttime="20170725 17:41:52.478" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:52.479" starttime="20170725 17:41:52.477" status="PASS"></status>
</kw>
<status endtime="20170725 17:41:52.479" starttime="20170725 17:41:52.476" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:41:52.479">Delete All Sessions</msg>
<status endtime="20170725 17:41:52.479" starttime="20170725 17:41:52.479" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:52.480">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:41:52.480" starttime="20170725 17:41:43.784" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:41:52.480">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:41:52.480" starttime="20170725 17:41:52.480" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:41:52.481">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:41:52.481">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:41:52.481">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170725 17:41:52.481" starttime="20170725 17:41:52.480" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:52.481">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170725 17:41:52.481" starttime="20170725 17:41:43.783" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:41:52.482">${power_state} = Off</msg>
<status endtime="20170725 17:41:52.482" starttime="20170725 17:41:43.783" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:41:52.482">On != Off</msg>
<status endtime="20170725 17:41:52.482" starttime="20170725 17:41:52.482" status="FAIL"></status>
</kw>
<status endtime="20170725 17:41:52.482" starttime="20170725 17:41:43.782" status="FAIL"></status>
</kw>
<status endtime="20170725 17:41:52.483" starttime="20170725 17:41:43.782" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:02.488">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:02.489" starttime="20170725 17:42:02.488" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:02.489">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:02.490" starttime="20170725 17:42:02.489" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:02.490">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:02.490" starttime="20170725 17:42:02.490" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:02.491">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:02.491" starttime="20170725 17:42:02.491" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:02.693">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:02.693" starttime="20170725 17:42:02.492" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:02.693">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:02.693">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:02.693" starttime="20170725 17:42:02.492" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:02.694">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:02.694" starttime="20170725 17:42:02.693" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:02.695">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:02.695" starttime="20170725 17:42:02.694" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:02.695" starttime="20170725 17:42:02.487" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:02.695" starttime="20170725 17:42:02.486" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:02.695" starttime="20170725 17:42:02.485" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:02.696">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:42:02.696" starttime="20170725 17:42:02.696" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:02.699">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:02.699" starttime="20170725 17:42:02.698" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:02.700">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:02.701" starttime="20170725 17:42:02.700" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:02.701" starttime="20170725 17:42:02.699" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:02.701" starttime="20170725 17:42:02.697" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:02.701" starttime="20170725 17:42:02.697" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.010">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:03.011">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:03.011" starttime="20170725 17:42:02.701" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.012">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:03.012" starttime="20170725 17:42:03.012" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:03.013">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:03.014" starttime="20170725 17:42:03.013" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.014" starttime="20170725 17:42:03.012" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.014" starttime="20170725 17:42:03.011" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.014" starttime="20170725 17:42:03.011" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:03.014">Delete All Sessions</msg>
<status endtime="20170725 17:42:03.014" starttime="20170725 17:42:03.014" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:03.015">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:03.015" starttime="20170725 17:42:02.485" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:03.015">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:03.015" starttime="20170725 17:42:03.015" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.016">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:03.016">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:03.016">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:42:03.016" starttime="20170725 17:42:03.016" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:03.016">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:42:03.016" starttime="20170725 17:42:02.484" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:03.017">${power_state} = On</msg>
<status endtime="20170725 17:42:03.017" starttime="20170725 17:42:02.484" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170725 17:42:03.017" starttime="20170725 17:42:03.017" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.017" starttime="20170725 17:42:02.483" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:03.021">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:03.021" starttime="20170725 17:42:03.020" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.022">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:03.022" starttime="20170725 17:42:03.021" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.022">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:03.022" starttime="20170725 17:42:03.022" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.023">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:03.023" starttime="20170725 17:42:03.023" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:03.200">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:03.200" starttime="20170725 17:42:03.024" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:03.200">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:03.200">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:03.200" starttime="20170725 17:42:03.023" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:03.201">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:03.201" starttime="20170725 17:42:03.200" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:03.201">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:03.202" starttime="20170725 17:42:03.201" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.202" starttime="20170725 17:42:03.020" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.202" starttime="20170725 17:42:03.019" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.202" starttime="20170725 17:42:03.019" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.203">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170725 17:42:03.203" starttime="20170725 17:42:03.202" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.206">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:03.206" starttime="20170725 17:42:03.205" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:03.208">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:03.208" starttime="20170725 17:42:03.207" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.208" starttime="20170725 17:42:03.207" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.208" starttime="20170725 17:42:03.204" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.208" starttime="20170725 17:42:03.203" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.381">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:03.382">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:03.382" starttime="20170725 17:42:03.208" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.384">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:03.384" starttime="20170725 17:42:03.383" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:03.385">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:03.385" starttime="20170725 17:42:03.385" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.385" starttime="20170725 17:42:03.384" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.385" starttime="20170725 17:42:03.383" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.385" starttime="20170725 17:42:03.382" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:03.386">Delete All Sessions</msg>
<status endtime="20170725 17:42:03.386" starttime="20170725 17:42:03.385" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:03.386">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:03.386" starttime="20170725 17:42:03.018" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:03.386">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:03.387" starttime="20170725 17:42:03.386" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.387">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:03.387">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:03.387">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170725 17:42:03.387" starttime="20170725 17:42:03.387" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:03.388">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170725 17:42:03.388" starttime="20170725 17:42:03.018" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:03.388">${host_state} = Running</msg>
<status endtime="20170725 17:42:03.388" starttime="20170725 17:42:03.017" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170725 17:42:03.389" starttime="20170725 17:42:03.388" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:03.392">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:03.393" starttime="20170725 17:42:03.392" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.393">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:03.393" starttime="20170725 17:42:03.393" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.394">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:03.394" starttime="20170725 17:42:03.394" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.395">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:03.395" starttime="20170725 17:42:03.394" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:03.661">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:03.661" starttime="20170725 17:42:03.395" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:03.661">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:03.661">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:03.661" starttime="20170725 17:42:03.395" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:03.662">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:03.662" starttime="20170725 17:42:03.662" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:03.663">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:03.663" starttime="20170725 17:42:03.663" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.663" starttime="20170725 17:42:03.391" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.663" starttime="20170725 17:42:03.391" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.663" starttime="20170725 17:42:03.391" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.664">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170725 17:42:03.664" starttime="20170725 17:42:03.664" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.666">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170725 17:42:03.666" starttime="20170725 17:42:03.665" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:03.667">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170725 17:42:03.667" starttime="20170725 17:42:03.667" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.667" starttime="20170725 17:42:03.666" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.667" starttime="20170725 17:42:03.665" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.667" starttime="20170725 17:42:03.664" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.735">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:03.735">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:03.735" starttime="20170725 17:42:03.668" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.738">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:03.738" starttime="20170725 17:42:03.737" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:03.739">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:03.739" starttime="20170725 17:42:03.739" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.740" starttime="20170725 17:42:03.738" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.740" starttime="20170725 17:42:03.736" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:03.740" starttime="20170725 17:42:03.736" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:03.740">Delete All Sessions</msg>
<status endtime="20170725 17:42:03.741" starttime="20170725 17:42:03.740" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:03.741">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:03.741" starttime="20170725 17:42:03.390" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:03.742">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:03.742" starttime="20170725 17:42:03.741" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:03.743">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:03.743">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:03.743">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170725 17:42:03.743" starttime="20170725 17:42:03.742" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:03.743">${state} = Off</msg>
<status endtime="20170725 17:42:03.743" starttime="20170725 17:42:03.389" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:03.744">${boot_progress} = Off</msg>
<status endtime="20170725 17:42:03.744" starttime="20170725 17:42:03.389" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:42:03.745">Off != FW Progress, Starting OS</msg>
<status endtime="20170725 17:42:03.745" starttime="20170725 17:42:03.744" status="FAIL"></status>
</kw>
<status endtime="20170725 17:42:03.745" starttime="20170725 17:42:03.389" status="FAIL"></status>
</kw>
<status endtime="20170725 17:42:03.745" starttime="20170725 17:42:02.483" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:13.751">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:13.751" starttime="20170725 17:42:13.751" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:13.752">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:13.752" starttime="20170725 17:42:13.752" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:13.752">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:13.753" starttime="20170725 17:42:13.752" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:13.753">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:13.753" starttime="20170725 17:42:13.753" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:13.931">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:13.931" starttime="20170725 17:42:13.754" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:13.931">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:13.931">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:13.931" starttime="20170725 17:42:13.754" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:13.932">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:13.932" starttime="20170725 17:42:13.932" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:13.933">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:13.933" starttime="20170725 17:42:13.932" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:13.933" starttime="20170725 17:42:13.750" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:13.933" starttime="20170725 17:42:13.749" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:13.933" starttime="20170725 17:42:13.748" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:13.934">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:42:13.934" starttime="20170725 17:42:13.933" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:13.936">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:13.936" starttime="20170725 17:42:13.935" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:13.937">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:13.937" starttime="20170725 17:42:13.937" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:13.937" starttime="20170725 17:42:13.936" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:13.937" starttime="20170725 17:42:13.935" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:13.937" starttime="20170725 17:42:13.934" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.040">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:14.040">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:14.040" starttime="20170725 17:42:13.938" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.042">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:14.042" starttime="20170725 17:42:14.041" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:14.043">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:14.043" starttime="20170725 17:42:14.043" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.043" starttime="20170725 17:42:14.042" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.044" starttime="20170725 17:42:14.041" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.044" starttime="20170725 17:42:14.040" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:14.044">Delete All Sessions</msg>
<status endtime="20170725 17:42:14.044" starttime="20170725 17:42:14.044" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:14.044">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:14.044" starttime="20170725 17:42:13.748" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:14.045">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:14.045" starttime="20170725 17:42:14.045" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.046">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:14.046">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:14.046">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:42:14.046" starttime="20170725 17:42:14.045" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:14.046">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:42:14.046" starttime="20170725 17:42:13.747" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:14.046">${power_state} = On</msg>
<status endtime="20170725 17:42:14.046" starttime="20170725 17:42:13.747" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170725 17:42:14.047" starttime="20170725 17:42:14.047" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.047" starttime="20170725 17:42:13.746" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:14.051">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:14.051" starttime="20170725 17:42:14.050" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.052">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:14.052" starttime="20170725 17:42:14.051" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.052">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:14.052" starttime="20170725 17:42:14.052" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.053">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:14.053" starttime="20170725 17:42:14.053" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:14.276">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:14.277" starttime="20170725 17:42:14.054" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:14.277">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:14.277">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:14.277" starttime="20170725 17:42:14.053" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:14.278">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:14.278" starttime="20170725 17:42:14.277" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:14.278">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:14.278" starttime="20170725 17:42:14.278" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.278" starttime="20170725 17:42:14.050" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.279" starttime="20170725 17:42:14.049" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.279" starttime="20170725 17:42:14.049" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.279">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170725 17:42:14.279" starttime="20170725 17:42:14.279" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.282">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:14.282" starttime="20170725 17:42:14.281" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:14.283">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:14.283" starttime="20170725 17:42:14.282" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.283" starttime="20170725 17:42:14.282" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.283" starttime="20170725 17:42:14.280" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.283" starttime="20170725 17:42:14.280" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.348">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:14.348">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:14.348" starttime="20170725 17:42:14.283" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.350">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:14.350" starttime="20170725 17:42:14.350" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:14.351">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:14.351" starttime="20170725 17:42:14.351" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.352" starttime="20170725 17:42:14.351" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.352" starttime="20170725 17:42:14.349" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.352" starttime="20170725 17:42:14.349" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:14.352">Delete All Sessions</msg>
<status endtime="20170725 17:42:14.352" starttime="20170725 17:42:14.352" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:14.352">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:14.352" starttime="20170725 17:42:14.048" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:14.353">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:14.353" starttime="20170725 17:42:14.353" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.354">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:14.354">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:14.354">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170725 17:42:14.354" starttime="20170725 17:42:14.353" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:14.354">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170725 17:42:14.354" starttime="20170725 17:42:14.048" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:14.354">${host_state} = Running</msg>
<status endtime="20170725 17:42:14.355" starttime="20170725 17:42:14.047" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170725 17:42:14.355" starttime="20170725 17:42:14.355" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:14.359">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:14.359" starttime="20170725 17:42:14.359" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.360">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:14.360" starttime="20170725 17:42:14.360" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.361">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:14.361" starttime="20170725 17:42:14.361" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.362">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:14.362" starttime="20170725 17:42:14.361" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:14.553">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:14.553" starttime="20170725 17:42:14.363" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:14.554">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:14.554">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:14.554" starttime="20170725 17:42:14.362" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:14.554">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:14.555" starttime="20170725 17:42:14.554" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:14.555">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:14.555" starttime="20170725 17:42:14.555" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.555" starttime="20170725 17:42:14.358" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.555" starttime="20170725 17:42:14.358" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.556" starttime="20170725 17:42:14.357" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.556">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170725 17:42:14.556" starttime="20170725 17:42:14.556" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.558">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170725 17:42:14.558" starttime="20170725 17:42:14.558" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:14.559">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170725 17:42:14.559" starttime="20170725 17:42:14.559" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.559" starttime="20170725 17:42:14.558" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.560" starttime="20170725 17:42:14.557" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.560" starttime="20170725 17:42:14.556" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.650">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:14.650">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:14.650" starttime="20170725 17:42:14.560" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.652">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:14.652" starttime="20170725 17:42:14.651" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:14.653">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:14.653" starttime="20170725 17:42:14.653" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.653" starttime="20170725 17:42:14.652" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.653" starttime="20170725 17:42:14.651" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:14.653" starttime="20170725 17:42:14.650" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:14.654">Delete All Sessions</msg>
<status endtime="20170725 17:42:14.654" starttime="20170725 17:42:14.653" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:14.654">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:14.654" starttime="20170725 17:42:14.356" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:14.655">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:14.655" starttime="20170725 17:42:14.654" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:14.655">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:14.655">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:14.655">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170725 17:42:14.656" starttime="20170725 17:42:14.655" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:14.656">${state} = Off</msg>
<status endtime="20170725 17:42:14.656" starttime="20170725 17:42:14.356" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:14.656">${boot_progress} = Off</msg>
<status endtime="20170725 17:42:14.656" starttime="20170725 17:42:14.356" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:42:14.657">Off != FW Progress, Starting OS</msg>
<status endtime="20170725 17:42:14.657" starttime="20170725 17:42:14.656" status="FAIL"></status>
</kw>
<status endtime="20170725 17:42:14.657" starttime="20170725 17:42:14.355" status="FAIL"></status>
</kw>
<status endtime="20170725 17:42:14.657" starttime="20170725 17:42:13.746" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:24.663">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:24.664" starttime="20170725 17:42:24.663" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:24.664">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:24.664" starttime="20170725 17:42:24.664" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:24.665">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:24.665" starttime="20170725 17:42:24.664" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:24.666">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:24.666" starttime="20170725 17:42:24.665" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:24.946">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:24.946" starttime="20170725 17:42:24.666" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:24.946">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:24.946">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:24.946" starttime="20170725 17:42:24.666" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:24.947">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:24.947" starttime="20170725 17:42:24.946" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:24.947">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:24.948" starttime="20170725 17:42:24.947" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:24.948" starttime="20170725 17:42:24.662" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:24.948" starttime="20170725 17:42:24.662" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:24.948" starttime="20170725 17:42:24.661" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:24.948">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:42:24.949" starttime="20170725 17:42:24.948" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:24.951">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:24.951" starttime="20170725 17:42:24.950" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:24.951">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:24.952" starttime="20170725 17:42:24.951" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:24.952" starttime="20170725 17:42:24.951" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:24.952" starttime="20170725 17:42:24.949" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:24.952" starttime="20170725 17:42:24.949" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.064">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:25.064">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:25.064" starttime="20170725 17:42:24.952" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.066">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:25.066" starttime="20170725 17:42:25.066" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:25.067">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:25.067" starttime="20170725 17:42:25.067" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.068" starttime="20170725 17:42:25.067" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.068" starttime="20170725 17:42:25.065" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.068" starttime="20170725 17:42:25.065" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:25.068">Delete All Sessions</msg>
<status endtime="20170725 17:42:25.068" starttime="20170725 17:42:25.068" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:25.068">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:25.068" starttime="20170725 17:42:24.660" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:25.069">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:25.069" starttime="20170725 17:42:25.069" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.070">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:25.070">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:25.070">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:42:25.070" starttime="20170725 17:42:25.069" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:25.070">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:42:25.070" starttime="20170725 17:42:24.659" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:25.070">${power_state} = On</msg>
<status endtime="20170725 17:42:25.070" starttime="20170725 17:42:24.659" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170725 17:42:25.071" starttime="20170725 17:42:25.071" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.071" starttime="20170725 17:42:24.658" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:25.075">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:25.075" starttime="20170725 17:42:25.074" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.076">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:25.076" starttime="20170725 17:42:25.075" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.076">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:25.076" starttime="20170725 17:42:25.076" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.077">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:25.077" starttime="20170725 17:42:25.077" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:25.318">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:25.318" starttime="20170725 17:42:25.078" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:25.318">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:25.318">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:25.318" starttime="20170725 17:42:25.078" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:25.319">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:25.319" starttime="20170725 17:42:25.319" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:25.320">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:25.320" starttime="20170725 17:42:25.319" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.320" starttime="20170725 17:42:25.074" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.320" starttime="20170725 17:42:25.073" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.320" starttime="20170725 17:42:25.073" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.321">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170725 17:42:25.321" starttime="20170725 17:42:25.320" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.323">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:25.323" starttime="20170725 17:42:25.322" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:25.324">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:25.324" starttime="20170725 17:42:25.324" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.324" starttime="20170725 17:42:25.323" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.324" starttime="20170725 17:42:25.321" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.324" starttime="20170725 17:42:25.321" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.427">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:25.427">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:25.427" starttime="20170725 17:42:25.325" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.428">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:25.428" starttime="20170725 17:42:25.428" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:25.429">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:25.430" starttime="20170725 17:42:25.429" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.430" starttime="20170725 17:42:25.429" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.430" starttime="20170725 17:42:25.427" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.430" starttime="20170725 17:42:25.427" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:25.430">Delete All Sessions</msg>
<status endtime="20170725 17:42:25.430" starttime="20170725 17:42:25.430" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:25.431">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:25.431" starttime="20170725 17:42:25.072" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:25.431">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:25.431" starttime="20170725 17:42:25.431" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.432">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:25.432">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:25.432">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170725 17:42:25.432" starttime="20170725 17:42:25.431" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:25.432">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170725 17:42:25.432" starttime="20170725 17:42:25.072" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:25.433">${host_state} = Running</msg>
<status endtime="20170725 17:42:25.433" starttime="20170725 17:42:25.071" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170725 17:42:25.433" starttime="20170725 17:42:25.433" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:25.437">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:25.438" starttime="20170725 17:42:25.437" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.438">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:25.438" starttime="20170725 17:42:25.438" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.439">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:25.439" starttime="20170725 17:42:25.438" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.439">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:25.439" starttime="20170725 17:42:25.439" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:25.865">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:25.865" starttime="20170725 17:42:25.443" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:25.865">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:25.865">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:25.865" starttime="20170725 17:42:25.440" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:25.866">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:25.866" starttime="20170725 17:42:25.865" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:25.866">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:25.866" starttime="20170725 17:42:25.866" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.867" starttime="20170725 17:42:25.436" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.867" starttime="20170725 17:42:25.436" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.867" starttime="20170725 17:42:25.435" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.867">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170725 17:42:25.867" starttime="20170725 17:42:25.867" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.869">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170725 17:42:25.869" starttime="20170725 17:42:25.869" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:25.871">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170725 17:42:25.871" starttime="20170725 17:42:25.870" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.871" starttime="20170725 17:42:25.870" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.871" starttime="20170725 17:42:25.868" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.871" starttime="20170725 17:42:25.868" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.981">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:25.982">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:25.982" starttime="20170725 17:42:25.871" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.983">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:25.983" starttime="20170725 17:42:25.983" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:25.984">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:25.984" starttime="20170725 17:42:25.984" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.985" starttime="20170725 17:42:25.984" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.985" starttime="20170725 17:42:25.982" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:25.985" starttime="20170725 17:42:25.982" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:25.985">Delete All Sessions</msg>
<status endtime="20170725 17:42:25.985" starttime="20170725 17:42:25.985" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:25.985">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:25.986" starttime="20170725 17:42:25.435" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:25.986">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:25.986" starttime="20170725 17:42:25.986" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:25.987">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:25.987">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:25.987">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170725 17:42:25.987" starttime="20170725 17:42:25.986" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:25.987">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170725 17:42:25.987" starttime="20170725 17:42:25.434" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:25.987">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170725 17:42:25.987" starttime="20170725 17:42:25.434" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:42:25.988">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170725 17:42:25.988" starttime="20170725 17:42:25.988" status="FAIL"></status>
</kw>
<status endtime="20170725 17:42:25.988" starttime="20170725 17:42:25.433" status="FAIL"></status>
</kw>
<status endtime="20170725 17:42:25.988" starttime="20170725 17:42:24.658" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:35.995">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:35.995" starttime="20170725 17:42:35.994" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:35.996">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:35.996" starttime="20170725 17:42:35.996" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:35.997">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:35.997" starttime="20170725 17:42:35.997" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:35.998">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:35.998" starttime="20170725 17:42:35.998" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.179">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:36.180" starttime="20170725 17:42:35.999" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:36.180">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:36.180">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:36.180" starttime="20170725 17:42:35.999" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.180">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:36.181" starttime="20170725 17:42:36.180" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.181">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:36.181" starttime="20170725 17:42:36.181" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.181" starttime="20170725 17:42:35.993" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.181" starttime="20170725 17:42:35.993" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.182" starttime="20170725 17:42:35.992" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.182">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:42:36.182" starttime="20170725 17:42:36.182" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.184">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:36.184" starttime="20170725 17:42:36.184" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.185">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:36.185" starttime="20170725 17:42:36.185" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.185" starttime="20170725 17:42:36.184" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.186" starttime="20170725 17:42:36.183" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.186" starttime="20170725 17:42:36.182" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.262">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:36.262">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:36.262" starttime="20170725 17:42:36.186" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.265">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:36.265" starttime="20170725 17:42:36.264" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.266">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:36.266" starttime="20170725 17:42:36.265" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.266" starttime="20170725 17:42:36.265" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.266" starttime="20170725 17:42:36.263" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.266" starttime="20170725 17:42:36.263" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:36.266">Delete All Sessions</msg>
<status endtime="20170725 17:42:36.267" starttime="20170725 17:42:36.266" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:36.267">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:36.267" starttime="20170725 17:42:35.991" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:36.267" starttime="20170725 17:42:36.267" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.268">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:36.268">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:36.268">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:42:36.268" starttime="20170725 17:42:36.268" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:36.268">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:42:36.268" starttime="20170725 17:42:35.990" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:36.269">${power_state} = On</msg>
<status endtime="20170725 17:42:36.269" starttime="20170725 17:42:35.990" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170725 17:42:36.269" starttime="20170725 17:42:36.269" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.269" starttime="20170725 17:42:35.990" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.273">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:36.273" starttime="20170725 17:42:36.273" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.274">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:36.274" starttime="20170725 17:42:36.274" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.274">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:36.274" starttime="20170725 17:42:36.274" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.275">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:36.275" starttime="20170725 17:42:36.275" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.629">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:36.629" starttime="20170725 17:42:36.276" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:36.629">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:36.629">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:36.629" starttime="20170725 17:42:36.275" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.630">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:36.630" starttime="20170725 17:42:36.630" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.631">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:36.631" starttime="20170725 17:42:36.630" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.631" starttime="20170725 17:42:36.272" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.631" starttime="20170725 17:42:36.272" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.631" starttime="20170725 17:42:36.271" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.632">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170725 17:42:36.632" starttime="20170725 17:42:36.631" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.634">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:36.634" starttime="20170725 17:42:36.633" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.635">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:36.635" starttime="20170725 17:42:36.635" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.635" starttime="20170725 17:42:36.634" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.635" starttime="20170725 17:42:36.632" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.635" starttime="20170725 17:42:36.632" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.750">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:36.750">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:36.750" starttime="20170725 17:42:36.636" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.752">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:36.752" starttime="20170725 17:42:36.751" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.753">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:36.753" starttime="20170725 17:42:36.753" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.754" starttime="20170725 17:42:36.752" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.754" starttime="20170725 17:42:36.751" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.754" starttime="20170725 17:42:36.750" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:36.754">Delete All Sessions</msg>
<status endtime="20170725 17:42:36.754" starttime="20170725 17:42:36.754" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:36.754">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:36.754" starttime="20170725 17:42:36.270" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.755">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:36.755" starttime="20170725 17:42:36.755" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.756">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:36.756">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:36.756">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170725 17:42:36.756" starttime="20170725 17:42:36.755" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:36.756">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170725 17:42:36.756" starttime="20170725 17:42:36.270" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:36.756">${host_state} = Running</msg>
<status endtime="20170725 17:42:36.757" starttime="20170725 17:42:36.270" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170725 17:42:36.757" starttime="20170725 17:42:36.757" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.761">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:36.761" starttime="20170725 17:42:36.761" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.762">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:36.762" starttime="20170725 17:42:36.762" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.763">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:36.763" starttime="20170725 17:42:36.762" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.763">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:36.763" starttime="20170725 17:42:36.763" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.979">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:36.979" starttime="20170725 17:42:36.764" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:36.979">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:36.979">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:36.979" starttime="20170725 17:42:36.764" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.980">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:36.980" starttime="20170725 17:42:36.979" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.981">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:36.981" starttime="20170725 17:42:36.980" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.981" starttime="20170725 17:42:36.760" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.981" starttime="20170725 17:42:36.760" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.981" starttime="20170725 17:42:36.759" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.982">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170725 17:42:36.982" starttime="20170725 17:42:36.981" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:36.984">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170725 17:42:36.984" starttime="20170725 17:42:36.983" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:36.984">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170725 17:42:36.985" starttime="20170725 17:42:36.984" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.985" starttime="20170725 17:42:36.984" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.985" starttime="20170725 17:42:36.982" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:36.985" starttime="20170725 17:42:36.982" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:37.099">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:37.099">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:37.099" starttime="20170725 17:42:36.985" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:37.101">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:37.101" starttime="20170725 17:42:37.101" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:37.102">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:37.103" starttime="20170725 17:42:37.102" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:37.103" starttime="20170725 17:42:37.101" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:37.103" starttime="20170725 17:42:37.100" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:37.103" starttime="20170725 17:42:37.100" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:37.104">Delete All Sessions</msg>
<status endtime="20170725 17:42:37.104" starttime="20170725 17:42:37.103" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:37.104">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:37.104" starttime="20170725 17:42:36.758" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:37.105">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:37.105" starttime="20170725 17:42:37.105" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:37.106">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:37.106">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:37.106">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170725 17:42:37.106" starttime="20170725 17:42:37.106" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:37.107">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170725 17:42:37.107" starttime="20170725 17:42:36.758" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:37.107">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170725 17:42:37.107" starttime="20170725 17:42:36.758" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:42:37.108">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170725 17:42:37.108" starttime="20170725 17:42:37.107" status="FAIL"></status>
</kw>
<status endtime="20170725 17:42:37.109" starttime="20170725 17:42:36.757" status="FAIL"></status>
</kw>
<status endtime="20170725 17:42:37.109" starttime="20170725 17:42:35.989" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.114">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:47.115" starttime="20170725 17:42:47.114" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.115">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:47.115" starttime="20170725 17:42:47.115" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.116">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:47.116" starttime="20170725 17:42:47.116" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.117">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:47.117" starttime="20170725 17:42:47.117" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.297">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:47.297" starttime="20170725 17:42:47.118" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:47.297">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:47.298">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:47.298" starttime="20170725 17:42:47.118" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.298">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:47.298" starttime="20170725 17:42:47.298" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.299">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:47.299" starttime="20170725 17:42:47.299" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.299" starttime="20170725 17:42:47.113" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.299" starttime="20170725 17:42:47.112" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.299" starttime="20170725 17:42:47.112" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.300">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:42:47.300" starttime="20170725 17:42:47.300" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.302">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:47.302" starttime="20170725 17:42:47.301" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.303">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:47.303" starttime="20170725 17:42:47.303" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.303" starttime="20170725 17:42:47.302" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.303" starttime="20170725 17:42:47.301" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.303" starttime="20170725 17:42:47.300" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.380">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:47.380">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:47.380" starttime="20170725 17:42:47.304" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.382">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:47.382" starttime="20170725 17:42:47.382" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.383">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:47.383" starttime="20170725 17:42:47.383" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.384" starttime="20170725 17:42:47.383" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.384" starttime="20170725 17:42:47.381" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.384" starttime="20170725 17:42:47.381" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:47.384">Delete All Sessions</msg>
<status endtime="20170725 17:42:47.384" starttime="20170725 17:42:47.384" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:47.384">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:47.384" starttime="20170725 17:42:47.111" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.385">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:47.385" starttime="20170725 17:42:47.385" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.386">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:47.386">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:47.386">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:42:47.386" starttime="20170725 17:42:47.385" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:47.386">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:42:47.386" starttime="20170725 17:42:47.111" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:47.387">${power_state} = On</msg>
<status endtime="20170725 17:42:47.387" starttime="20170725 17:42:47.110" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170725 17:42:47.387" starttime="20170725 17:42:47.387" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.388" starttime="20170725 17:42:47.110" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.391">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:47.391" starttime="20170725 17:42:47.391" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.392">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:47.392" starttime="20170725 17:42:47.392" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.393">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:47.393" starttime="20170725 17:42:47.392" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.393">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:47.393" starttime="20170725 17:42:47.393" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.577">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:47.577" starttime="20170725 17:42:47.394" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:47.577">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:47.577">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:47.577" starttime="20170725 17:42:47.394" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.578">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:47.578" starttime="20170725 17:42:47.578" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.579">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:47.579" starttime="20170725 17:42:47.578" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.579" starttime="20170725 17:42:47.390" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.579" starttime="20170725 17:42:47.390" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.579" starttime="20170725 17:42:47.389" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.580">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170725 17:42:47.580" starttime="20170725 17:42:47.579" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.582">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:47.582" starttime="20170725 17:42:47.581" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.583">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:47.583" starttime="20170725 17:42:47.583" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.583" starttime="20170725 17:42:47.582" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.583" starttime="20170725 17:42:47.580" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.584" starttime="20170725 17:42:47.580" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.657">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:47.657">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:47.657" starttime="20170725 17:42:47.584" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.659">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:47.659" starttime="20170725 17:42:47.659" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.660">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:47.660" starttime="20170725 17:42:47.660" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.660" starttime="20170725 17:42:47.659" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.661" starttime="20170725 17:42:47.658" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.661" starttime="20170725 17:42:47.658" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:47.661">Delete All Sessions</msg>
<status endtime="20170725 17:42:47.661" starttime="20170725 17:42:47.661" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:47.661">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:47.662" starttime="20170725 17:42:47.389" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.662">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:47.662" starttime="20170725 17:42:47.662" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.663">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:47.663">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:47.663">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170725 17:42:47.663" starttime="20170725 17:42:47.662" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:47.663">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170725 17:42:47.663" starttime="20170725 17:42:47.388" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:47.664">${host_state} = Running</msg>
<status endtime="20170725 17:42:47.664" starttime="20170725 17:42:47.388" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170725 17:42:47.664" starttime="20170725 17:42:47.664" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.669">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:47.669" starttime="20170725 17:42:47.668" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.670">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:47.670" starttime="20170725 17:42:47.670" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.671">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:47.671" starttime="20170725 17:42:47.670" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.672">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:47.672" starttime="20170725 17:42:47.671" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.857">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:47.858" starttime="20170725 17:42:47.672" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:47.858">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:47.858">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:47.858" starttime="20170725 17:42:47.672" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.858">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:47.859" starttime="20170725 17:42:47.858" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.859">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:47.859" starttime="20170725 17:42:47.859" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.859" starttime="20170725 17:42:47.667" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.859" starttime="20170725 17:42:47.667" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.860" starttime="20170725 17:42:47.666" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.860">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170725 17:42:47.860" starttime="20170725 17:42:47.860" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.863">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170725 17:42:47.863" starttime="20170725 17:42:47.862" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.864">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170725 17:42:47.864" starttime="20170725 17:42:47.863" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.864" starttime="20170725 17:42:47.863" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.864" starttime="20170725 17:42:47.861" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.864" starttime="20170725 17:42:47.861" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.931">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:47.931">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:47.931" starttime="20170725 17:42:47.864" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.933">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:47.933" starttime="20170725 17:42:47.932" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.934">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:47.934" starttime="20170725 17:42:47.934" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.934" starttime="20170725 17:42:47.933" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.934" starttime="20170725 17:42:47.932" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:47.934" starttime="20170725 17:42:47.931" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:47.935">Delete All Sessions</msg>
<status endtime="20170725 17:42:47.935" starttime="20170725 17:42:47.934" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:47.935">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:47.935" starttime="20170725 17:42:47.666" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:47.936">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:47.936" starttime="20170725 17:42:47.935" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:47.936">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:47.936">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:47.936">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170725 17:42:47.936" starttime="20170725 17:42:47.936" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:47.937">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170725 17:42:47.937" starttime="20170725 17:42:47.665" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:47.937">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170725 17:42:47.937" starttime="20170725 17:42:47.665" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:42:47.938">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170725 17:42:47.938" starttime="20170725 17:42:47.937" status="FAIL"></status>
</kw>
<status endtime="20170725 17:42:47.938" starttime="20170725 17:42:47.664" status="FAIL"></status>
</kw>
<status endtime="20170725 17:42:47.938" starttime="20170725 17:42:47.109" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:57.943">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:57.944" starttime="20170725 17:42:57.943" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:57.944">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:57.945" starttime="20170725 17:42:57.944" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:57.945">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:57.945" starttime="20170725 17:42:57.945" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:57.946">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:57.946" starttime="20170725 17:42:57.945" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.123">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:58.124" starttime="20170725 17:42:57.947" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:58.124">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:58.124">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:58.124" starttime="20170725 17:42:57.946" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.125">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:58.125" starttime="20170725 17:42:58.124" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.126">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:58.126" starttime="20170725 17:42:58.125" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.126" starttime="20170725 17:42:57.943" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.126" starttime="20170725 17:42:57.942" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.126" starttime="20170725 17:42:57.941" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.126">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:42:58.127" starttime="20170725 17:42:58.126" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.129">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:58.129" starttime="20170725 17:42:58.128" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.130">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:58.130" starttime="20170725 17:42:58.129" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.130" starttime="20170725 17:42:58.129" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.130" starttime="20170725 17:42:58.127" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.130" starttime="20170725 17:42:58.127" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.195">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:58.195">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:58.195" starttime="20170725 17:42:58.130" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.197">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:58.197" starttime="20170725 17:42:58.196" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.198">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:58.198" starttime="20170725 17:42:58.198" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.198" starttime="20170725 17:42:58.197" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.198" starttime="20170725 17:42:58.196" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.198" starttime="20170725 17:42:58.195" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:58.199">Delete All Sessions</msg>
<status endtime="20170725 17:42:58.199" starttime="20170725 17:42:58.199" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:58.199">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:58.199" starttime="20170725 17:42:57.940" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.200">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:58.200" starttime="20170725 17:42:58.200" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.200">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:58.201">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:58.201">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:42:58.201" starttime="20170725 17:42:58.200" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:58.201">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:42:58.201" starttime="20170725 17:42:57.940" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:58.201">${power_state} = On</msg>
<status endtime="20170725 17:42:58.201" starttime="20170725 17:42:57.939" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170725 17:42:58.202" starttime="20170725 17:42:58.202" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.202" starttime="20170725 17:42:57.939" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.205">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:58.206" starttime="20170725 17:42:58.205" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.207">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:58.207" starttime="20170725 17:42:58.206" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.207">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:58.207" starttime="20170725 17:42:58.207" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.208">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:58.208" starttime="20170725 17:42:58.207" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.386">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:58.386" starttime="20170725 17:42:58.208" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:58.386">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:58.386">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:58.386" starttime="20170725 17:42:58.208" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.387">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:58.387" starttime="20170725 17:42:58.387" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.388">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:58.388" starttime="20170725 17:42:58.387" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.388" starttime="20170725 17:42:58.205" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.388" starttime="20170725 17:42:58.204" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.388" starttime="20170725 17:42:58.204" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.389">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170725 17:42:58.389" starttime="20170725 17:42:58.389" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.391">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:58.391" starttime="20170725 17:42:58.390" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.392">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:42:58.392" starttime="20170725 17:42:58.392" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.392" starttime="20170725 17:42:58.392" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.393" starttime="20170725 17:42:58.390" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.393" starttime="20170725 17:42:58.389" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.456">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:58.457">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:58.457" starttime="20170725 17:42:58.393" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.458">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:58.458" starttime="20170725 17:42:58.458" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.459">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:58.459" starttime="20170725 17:42:58.459" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.460" starttime="20170725 17:42:58.459" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.460" starttime="20170725 17:42:58.457" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.460" starttime="20170725 17:42:58.457" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:58.460">Delete All Sessions</msg>
<status endtime="20170725 17:42:58.460" starttime="20170725 17:42:58.460" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:58.460">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:58.460" starttime="20170725 17:42:58.203" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.462">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:58.462" starttime="20170725 17:42:58.461" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.462">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:58.463">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:58.463">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170725 17:42:58.463" starttime="20170725 17:42:58.462" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:58.463">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170725 17:42:58.463" starttime="20170725 17:42:58.202" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:58.463">${host_state} = Running</msg>
<status endtime="20170725 17:42:58.463" starttime="20170725 17:42:58.202" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170725 17:42:58.464" starttime="20170725 17:42:58.464" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.468">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:42:58.468" starttime="20170725 17:42:58.467" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.469">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:42:58.469" starttime="20170725 17:42:58.468" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.469">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:42:58.469" starttime="20170725 17:42:58.469" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.470">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:42:58.470" starttime="20170725 17:42:58.470" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.710">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:42:58.710" starttime="20170725 17:42:58.473" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:58.710">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:42:58.710">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:58.710" starttime="20170725 17:42:58.470" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.711">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:58.711" starttime="20170725 17:42:58.711" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.712">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:58.712" starttime="20170725 17:42:58.711" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.712" starttime="20170725 17:42:58.467" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.712" starttime="20170725 17:42:58.466" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.712" starttime="20170725 17:42:58.466" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.713">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170725 17:42:58.713" starttime="20170725 17:42:58.713" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.715">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170725 17:42:58.715" starttime="20170725 17:42:58.714" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.716">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170725 17:42:58.716" starttime="20170725 17:42:58.716" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.716" starttime="20170725 17:42:58.715" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.716" starttime="20170725 17:42:58.714" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.716" starttime="20170725 17:42:58.713" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.840">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:42:58.841">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:58.841" starttime="20170725 17:42:58.717" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.842">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:58.842" starttime="20170725 17:42:58.842" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.843">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:42:58.843" starttime="20170725 17:42:58.843" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.844" starttime="20170725 17:42:58.843" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.844" starttime="20170725 17:42:58.841" status="PASS"></status>
</kw>
<status endtime="20170725 17:42:58.844" starttime="20170725 17:42:58.841" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:42:58.844">Delete All Sessions</msg>
<status endtime="20170725 17:42:58.844" starttime="20170725 17:42:58.844" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:58.844">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:42:58.844" starttime="20170725 17:42:58.465" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:42:58.845">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:42:58.845" starttime="20170725 17:42:58.845" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:42:58.846">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:42:58.846">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:42:58.846">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status endtime="20170725 17:42:58.846" starttime="20170725 17:42:58.845" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:58.846">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170725 17:42:58.846" starttime="20170725 17:42:58.465" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:42:58.846">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170725 17:42:58.846" starttime="20170725 17:42:58.464" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:42:58.847">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170725 17:42:58.847" starttime="20170725 17:42:58.847" status="FAIL"></status>
</kw>
<status endtime="20170725 17:42:58.847" starttime="20170725 17:42:58.464" status="FAIL"></status>
</kw>
<status endtime="20170725 17:42:58.848" starttime="20170725 17:42:57.938" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:08.896">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:43:08.896" starttime="20170725 17:43:08.895" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:08.897">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:43:08.897" starttime="20170725 17:43:08.896" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:08.897">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:43:08.897" starttime="20170725 17:43:08.897" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:08.898">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:43:08.898" starttime="20170725 17:43:08.898" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:09.197">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:43:09.197" starttime="20170725 17:43:08.899" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:09.197">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:43:09.197">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:09.197" starttime="20170725 17:43:08.898" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:09.198">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:09.198" starttime="20170725 17:43:09.197" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:09.198">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:09.198" starttime="20170725 17:43:09.198" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.199" starttime="20170725 17:43:08.895" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.199" starttime="20170725 17:43:08.894" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.199" starttime="20170725 17:43:08.852" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:09.199">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:43:09.199" starttime="20170725 17:43:09.199" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:09.202">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:43:09.202" starttime="20170725 17:43:09.201" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:09.203">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:43:09.204" starttime="20170725 17:43:09.203" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.204" starttime="20170725 17:43:09.202" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.204" starttime="20170725 17:43:09.200" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.204" starttime="20170725 17:43:09.200" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:09.398">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:43:09.398">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:09.398" starttime="20170725 17:43:09.204" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:09.400">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:43:09.400" starttime="20170725 17:43:09.400" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:09.401">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:43:09.401" starttime="20170725 17:43:09.401" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.401" starttime="20170725 17:43:09.400" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.401" starttime="20170725 17:43:09.399" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.401" starttime="20170725 17:43:09.399" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:43:09.402">Delete All Sessions</msg>
<status endtime="20170725 17:43:09.402" starttime="20170725 17:43:09.402" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:09.402">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:09.402" starttime="20170725 17:43:08.851" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:09.403">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:09.403" starttime="20170725 17:43:09.402" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:09.403">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:43:09.403">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:43:09.403">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:43:09.403" starttime="20170725 17:43:09.403" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:09.404">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:43:09.404" starttime="20170725 17:43:08.850" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:09.404">${power_state} = On</msg>
<status endtime="20170725 17:43:09.404" starttime="20170725 17:43:08.849" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170725 17:43:09.405" starttime="20170725 17:43:09.405" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.405" starttime="20170725 17:43:08.849" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:09.410">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:43:09.411" starttime="20170725 17:43:09.410" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:09.412">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:43:09.412" starttime="20170725 17:43:09.411" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:09.413">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:43:09.413" starttime="20170725 17:43:09.412" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:09.414">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:43:09.414" starttime="20170725 17:43:09.413" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:09.717">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:43:09.717" starttime="20170725 17:43:09.415" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:09.717">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:43:09.717">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:09.717" starttime="20170725 17:43:09.414" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:09.718">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:09.718" starttime="20170725 17:43:09.718" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:09.719">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:09.719" starttime="20170725 17:43:09.718" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.719" starttime="20170725 17:43:09.409" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.719" starttime="20170725 17:43:09.408" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.719" starttime="20170725 17:43:09.408" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:09.720">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170725 17:43:09.720" starttime="20170725 17:43:09.719" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:09.722">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:43:09.722" starttime="20170725 17:43:09.721" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:09.723">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:43:09.723" starttime="20170725 17:43:09.722" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.723" starttime="20170725 17:43:09.722" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.723" starttime="20170725 17:43:09.720" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.723" starttime="20170725 17:43:09.720" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:09.865">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:43:09.865">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:09.865" starttime="20170725 17:43:09.723" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:09.866">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:43:09.867" starttime="20170725 17:43:09.866" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:09.867">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:43:09.867" starttime="20170725 17:43:09.867" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.868" starttime="20170725 17:43:09.867" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.868" starttime="20170725 17:43:09.866" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:09.868" starttime="20170725 17:43:09.865" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:43:09.868">Delete All Sessions</msg>
<status endtime="20170725 17:43:09.868" starttime="20170725 17:43:09.868" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:09.868">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:09.868" starttime="20170725 17:43:09.407" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:09.869">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:09.869" starttime="20170725 17:43:09.869" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:09.870">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:43:09.870">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:43:09.870">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170725 17:43:09.870" starttime="20170725 17:43:09.869" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:09.870">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170725 17:43:09.870" starttime="20170725 17:43:09.406" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:09.870">${host_state} = Running</msg>
<status endtime="20170725 17:43:09.870" starttime="20170725 17:43:09.405" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170725 17:43:09.871" starttime="20170725 17:43:09.871" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:09.875">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:43:09.875" starttime="20170725 17:43:09.875" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:09.876">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:43:09.876" starttime="20170725 17:43:09.876" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:09.877">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:43:09.877" starttime="20170725 17:43:09.876" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:09.877">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:43:09.877" starttime="20170725 17:43:09.877" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:10.054">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:43:10.054" starttime="20170725 17:43:09.878" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:10.054">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:43:10.054">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:10.054" starttime="20170725 17:43:09.878" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:10.055">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:10.055" starttime="20170725 17:43:10.055" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:10.056">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:10.056" starttime="20170725 17:43:10.055" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:10.056" starttime="20170725 17:43:09.874" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:10.056" starttime="20170725 17:43:09.874" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:10.056" starttime="20170725 17:43:09.873" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:10.056">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170725 17:43:10.057" starttime="20170725 17:43:10.056" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:10.059">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170725 17:43:10.059" starttime="20170725 17:43:10.058" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:10.059">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170725 17:43:10.060" starttime="20170725 17:43:10.059" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:10.060" starttime="20170725 17:43:10.059" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:10.060" starttime="20170725 17:43:10.057" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:10.060" starttime="20170725 17:43:10.057" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:10.143">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:43:10.143">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:10.143" starttime="20170725 17:43:10.060" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:10.145">${msg} = Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:43:10.145" starttime="20170725 17:43:10.144" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:10.146">Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:43:10.146" starttime="20170725 17:43:10.145" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:10.146" starttime="20170725 17:43:10.145" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:10.146" starttime="20170725 17:43:10.143" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:10.146" starttime="20170725 17:43:10.143" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:43:10.146">Delete All Sessions</msg>
<status endtime="20170725 17:43:10.146" starttime="20170725 17:43:10.146" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:10.147">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:10.147" starttime="20170725 17:43:09.872" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:10.147">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:10.147" starttime="20170725 17:43:10.147" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:10.148">To JSON using : content={
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:43:10.148">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:43:10.148">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Starting OS'}</msg>
<status endtime="20170725 17:43:10.148" starttime="20170725 17:43:10.148" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:10.149">${state} = FW Progress, Starting OS</msg>
<status endtime="20170725 17:43:10.149" starttime="20170725 17:43:09.872" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:10.149">${boot_progress} = FW Progress, Starting OS</msg>
<status endtime="20170725 17:43:10.149" starttime="20170725 17:43:09.871" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<status endtime="20170725 17:43:10.150" starttime="20170725 17:43:10.149" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:10.150" starttime="20170725 17:43:09.871" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:10.150" starttime="20170725 17:43:08.848" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:10.150" starttime="20170725 17:41:43.781" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:10.150" starttime="20170725 17:41:43.381" status="PASS"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:40.151">Slept 30 seconds</msg>
<status endtime="20170725 17:43:40.151" starttime="20170725 17:43:10.151" status="PASS"></status>
</kw>
<kw name="Flush REST Sessions" library="utils">
<doc>Removes all the active session objects</doc>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:43:40.152">Delete All Sessions</msg>
<status endtime="20170725 17:43:40.152" starttime="20170725 17:43:40.152" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:40.153" starttime="20170725 17:43:40.152" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:40.153" starttime="20170725 17:41:21.927" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:40.153">Repeating keyword, round 2/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:40.154">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170725 17:43:40.154" starttime="20170725 17:43:40.154" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:40.155">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170725 17:43:40.155" starttime="20170725 17:43:40.155" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:40.158">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:43:40.158" starttime="20170725 17:43:40.158" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:40.159">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:43:40.159" starttime="20170725 17:43:40.159" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:40.160">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:43:40.160" starttime="20170725 17:43:40.159" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:40.160">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:43:40.160" starttime="20170725 17:43:40.160" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:40.346">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:43:40.346" starttime="20170725 17:43:40.161" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:40.346">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:43:40.346">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:40.346" starttime="20170725 17:43:40.161" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:40.347">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:40.347" starttime="20170725 17:43:40.346" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:40.347">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:40.347" starttime="20170725 17:43:40.347" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:40.347" starttime="20170725 17:43:40.157" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:40.348" starttime="20170725 17:43:40.157" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:40.348" starttime="20170725 17:43:40.156" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:40.348">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170725 17:43:40.348" starttime="20170725 17:43:40.348" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:40.349">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:43:40.349" starttime="20170725 17:43:40.349" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170725 17:43:40.349" starttime="20170725 17:43:40.349" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:40.351">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status endtime="20170725 17:43:40.351" starttime="20170725 17:43:40.350" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:40.352">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170725 17:43:40.352" starttime="20170725 17:43:40.352" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:40.352" starttime="20170725 17:43:40.351" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:40.352" starttime="20170725 17:43:40.350" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:40.605">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170725 17:43:40.605">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:40.605" starttime="20170725 17:43:40.352" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:40.607">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:43:40.607" starttime="20170725 17:43:40.606" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:40.608">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:43:40.608" starttime="20170725 17:43:40.608" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:40.608" starttime="20170725 17:43:40.607" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:40.608" starttime="20170725 17:43:40.606" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:43:40.609">Delete All Sessions</msg>
<status endtime="20170725 17:43:40.609" starttime="20170725 17:43:40.608" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:40.609">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:40.609" starttime="20170725 17:43:40.155" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:40.610">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:40.610" starttime="20170725 17:43:40.609" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:40.610">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:43:40.610">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:43:40.610">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170725 17:43:40.610" starttime="20170725 17:43:40.610" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:40.610" starttime="20170725 17:43:40.154" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170725 17:43:40.611" starttime="20170725 17:43:40.611" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:40.616">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:43:40.616" starttime="20170725 17:43:40.616" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:40.617">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:43:40.617" starttime="20170725 17:43:40.617" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:40.618">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:43:40.618" starttime="20170725 17:43:40.617" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:40.618">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:43:40.618" starttime="20170725 17:43:40.618" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:41.614">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:43:41.615" starttime="20170725 17:43:40.619" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:41.615">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:43:41.615">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:41.615" starttime="20170725 17:43:40.619" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:41.615">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:41.616" starttime="20170725 17:43:41.615" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:41.616">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:41.616" starttime="20170725 17:43:41.616" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:41.616" starttime="20170725 17:43:40.615" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:41.617" starttime="20170725 17:43:40.615" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:41.617" starttime="20170725 17:43:40.614" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:41.617">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:43:41.617" starttime="20170725 17:43:41.617" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:41.619">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:43:41.619" starttime="20170725 17:43:41.619" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:41.620">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:43:41.620" starttime="20170725 17:43:41.620" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:41.620" starttime="20170725 17:43:41.620" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:41.621" starttime="20170725 17:43:41.618" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:41.621" starttime="20170725 17:43:41.618" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:48.169">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:43:48.170">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:48.170" starttime="20170725 17:43:41.621" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:48.172">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:43:48.172" starttime="20170725 17:43:48.172" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:48.173">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:43:48.174" starttime="20170725 17:43:48.173" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:48.174" starttime="20170725 17:43:48.172" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:48.174" starttime="20170725 17:43:48.171" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:48.174" starttime="20170725 17:43:48.170" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:43:48.174">Delete All Sessions</msg>
<status endtime="20170725 17:43:48.174" starttime="20170725 17:43:48.174" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:48.175">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:48.175" starttime="20170725 17:43:40.613" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:48.175">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:48.175" starttime="20170725 17:43:48.175" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:48.176">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:43:48.176">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:43:48.176">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:43:48.176" starttime="20170725 17:43:48.175" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:48.176">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:43:48.176" starttime="20170725 17:43:40.613" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:48.177">${power_state} = On</msg>
<status endtime="20170725 17:43:48.177" starttime="20170725 17:43:40.612" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:43:48.177">Off != On</msg>
<status endtime="20170725 17:43:48.177" starttime="20170725 17:43:48.177" status="FAIL"></status>
</kw>
<status endtime="20170725 17:43:48.178" starttime="20170725 17:43:40.612" status="FAIL"></status>
</kw>
<status endtime="20170725 17:43:48.178" starttime="20170725 17:43:40.612" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:58.183">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:43:58.183" starttime="20170725 17:43:58.182" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:58.184">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:43:58.184" starttime="20170725 17:43:58.183" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:58.184">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:43:58.184" starttime="20170725 17:43:58.184" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:58.185">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:43:58.185" starttime="20170725 17:43:58.185" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:58.373">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:43:58.373" starttime="20170725 17:43:58.186" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:58.373">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:43:58.373">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:58.373" starttime="20170725 17:43:58.185" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:58.374">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:58.374" starttime="20170725 17:43:58.373" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:58.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:58.375" starttime="20170725 17:43:58.374" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:58.375" starttime="20170725 17:43:58.182" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:58.375" starttime="20170725 17:43:58.181" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:58.375" starttime="20170725 17:43:58.181" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:58.375">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:43:58.375" starttime="20170725 17:43:58.375" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:58.378">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:43:58.378" starttime="20170725 17:43:58.377" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:58.378">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:43:58.379" starttime="20170725 17:43:58.378" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:58.379" starttime="20170725 17:43:58.378" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:58.379" starttime="20170725 17:43:58.376" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:58.379" starttime="20170725 17:43:58.376" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:58.500">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:43:58.501">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:58.501" starttime="20170725 17:43:58.379" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:58.502">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:43:58.503" starttime="20170725 17:43:58.502" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:58.503">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:43:58.504" starttime="20170725 17:43:58.503" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:58.504" starttime="20170725 17:43:58.503" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:58.504" starttime="20170725 17:43:58.502" status="PASS"></status>
</kw>
<status endtime="20170725 17:43:58.504" starttime="20170725 17:43:58.501" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:43:58.504">Delete All Sessions</msg>
<status endtime="20170725 17:43:58.504" starttime="20170725 17:43:58.504" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:58.504">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:43:58.505" starttime="20170725 17:43:58.180" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:43:58.505">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:43:58.505" starttime="20170725 17:43:58.505" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:43:58.506">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:43:58.506">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:43:58.506">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:43:58.506" starttime="20170725 17:43:58.505" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:58.506">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:43:58.506" starttime="20170725 17:43:58.179" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:43:58.507">${power_state} = On</msg>
<status endtime="20170725 17:43:58.507" starttime="20170725 17:43:58.179" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:43:58.507">Off != On</msg>
<status endtime="20170725 17:43:58.507" starttime="20170725 17:43:58.507" status="FAIL"></status>
</kw>
<status endtime="20170725 17:43:58.507" starttime="20170725 17:43:58.179" status="FAIL"></status>
</kw>
<status endtime="20170725 17:43:58.508" starttime="20170725 17:43:58.178" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:08.515">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:44:08.515" starttime="20170725 17:44:08.515" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:08.516">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:44:08.516" starttime="20170725 17:44:08.516" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:08.517">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:44:08.517" starttime="20170725 17:44:08.516" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:08.517">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:44:08.517" starttime="20170725 17:44:08.517" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:08.823">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:44:08.823" starttime="20170725 17:44:08.518" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:08.823">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:44:08.823">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:44:08.823" starttime="20170725 17:44:08.518" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:08.824">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:44:08.824" starttime="20170725 17:44:08.824" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:08.825">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:44:08.825" starttime="20170725 17:44:08.824" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:08.825" starttime="20170725 17:44:08.514" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:08.825" starttime="20170725 17:44:08.513" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:08.825" starttime="20170725 17:44:08.512" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:08.826">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:44:08.826" starttime="20170725 17:44:08.825" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:08.828">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:44:08.829" starttime="20170725 17:44:08.828" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:08.830">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:44:08.830" starttime="20170725 17:44:08.829" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:08.830" starttime="20170725 17:44:08.829" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:08.830" starttime="20170725 17:44:08.827" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:08.830" starttime="20170725 17:44:08.826" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:09.002">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:44:09.003">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:44:09.003" starttime="20170725 17:44:08.831" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:09.004">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:44:09.005" starttime="20170725 17:44:09.004" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:09.006">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:44:09.006" starttime="20170725 17:44:09.005" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:09.006" starttime="20170725 17:44:09.005" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:09.006" starttime="20170725 17:44:09.003" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:09.006" starttime="20170725 17:44:09.003" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:44:09.007">Delete All Sessions</msg>
<status endtime="20170725 17:44:09.007" starttime="20170725 17:44:09.006" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:09.007">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:44:09.007" starttime="20170725 17:44:08.512" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:09.007">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:44:09.007" starttime="20170725 17:44:09.007" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:09.008">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:44:09.008">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:44:09.008">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:44:09.008" starttime="20170725 17:44:09.008" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:09.009">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:44:09.009" starttime="20170725 17:44:08.511" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:09.009">${power_state} = On</msg>
<status endtime="20170725 17:44:09.009" starttime="20170725 17:44:08.511" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:44:09.010">Off != On</msg>
<status endtime="20170725 17:44:09.010" starttime="20170725 17:44:09.009" status="FAIL"></status>
</kw>
<status endtime="20170725 17:44:09.010" starttime="20170725 17:44:08.511" status="FAIL"></status>
</kw>
<status endtime="20170725 17:44:09.010" starttime="20170725 17:44:08.508" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:19.016">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:44:19.016" starttime="20170725 17:44:19.015" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:19.017">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:44:19.017" starttime="20170725 17:44:19.017" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:19.018">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:44:19.018" starttime="20170725 17:44:19.018" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:19.019">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:44:19.019" starttime="20170725 17:44:19.019" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:19.204">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:44:19.204" starttime="20170725 17:44:19.020" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:19.204">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:44:19.205">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:44:19.205" starttime="20170725 17:44:19.020" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:19.205">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:44:19.205" starttime="20170725 17:44:19.205" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:19.206">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:44:19.206" starttime="20170725 17:44:19.206" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:19.206" starttime="20170725 17:44:19.015" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:19.206" starttime="20170725 17:44:19.014" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:19.206" starttime="20170725 17:44:19.013" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:19.207">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:44:19.207" starttime="20170725 17:44:19.207" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:19.209">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:44:19.209" starttime="20170725 17:44:19.208" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:19.210">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:44:19.210" starttime="20170725 17:44:19.210" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:19.210" starttime="20170725 17:44:19.209" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:19.210" starttime="20170725 17:44:19.208" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:19.210" starttime="20170725 17:44:19.207" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:19.277">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:44:19.278">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:44:19.278" starttime="20170725 17:44:19.211" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:19.279">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:44:19.279" starttime="20170725 17:44:19.279" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:19.280">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:44:19.280" starttime="20170725 17:44:19.280" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:19.280" starttime="20170725 17:44:19.279" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:19.280" starttime="20170725 17:44:19.278" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:19.281" starttime="20170725 17:44:19.278" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:44:19.281">Delete All Sessions</msg>
<status endtime="20170725 17:44:19.281" starttime="20170725 17:44:19.281" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:19.281">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:44:19.281" starttime="20170725 17:44:19.012" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:19.282">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:44:19.282" starttime="20170725 17:44:19.281" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:19.282">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:44:19.282">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:44:19.283">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:44:19.283" starttime="20170725 17:44:19.282" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:19.283">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:44:19.283" starttime="20170725 17:44:19.012" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:19.283">${power_state} = On</msg>
<status endtime="20170725 17:44:19.283" starttime="20170725 17:44:19.012" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:44:19.284">Off != On</msg>
<status endtime="20170725 17:44:19.284" starttime="20170725 17:44:19.283" status="FAIL"></status>
</kw>
<status endtime="20170725 17:44:19.284" starttime="20170725 17:44:19.011" status="FAIL"></status>
</kw>
<status endtime="20170725 17:44:19.284" starttime="20170725 17:44:19.010" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:29.293">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:44:29.294" starttime="20170725 17:44:29.293" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:29.294">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:44:29.294" starttime="20170725 17:44:29.294" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:29.295">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:44:29.295" starttime="20170725 17:44:29.295" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:29.296">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:44:29.296" starttime="20170725 17:44:29.295" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:29.506">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:44:29.507" starttime="20170725 17:44:29.297" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:29.507">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:44:29.507">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:44:29.507" starttime="20170725 17:44:29.296" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:29.507">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:44:29.508" starttime="20170725 17:44:29.507" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:29.508">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:44:29.508" starttime="20170725 17:44:29.508" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:29.508" starttime="20170725 17:44:29.288" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:29.508" starttime="20170725 17:44:29.288" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:29.509" starttime="20170725 17:44:29.287" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:29.509">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:44:29.509" starttime="20170725 17:44:29.509" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:29.511">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:44:29.511" starttime="20170725 17:44:29.511" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:29.512">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:44:29.512" starttime="20170725 17:44:29.512" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:29.512" starttime="20170725 17:44:29.511" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:29.513" starttime="20170725 17:44:29.510" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:29.513" starttime="20170725 17:44:29.509" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:29.579">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:44:29.579">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:44:29.579" starttime="20170725 17:44:29.513" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:29.581">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:44:29.581" starttime="20170725 17:44:29.581" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:29.582">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:44:29.582" starttime="20170725 17:44:29.582" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:29.583" starttime="20170725 17:44:29.581" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:29.583" starttime="20170725 17:44:29.580" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:29.583" starttime="20170725 17:44:29.580" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:44:29.583">Delete All Sessions</msg>
<status endtime="20170725 17:44:29.583" starttime="20170725 17:44:29.583" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:29.583">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:44:29.584" starttime="20170725 17:44:29.287" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:29.584">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:44:29.584" starttime="20170725 17:44:29.584" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:29.585">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:44:29.585">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:44:29.585">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:44:29.585" starttime="20170725 17:44:29.584" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:29.585">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:44:29.585" starttime="20170725 17:44:29.286" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:29.586">${power_state} = On</msg>
<status endtime="20170725 17:44:29.586" starttime="20170725 17:44:29.286" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:44:29.586">Off != On</msg>
<status endtime="20170725 17:44:29.586" starttime="20170725 17:44:29.586" status="FAIL"></status>
</kw>
<status endtime="20170725 17:44:29.586" starttime="20170725 17:44:29.285" status="FAIL"></status>
</kw>
<status endtime="20170725 17:44:29.587" starttime="20170725 17:44:29.285" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:39.592">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:44:39.592" starttime="20170725 17:44:39.591" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:39.593">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:44:39.593" starttime="20170725 17:44:39.592" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:39.593">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:44:39.593" starttime="20170725 17:44:39.593" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:39.594">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:44:39.594" starttime="20170725 17:44:39.594" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:39.802">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:44:39.802" starttime="20170725 17:44:39.595" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:39.802">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:44:39.802">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:44:39.802" starttime="20170725 17:44:39.594" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:39.803">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:44:39.803" starttime="20170725 17:44:39.803" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:39.804">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:44:39.804" starttime="20170725 17:44:39.803" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:39.804" starttime="20170725 17:44:39.591" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:39.804" starttime="20170725 17:44:39.590" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:39.804" starttime="20170725 17:44:39.590" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:39.805">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:44:39.805" starttime="20170725 17:44:39.804" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:39.807">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:44:39.807" starttime="20170725 17:44:39.806" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:39.808">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:44:39.808" starttime="20170725 17:44:39.808" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:39.808" starttime="20170725 17:44:39.807" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:39.808" starttime="20170725 17:44:39.806" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:39.808" starttime="20170725 17:44:39.805" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:39.874">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:44:39.875">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:44:39.875" starttime="20170725 17:44:39.809" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:39.876">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:44:39.877" starttime="20170725 17:44:39.876" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:39.877">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:44:39.878" starttime="20170725 17:44:39.877" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:39.878" starttime="20170725 17:44:39.877" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:39.878" starttime="20170725 17:44:39.875" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:39.878" starttime="20170725 17:44:39.875" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:44:39.878">Delete All Sessions</msg>
<status endtime="20170725 17:44:39.878" starttime="20170725 17:44:39.878" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:39.879">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:44:39.879" starttime="20170725 17:44:39.589" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:39.879">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:44:39.879" starttime="20170725 17:44:39.879" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:39.880">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:44:39.880">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:44:39.880">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:44:39.880" starttime="20170725 17:44:39.879" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:39.880">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:44:39.880" starttime="20170725 17:44:39.589" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:39.881">${power_state} = On</msg>
<status endtime="20170725 17:44:39.881" starttime="20170725 17:44:39.588" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:44:39.881">Off != On</msg>
<status endtime="20170725 17:44:39.881" starttime="20170725 17:44:39.881" status="FAIL"></status>
</kw>
<status endtime="20170725 17:44:39.881" starttime="20170725 17:44:39.588" status="FAIL"></status>
</kw>
<status endtime="20170725 17:44:39.882" starttime="20170725 17:44:39.587" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:49.888">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:44:49.888" starttime="20170725 17:44:49.887" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:49.889">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:44:49.889" starttime="20170725 17:44:49.889" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:49.890">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:44:49.890" starttime="20170725 17:44:49.889" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:49.890">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:44:49.890" starttime="20170725 17:44:49.890" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:50.114">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:44:50.115" starttime="20170725 17:44:49.891" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:50.115">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:44:50.115">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:44:50.115" starttime="20170725 17:44:49.891" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:50.115">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:44:50.116" starttime="20170725 17:44:50.115" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:50.116">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:44:50.116" starttime="20170725 17:44:50.116" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:50.117" starttime="20170725 17:44:49.886" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:50.117" starttime="20170725 17:44:49.886" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:50.117" starttime="20170725 17:44:49.885" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:50.117">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:44:50.117" starttime="20170725 17:44:50.117" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:50.119">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:44:50.119" starttime="20170725 17:44:50.119" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:50.120">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:44:50.120" starttime="20170725 17:44:50.120" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:50.121" starttime="20170725 17:44:50.120" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:50.121" starttime="20170725 17:44:50.118" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:50.121" starttime="20170725 17:44:50.118" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:50.232">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:44:50.232">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:44:50.232" starttime="20170725 17:44:50.121" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:50.234">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:44:50.234" starttime="20170725 17:44:50.234" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:50.236">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:44:50.236" starttime="20170725 17:44:50.235" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:50.236" starttime="20170725 17:44:50.235" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:50.236" starttime="20170725 17:44:50.233" status="PASS"></status>
</kw>
<status endtime="20170725 17:44:50.236" starttime="20170725 17:44:50.233" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:44:50.236">Delete All Sessions</msg>
<status endtime="20170725 17:44:50.237" starttime="20170725 17:44:50.236" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:50.237">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:44:50.237" starttime="20170725 17:44:49.884" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:44:50.237">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:44:50.237" starttime="20170725 17:44:50.237" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:44:50.238">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:44:50.238">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:44:50.238">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:44:50.238" starttime="20170725 17:44:50.238" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:50.238">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:44:50.238" starttime="20170725 17:44:49.883" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:44:50.239">${power_state} = On</msg>
<status endtime="20170725 17:44:50.239" starttime="20170725 17:44:49.883" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:44:50.239">Off != On</msg>
<status endtime="20170725 17:44:50.240" starttime="20170725 17:44:50.239" status="FAIL"></status>
</kw>
<status endtime="20170725 17:44:50.240" starttime="20170725 17:44:49.883" status="FAIL"></status>
</kw>
<status endtime="20170725 17:44:50.240" starttime="20170725 17:44:49.882" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:00.245">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:45:00.245" starttime="20170725 17:45:00.244" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:00.246">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:45:00.246" starttime="20170725 17:45:00.246" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:00.246">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:45:00.246" starttime="20170725 17:45:00.246" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:00.247">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:45:00.247" starttime="20170725 17:45:00.247" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:00.434">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:45:00.434" starttime="20170725 17:45:00.248" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:00.434">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:45:00.434">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:00.434" starttime="20170725 17:45:00.247" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:00.435">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:00.435" starttime="20170725 17:45:00.435" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:00.436">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:00.436" starttime="20170725 17:45:00.435" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:00.436" starttime="20170725 17:45:00.244" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:00.436" starttime="20170725 17:45:00.243" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:00.436" starttime="20170725 17:45:00.243" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:00.437">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:45:00.437" starttime="20170725 17:45:00.436" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:00.439">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:45:00.439" starttime="20170725 17:45:00.438" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:00.440">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:45:00.440" starttime="20170725 17:45:00.440" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:00.440" starttime="20170725 17:45:00.439" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:00.441" starttime="20170725 17:45:00.438" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:00.441" starttime="20170725 17:45:00.437" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:00.507">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:45:00.508">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:00.508" starttime="20170725 17:45:00.441" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:00.509">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:45:00.509" starttime="20170725 17:45:00.509" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:00.510">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:45:00.510" starttime="20170725 17:45:00.510" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:00.511" starttime="20170725 17:45:00.510" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:00.511" starttime="20170725 17:45:00.508" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:00.511" starttime="20170725 17:45:00.508" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:45:00.511">Delete All Sessions</msg>
<status endtime="20170725 17:45:00.511" starttime="20170725 17:45:00.511" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:00.511">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:00.511" starttime="20170725 17:45:00.242" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:00.512">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:00.512" starttime="20170725 17:45:00.512" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:00.513">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:45:00.513">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:45:00.513">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:45:00.513" starttime="20170725 17:45:00.512" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:00.513">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:45:00.513" starttime="20170725 17:45:00.242" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:00.513">${power_state} = On</msg>
<status endtime="20170725 17:45:00.514" starttime="20170725 17:45:00.241" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:45:00.514">Off != On</msg>
<status endtime="20170725 17:45:00.514" starttime="20170725 17:45:00.514" status="FAIL"></status>
</kw>
<status endtime="20170725 17:45:00.514" starttime="20170725 17:45:00.241" status="FAIL"></status>
</kw>
<status endtime="20170725 17:45:00.515" starttime="20170725 17:45:00.240" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:10.520">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:45:10.521" starttime="20170725 17:45:10.520" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:10.521">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:45:10.521" starttime="20170725 17:45:10.521" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:10.522">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:45:10.522" starttime="20170725 17:45:10.521" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:10.522">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:45:10.522" starttime="20170725 17:45:10.522" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:10.708">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:45:10.708" starttime="20170725 17:45:10.523" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:10.708">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:45:10.708">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:10.708" starttime="20170725 17:45:10.523" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:10.709">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:10.709" starttime="20170725 17:45:10.708" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:10.709">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:10.709" starttime="20170725 17:45:10.709" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:10.710" starttime="20170725 17:45:10.519" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:10.710" starttime="20170725 17:45:10.518" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:10.710" starttime="20170725 17:45:10.518" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:10.710">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:45:10.710" starttime="20170725 17:45:10.710" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:10.713">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:45:10.713" starttime="20170725 17:45:10.712" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:10.714">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:45:10.714" starttime="20170725 17:45:10.714" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:10.714" starttime="20170725 17:45:10.713" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:10.714" starttime="20170725 17:45:10.711" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:10.714" starttime="20170725 17:45:10.711" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:10.782">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:45:10.782">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:10.782" starttime="20170725 17:45:10.715" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:10.784">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:45:10.784" starttime="20170725 17:45:10.783" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:10.785">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:45:10.785" starttime="20170725 17:45:10.784" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:10.785" starttime="20170725 17:45:10.784" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:10.785" starttime="20170725 17:45:10.783" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:10.785" starttime="20170725 17:45:10.782" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:45:10.786">Delete All Sessions</msg>
<status endtime="20170725 17:45:10.786" starttime="20170725 17:45:10.786" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:10.786">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:10.786" starttime="20170725 17:45:10.517" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:10.787">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:10.787" starttime="20170725 17:45:10.786" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:10.787">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:45:10.787">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:45:10.787">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:45:10.787" starttime="20170725 17:45:10.787" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:10.788">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:45:10.788" starttime="20170725 17:45:10.517" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:10.788">${power_state} = On</msg>
<status endtime="20170725 17:45:10.788" starttime="20170725 17:45:10.516" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:45:10.789">Off != On</msg>
<status endtime="20170725 17:45:10.789" starttime="20170725 17:45:10.789" status="FAIL"></status>
</kw>
<status endtime="20170725 17:45:10.789" starttime="20170725 17:45:10.516" status="FAIL"></status>
</kw>
<status endtime="20170725 17:45:10.790" starttime="20170725 17:45:10.515" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:20.795">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:45:20.795" starttime="20170725 17:45:20.795" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:20.796">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:45:20.796" starttime="20170725 17:45:20.796" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:20.797">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:45:20.797" starttime="20170725 17:45:20.796" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:20.797">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:45:20.797" starttime="20170725 17:45:20.797" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:20.979">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:45:20.979" starttime="20170725 17:45:20.798" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:20.979">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:45:20.979">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:20.979" starttime="20170725 17:45:20.798" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:20.980">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:20.980" starttime="20170725 17:45:20.980" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:20.981">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:20.981" starttime="20170725 17:45:20.981" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:20.981" starttime="20170725 17:45:20.794" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:20.981" starttime="20170725 17:45:20.794" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:20.981" starttime="20170725 17:45:20.793" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:20.982">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:45:20.982" starttime="20170725 17:45:20.982" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:20.984">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:45:20.984" starttime="20170725 17:45:20.983" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:20.985">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:45:20.985" starttime="20170725 17:45:20.985" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:20.985" starttime="20170725 17:45:20.984" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:20.985" starttime="20170725 17:45:20.983" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:20.985" starttime="20170725 17:45:20.982" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:21.053">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:45:21.053">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:21.053" starttime="20170725 17:45:20.986" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:21.055">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:45:21.055" starttime="20170725 17:45:21.055" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:21.056">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:45:21.056" starttime="20170725 17:45:21.056" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:21.056" starttime="20170725 17:45:21.055" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:21.057" starttime="20170725 17:45:21.054" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:21.057" starttime="20170725 17:45:21.054" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:45:21.057">Delete All Sessions</msg>
<status endtime="20170725 17:45:21.057" starttime="20170725 17:45:21.057" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:21.058">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:21.058" starttime="20170725 17:45:20.792" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:21.058">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:21.058" starttime="20170725 17:45:21.058" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:21.059">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:45:21.059">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:45:21.059">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:45:21.059" starttime="20170725 17:45:21.059" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:21.059">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:45:21.060" starttime="20170725 17:45:20.792" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:21.060">${power_state} = On</msg>
<status endtime="20170725 17:45:21.060" starttime="20170725 17:45:20.791" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:45:21.060">Off != On</msg>
<status endtime="20170725 17:45:21.061" starttime="20170725 17:45:21.060" status="FAIL"></status>
</kw>
<status endtime="20170725 17:45:21.061" starttime="20170725 17:45:20.791" status="FAIL"></status>
</kw>
<status endtime="20170725 17:45:21.061" starttime="20170725 17:45:20.790" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:31.066">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:45:31.067" starttime="20170725 17:45:31.066" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:31.067">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:45:31.067" starttime="20170725 17:45:31.067" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:31.068">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:45:31.068" starttime="20170725 17:45:31.068" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:31.069">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:45:31.069" starttime="20170725 17:45:31.068" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:31.304">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:45:31.304" starttime="20170725 17:45:31.069" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:31.305">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:45:31.305">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:31.305" starttime="20170725 17:45:31.069" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:31.305">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:31.305" starttime="20170725 17:45:31.305" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:31.306">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:31.306" starttime="20170725 17:45:31.306" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:31.306" starttime="20170725 17:45:31.065" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:31.306" starttime="20170725 17:45:31.065" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:31.306" starttime="20170725 17:45:31.064" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:31.307">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:45:31.307" starttime="20170725 17:45:31.307" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:31.309">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:45:31.310" starttime="20170725 17:45:31.309" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:31.310">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:45:31.311" starttime="20170725 17:45:31.310" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:31.311" starttime="20170725 17:45:31.310" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:31.311" starttime="20170725 17:45:31.308" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:31.311" starttime="20170725 17:45:31.307" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:31.384">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:45:31.384">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:31.384" starttime="20170725 17:45:31.311" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:31.386">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:45:31.386" starttime="20170725 17:45:31.385" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:31.387">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:45:31.387" starttime="20170725 17:45:31.387" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:31.388" starttime="20170725 17:45:31.386" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:31.388" starttime="20170725 17:45:31.385" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:31.388" starttime="20170725 17:45:31.385" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:45:31.388">Delete All Sessions</msg>
<status endtime="20170725 17:45:31.388" starttime="20170725 17:45:31.388" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:31.388">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:31.388" starttime="20170725 17:45:31.063" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:31.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:31.389" starttime="20170725 17:45:31.389" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:31.390">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:45:31.390">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:45:31.390">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:45:31.390" starttime="20170725 17:45:31.389" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:31.390">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:45:31.390" starttime="20170725 17:45:31.063" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:31.390">${power_state} = On</msg>
<status endtime="20170725 17:45:31.390" starttime="20170725 17:45:31.062" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:45:31.391">Off != On</msg>
<status endtime="20170725 17:45:31.391" starttime="20170725 17:45:31.391" status="FAIL"></status>
</kw>
<status endtime="20170725 17:45:31.391" starttime="20170725 17:45:31.062" status="FAIL"></status>
</kw>
<status endtime="20170725 17:45:31.391" starttime="20170725 17:45:31.061" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:41.396">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:45:41.397" starttime="20170725 17:45:41.396" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:41.398">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:45:41.398" starttime="20170725 17:45:41.397" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:41.398">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:45:41.398" starttime="20170725 17:45:41.398" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:41.399">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:45:41.399" starttime="20170725 17:45:41.399" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:41.579">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:45:41.579" starttime="20170725 17:45:41.400" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:41.579">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:45:41.579">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:41.579" starttime="20170725 17:45:41.399" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:41.580">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:41.580" starttime="20170725 17:45:41.579" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:41.581">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:41.581" starttime="20170725 17:45:41.580" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:41.581" starttime="20170725 17:45:41.396" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:41.581" starttime="20170725 17:45:41.395" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:41.581" starttime="20170725 17:45:41.395" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:41.581">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:45:41.582" starttime="20170725 17:45:41.581" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:41.584">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:45:41.584" starttime="20170725 17:45:41.583" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:41.584">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:45:41.585" starttime="20170725 17:45:41.584" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:41.585" starttime="20170725 17:45:41.584" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:41.585" starttime="20170725 17:45:41.582" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:41.585" starttime="20170725 17:45:41.582" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:41.695">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:45:41.695">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:41.695" starttime="20170725 17:45:41.585" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:41.697">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:45:41.697" starttime="20170725 17:45:41.696" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:41.697">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:45:41.698" starttime="20170725 17:45:41.697" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:41.698" starttime="20170725 17:45:41.697" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:41.698" starttime="20170725 17:45:41.695" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:41.698" starttime="20170725 17:45:41.695" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:45:41.698">Delete All Sessions</msg>
<status endtime="20170725 17:45:41.698" starttime="20170725 17:45:41.698" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:41.699">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:41.699" starttime="20170725 17:45:41.394" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:41.699">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:41.699" starttime="20170725 17:45:41.699" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:41.700">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:45:41.700">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:45:41.700">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:45:41.700" starttime="20170725 17:45:41.700" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:41.700">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:45:41.700" starttime="20170725 17:45:41.393" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:41.701">${power_state} = On</msg>
<status endtime="20170725 17:45:41.701" starttime="20170725 17:45:41.393" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:45:41.701">Off != On</msg>
<status endtime="20170725 17:45:41.701" starttime="20170725 17:45:41.701" status="FAIL"></status>
</kw>
<status endtime="20170725 17:45:41.702" starttime="20170725 17:45:41.393" status="FAIL"></status>
</kw>
<status endtime="20170725 17:45:41.702" starttime="20170725 17:45:41.392" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:51.710">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:45:51.710" starttime="20170725 17:45:51.710" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:51.711">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:45:51.711" starttime="20170725 17:45:51.711" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:51.712">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:45:51.712" starttime="20170725 17:45:51.711" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:51.712">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:45:51.712" starttime="20170725 17:45:51.712" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:51.909">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:45:51.909" starttime="20170725 17:45:51.713" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:51.909">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:45:51.909">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:51.909" starttime="20170725 17:45:51.713" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:51.910">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:51.910" starttime="20170725 17:45:51.909" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:51.910">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:51.911" starttime="20170725 17:45:51.910" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:51.911" starttime="20170725 17:45:51.706" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:51.911" starttime="20170725 17:45:51.705" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:51.911" starttime="20170725 17:45:51.705" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:51.912">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:45:51.912" starttime="20170725 17:45:51.911" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:51.914">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:45:51.914" starttime="20170725 17:45:51.913" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:51.915">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:45:51.915" starttime="20170725 17:45:51.914" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:51.915" starttime="20170725 17:45:51.914" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:51.915" starttime="20170725 17:45:51.912" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:51.915" starttime="20170725 17:45:51.912" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:51.980">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:45:51.980">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:51.980" starttime="20170725 17:45:51.915" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:51.982">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:45:51.982" starttime="20170725 17:45:51.982" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:51.983">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:45:51.983" starttime="20170725 17:45:51.983" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:51.984" starttime="20170725 17:45:51.982" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:51.984" starttime="20170725 17:45:51.981" status="PASS"></status>
</kw>
<status endtime="20170725 17:45:51.984" starttime="20170725 17:45:51.981" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:45:51.984">Delete All Sessions</msg>
<status endtime="20170725 17:45:51.984" starttime="20170725 17:45:51.984" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:51.984">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:45:51.984" starttime="20170725 17:45:51.704" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:45:51.985">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:45:51.985" starttime="20170725 17:45:51.985" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:45:51.986">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:45:51.986">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:45:51.986">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:45:51.986" starttime="20170725 17:45:51.985" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:51.986">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:45:51.986" starttime="20170725 17:45:51.703" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:45:51.986">${power_state} = On</msg>
<status endtime="20170725 17:45:51.986" starttime="20170725 17:45:51.703" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:45:51.987">Off != On</msg>
<status endtime="20170725 17:45:51.987" starttime="20170725 17:45:51.987" status="FAIL"></status>
</kw>
<status endtime="20170725 17:45:51.987" starttime="20170725 17:45:51.703" status="FAIL"></status>
</kw>
<status endtime="20170725 17:45:51.988" starttime="20170725 17:45:51.702" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:01.993">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:46:01.993" starttime="20170725 17:46:01.992" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:01.994">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:46:01.994" starttime="20170725 17:46:01.993" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:01.994">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:46:01.994" starttime="20170725 17:46:01.994" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:01.995">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:46:01.995" starttime="20170725 17:46:01.995" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:02.194">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:46:02.194" starttime="20170725 17:46:01.996" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:02.194">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:46:02.194">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:02.194" starttime="20170725 17:46:01.995" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:02.195">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:02.195" starttime="20170725 17:46:02.194" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:02.195">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:02.196" starttime="20170725 17:46:02.195" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:02.196" starttime="20170725 17:46:01.992" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:02.196" starttime="20170725 17:46:01.991" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:02.196" starttime="20170725 17:46:01.991" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:02.197">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:46:02.197" starttime="20170725 17:46:02.196" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:02.199">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:46:02.199" starttime="20170725 17:46:02.198" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:02.200">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:46:02.200" starttime="20170725 17:46:02.199" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:02.200" starttime="20170725 17:46:02.199" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:02.200" starttime="20170725 17:46:02.197" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:02.200" starttime="20170725 17:46:02.197" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:02.266">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:46:02.267">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:02.267" starttime="20170725 17:46:02.200" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:02.269">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:46:02.269" starttime="20170725 17:46:02.268" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:02.270">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:46:02.270" starttime="20170725 17:46:02.269" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:02.270" starttime="20170725 17:46:02.269" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:02.270" starttime="20170725 17:46:02.268" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:02.270" starttime="20170725 17:46:02.267" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:46:02.270">Delete All Sessions</msg>
<status endtime="20170725 17:46:02.270" starttime="20170725 17:46:02.270" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:02.271">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:02.271" starttime="20170725 17:46:01.990" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:02.271">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:02.272" starttime="20170725 17:46:02.271" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:02.272">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:46:02.272">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:46:02.273">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:46:02.273" starttime="20170725 17:46:02.272" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:02.273">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:46:02.273" starttime="20170725 17:46:01.989" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:02.273">${power_state} = On</msg>
<status endtime="20170725 17:46:02.273" starttime="20170725 17:46:01.989" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:46:02.274">Off != On</msg>
<status endtime="20170725 17:46:02.274" starttime="20170725 17:46:02.274" status="FAIL"></status>
</kw>
<status endtime="20170725 17:46:02.275" starttime="20170725 17:46:01.989" status="FAIL"></status>
</kw>
<status endtime="20170725 17:46:02.275" starttime="20170725 17:46:01.988" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:12.280">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:46:12.281" starttime="20170725 17:46:12.280" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:12.281">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:46:12.281" starttime="20170725 17:46:12.281" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:12.282">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:46:12.282" starttime="20170725 17:46:12.282" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:12.283">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:46:12.283" starttime="20170725 17:46:12.282" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:12.468">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:46:12.469" starttime="20170725 17:46:12.283" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:12.469">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:46:12.469">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:12.469" starttime="20170725 17:46:12.283" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:12.470">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:12.470" starttime="20170725 17:46:12.469" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:12.471">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:12.471" starttime="20170725 17:46:12.470" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:12.471" starttime="20170725 17:46:12.279" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:12.471" starttime="20170725 17:46:12.279" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:12.472" starttime="20170725 17:46:12.278" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:12.473">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:46:12.473" starttime="20170725 17:46:12.472" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:12.476">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:46:12.476" starttime="20170725 17:46:12.475" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:12.477">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:46:12.477" starttime="20170725 17:46:12.477" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:12.477" starttime="20170725 17:46:12.476" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:12.477" starttime="20170725 17:46:12.474" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:12.477" starttime="20170725 17:46:12.473" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:12.545">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:46:12.545">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:12.545" starttime="20170725 17:46:12.478" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:12.547">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:46:12.547" starttime="20170725 17:46:12.546" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:12.548">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:46:12.548" starttime="20170725 17:46:12.548" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:12.549" starttime="20170725 17:46:12.547" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:12.549" starttime="20170725 17:46:12.546" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:12.549" starttime="20170725 17:46:12.545" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:46:12.549">Delete All Sessions</msg>
<status endtime="20170725 17:46:12.549" starttime="20170725 17:46:12.549" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:12.550">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:12.550" starttime="20170725 17:46:12.277" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:12.550">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:12.550" starttime="20170725 17:46:12.550" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:12.551">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:46:12.551">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:46:12.551">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:46:12.551" starttime="20170725 17:46:12.550" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:12.551">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:46:12.551" starttime="20170725 17:46:12.277" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:12.552">${power_state} = On</msg>
<status endtime="20170725 17:46:12.552" starttime="20170725 17:46:12.276" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:46:12.552">Off != On</msg>
<status endtime="20170725 17:46:12.552" starttime="20170725 17:46:12.552" status="FAIL"></status>
</kw>
<status endtime="20170725 17:46:12.553" starttime="20170725 17:46:12.276" status="FAIL"></status>
</kw>
<status endtime="20170725 17:46:12.553" starttime="20170725 17:46:12.275" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:22.558">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:46:22.559" starttime="20170725 17:46:22.558" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:22.559">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:46:22.559" starttime="20170725 17:46:22.559" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:22.560">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:46:22.560" starttime="20170725 17:46:22.559" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:22.560">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:46:22.560" starttime="20170725 17:46:22.560" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:22.799">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:46:22.799" starttime="20170725 17:46:22.561" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:22.799">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:46:22.799">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:22.799" starttime="20170725 17:46:22.561" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:22.800">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:22.800" starttime="20170725 17:46:22.800" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:22.801">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:22.801" starttime="20170725 17:46:22.800" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:22.801" starttime="20170725 17:46:22.557" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:22.801" starttime="20170725 17:46:22.557" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:22.801" starttime="20170725 17:46:22.556" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:22.802">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:46:22.802" starttime="20170725 17:46:22.802" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:22.805">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:46:22.805" starttime="20170725 17:46:22.804" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:22.806">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:46:22.807" starttime="20170725 17:46:22.806" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:22.807" starttime="20170725 17:46:22.806" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:22.807" starttime="20170725 17:46:22.803" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:22.807" starttime="20170725 17:46:22.803" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:22.876">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:46:22.876">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:22.876" starttime="20170725 17:46:22.807" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:22.878">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:46:22.878" starttime="20170725 17:46:22.878" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:22.879">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:46:22.879" starttime="20170725 17:46:22.879" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:22.879" starttime="20170725 17:46:22.878" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:22.879" starttime="20170725 17:46:22.877" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:22.880" starttime="20170725 17:46:22.877" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:46:22.880">Delete All Sessions</msg>
<status endtime="20170725 17:46:22.880" starttime="20170725 17:46:22.880" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:22.880">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:22.880" starttime="20170725 17:46:22.555" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:22.881">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:22.881" starttime="20170725 17:46:22.880" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:22.881">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:46:22.881">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:46:22.882">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:46:22.882" starttime="20170725 17:46:22.881" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:22.882">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:46:22.882" starttime="20170725 17:46:22.555" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:22.882">${power_state} = On</msg>
<status endtime="20170725 17:46:22.882" starttime="20170725 17:46:22.554" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:46:22.883">Off != On</msg>
<status endtime="20170725 17:46:22.883" starttime="20170725 17:46:22.882" status="FAIL"></status>
</kw>
<status endtime="20170725 17:46:22.883" starttime="20170725 17:46:22.554" status="FAIL"></status>
</kw>
<status endtime="20170725 17:46:22.883" starttime="20170725 17:46:22.553" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:32.889">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:46:32.890" starttime="20170725 17:46:32.889" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:32.890">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:46:32.890" starttime="20170725 17:46:32.890" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:32.891">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:46:32.891" starttime="20170725 17:46:32.890" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:32.892">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:46:32.892" starttime="20170725 17:46:32.891" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:33.079">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:46:33.079" starttime="20170725 17:46:32.892" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:33.079">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:46:33.079">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:33.079" starttime="20170725 17:46:32.892" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:33.080">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:33.080" starttime="20170725 17:46:33.079" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:33.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:33.080" starttime="20170725 17:46:33.080" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:33.080" starttime="20170725 17:46:32.888" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:33.081" starttime="20170725 17:46:32.887" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:33.081" starttime="20170725 17:46:32.887" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:33.081">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:46:33.081" starttime="20170725 17:46:33.081" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:33.083">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:46:33.083" starttime="20170725 17:46:33.083" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:33.084">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:46:33.084" starttime="20170725 17:46:33.084" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:33.084" starttime="20170725 17:46:33.083" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:33.085" starttime="20170725 17:46:33.082" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:33.085" starttime="20170725 17:46:33.082" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:33.151">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:46:33.151">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:33.151" starttime="20170725 17:46:33.085" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:33.153">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:46:33.153" starttime="20170725 17:46:33.152" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:33.154">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:46:33.154" starttime="20170725 17:46:33.153" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:33.154" starttime="20170725 17:46:33.153" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:33.154" starttime="20170725 17:46:33.152" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:33.154" starttime="20170725 17:46:33.151" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:46:33.155">Delete All Sessions</msg>
<status endtime="20170725 17:46:33.155" starttime="20170725 17:46:33.155" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:33.155">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:33.156" starttime="20170725 17:46:32.886" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:33.156">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:33.156" starttime="20170725 17:46:33.156" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:33.157">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:46:33.157">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:46:33.157">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:46:33.157" starttime="20170725 17:46:33.156" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:33.157">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:46:33.157" starttime="20170725 17:46:32.885" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:33.158">${power_state} = On</msg>
<status endtime="20170725 17:46:33.158" starttime="20170725 17:46:32.885" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:46:33.158">Off != On</msg>
<status endtime="20170725 17:46:33.158" starttime="20170725 17:46:33.158" status="FAIL"></status>
</kw>
<status endtime="20170725 17:46:33.158" starttime="20170725 17:46:32.885" status="FAIL"></status>
</kw>
<status endtime="20170725 17:46:33.159" starttime="20170725 17:46:32.884" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:43.164">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:46:43.164" starttime="20170725 17:46:43.163" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:43.165">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:46:43.165" starttime="20170725 17:46:43.164" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:43.165">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:46:43.165" starttime="20170725 17:46:43.165" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:43.166">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:46:43.166" starttime="20170725 17:46:43.166" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:43.348">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:46:43.348" starttime="20170725 17:46:43.167" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:43.348">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:46:43.348">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:43.348" starttime="20170725 17:46:43.166" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:43.349">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:43.349" starttime="20170725 17:46:43.349" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:43.350">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:43.350" starttime="20170725 17:46:43.349" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:43.350" starttime="20170725 17:46:43.163" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:43.350" starttime="20170725 17:46:43.162" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:43.350" starttime="20170725 17:46:43.162" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:43.351">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:46:43.351" starttime="20170725 17:46:43.350" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:43.353">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:46:43.353" starttime="20170725 17:46:43.352" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:43.354">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:46:43.354" starttime="20170725 17:46:43.353" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:43.354" starttime="20170725 17:46:43.353" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:43.354" starttime="20170725 17:46:43.351" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:43.354" starttime="20170725 17:46:43.351" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:43.421">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:46:43.421">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:43.421" starttime="20170725 17:46:43.354" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:43.423">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:46:43.423" starttime="20170725 17:46:43.422" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:43.424">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:46:43.424" starttime="20170725 17:46:43.423" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:43.424" starttime="20170725 17:46:43.423" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:43.424" starttime="20170725 17:46:43.422" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:43.424" starttime="20170725 17:46:43.421" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:46:43.424">Delete All Sessions</msg>
<status endtime="20170725 17:46:43.424" starttime="20170725 17:46:43.424" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:43.425">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:43.425" starttime="20170725 17:46:43.161" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:43.425">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:43.425" starttime="20170725 17:46:43.425" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:43.426">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:46:43.426">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:46:43.426">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:46:43.426" starttime="20170725 17:46:43.426" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:43.426">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:46:43.426" starttime="20170725 17:46:43.161" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:43.427">${power_state} = On</msg>
<status endtime="20170725 17:46:43.427" starttime="20170725 17:46:43.160" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:46:43.427">Off != On</msg>
<status endtime="20170725 17:46:43.428" starttime="20170725 17:46:43.427" status="FAIL"></status>
</kw>
<status endtime="20170725 17:46:43.428" starttime="20170725 17:46:43.160" status="FAIL"></status>
</kw>
<status endtime="20170725 17:46:43.428" starttime="20170725 17:46:43.159" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:53.434">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:46:53.435" starttime="20170725 17:46:53.434" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:53.435">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:46:53.435" starttime="20170725 17:46:53.435" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:53.436">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:46:53.436" starttime="20170725 17:46:53.436" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:53.437">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:46:53.437" starttime="20170725 17:46:53.436" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:53.619">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:46:53.619" starttime="20170725 17:46:53.437" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:53.619">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:46:53.619">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:53.619" starttime="20170725 17:46:53.437" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:53.620">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:53.620" starttime="20170725 17:46:53.619" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:53.620">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:53.620" starttime="20170725 17:46:53.620" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:53.620" starttime="20170725 17:46:53.433" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:53.621" starttime="20170725 17:46:53.432" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:53.621" starttime="20170725 17:46:53.432" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:53.621">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:46:53.621" starttime="20170725 17:46:53.621" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:53.623">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:46:53.623" starttime="20170725 17:46:53.623" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:53.624">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:46:53.624" starttime="20170725 17:46:53.624" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:53.624" starttime="20170725 17:46:53.624" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:53.625" starttime="20170725 17:46:53.622" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:53.625" starttime="20170725 17:46:53.622" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:53.691">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:46:53.691">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:53.691" starttime="20170725 17:46:53.625" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:53.693">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:46:53.693" starttime="20170725 17:46:53.692" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:53.694">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:46:53.694" starttime="20170725 17:46:53.693" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:53.694" starttime="20170725 17:46:53.693" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:53.694" starttime="20170725 17:46:53.691" status="PASS"></status>
</kw>
<status endtime="20170725 17:46:53.694" starttime="20170725 17:46:53.691" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:46:53.695">Delete All Sessions</msg>
<status endtime="20170725 17:46:53.695" starttime="20170725 17:46:53.694" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:53.695">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:46:53.695" starttime="20170725 17:46:53.431" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:46:53.695">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:46:53.696" starttime="20170725 17:46:53.695" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:46:53.696">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:46:53.696">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:46:53.696">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:46:53.696" starttime="20170725 17:46:53.696" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:53.697">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:46:53.697" starttime="20170725 17:46:53.430" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:46:53.697">${power_state} = On</msg>
<status endtime="20170725 17:46:53.697" starttime="20170725 17:46:53.429" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:46:53.698">Off != On</msg>
<status endtime="20170725 17:46:53.698" starttime="20170725 17:46:53.697" status="FAIL"></status>
</kw>
<status endtime="20170725 17:46:53.698" starttime="20170725 17:46:53.429" status="FAIL"></status>
</kw>
<status endtime="20170725 17:46:53.698" starttime="20170725 17:46:53.428" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:03.703">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:47:03.703" starttime="20170725 17:47:03.702" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:03.704">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:47:03.704" starttime="20170725 17:47:03.703" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:03.704">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:47:03.704" starttime="20170725 17:47:03.704" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:03.705">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:47:03.705" starttime="20170725 17:47:03.705" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:03.946">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:47:03.946" starttime="20170725 17:47:03.706" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:03.946">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:47:03.946">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:03.946" starttime="20170725 17:47:03.705" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:03.947">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:03.947" starttime="20170725 17:47:03.947" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:03.948">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:03.948" starttime="20170725 17:47:03.947" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:03.948" starttime="20170725 17:47:03.702" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:03.948" starttime="20170725 17:47:03.702" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:03.948" starttime="20170725 17:47:03.701" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:03.949">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:47:03.949" starttime="20170725 17:47:03.948" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:03.951">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:47:03.951" starttime="20170725 17:47:03.950" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:03.952">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:47:03.952" starttime="20170725 17:47:03.951" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:03.952" starttime="20170725 17:47:03.951" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:03.952" starttime="20170725 17:47:03.949" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:03.952" starttime="20170725 17:47:03.949" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:04.018">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:47:04.018">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:04.018" starttime="20170725 17:47:03.952" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:04.020">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:47:04.020" starttime="20170725 17:47:04.019" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:04.021">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:47:04.021" starttime="20170725 17:47:04.020" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:04.021" starttime="20170725 17:47:04.020" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:04.021" starttime="20170725 17:47:04.019" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:04.021" starttime="20170725 17:47:04.018" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:47:04.021">Delete All Sessions</msg>
<status endtime="20170725 17:47:04.022" starttime="20170725 17:47:04.021" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:04.022">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:04.022" starttime="20170725 17:47:03.700" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:04.022">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:04.023" starttime="20170725 17:47:04.022" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:04.023">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:47:04.023">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:47:04.023">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:47:04.023" starttime="20170725 17:47:04.023" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:04.024">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:47:04.024" starttime="20170725 17:47:03.700" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:04.024">${power_state} = On</msg>
<status endtime="20170725 17:47:04.024" starttime="20170725 17:47:03.699" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:47:04.025">Off != On</msg>
<status endtime="20170725 17:47:04.025" starttime="20170725 17:47:04.024" status="FAIL"></status>
</kw>
<status endtime="20170725 17:47:04.025" starttime="20170725 17:47:03.699" status="FAIL"></status>
</kw>
<status endtime="20170725 17:47:04.025" starttime="20170725 17:47:03.698" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:14.033">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:47:14.033" starttime="20170725 17:47:14.033" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:14.034">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:47:14.034" starttime="20170725 17:47:14.034" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:14.035">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:47:14.035" starttime="20170725 17:47:14.034" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:14.035">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:47:14.036" starttime="20170725 17:47:14.035" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:14.234">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:47:14.234" starttime="20170725 17:47:14.036" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:14.234">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:47:14.235">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:14.235" starttime="20170725 17:47:14.036" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:14.235">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:14.235" starttime="20170725 17:47:14.235" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:14.236">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:14.236" starttime="20170725 17:47:14.236" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:14.236" starttime="20170725 17:47:14.029" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:14.236" starttime="20170725 17:47:14.029" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:14.236" starttime="20170725 17:47:14.028" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:14.237">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:47:14.237" starttime="20170725 17:47:14.237" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:14.239">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:47:14.239" starttime="20170725 17:47:14.238" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:14.240">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:47:14.240" starttime="20170725 17:47:14.240" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:14.240" starttime="20170725 17:47:14.239" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:14.240" starttime="20170725 17:47:14.238" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:14.241" starttime="20170725 17:47:14.237" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:14.308">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:47:14.308">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:14.308" starttime="20170725 17:47:14.241" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:14.310">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:47:14.310" starttime="20170725 17:47:14.310" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:14.311">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:47:14.311" starttime="20170725 17:47:14.311" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:14.312" starttime="20170725 17:47:14.310" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:14.312" starttime="20170725 17:47:14.309" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:14.312" starttime="20170725 17:47:14.309" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:47:14.312">Delete All Sessions</msg>
<status endtime="20170725 17:47:14.312" starttime="20170725 17:47:14.312" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:14.312">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:14.312" starttime="20170725 17:47:14.027" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:14.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:14.313" starttime="20170725 17:47:14.313" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:14.314">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:47:14.314">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:47:14.314">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:47:14.314" starttime="20170725 17:47:14.313" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:14.314">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:47:14.314" starttime="20170725 17:47:14.027" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:14.314">${power_state} = On</msg>
<status endtime="20170725 17:47:14.314" starttime="20170725 17:47:14.026" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:47:14.315">Off != On</msg>
<status endtime="20170725 17:47:14.315" starttime="20170725 17:47:14.315" status="FAIL"></status>
</kw>
<status endtime="20170725 17:47:14.315" starttime="20170725 17:47:14.026" status="FAIL"></status>
</kw>
<status endtime="20170725 17:47:14.315" starttime="20170725 17:47:14.025" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:24.320">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:47:24.321" starttime="20170725 17:47:24.320" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:24.321">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:47:24.321" starttime="20170725 17:47:24.321" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:24.322">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:47:24.322" starttime="20170725 17:47:24.322" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:24.323">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:47:24.323" starttime="20170725 17:47:24.322" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:24.505">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:47:24.505" starttime="20170725 17:47:24.323" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:24.505">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:47:24.505">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:24.505" starttime="20170725 17:47:24.323" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:24.506">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:24.506" starttime="20170725 17:47:24.506" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:24.507">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:24.507" starttime="20170725 17:47:24.506" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:24.507" starttime="20170725 17:47:24.320" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:24.507" starttime="20170725 17:47:24.319" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:24.507" starttime="20170725 17:47:24.318" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:24.507">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:47:24.508" starttime="20170725 17:47:24.507" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:24.510">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:47:24.510" starttime="20170725 17:47:24.509" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:24.511">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:47:24.511" starttime="20170725 17:47:24.510" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:24.511" starttime="20170725 17:47:24.510" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:24.511" starttime="20170725 17:47:24.508" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:24.511" starttime="20170725 17:47:24.508" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:24.577">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:47:24.578">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:24.578" starttime="20170725 17:47:24.511" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:24.579">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:47:24.579" starttime="20170725 17:47:24.579" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:24.580">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:47:24.580" starttime="20170725 17:47:24.580" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:24.581" starttime="20170725 17:47:24.580" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:24.581" starttime="20170725 17:47:24.578" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:24.581" starttime="20170725 17:47:24.578" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:47:24.581">Delete All Sessions</msg>
<status endtime="20170725 17:47:24.581" starttime="20170725 17:47:24.581" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:24.581">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:24.581" starttime="20170725 17:47:24.318" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:24.582">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:24.582" starttime="20170725 17:47:24.582" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:24.583">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:47:24.583">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:47:24.583">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:47:24.583" starttime="20170725 17:47:24.582" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:24.583">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:47:24.583" starttime="20170725 17:47:24.317" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:24.584">${power_state} = On</msg>
<status endtime="20170725 17:47:24.584" starttime="20170725 17:47:24.317" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:47:24.584">Off != On</msg>
<status endtime="20170725 17:47:24.584" starttime="20170725 17:47:24.584" status="FAIL"></status>
</kw>
<status endtime="20170725 17:47:24.585" starttime="20170725 17:47:24.316" status="FAIL"></status>
</kw>
<status endtime="20170725 17:47:24.585" starttime="20170725 17:47:24.316" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:34.592">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:47:34.593" starttime="20170725 17:47:34.592" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:34.593">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:47:34.594" starttime="20170725 17:47:34.593" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:34.594">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:47:34.595" starttime="20170725 17:47:34.594" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:34.595">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:47:34.595" starttime="20170725 17:47:34.595" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:34.776">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:47:34.776" starttime="20170725 17:47:34.596" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:34.776">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:47:34.777">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:34.777" starttime="20170725 17:47:34.596" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:34.777">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:34.777" starttime="20170725 17:47:34.777" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:34.778">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:34.778" starttime="20170725 17:47:34.778" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:34.778" starttime="20170725 17:47:34.590" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:34.778" starttime="20170725 17:47:34.590" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:34.778" starttime="20170725 17:47:34.589" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:34.779">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:47:34.779" starttime="20170725 17:47:34.779" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:34.781">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:47:34.781" starttime="20170725 17:47:34.781" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:34.782">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:47:34.782" starttime="20170725 17:47:34.782" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:34.782" starttime="20170725 17:47:34.781" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:34.782" starttime="20170725 17:47:34.780" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:34.783" starttime="20170725 17:47:34.779" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:34.849">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:47:34.849">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:34.849" starttime="20170725 17:47:34.783" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:34.851">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:47:34.851" starttime="20170725 17:47:34.850" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:34.852">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:47:34.852" starttime="20170725 17:47:34.851" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:34.852" starttime="20170725 17:47:34.851" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:34.852" starttime="20170725 17:47:34.850" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:34.852" starttime="20170725 17:47:34.849" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:47:34.853">Delete All Sessions</msg>
<status endtime="20170725 17:47:34.853" starttime="20170725 17:47:34.853" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:34.853">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:34.853" starttime="20170725 17:47:34.588" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:34.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:34.854" starttime="20170725 17:47:34.854" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:34.854">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:47:34.855">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:47:34.855">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:47:34.855" starttime="20170725 17:47:34.854" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:34.855">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:47:34.855" starttime="20170725 17:47:34.587" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:34.855">${power_state} = On</msg>
<status endtime="20170725 17:47:34.855" starttime="20170725 17:47:34.587" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:47:34.856">Off != On</msg>
<status endtime="20170725 17:47:34.856" starttime="20170725 17:47:34.856" status="FAIL"></status>
</kw>
<status endtime="20170725 17:47:34.856" starttime="20170725 17:47:34.586" status="FAIL"></status>
</kw>
<status endtime="20170725 17:47:34.856" starttime="20170725 17:47:34.585" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:44.862">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:47:44.862" starttime="20170725 17:47:44.861" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:44.863">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:47:44.863" starttime="20170725 17:47:44.862" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:44.863">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:47:44.863" starttime="20170725 17:47:44.863" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:44.864">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:47:44.864" starttime="20170725 17:47:44.864" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:45.052">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:47:45.052" starttime="20170725 17:47:44.865" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:45.052">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:47:45.053">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:45.053" starttime="20170725 17:47:44.864" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:45.053">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:45.053" starttime="20170725 17:47:45.053" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:45.054">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:45.054" starttime="20170725 17:47:45.054" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:45.054" starttime="20170725 17:47:44.861" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:45.054" starttime="20170725 17:47:44.860" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:45.054" starttime="20170725 17:47:44.860" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:45.055">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:47:45.055" starttime="20170725 17:47:45.055" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:45.057">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:47:45.057" starttime="20170725 17:47:45.056" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:45.058">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:47:45.058" starttime="20170725 17:47:45.058" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:45.058" starttime="20170725 17:47:45.057" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:45.058" starttime="20170725 17:47:45.056" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:45.058" starttime="20170725 17:47:45.055" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:45.126">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:47:45.126">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:45.126" starttime="20170725 17:47:45.058" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:45.128">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:47:45.128" starttime="20170725 17:47:45.127" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:45.129">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:47:45.129" starttime="20170725 17:47:45.128" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:45.129" starttime="20170725 17:47:45.128" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:45.129" starttime="20170725 17:47:45.127" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:45.129" starttime="20170725 17:47:45.126" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:47:45.129">Delete All Sessions</msg>
<status endtime="20170725 17:47:45.130" starttime="20170725 17:47:45.129" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:45.130">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:45.130" starttime="20170725 17:47:44.859" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:45.130">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:45.130" starttime="20170725 17:47:45.130" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:45.131">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:47:45.131">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:47:45.131">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:47:45.131" starttime="20170725 17:47:45.131" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:45.131">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:47:45.131" starttime="20170725 17:47:44.858" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:45.132">${power_state} = On</msg>
<status endtime="20170725 17:47:45.132" starttime="20170725 17:47:44.858" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:47:45.132">Off != On</msg>
<status endtime="20170725 17:47:45.132" starttime="20170725 17:47:45.132" status="FAIL"></status>
</kw>
<status endtime="20170725 17:47:45.133" starttime="20170725 17:47:44.858" status="FAIL"></status>
</kw>
<status endtime="20170725 17:47:45.133" starttime="20170725 17:47:44.857" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:55.138">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:47:55.139" starttime="20170725 17:47:55.138" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:55.139">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:47:55.140" starttime="20170725 17:47:55.139" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:55.140">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:47:55.140" starttime="20170725 17:47:55.140" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:55.141">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:47:55.141" starttime="20170725 17:47:55.140" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:55.360">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:47:55.360" starttime="20170725 17:47:55.141" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:55.360">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:47:55.361">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:55.361" starttime="20170725 17:47:55.141" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:55.361">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:55.361" starttime="20170725 17:47:55.361" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:55.362">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:55.362" starttime="20170725 17:47:55.362" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:55.362" starttime="20170725 17:47:55.137" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:55.362" starttime="20170725 17:47:55.137" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:55.362" starttime="20170725 17:47:55.136" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:55.363">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:47:55.363" starttime="20170725 17:47:55.363" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:55.365">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:47:55.365" starttime="20170725 17:47:55.364" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:55.366">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:47:55.366" starttime="20170725 17:47:55.366" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:55.366" starttime="20170725 17:47:55.365" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:55.366" starttime="20170725 17:47:55.364" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:55.366" starttime="20170725 17:47:55.363" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:55.461">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:47:55.461">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:55.461" starttime="20170725 17:47:55.367" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:55.463">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:47:55.463" starttime="20170725 17:47:55.463" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:55.464">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:47:55.465" starttime="20170725 17:47:55.464" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:55.465" starttime="20170725 17:47:55.463" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:55.465" starttime="20170725 17:47:55.462" status="PASS"></status>
</kw>
<status endtime="20170725 17:47:55.465" starttime="20170725 17:47:55.462" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:47:55.465">Delete All Sessions</msg>
<status endtime="20170725 17:47:55.465" starttime="20170725 17:47:55.465" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:55.466">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:47:55.466" starttime="20170725 17:47:55.135" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:47:55.466">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:47:55.466" starttime="20170725 17:47:55.466" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:47:55.467">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:47:55.467">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:47:55.467">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:47:55.467" starttime="20170725 17:47:55.466" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:55.467">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:47:55.467" starttime="20170725 17:47:55.135" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:47:55.468">${power_state} = On</msg>
<status endtime="20170725 17:47:55.468" starttime="20170725 17:47:55.134" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:47:55.468">Off != On</msg>
<status endtime="20170725 17:47:55.468" starttime="20170725 17:47:55.468" status="FAIL"></status>
</kw>
<status endtime="20170725 17:47:55.468" starttime="20170725 17:47:55.134" status="FAIL"></status>
</kw>
<status endtime="20170725 17:47:55.469" starttime="20170725 17:47:55.133" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:05.474">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:48:05.474" starttime="20170725 17:48:05.473" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:05.475">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:48:05.475" starttime="20170725 17:48:05.474" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:05.475">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:48:05.475" starttime="20170725 17:48:05.475" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:05.476">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:48:05.476" starttime="20170725 17:48:05.476" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:05.658">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:48:05.658" starttime="20170725 17:48:05.477" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:05.658">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:48:05.658">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:05.659" starttime="20170725 17:48:05.476" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:05.659">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:05.659" starttime="20170725 17:48:05.659" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:05.660">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:05.660" starttime="20170725 17:48:05.660" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:05.660" starttime="20170725 17:48:05.473" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:05.660" starttime="20170725 17:48:05.472" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:05.660" starttime="20170725 17:48:05.472" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:05.661">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:48:05.661" starttime="20170725 17:48:05.661" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:05.663">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:48:05.663" starttime="20170725 17:48:05.662" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:05.664">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:48:05.664" starttime="20170725 17:48:05.664" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:05.664" starttime="20170725 17:48:05.663" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:05.664" starttime="20170725 17:48:05.662" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:05.664" starttime="20170725 17:48:05.661" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:05.731">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:48:05.731">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:05.731" starttime="20170725 17:48:05.665" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:05.733">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:48:05.733" starttime="20170725 17:48:05.732" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:05.734">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:48:05.734" starttime="20170725 17:48:05.734" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:05.734" starttime="20170725 17:48:05.733" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:05.734" starttime="20170725 17:48:05.732" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:05.734" starttime="20170725 17:48:05.731" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:48:05.735">Delete All Sessions</msg>
<status endtime="20170725 17:48:05.735" starttime="20170725 17:48:05.735" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:05.735">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:05.735" starttime="20170725 17:48:05.471" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:05.736">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:05.736" starttime="20170725 17:48:05.735" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:05.736">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:48:05.736">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:48:05.736">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:48:05.736" starttime="20170725 17:48:05.736" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:05.737">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:48:05.737" starttime="20170725 17:48:05.470" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:05.737">${power_state} = On</msg>
<status endtime="20170725 17:48:05.737" starttime="20170725 17:48:05.470" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:48:05.738">Off != On</msg>
<status endtime="20170725 17:48:05.738" starttime="20170725 17:48:05.737" status="FAIL"></status>
</kw>
<status endtime="20170725 17:48:05.738" starttime="20170725 17:48:05.470" status="FAIL"></status>
</kw>
<status endtime="20170725 17:48:05.738" starttime="20170725 17:48:05.469" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:15.743">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:48:15.744" starttime="20170725 17:48:15.743" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:15.744">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:48:15.744" starttime="20170725 17:48:15.744" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:15.745">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:48:15.745" starttime="20170725 17:48:15.745" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:15.746">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:48:15.746" starttime="20170725 17:48:15.745" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:15.935">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:48:15.935" starttime="20170725 17:48:15.746" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:15.935">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:48:15.935">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:15.935" starttime="20170725 17:48:15.746" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:15.936">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:15.936" starttime="20170725 17:48:15.936" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:15.937">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:15.937" starttime="20170725 17:48:15.936" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:15.937" starttime="20170725 17:48:15.742" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:15.937" starttime="20170725 17:48:15.742" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:15.937" starttime="20170725 17:48:15.741" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:15.938">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:48:15.938" starttime="20170725 17:48:15.937" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:15.940">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:48:15.940" starttime="20170725 17:48:15.939" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:15.941">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:48:15.941" starttime="20170725 17:48:15.940" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:15.941" starttime="20170725 17:48:15.940" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:15.941" starttime="20170725 17:48:15.938" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:15.941" starttime="20170725 17:48:15.938" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:16.008">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:48:16.008">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:16.008" starttime="20170725 17:48:15.941" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:16.010">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:48:16.010" starttime="20170725 17:48:16.010" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:16.012">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:48:16.012" starttime="20170725 17:48:16.011" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:16.012" starttime="20170725 17:48:16.011" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:16.012" starttime="20170725 17:48:16.009" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:16.012" starttime="20170725 17:48:16.009" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:48:16.012">Delete All Sessions</msg>
<status endtime="20170725 17:48:16.013" starttime="20170725 17:48:16.012" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:16.013">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:16.013" starttime="20170725 17:48:15.740" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:16.013">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:16.013" starttime="20170725 17:48:16.013" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:16.014">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:48:16.014">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:48:16.014">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:48:16.014" starttime="20170725 17:48:16.014" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:16.015">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:48:16.015" starttime="20170725 17:48:15.740" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:16.015">${power_state} = On</msg>
<status endtime="20170725 17:48:16.015" starttime="20170725 17:48:15.739" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:48:16.016">Off != On</msg>
<status endtime="20170725 17:48:16.016" starttime="20170725 17:48:16.015" status="FAIL"></status>
</kw>
<status endtime="20170725 17:48:16.016" starttime="20170725 17:48:15.739" status="FAIL"></status>
</kw>
<status endtime="20170725 17:48:16.016" starttime="20170725 17:48:15.738" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:26.021">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:48:26.021" starttime="20170725 17:48:26.021" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:26.022">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:48:26.022" starttime="20170725 17:48:26.022" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:26.023">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:48:26.023" starttime="20170725 17:48:26.022" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:26.023">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:48:26.023" starttime="20170725 17:48:26.023" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:26.206">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:48:26.206" starttime="20170725 17:48:26.024" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:26.206">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:48:26.206">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:26.206" starttime="20170725 17:48:26.024" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:26.207">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:26.207" starttime="20170725 17:48:26.206" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:26.207">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:26.207" starttime="20170725 17:48:26.207" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:26.208" starttime="20170725 17:48:26.020" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:26.208" starttime="20170725 17:48:26.020" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:26.208" starttime="20170725 17:48:26.019" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:26.208">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:48:26.208" starttime="20170725 17:48:26.208" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:26.211">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:48:26.211" starttime="20170725 17:48:26.210" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:26.212">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:48:26.212" starttime="20170725 17:48:26.211" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:26.212" starttime="20170725 17:48:26.211" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:26.212" starttime="20170725 17:48:26.209" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:26.212" starttime="20170725 17:48:26.209" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:26.279">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:48:26.279">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:26.279" starttime="20170725 17:48:26.212" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:26.281">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:48:26.281" starttime="20170725 17:48:26.281" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:26.282">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:48:26.282" starttime="20170725 17:48:26.282" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:26.282" starttime="20170725 17:48:26.281" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:26.282" starttime="20170725 17:48:26.280" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:26.282" starttime="20170725 17:48:26.280" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:48:26.283">Delete All Sessions</msg>
<status endtime="20170725 17:48:26.283" starttime="20170725 17:48:26.283" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:26.283">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:26.283" starttime="20170725 17:48:26.018" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:26.284">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:26.284" starttime="20170725 17:48:26.283" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:26.284">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:48:26.284">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:48:26.285">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:48:26.285" starttime="20170725 17:48:26.284" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:26.285">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:48:26.285" starttime="20170725 17:48:26.018" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:26.285">${power_state} = On</msg>
<status endtime="20170725 17:48:26.285" starttime="20170725 17:48:26.017" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:48:26.286">Off != On</msg>
<status endtime="20170725 17:48:26.286" starttime="20170725 17:48:26.285" status="FAIL"></status>
</kw>
<status endtime="20170725 17:48:26.286" starttime="20170725 17:48:26.017" status="FAIL"></status>
</kw>
<status endtime="20170725 17:48:26.286" starttime="20170725 17:48:26.016" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:36.295">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:48:36.295" starttime="20170725 17:48:36.294" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:36.296">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:48:36.296" starttime="20170725 17:48:36.295" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:36.297">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:48:36.297" starttime="20170725 17:48:36.296" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:36.297">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:48:36.297" starttime="20170725 17:48:36.297" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:36.494">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:48:36.494" starttime="20170725 17:48:36.298" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:36.494">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:48:36.494">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:36.494" starttime="20170725 17:48:36.298" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:36.495">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:36.495" starttime="20170725 17:48:36.494" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:36.496">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:36.496" starttime="20170725 17:48:36.495" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:36.496" starttime="20170725 17:48:36.290" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:36.496" starttime="20170725 17:48:36.290" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:36.496" starttime="20170725 17:48:36.289" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:36.497">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:48:36.497" starttime="20170725 17:48:36.496" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:36.499">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:48:36.499" starttime="20170725 17:48:36.498" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:36.500">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:48:36.500" starttime="20170725 17:48:36.499" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:36.500" starttime="20170725 17:48:36.499" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:36.500" starttime="20170725 17:48:36.497" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:36.500" starttime="20170725 17:48:36.497" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:36.567">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:48:36.567">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:36.567" starttime="20170725 17:48:36.500" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:36.569">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:48:36.569" starttime="20170725 17:48:36.568" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:36.570">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:48:36.570" starttime="20170725 17:48:36.570" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:36.570" starttime="20170725 17:48:36.569" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:36.571" starttime="20170725 17:48:36.568" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:36.571" starttime="20170725 17:48:36.567" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:48:36.571">Delete All Sessions</msg>
<status endtime="20170725 17:48:36.571" starttime="20170725 17:48:36.571" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:36.571">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:36.571" starttime="20170725 17:48:36.289" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:36.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:36.572" starttime="20170725 17:48:36.572" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:36.573">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:48:36.573">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:48:36.573">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:48:36.573" starttime="20170725 17:48:36.572" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:36.573">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:48:36.573" starttime="20170725 17:48:36.288" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:36.573">${power_state} = On</msg>
<status endtime="20170725 17:48:36.573" starttime="20170725 17:48:36.288" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:48:36.574">Off != On</msg>
<status endtime="20170725 17:48:36.574" starttime="20170725 17:48:36.574" status="FAIL"></status>
</kw>
<status endtime="20170725 17:48:36.574" starttime="20170725 17:48:36.287" status="FAIL"></status>
</kw>
<status endtime="20170725 17:48:36.574" starttime="20170725 17:48:36.287" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:46.579">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:48:46.580" starttime="20170725 17:48:46.579" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:46.580">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:48:46.581" starttime="20170725 17:48:46.580" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:46.581">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:48:46.581" starttime="20170725 17:48:46.581" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:46.582">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:48:46.582" starttime="20170725 17:48:46.581" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:46.823">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:48:46.823" starttime="20170725 17:48:46.582" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:46.823">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:48:46.823">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:46.823" starttime="20170725 17:48:46.582" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:46.824">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:46.824" starttime="20170725 17:48:46.824" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:46.825">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:46.825" starttime="20170725 17:48:46.824" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:46.825" starttime="20170725 17:48:46.579" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:46.825" starttime="20170725 17:48:46.578" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:46.825" starttime="20170725 17:48:46.577" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:46.826">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:48:46.826" starttime="20170725 17:48:46.825" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:46.828">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:48:46.828" starttime="20170725 17:48:46.827" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:46.829">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:48:46.829" starttime="20170725 17:48:46.828" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:46.829" starttime="20170725 17:48:46.828" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:46.829" starttime="20170725 17:48:46.826" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:46.829" starttime="20170725 17:48:46.826" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:46.896">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:48:46.896">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:46.896" starttime="20170725 17:48:46.829" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:46.898">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:48:46.898" starttime="20170725 17:48:46.897" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:46.899">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:48:46.899" starttime="20170725 17:48:46.898" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:46.899" starttime="20170725 17:48:46.898" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:46.899" starttime="20170725 17:48:46.897" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:46.899" starttime="20170725 17:48:46.896" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:48:46.899">Delete All Sessions</msg>
<status endtime="20170725 17:48:46.899" starttime="20170725 17:48:46.899" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:46.900">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:46.900" starttime="20170725 17:48:46.577" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:46.900">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:46.900" starttime="20170725 17:48:46.900" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:46.901">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:48:46.901">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:48:46.901">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:48:46.901" starttime="20170725 17:48:46.901" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:46.901">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:48:46.901" starttime="20170725 17:48:46.576" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:46.902">${power_state} = On</msg>
<status endtime="20170725 17:48:46.902" starttime="20170725 17:48:46.576" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:48:46.902">Off != On</msg>
<status endtime="20170725 17:48:46.902" starttime="20170725 17:48:46.902" status="FAIL"></status>
</kw>
<status endtime="20170725 17:48:46.903" starttime="20170725 17:48:46.575" status="FAIL"></status>
</kw>
<status endtime="20170725 17:48:46.903" starttime="20170725 17:48:46.575" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:56.908">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:48:56.909" starttime="20170725 17:48:56.908" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:56.909">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:48:56.909" starttime="20170725 17:48:56.909" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:56.910">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:48:56.910" starttime="20170725 17:48:56.909" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:56.911">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:48:56.911" starttime="20170725 17:48:56.910" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:57.093">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:48:57.093" starttime="20170725 17:48:56.911" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:57.093">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:48:57.093">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:57.093" starttime="20170725 17:48:56.911" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:57.094">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:57.094" starttime="20170725 17:48:57.094" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:57.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:57.095" starttime="20170725 17:48:57.094" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:57.095" starttime="20170725 17:48:56.907" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:57.095" starttime="20170725 17:48:56.906" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:57.095" starttime="20170725 17:48:56.906" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:57.096">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:48:57.096" starttime="20170725 17:48:57.095" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:57.098">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:48:57.098" starttime="20170725 17:48:57.097" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:57.099">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:48:57.099" starttime="20170725 17:48:57.099" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:57.099" starttime="20170725 17:48:57.098" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:57.099" starttime="20170725 17:48:57.097" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:57.099" starttime="20170725 17:48:57.096" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:57.165">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:48:57.165">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:57.165" starttime="20170725 17:48:57.099" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:57.167">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:48:57.167" starttime="20170725 17:48:57.167" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:57.168">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:48:57.169" starttime="20170725 17:48:57.168" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:57.169" starttime="20170725 17:48:57.167" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:57.169" starttime="20170725 17:48:57.166" status="PASS"></status>
</kw>
<status endtime="20170725 17:48:57.169" starttime="20170725 17:48:57.166" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:48:57.169">Delete All Sessions</msg>
<status endtime="20170725 17:48:57.169" starttime="20170725 17:48:57.169" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:57.170">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:48:57.170" starttime="20170725 17:48:56.905" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:48:57.170">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:48:57.170" starttime="20170725 17:48:57.170" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:48:57.171">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:48:57.171">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:48:57.171">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:48:57.171" starttime="20170725 17:48:57.171" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:57.171">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:48:57.171" starttime="20170725 17:48:56.905" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:48:57.172">${power_state} = On</msg>
<status endtime="20170725 17:48:57.172" starttime="20170725 17:48:56.904" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:48:57.172">Off != On</msg>
<status endtime="20170725 17:48:57.172" starttime="20170725 17:48:57.172" status="FAIL"></status>
</kw>
<status endtime="20170725 17:48:57.172" starttime="20170725 17:48:56.904" status="FAIL"></status>
</kw>
<status endtime="20170725 17:48:57.173" starttime="20170725 17:48:56.903" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:07.177">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:49:07.178" starttime="20170725 17:49:07.177" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:07.178">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:49:07.178" starttime="20170725 17:49:07.178" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:07.179">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:49:07.179" starttime="20170725 17:49:07.179" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:07.179">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:49:07.180" starttime="20170725 17:49:07.179" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:07.359">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:49:07.359" starttime="20170725 17:49:07.180" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:07.359">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:07.359">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:07.359" starttime="20170725 17:49:07.180" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:07.360">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:07.360" starttime="20170725 17:49:07.359" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:07.360">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:07.360" starttime="20170725 17:49:07.360" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:07.361" starttime="20170725 17:49:07.176" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:07.361" starttime="20170725 17:49:07.176" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:07.361" starttime="20170725 17:49:07.175" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:07.361">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:49:07.361" starttime="20170725 17:49:07.361" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:07.363">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:49:07.363" starttime="20170725 17:49:07.363" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:07.364">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:49:07.364" starttime="20170725 17:49:07.364" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:07.364" starttime="20170725 17:49:07.364" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:07.365" starttime="20170725 17:49:07.362" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:07.365" starttime="20170725 17:49:07.362" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:07.432">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:49:07.432">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:07.432" starttime="20170725 17:49:07.365" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:07.434">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:49:07.434" starttime="20170725 17:49:07.433" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:07.434">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:49:07.435" starttime="20170725 17:49:07.434" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:07.435" starttime="20170725 17:49:07.434" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:07.435" starttime="20170725 17:49:07.433" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:07.435" starttime="20170725 17:49:07.432" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:49:07.435">Delete All Sessions</msg>
<status endtime="20170725 17:49:07.435" starttime="20170725 17:49:07.435" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:07.436">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:07.436" starttime="20170725 17:49:07.175" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:07.436">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:07.436" starttime="20170725 17:49:07.436" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:07.437">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:49:07.437">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:49:07.437">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:49:07.437" starttime="20170725 17:49:07.437" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:07.437">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:49:07.437" starttime="20170725 17:49:07.174" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:07.438">${power_state} = On</msg>
<status endtime="20170725 17:49:07.438" starttime="20170725 17:49:07.174" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:49:07.438">Off != On</msg>
<status endtime="20170725 17:49:07.438" starttime="20170725 17:49:07.438" status="FAIL"></status>
</kw>
<status endtime="20170725 17:49:07.439" starttime="20170725 17:49:07.174" status="FAIL"></status>
</kw>
<status endtime="20170725 17:49:07.439" starttime="20170725 17:49:07.173" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:17.444">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:49:17.444" starttime="20170725 17:49:17.444" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:17.445">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:49:17.445" starttime="20170725 17:49:17.445" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:17.445">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:49:17.445" starttime="20170725 17:49:17.445" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:17.446">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:49:17.446" starttime="20170725 17:49:17.446" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:17.631">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:49:17.631" starttime="20170725 17:49:17.447" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:17.631">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:17.631">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:17.631" starttime="20170725 17:49:17.446" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:17.632">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:17.632" starttime="20170725 17:49:17.632" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:17.633">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:17.633" starttime="20170725 17:49:17.632" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:17.633" starttime="20170725 17:49:17.443" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:17.633" starttime="20170725 17:49:17.442" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:17.633" starttime="20170725 17:49:17.442" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:17.634">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:49:17.634" starttime="20170725 17:49:17.633" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:17.636">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:49:17.636" starttime="20170725 17:49:17.635" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:17.637">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:49:17.637" starttime="20170725 17:49:17.636" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:17.637" starttime="20170725 17:49:17.636" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:17.637" starttime="20170725 17:49:17.634" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:17.637" starttime="20170725 17:49:17.634" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:17.704">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:49:17.704">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:17.704" starttime="20170725 17:49:17.637" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:17.706">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:49:17.706" starttime="20170725 17:49:17.705" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:17.707">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:49:17.707" starttime="20170725 17:49:17.706" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:17.707" starttime="20170725 17:49:17.706" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:17.707" starttime="20170725 17:49:17.705" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:17.707" starttime="20170725 17:49:17.704" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:49:17.708">Delete All Sessions</msg>
<status endtime="20170725 17:49:17.708" starttime="20170725 17:49:17.707" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:17.708">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:17.708" starttime="20170725 17:49:17.441" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:17.708">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:17.709" starttime="20170725 17:49:17.708" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:17.709">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:49:17.709">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:49:17.709">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:49:17.709" starttime="20170725 17:49:17.709" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:17.710">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:49:17.710" starttime="20170725 17:49:17.440" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:17.710">${power_state} = On</msg>
<status endtime="20170725 17:49:17.710" starttime="20170725 17:49:17.440" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:49:17.711">Off != On</msg>
<status endtime="20170725 17:49:17.711" starttime="20170725 17:49:17.710" status="FAIL"></status>
</kw>
<status endtime="20170725 17:49:17.711" starttime="20170725 17:49:17.440" status="FAIL"></status>
</kw>
<status endtime="20170725 17:49:17.711" starttime="20170725 17:49:17.439" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:27.716">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:49:27.716" starttime="20170725 17:49:27.715" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:27.717">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:49:27.717" starttime="20170725 17:49:27.716" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:27.717">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:49:27.717" starttime="20170725 17:49:27.717" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:27.718">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:49:27.718" starttime="20170725 17:49:27.718" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:27.965">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:49:27.965" starttime="20170725 17:49:27.719" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:27.965">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:27.965">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:27.966" starttime="20170725 17:49:27.718" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:27.966">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:27.966" starttime="20170725 17:49:27.966" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:27.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:27.967" starttime="20170725 17:49:27.966" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:27.967" starttime="20170725 17:49:27.715" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:27.967" starttime="20170725 17:49:27.714" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:27.967" starttime="20170725 17:49:27.714" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:27.968">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:49:27.968" starttime="20170725 17:49:27.967" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:27.970">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:49:27.970" starttime="20170725 17:49:27.969" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:27.971">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:49:27.971" starttime="20170725 17:49:27.971" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:27.971" starttime="20170725 17:49:27.970" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:27.971" starttime="20170725 17:49:27.969" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:27.971" starttime="20170725 17:49:27.968" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:28.037">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:49:28.037">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:28.037" starttime="20170725 17:49:27.971" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:28.039">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:49:28.039" starttime="20170725 17:49:28.038" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:28.040">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:49:28.040" starttime="20170725 17:49:28.040" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:28.040" starttime="20170725 17:49:28.039" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:28.040" starttime="20170725 17:49:28.038" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:28.040" starttime="20170725 17:49:28.038" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:49:28.041">Delete All Sessions</msg>
<status endtime="20170725 17:49:28.041" starttime="20170725 17:49:28.041" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:28.041">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:28.041" starttime="20170725 17:49:27.713" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:28.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:28.042" starttime="20170725 17:49:28.041" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:28.042">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:49:28.042">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:49:28.043">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:49:28.043" starttime="20170725 17:49:28.042" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:28.043">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:49:28.043" starttime="20170725 17:49:27.713" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:28.043">${power_state} = On</msg>
<status endtime="20170725 17:49:28.043" starttime="20170725 17:49:27.712" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:49:28.044">Off != On</msg>
<status endtime="20170725 17:49:28.044" starttime="20170725 17:49:28.043" status="FAIL"></status>
</kw>
<status endtime="20170725 17:49:28.044" starttime="20170725 17:49:27.712" status="FAIL"></status>
</kw>
<status endtime="20170725 17:49:28.044" starttime="20170725 17:49:27.711" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:38.050">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:49:38.051" starttime="20170725 17:49:38.050" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:38.051">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:49:38.051" starttime="20170725 17:49:38.051" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:38.052">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:49:38.052" starttime="20170725 17:49:38.051" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:38.052">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:49:38.052" starttime="20170725 17:49:38.052" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:38.239">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:49:38.239" starttime="20170725 17:49:38.053" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:38.239">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:38.239">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:38.239" starttime="20170725 17:49:38.053" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:38.239">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:38.240" starttime="20170725 17:49:38.239" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:38.240">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:38.240" starttime="20170725 17:49:38.240" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:38.241" starttime="20170725 17:49:38.049" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:38.241" starttime="20170725 17:49:38.048" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:38.241" starttime="20170725 17:49:38.047" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:38.241">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:49:38.241" starttime="20170725 17:49:38.241" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:38.243">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:49:38.243" starttime="20170725 17:49:38.243" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:38.244">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:49:38.244" starttime="20170725 17:49:38.244" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:38.245" starttime="20170725 17:49:38.244" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:38.245" starttime="20170725 17:49:38.242" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:38.245" starttime="20170725 17:49:38.242" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:38.332">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:49:38.332">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:38.332" starttime="20170725 17:49:38.245" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:38.334">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:49:38.334" starttime="20170725 17:49:38.334" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:38.335">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:49:38.335" starttime="20170725 17:49:38.335" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:38.336" starttime="20170725 17:49:38.334" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:38.336" starttime="20170725 17:49:38.333" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:38.336" starttime="20170725 17:49:38.333" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:49:38.336">Delete All Sessions</msg>
<status endtime="20170725 17:49:38.336" starttime="20170725 17:49:38.336" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:38.336">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:38.336" starttime="20170725 17:49:38.047" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:38.337">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:38.337" starttime="20170725 17:49:38.337" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:38.338">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:49:38.338">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:49:38.338">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:49:38.338" starttime="20170725 17:49:38.337" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:38.338">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:49:38.338" starttime="20170725 17:49:38.046" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:38.339">${power_state} = On</msg>
<status endtime="20170725 17:49:38.339" starttime="20170725 17:49:38.046" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:49:38.339">Off != On</msg>
<status endtime="20170725 17:49:38.339" starttime="20170725 17:49:38.339" status="FAIL"></status>
</kw>
<status endtime="20170725 17:49:38.339" starttime="20170725 17:49:38.045" status="FAIL"></status>
</kw>
<status endtime="20170725 17:49:38.340" starttime="20170725 17:49:38.045" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:48.345">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:49:48.345" starttime="20170725 17:49:48.344" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.346">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:49:48.346" starttime="20170725 17:49:48.345" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.346">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:49:48.346" starttime="20170725 17:49:48.346" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.347">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:49:48.347" starttime="20170725 17:49:48.346" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:48.530">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:49:48.530" starttime="20170725 17:49:48.348" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:48.530">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:48.530">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:48.530" starttime="20170725 17:49:48.347" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:48.531">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:48.531" starttime="20170725 17:49:48.531" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:48.532">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:48.532" starttime="20170725 17:49:48.531" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.532" starttime="20170725 17:49:48.344" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.532" starttime="20170725 17:49:48.343" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.532" starttime="20170725 17:49:48.343" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.533">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170725 17:49:48.533" starttime="20170725 17:49:48.532" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.535">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:49:48.535" starttime="20170725 17:49:48.534" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:48.536">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170725 17:49:48.536" starttime="20170725 17:49:48.535" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.536" starttime="20170725 17:49:48.535" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.536" starttime="20170725 17:49:48.533" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.536" starttime="20170725 17:49:48.533" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.602">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:49:48.602">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:48.602" starttime="20170725 17:49:48.536" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.604">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:49:48.604" starttime="20170725 17:49:48.603" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:48.605">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:49:48.605" starttime="20170725 17:49:48.605" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.605" starttime="20170725 17:49:48.604" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.605" starttime="20170725 17:49:48.603" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.605" starttime="20170725 17:49:48.602" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:49:48.606">Delete All Sessions</msg>
<status endtime="20170725 17:49:48.606" starttime="20170725 17:49:48.605" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:48.606">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:48.606" starttime="20170725 17:49:48.342" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:48.606">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:48.607" starttime="20170725 17:49:48.606" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.607">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:49:48.607">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:49:48.607">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170725 17:49:48.607" starttime="20170725 17:49:48.607" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:48.608">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170725 17:49:48.608" starttime="20170725 17:49:48.341" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:48.608">${power_state} = On</msg>
<status endtime="20170725 17:49:48.608" starttime="20170725 17:49:48.341" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:49:48.609">Off != On</msg>
<status endtime="20170725 17:49:48.609" starttime="20170725 17:49:48.608" status="FAIL"></status>
</kw>
<status endtime="20170725 17:49:48.609" starttime="20170725 17:49:48.341" status="FAIL"></status>
</kw>
<status endtime="20170725 17:49:48.609" starttime="20170725 17:49:48.340" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170725 17:49:48.609">Keyword 'Is Host Off' failed after retrying for 6 minutes. The last error was: Off != On</msg>
<status endtime="20170725 17:49:48.609" starttime="20170725 17:43:40.611" status="FAIL"></status>
</kw>
<status endtime="20170725 17:49:48.609" starttime="20170725 17:43:40.153" status="FAIL"></status>
</kw>
<status endtime="20170725 17:49:48.609" starttime="20170725 17:43:40.153" status="FAIL"></status>
</kw>
<status endtime="20170725 17:49:48.609" starttime="20170725 17:41:21.926" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:48.618">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:49:48.619" starttime="20170725 17:49:48.614" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.620">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:49:48.620" starttime="20170725 17:49:48.619" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.620">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:49:48.620" starttime="20170725 17:49:48.620" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.621">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:49:48.621" starttime="20170725 17:49:48.620" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:48.865">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:49:48.865" starttime="20170725 17:49:48.622" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:48.865">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:48.866">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:48.866" starttime="20170725 17:49:48.621" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:48.866">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:48.866" starttime="20170725 17:49:48.866" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:48.867">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:48.867" starttime="20170725 17:49:48.866" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.867" starttime="20170725 17:49:48.614" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.867" starttime="20170725 17:49:48.613" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.867" starttime="20170725 17:49:48.613" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.868">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170725 17:49:48.868" starttime="20170725 17:49:48.867" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.870">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:49:48.870" starttime="20170725 17:49:48.869" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:48.871">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170725 17:49:48.871" starttime="20170725 17:49:48.871" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.871" starttime="20170725 17:49:48.870" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.871" starttime="20170725 17:49:48.869" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.871" starttime="20170725 17:49:48.868" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.949">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:49:48.949">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:48.950" starttime="20170725 17:49:48.871" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.951">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:49:48.951" starttime="20170725 17:49:48.951" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:48.952">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170725 17:49:48.952" starttime="20170725 17:49:48.952" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.953" starttime="20170725 17:49:48.952" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.953" starttime="20170725 17:49:48.950" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:48.953" starttime="20170725 17:49:48.950" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:49:48.953">Delete All Sessions</msg>
<status endtime="20170725 17:49:48.953" starttime="20170725 17:49:48.953" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:48.953">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:48.954" starttime="20170725 17:49:48.612" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:48.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:48.954" starttime="20170725 17:49:48.954" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.955">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:49:48.955">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:49:48.955">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170725 17:49:48.955" starttime="20170725 17:49:48.954" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:48.955">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170725 17:49:48.955" starttime="20170725 17:49:48.611" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:48.956">${host_state} = Off</msg>
<status endtime="20170725 17:49:48.956" starttime="20170725 17:49:48.611" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:49:48.957">Off != Quiesced</msg>
<status endtime="20170725 17:49:48.957" starttime="20170725 17:49:48.956" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:48.957">${status} = False</msg>
<status endtime="20170725 17:49:48.957" starttime="20170725 17:49:48.956" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:48.957">${status} = False</msg>
<status endtime="20170725 17:49:48.957" starttime="20170725 17:49:48.611" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:48.980">Length is 9</msg>
<status endtime="20170725 17:49:48.980" starttime="20170725 17:49:48.980" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:48.990">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170725 17:49:52.002">${RC} = 0</msg>
<msg level="INFO" timestamp="20170725 17:49:52.003">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.783 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.643 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status endtime="20170725 17:49:52.003" starttime="20170725 17:49:48.981" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.006">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.783 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.643 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=1.86 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.682 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.643/0.992/1.862/0.505 ms</msg>
<status endtime="20170725 17:49:52.006" starttime="20170725 17:49:52.005" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170725 17:49:52.007" starttime="20170725 17:49:52.006" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.007" starttime="20170725 17:49:48.980" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.020">${cur_time} = 2017-07-25 17:49:52:019592</msg>
<status endtime="20170725 17:49:52.020" starttime="20170725 17:49:52.019" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.020">${cur_time} = 20170725174952019592</msg>
<status endtime="20170725 17:49:52.020" starttime="20170725 17:49:52.020" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.021" starttime="20170725 17:49:52.019" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:52.021">${FFDC_TIME} = 20170725174952019592</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.031">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170725 17:49:52.031" starttime="20170725 17:49:52.031" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.031">${suite_name} = 20170725174952019592_TestsTestBasicPoweron</msg>
<status endtime="20170725 17:49:52.032" starttime="20170725 17:49:52.031" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.032">${test_name} = PowerOnTest</msg>
<status endtime="20170725 17:49:52.032" starttime="20170725 17:49:52.032" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.033">${test_name} = 20170725174952019592_PowerOnTest</msg>
<status endtime="20170725 17:49:52.033" starttime="20170725 17:49:52.032" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.033" starttime="20170725 17:49:52.030" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:52.033">${FFDC_DIR_PATH} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170725 17:49:52.033">${FFDC_PREFIX} = 20170725174952019592_</msg>
<msg level="INFO" timestamp="20170725 17:49:52.053">${LOG_PREFIX} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.054" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.054" starttime="20170725 17:49:52.053" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:52.058">${FFDC_FILE_PATH} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.078" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.078" starttime="20170725 17:49:52.078" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.078" starttime="20170725 17:49:52.077" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.079" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.080" starttime="20170725 17:49:52.079" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.080" starttime="20170725 17:49:52.079" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.081" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.081" starttime="20170725 17:49:52.080" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.081" starttime="20170725 17:49:52.080" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.082" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.082" starttime="20170725 17:49:52.082" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.082" starttime="20170725 17:49:52.081" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.084" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.084" starttime="20170725 17:49:52.083" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.084" starttime="20170725 17:49:52.083" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.085" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.085" starttime="20170725 17:49:52.084" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.085" starttime="20170725 17:49:52.084" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.086" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.086" starttime="20170725 17:49:52.086" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.086" starttime="20170725 17:49:52.085" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.088" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.088" starttime="20170725 17:49:52.087" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.088" starttime="20170725 17:49:52.087" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.089" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.089" starttime="20170725 17:49:52.088" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.089" starttime="20170725 17:49:52.088" status="PASS"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.091" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.091" starttime="20170725 17:49:52.090" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.091" starttime="20170725 17:49:52.089" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.093" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.093" starttime="20170725 17:49:52.092" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.093" starttime="20170725 17:49:52.091" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.094" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.094" starttime="20170725 17:49:52.094" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.094" starttime="20170725 17:49:52.093" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.095" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.095" starttime="20170725 17:49:52.095" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.096" starttime="20170725 17:49:52.094" status="PASS"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.124">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:49:52.125">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170725 17:49:52.202">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170725 17:49:52.211">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170725 17:49:52.212">${stderr} = </msg>
<msg level="INFO" timestamp="20170725 17:49:52.212">${rc} = 0</msg>
<status endtime="20170725 17:49:52.212" starttime="20170725 17:49:52.096" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.212">Length is 0</msg>
<status endtime="20170725 17:49:52.212" starttime="20170725 17:49:52.212" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.213">Length is 11</msg>
<status endtime="20170725 17:49:52.213" starttime="20170725 17:49:52.212" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:52.213">${model_name} = Witherspoon</msg>
<status endtime="20170725 17:49:52.213" starttime="20170725 17:49:52.096" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.214" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.214" starttime="20170725 17:49:52.214" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.214" starttime="20170725 17:49:52.213" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.214" starttime="20170725 17:49:52.089" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.216" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.216" starttime="20170725 17:49:52.215" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.216" starttime="20170725 17:49:52.215" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.216">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status endtime="20170725 17:49:52.216" starttime="20170725 17:49:52.216" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.218" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.218" starttime="20170725 17:49:52.217" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.218" starttime="20170725 17:49:52.217" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.219" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.219" starttime="20170725 17:49:52.219" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.219" starttime="20170725 17:49:52.218" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.219" starttime="20170725 17:49:52.217" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.221" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.221" starttime="20170725 17:49:52.220" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.221" starttime="20170725 17:49:52.219" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.222" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.222" starttime="20170725 17:49:52.222" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.222" starttime="20170725 17:49:52.221" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.222" starttime="20170725 17:49:52.219" status="PASS"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.224" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.224" starttime="20170725 17:49:52.223" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.224" starttime="20170725 17:49:52.223" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.225" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.225" starttime="20170725 17:49:52.224" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.225" starttime="20170725 17:49:52.224" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.225" starttime="20170725 17:49:52.222" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.225" starttime="20170725 17:49:52.216" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.226" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:52.226" starttime="20170725 17:49:52.226" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.226" starttime="20170725 17:49:52.225" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.227" starttime="20170725 17:49:52.077" status="PASS"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.233">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170725 17:49:52.233" starttime="20170725 17:49:52.233" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.234">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('BMC Specific Files', 'BMC FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('SEL Log', 'Collect ...</msg>
<status endtime="20170725 17:49:52.234" starttime="20170725 17:49:52.234" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170725 17:49:52.235" starttime="20170725 17:49:52.235" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:52.235">@{ffdc_function_list} = [ Get Request FFDC | FFDC Generic Report | BMC Specific Files | Core Files | SEL Log | OS FFDC ]</msg>
<status endtime="20170725 17:49:52.235" starttime="20170725 17:49:52.234" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170725 17:49:52.237" starttime="20170725 17:49:52.237" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:52.237">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:52.237">${ret_values} = None</msg>
<status endtime="20170725 17:49:52.238" starttime="20170725 17:49:52.237" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170725 17:49:52.238" starttime="20170725 17:49:52.238" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.264">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170725 17:49:52.264" starttime="20170725 17:49:52.264" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.265">@{cmd_list} = [ ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_record_log', '/or...</msg>
<status endtime="20170725 17:49:52.265" starttime="20170725 17:49:52.265" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.266">${logpath} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_led.txt</msg>
<status endtime="20170725 17:49:52.266" starttime="20170725 17:49:52.266" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.269">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:49:52.270" starttime="20170725 17:49:52.269" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.271">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:49:52.271" starttime="20170725 17:49:52.270" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.272">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:49:52.272" starttime="20170725 17:49:52.271" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.273">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:49:52.273" starttime="20170725 17:49:52.272" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.460">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:49:52.460" starttime="20170725 17:49:52.274" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:52.460">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:52.460">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:52.460" starttime="20170725 17:49:52.273" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.461">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:52.461" starttime="20170725 17:49:52.460" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.461">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:52.461" starttime="20170725 17:49:52.461" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.461" starttime="20170725 17:49:52.268" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.462" starttime="20170725 17:49:52.268" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.462" starttime="20170725 17:49:52.267" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.462">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170725 17:49:52.462" starttime="20170725 17:49:52.462" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170725 17:49:52.463" starttime="20170725 17:49:52.463" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.507">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:49:52.507">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170725 17:49:52.507" starttime="20170725 17:49:52.463" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170725 17:49:52.508" starttime="20170725 17:49:52.508" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:49:52.508">Delete All Sessions</msg>
<status endtime="20170725 17:49:52.508" starttime="20170725 17:49:52.508" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:52.509">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170725 17:49:52.509" starttime="20170725 17:49:52.266" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.510">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170725 17:49:52.510">404 != 200</msg>
<status endtime="20170725 17:49:52.510" starttime="20170725 17:49:52.509" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:52.510">${status} = False</msg>
<status endtime="20170725 17:49:52.510" starttime="20170725 17:49:52.509" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170725 17:49:52.511">Continuing for loop from the next iteration.</msg>
<status endtime="20170725 17:49:52.511" starttime="20170725 17:49:52.511" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.511" starttime="20170725 17:49:52.510" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.511" starttime="20170725 17:49:52.265" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.512">${logpath} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_inventory.txt</msg>
<status endtime="20170725 17:49:52.512" starttime="20170725 17:49:52.512" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.515">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:49:52.515" starttime="20170725 17:49:52.515" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.516">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:49:52.516" starttime="20170725 17:49:52.516" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.516">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:49:52.517" starttime="20170725 17:49:52.516" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.517">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:49:52.517" starttime="20170725 17:49:52.517" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.702">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:49:52.702" starttime="20170725 17:49:52.518" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:52.702">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:52.702">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:52.702" starttime="20170725 17:49:52.517" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.703">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:52.703" starttime="20170725 17:49:52.702" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:52.703">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:52.703" starttime="20170725 17:49:52.703" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.704" starttime="20170725 17:49:52.514" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.704" starttime="20170725 17:49:52.514" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:52.704" starttime="20170725 17:49:52.513" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:52.704">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170725 17:49:52.704" starttime="20170725 17:49:52.704" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170725 17:49:52.705" starttime="20170725 17:49:52.705" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:54.676">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:49:54.677">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:54.677" starttime="20170725 17:49:52.705" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170725 17:49:54.677" starttime="20170725 17:49:54.677" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:49:54.678">Delete All Sessions</msg>
<status endtime="20170725 17:49:54.678" starttime="20170725 17:49:54.678" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:54.678">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:54.678" starttime="20170725 17:49:52.512" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:54.679">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:54.679" starttime="20170725 17:49:54.679" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:54.679">${status} = True</msg>
<status endtime="20170725 17:49:54.679" starttime="20170725 17:49:54.678" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170725 17:49:54.680" starttime="20170725 17:49:54.680" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:54.683">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "8335-GTC", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "13186FA"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK614         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "YL30UF759004    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933820456", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817667", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7e64c", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b898", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbea", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbcf", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7d9ce", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b970", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b966", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbd9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b8a5", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7db01", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbc4", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7e64d", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbab", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b957", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bc0a", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:49:54.685">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170725 17:49:54.685">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status endtime="20170725 17:49:54.685" starttime="20170725 17:49:54.680" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:54.688" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_inventory.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:54.688" starttime="20170725 17:49:54.686" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:54.688" starttime="20170725 17:49:54.685" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:54.688" starttime="20170725 17:49:52.512" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:54.689">${logpath} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_sensor_list.txt</msg>
<status endtime="20170725 17:49:54.689" starttime="20170725 17:49:54.689" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:54.692">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:49:54.692" starttime="20170725 17:49:54.691" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:54.693">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:49:54.693" starttime="20170725 17:49:54.692" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:54.693">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:49:54.693" starttime="20170725 17:49:54.693" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:54.694">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:49:54.694" starttime="20170725 17:49:54.694" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:54.890">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:49:54.890" starttime="20170725 17:49:54.695" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:54.890">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:54.890">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:54.890" starttime="20170725 17:49:54.694" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:54.891">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:54.891" starttime="20170725 17:49:54.891" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:54.892">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:54.892" starttime="20170725 17:49:54.891" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:54.892" starttime="20170725 17:49:54.691" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:54.892" starttime="20170725 17:49:54.690" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:54.892" starttime="20170725 17:49:54.690" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:54.893">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170725 17:49:54.893" starttime="20170725 17:49:54.892" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170725 17:49:54.893" starttime="20170725 17:49:54.893" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.073">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:49:55.073">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:55.073" starttime="20170725 17:49:54.893" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170725 17:49:55.074" starttime="20170725 17:49:55.074" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:49:55.075">Delete All Sessions</msg>
<status endtime="20170725 17:49:55.075" starttime="20170725 17:49:55.074" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:55.075">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:55.075" starttime="20170725 17:49:54.689" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.076">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:55.076" starttime="20170725 17:49:55.075" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:55.076">${status} = True</msg>
<status endtime="20170725 17:49:55.076" starttime="20170725 17:49:55.075" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170725 17:49:55.077" starttime="20170725 17:49:55.076" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.077">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Starting OS"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:49:55.077">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170725 17:49:55.078">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170725 17:49:55.078" starttime="20170725 17:49:55.077" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.079" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_sensor_list.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:55.080" starttime="20170725 17:49:55.078" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.080" starttime="20170725 17:49:55.078" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.080" starttime="20170725 17:49:54.688" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.080">${logpath} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_record_log.txt</msg>
<status endtime="20170725 17:49:55.081" starttime="20170725 17:49:55.080" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.083">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:49:55.084" starttime="20170725 17:49:55.083" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.084">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:49:55.084" starttime="20170725 17:49:55.084" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.085">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:49:55.085" starttime="20170725 17:49:55.084" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.085">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:49:55.086" starttime="20170725 17:49:55.085" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.341">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:49:55.341" starttime="20170725 17:49:55.086" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:55.342">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:55.342">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:55.342" starttime="20170725 17:49:55.086" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.342">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:55.342" starttime="20170725 17:49:55.342" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.343">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:55.343" starttime="20170725 17:49:55.343" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.343" starttime="20170725 17:49:55.082" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.343" starttime="20170725 17:49:55.082" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.343" starttime="20170725 17:49:55.081" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.344">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170725 17:49:55.344" starttime="20170725 17:49:55.344" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170725 17:49:55.345" starttime="20170725 17:49:55.344" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.389">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:49:55.389">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170725 17:49:55.389" starttime="20170725 17:49:55.345" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170725 17:49:55.390" starttime="20170725 17:49:55.390" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:49:55.390">Delete All Sessions</msg>
<status endtime="20170725 17:49:55.391" starttime="20170725 17:49:55.390" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:55.391">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170725 17:49:55.391" starttime="20170725 17:49:55.081" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.392">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170725 17:49:55.392">404 != 200</msg>
<status endtime="20170725 17:49:55.392" starttime="20170725 17:49:55.392" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:55.392">${status} = False</msg>
<status endtime="20170725 17:49:55.392" starttime="20170725 17:49:55.391" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170725 17:49:55.393">Continuing for loop from the next iteration.</msg>
<status endtime="20170725 17:49:55.393" starttime="20170725 17:49:55.393" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.393" starttime="20170725 17:49:55.393" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.393" starttime="20170725 17:49:55.080" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.394">${logpath} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_elog.txt</msg>
<status endtime="20170725 17:49:55.394" starttime="20170725 17:49:55.394" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.397">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:49:55.397" starttime="20170725 17:49:55.396" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.398">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:49:55.398" starttime="20170725 17:49:55.398" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.399">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:49:55.399" starttime="20170725 17:49:55.399" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.400">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:49:55.400" starttime="20170725 17:49:55.400" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.587">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:49:55.588" starttime="20170725 17:49:55.401" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:55.588">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:55.588">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:55.588" starttime="20170725 17:49:55.401" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.588">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:55.588" starttime="20170725 17:49:55.588" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.589">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:55.589" starttime="20170725 17:49:55.589" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.589" starttime="20170725 17:49:55.396" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.589" starttime="20170725 17:49:55.396" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.589" starttime="20170725 17:49:55.395" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.590">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170725 17:49:55.590" starttime="20170725 17:49:55.590" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170725 17:49:55.591" starttime="20170725 17:49:55.590" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.788">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:49:55.788">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:55.788" starttime="20170725 17:49:55.591" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170725 17:49:55.789" starttime="20170725 17:49:55.789" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:49:55.789">Delete All Sessions</msg>
<status endtime="20170725 17:49:55.789" starttime="20170725 17:49:55.789" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:55.790">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:49:55.790" starttime="20170725 17:49:55.394" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.791">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:49:55.791" starttime="20170725 17:49:55.790" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:55.791">${status} = True</msg>
<status endtime="20170725 17:49:55.791" starttime="20170725 17:49:55.790" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170725 17:49:55.792" starttime="20170725 17:49:55.791" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.793">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501004450432, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 08 10 86 c6 50 00 00 00 08 10 cd c2 a0 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 02 89 00 00 02 55 48 00 18 01 00 e5 00 10 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 00 20 00 00 00 05 00 01 00 00 03 03 9f 05 00 34 00 00 00 00 42 43 31 30 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 0d 69 8b 00 00 00 05 00 00 00 00 00 00 00 00 ff ff ff ff 23 01 00 02 00 05 01 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 05 00 01 00 03 20 02 9e 81 db c0 00 01 00 01 03 03 00 00 00 00 00 01 00 05 00 01 01 05 00 00 00 00 00 00 55 44 02 1c 02 01 e5 00 00 00 00 02 e4 00 05 00 01 00 00 00 00 3d d1 13 00 08 60 04 02 00 02 00 00 dd b6 00 08 04 00 02 04 00 80 02 00 51 3a 00 00 08 0f ff bc 2b fc 40 01 00 00 0f 0c 00 08 f0 04 44 21 09 82 06 80 00 03 e2 00 01 80 00 ac c5 00 08 f7 ff ff ff 83 13 40 ff b5 a3 00 08 0f c0 04 42 40 b6 15 40 10 03 fc 00 ff ef 0c ff e0 06 5a 09 81 13 40 c0 00 00 00 7f 90 00 08 11 07 08 20 eb c3 0d 00 29 4f 00 08 30 09 82 10 7e 40 1d 00 06 61 1b 87 02 1d 60 00 08 4c 70 04 43 1d 48 64 27 87 26 b9 06 80 20 01 02 02 00 0d 7c 00 06 68 1b 87 f1 09 25 00 08 fe 04 44 8c 45 06 80 ca 01 c1 02 00 06 6f 1b 83 1f 1d 40 80 65 2d 0f 81 1c c2 00 f6 3c 40 11 3b 01 92 02 00 02 11 06 80 ff 1f 3d c2 a5 40 00 03 87 ee e1 00 08 0e 1c 82 04 43 f8 bf 00 08 f1 40 83 00 60 a8 4b 40 13 42 fc 00 00 d6 28 02 00 08 3f 02 06 f8 04 41 7d 60 e7 4e 82 04 42 60 de 00 08 18 92 0d 04 ca e3 03 80 04 7c 04 42 6f c4 12 40 04 44 04 bb 5b 0f 81 fa f8 02 00 ff 00 04 99 2b 5d 87 99 a9 3c 40 91 5f 40 0f 5f 40 d6 08 5d 85 18 08 00 31 54 40 02 00 40 04 02 10 80 00 1b 12 40 95 54 02 1f 03 80 11 0f cf 88 fc 21 80 04 44 21 c4 db 4e 80 24 f0 30 3f 13 40 54 ae 2d 41 4b 04 43 16 75 41 6d b0 4b 00 1c 01 4c d8 1b 87 cd 45 40 16 05 54 26 48 41 38 04 43 30 4b 48 e4 71 89 5d 86 01 a2 55 69 87 3b 33 06 80 0a c3 00 0c 05 02 00 b5 1b 40 03 08 f3 00 00 3f 02 00 43 d2 00 10 08 0b 60 04 43 39 5d 00 08 09 06 c0 6c cc 04 41 d9 cc 06 80 44 3f 94 c2 00 d8 99 03 87 f5 7d d4 12 80 04 44 83 60 40 28 04 44 fb 1e ac 5d 82 37 04 41 c9 a8 43 02 00 80 03 2e 4d 19 5d 84 b0 56 80 33 40 04 41 03 80 0d 00 3c bd 00 08 9f c0 20 01 00 f0 00 40 00 2c cd 5d 82 00 08 10 a6 f8 2f 00 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 66 61 38 62 65 39 2f 68 62 69 72 74 2e 62 69 6e 00 00 00"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501004451327, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 5a 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 07 e0 61 75 00 00 00 00 07 e0 a7 39 50 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 01 89 00 00 01 55 48 00 18 01 00 e5 00 10 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 00 20 00 00 00 05 00 00 00 00 03 03 9f 05 00 34 00 00 00 00 42 43 31 30 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 0d 59 7f 00 00 00 05 00 00 00 00 00 00 00 00 ff ff ff ff 23 01 00 02 00 05 00 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 05 00 00 00 03 20 01 9e 83 0f 80 00 01 00 01 03 03 00 00 00 00 00 01 00 05 00 00 01 05 00 00 00 00 00 00 55 44 02 0c 02 01 e5 00 00 00 00 02 cc 00 05 00 00 00 00 00 00 3b d1 13 00 08 80 01 43 00 00 dd b6 00 08 00 08 02 04 00 80 01 80 51 3a 00 00 08 0f ff bc 2b fc 40 00 02 00 0f 0c 00 08 f0 04 44 09 40 82 06 80 00 03 e2 00 00 01 00 00 ac c5 00 08 f7 ff ff 41 ff 13 40 ff b5 a3 00 08 0f c0 a0 01 82 b6 15 40 10 03 fc 00 ff 06 ef ff e0 06 5a 09 81 13 40 c0 00 00 00 7f 90 00 08 11 07 10 08 eb c3 0d 00 29 4f 00 08 04 30 82 10 7e 40 1d 00 06 61 81 1b 87 1d 60 00 08 4c 70 04 43 24 1d 64 27 87 26 b9 06 80 20 01 01 02 00 0d 7c 00 06 68 1b 87 04 f1 25 00 08 fe 04 44 8c 45 a5 06 80 01 04 43 06 6f 1b 83 1f 1d 40 32 80 2d 0f 81 1c c2 00 f6 3c 40 11 c9 3b 01 01 80 02 11 06 80 ff 1f 3d c2 04 a5 00 00 08 04 04 44 ee e1 08 00 08 0e 1c 04 43 f8 bf 00 26 08 f1 40 83 00 a8 4b 40 13 42 fc 00 00 00 d6 28 00 08 3f 02 26 06 f8 01 81 7d e7 4e 82 01 82 60 09 de 00 08 18 0d 04 ca e3 45 80 2c 04 7c 01 82 6f 12 40 04 44 04 bb 40 5b 0f 81 fa f8 00 ff 00 04 2a 99 2b 5d 87 99 3c 40 91 5f 40 0f 91 5f 40 d6 08 5d 85 08 00 31 54 40 81 01 80 40 04 02 80 00 1b 12 40 00 95 54 02 1f 80 11 0f cf 32 88 fc 21 80 04 44 c4 db 4e 80 24 15 f0 30 3f 13 40 ae 2d 41 4b 04 43 44 16 75 41 6d b0 00 1c 01 4c d8 b5 1b 87 cd 45 40 16 05 26 48 41 38 04 43 48 30 4b 48 e4 71 5d 86 01 a2 55 95 69 87 3b 33 15 81 c3 01 02 b5 1b 40 04 03 f3 00 10 3f 01 80 43 d2 10 00 08 69 04 44 39 5d 00 08 12 07 e6 1d 46 02 d9 cc 06 80 3e 44 00 95 01 00 d8 99 45 87 f5 7d d4 12 80 04 44 83 60 40 28 04 44 fb 1e ba 5d 82 37 56 02 33 40 01 81 03 0d 00 3c 00 bd 00 08 9f c0 20 00 f0 04 00 40 00 2c cd 5d 82 07 e0 00 85 cf 1f 00 00 00 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 66 61 38 62 65 39 2f 68 62 69 72 74 2e 62 69 6e 00 00 00"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501004670252, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 07 fc f4 69 00 00 00 00 07 fd 35 61 e0 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 02 89 00 00 02 55 48 00 18 01 00 e5 00 10 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 00 20 00 00 00 05 00 01 00 00 03 03 9f 05 00 34 00 00 00 00 42 43 31 30 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 0d 59 7f 00 00 00 05 00 00 00 00 00 00 00 00 ff ff ff ff 23 01 00 02 00 05 01 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 05 00 01 00 03 20 02 9e 83 0f 80 00 01 00 01 03 03 00 00 00 00 00 01 00 05 00 01 01 05 00 00 00 00 00 00 55 44 02 1c 02 01 e5 00 00 00 00 02 e4 00 05 00 01 00 00 00 00 3d d1 13 00 08 60 04 02 00 02 00 00 dd b6 00 08 04 00 02 04 00 80 02 00 51 3a 00 00 08 0f ff bc 2b fc 40 01 00 00 0f 0c 00 08 f0 04 44 21 09 82 06 80 00 03 e2 00 01 80 00 ac c5 00 08 f7 ff ff ff 83 13 40 ff b5 a3 00 08 0f c0 04 42 40 b6 15 40 10 03 fc 00 ff ef 0c ff e0 06 5a 09 81 13 40 c0 00 00 00 7f 90 00 08 11 07 08 20 eb c3 0d 00 29 4f 00 08 30 09 82 10 7e 40 1d 00 06 61 1b 87 02 1d 60 00 08 4c 70 04 43 1d 48 64 27 87 26 b9 06 80 20 01 02 02 00 0d 7c 00 06 68 1b 87 f1 09 25 00 08 fe 04 44 8c 45 06 80 ca 01 c1 02 00 06 6f 1b 83 1f 1d 40 80 65 2d 0f 81 1c c2 00 f6 3c 40 11 3b 01 92 02 00 02 11 06 80 ff 1f 3d c2 a5 40 00 03 87 ee e1 00 08 0e 1c 82 04 43 f8 bf 00 08 f1 40 83 00 60 a8 4b 40 13 42 fc 00 00 d6 28 02 00 08 3f 02 06 f8 04 41 7d 60 e7 4e 82 04 42 60 de 00 08 18 92 0d 04 ca e3 03 80 04 7c 04 42 6f c4 12 40 04 44 04 bb 5b 0f 81 fa f8 02 00 ff 00 04 99 2b 5d 87 99 a9 3c 40 91 5f 40 0f 5f 40 d6 08 5d 85 18 08 00 31 54 40 02 00 40 04 02 10 80 00 1b 12 40 95 54 02 1f 03 80 11 0f cf 88 fc 21 80 04 44 21 c4 db 4e 80 24 f0 30 3f 13 40 54 ae 2d 41 4b 04 43 16 75 41 6d b0 4b 00 1c 01 4c d8 1b 87 cd 45 40 16 05 54 26 48 41 38 04 43 30 4b 48 e4 71 89 5d 86 01 a2 55 69 87 3b 33 06 80 0a c3 00 0c 05 02 00 b5 1b 40 03 60 f3 02 40 02 00 43 d2 00 08 0b 40 60 04 43 39 5d 00 08 07 e0 25 6c cc 04 41 d9 cc 06 80 3e 94 c2 13 00 d8 99 03 87 f5 7d 12 80 04 44 52 83 60 40 28 04 44 fb 1e 5d 82 37 b0 04 41 c9 a8 43 02 00 80 03 4d 19 ba 5d 84 b0 56 80 33 40 04 41 03 0d 00 3c 00 bd 00 08 9f c0 20 00 f0 04 00 40 00 2c cd 5d 82 07 fd 00 15 0d ff 00 00 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 66 61 38 62 65 39 2f 68 62 69 72 74 2e 62 69 6e 00 00 00"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501004671193, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "TIMEOUT_IN_MSEC=300000"
      ], 
      "Id": 7, 
      "Message": "xyz.openbmc_project.State.Host.Error.SoftOffTimeout", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501004932076, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:49:55.793">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170725 17:49:55.793">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/3": {
            "AdditionalData": [],
            "Id": 3,
            "Message": "org.open_power.Error.Host.Event.Event",
            "Re...</msg>
<status endtime="20170725 17:49:55.793" starttime="20170725 17:49:55.792" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.795" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_elog.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:55.795" starttime="20170725 17:49:55.794" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.795" starttime="20170725 17:49:55.793" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.795" starttime="20170725 17:49:55.393" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.795" starttime="20170725 17:49:52.265" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.795" starttime="20170725 17:49:52.264" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.795" starttime="20170725 17:49:52.264" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.795" starttime="20170725 17:49:52.264" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.796" starttime="20170725 17:49:52.263" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.796" starttime="20170725 17:49:52.238" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.796" starttime="20170725 17:49:52.236" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.796" starttime="20170725 17:49:52.236" status="PASS"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170725 17:49:55.798" starttime="20170725 17:49:55.797" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:55.798">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:55.798">${ret_values} = None</msg>
<status endtime="20170725 17:49:55.798" starttime="20170725 17:49:55.797" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170725 17:49:55.798" starttime="20170725 17:49:55.798" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.824">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status endtime="20170725 17:49:55.824" starttime="20170725 17:49:55.824" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.826">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') ]</msg>
<status endtime="20170725 17:49:55.826" starttime="20170725 17:49:55.825" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.831">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170725 17:49:55.831" starttime="20170725 17:49:55.827" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.837" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:55.837" starttime="20170725 17:49:55.837" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.838" starttime="20170725 17:49:55.833" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.839" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:55.839" starttime="20170725 17:49:55.838" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.839" starttime="20170725 17:49:55.838" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.840" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:55.840" starttime="20170725 17:49:55.840" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.840" starttime="20170725 17:49:55.839" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.841" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:55.842" starttime="20170725 17:49:55.841" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.842" starttime="20170725 17:49:55.841" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.842" starttime="20170725 17:49:55.833" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.842" starttime="20170725 17:49:55.832" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.843">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170725 17:49:55.843" starttime="20170725 17:49:55.842" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.918">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:49:55.918">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170725 17:49:55.975">Command exited with return code 0.</msg>
<status endtime="20170725 17:49:55.975" starttime="20170725 17:49:55.876" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:55.975">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:55.975">${ret_values} = (u'Linux witherspoon 4.10.17-d6ae40dc4c4dff3265cc254d404ed6b03fcc2206 #1 Tue Jul 25 16:15:23 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170725 17:49:55.975" starttime="20170725 17:49:55.843" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.976">${stdout} = Linux witherspoon 4.10.17-d6ae40dc4c4dff3265cc254d404ed6b03fcc2206 #1 Tue Jul 25 16:15:23 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170725 17:49:55.976" starttime="20170725 17:49:55.975" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.976">${stderr} = </msg>
<status endtime="20170725 17:49:55.976" starttime="20170725 17:49:55.976" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.983" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:55.983" starttime="20170725 17:49:55.982" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.983" starttime="20170725 17:49:55.982" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.983" starttime="20170725 17:49:55.977" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.983" starttime="20170725 17:49:55.832" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.983" starttime="20170725 17:49:55.831" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.986" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:55.987" starttime="20170725 17:49:55.986" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.987" starttime="20170725 17:49:55.985" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.988" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:55.988" starttime="20170725 17:49:55.988" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.988" starttime="20170725 17:49:55.987" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.989" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:55.989" starttime="20170725 17:49:55.989" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.989" starttime="20170725 17:49:55.988" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:55.991" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:55.991" starttime="20170725 17:49:55.990" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.991" starttime="20170725 17:49:55.990" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.991" starttime="20170725 17:49:55.985" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:55.991" starttime="20170725 17:49:55.984" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:55.992">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170725 17:49:55.992" starttime="20170725 17:49:55.991" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:56.058">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:49:56.059">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170725 17:49:56.115">Command exited with return code 0.</msg>
<status endtime="20170725 17:49:56.116" starttime="20170725 17:49:56.022" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:56.116">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:56.116">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170725 17:49:56.116" starttime="20170725 17:49:55.992" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:56.116">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<status endtime="20170725 17:49:56.116" starttime="20170725 17:49:56.116" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:56.117">${stderr} = </msg>
<status endtime="20170725 17:49:56.117" starttime="20170725 17:49:56.117" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:56.123" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:56.123" starttime="20170725 17:49:56.123" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.123" starttime="20170725 17:49:56.122" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.124" starttime="20170725 17:49:56.117" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.124" starttime="20170725 17:49:55.983" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.124" starttime="20170725 17:49:55.983" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:56.127" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:56.127" starttime="20170725 17:49:56.126" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.127" starttime="20170725 17:49:56.126" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:56.128" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:56.128" starttime="20170725 17:49:56.128" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.128" starttime="20170725 17:49:56.127" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:56.130" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:56.130" starttime="20170725 17:49:56.129" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.130" starttime="20170725 17:49:56.128" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:56.131" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:56.131" starttime="20170725 17:49:56.131" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.131" starttime="20170725 17:49:56.130" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.131" starttime="20170725 17:49:56.125" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.131" starttime="20170725 17:49:56.125" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:56.132">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170725 17:49:56.132" starttime="20170725 17:49:56.132" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:56.198">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:49:56.199">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170725 17:49:56.280">Command exited with return code 0.</msg>
<status endtime="20170725 17:49:56.280" starttime="20170725 17:49:56.163" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:56.280">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:56.280">${ret_values} = (u' 17:49:59 up 18 min,  load average: 0.20, 0.62, 0.89', u'', 0)</msg>
<status endtime="20170725 17:49:56.280" starttime="20170725 17:49:56.132" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:56.281">${stdout} =  17:49:59 up 18 min,  load average: 0.20, 0.62, 0.89</msg>
<status endtime="20170725 17:49:56.281" starttime="20170725 17:49:56.280" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:56.281">${stderr} = </msg>
<status endtime="20170725 17:49:56.281" starttime="20170725 17:49:56.281" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:56.287" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:56.288" starttime="20170725 17:49:56.287" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.288" starttime="20170725 17:49:56.286" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.288" starttime="20170725 17:49:56.282" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.288" starttime="20170725 17:49:56.124" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.288" starttime="20170725 17:49:56.124" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.288" starttime="20170725 17:49:55.831" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.288" starttime="20170725 17:49:55.825" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.288" starttime="20170725 17:49:55.824" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:56.289">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170725 17:49:56.289" starttime="20170725 17:49:56.289" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:56.290">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170725 17:49:56.290" starttime="20170725 17:49:56.290" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:56.293" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:56.293" starttime="20170725 17:49:56.293" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.293" starttime="20170725 17:49:56.292" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:56.295" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:56.295" starttime="20170725 17:49:56.294" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.295" starttime="20170725 17:49:56.294" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:56.296" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:56.296" starttime="20170725 17:49:56.296" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.296" starttime="20170725 17:49:56.295" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:56.298" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:56.298" starttime="20170725 17:49:56.297" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.298" starttime="20170725 17:49:56.296" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.298" starttime="20170725 17:49:56.292" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:56.298" starttime="20170725 17:49:56.291" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:56.299">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170725 17:49:56.299" starttime="20170725 17:49:56.298" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:56.365">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:49:56.366">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170725 17:49:57.722">Command exited with return code 0.</msg>
<status endtime="20170725 17:49:57.722" starttime="20170725 17:49:56.329" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:57.722">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:57.722">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.O...</msg>
<status endtime="20170725 17:49:57.722" starttime="20170725 17:49:56.299" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:57.723">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170725 17:49:57.723" starttime="20170725 17:49:57.722" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:57.723">${stderr} = </msg>
<status endtime="20170725 17:49:57.723" starttime="20170725 17:49:57.723" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:57.730" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:57.730" starttime="20170725 17:49:57.729" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.730" starttime="20170725 17:49:57.728" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.730" starttime="20170725 17:49:57.724" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.730" starttime="20170725 17:49:56.291" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.730" starttime="20170725 17:49:56.290" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.730" starttime="20170725 17:49:56.290" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.730" starttime="20170725 17:49:56.289" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.730" starttime="20170725 17:49:56.288" status="PASS"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:57.731">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170725 17:49:57.731" starttime="20170725 17:49:57.731" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:57.732">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170725 17:49:57.732" starttime="20170725 17:49:57.732" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:57.735" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:57.735" starttime="20170725 17:49:57.735" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.735" starttime="20170725 17:49:57.734" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:57.736" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:57.737" starttime="20170725 17:49:57.736" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.737" starttime="20170725 17:49:57.735" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:57.738" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:57.738" starttime="20170725 17:49:57.737" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.738" starttime="20170725 17:49:57.737" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:57.739" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:57.739" starttime="20170725 17:49:57.739" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.740" starttime="20170725 17:49:57.738" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.740" starttime="20170725 17:49:57.734" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.740" starttime="20170725 17:49:57.733" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:57.741">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170725 17:49:57.741" starttime="20170725 17:49:57.740" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:57.810">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:49:57.811">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170725 17:49:57.857">Command exited with return code 0.</msg>
<status endtime="20170725 17:49:57.857" starttime="20170725 17:49:57.771" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:57.858">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:57.858">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-80"\nVERSION_ID="v1.99.8-80-ga23ff27"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC P...</msg>
<status endtime="20170725 17:49:57.858" starttime="20170725 17:49:57.741" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:57.859">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-80"
VERSION_ID="v1.99.8-80-ga23ff27"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<status endtime="20170725 17:49:57.859" starttime="20170725 17:49:57.858" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:57.860">${stderr} = </msg>
<status endtime="20170725 17:49:57.860" starttime="20170725 17:49:57.859" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:57.869" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:49:57.869" starttime="20170725 17:49:57.869" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.870" starttime="20170725 17:49:57.868" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.870" starttime="20170725 17:49:57.860" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.870" starttime="20170725 17:49:57.732" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.870" starttime="20170725 17:49:57.732" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.870" starttime="20170725 17:49:57.732" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.870" starttime="20170725 17:49:57.730" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.870" starttime="20170725 17:49:57.730" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.870" starttime="20170725 17:49:55.824" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.870" starttime="20170725 17:49:55.823" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.871" starttime="20170725 17:49:55.799" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.871" starttime="20170725 17:49:55.796" status="PASS"></status>
</kw>
<status endtime="20170725 17:49:57.871" starttime="20170725 17:49:55.796" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170725 17:49:57.873" starttime="20170725 17:49:57.873" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:49:57.874">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:49:57.874">${ret_values} = None</msg>
<status endtime="20170725 17:49:57.874" starttime="20170725 17:49:57.872" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170725 17:49:57.874" starttime="20170725 17:49:57.874" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:57.900">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170725 17:49:57.900" starttime="20170725 17:49:57.900" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:57.902">@{cmd_list} = [ ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_fd...</msg>
<status endtime="20170725 17:49:57.902" starttime="20170725 17:49:57.901" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:57.902">${logpath} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_journalctl.txt</msg>
<status endtime="20170725 17:49:57.903" starttime="20170725 17:49:57.902" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170725 17:49:57.904" starttime="20170725 17:49:57.903" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:49:57.905">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170725 17:49:57.905" starttime="20170725 17:49:57.904" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:49:57.971">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:49:57.971">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170725 17:50:01.118">Command exited with return code 0.</msg>
<status endtime="20170725 17:50:01.118" starttime="20170725 17:49:57.935" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:01.118">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:50:01.123">${ret_values} = (u'-- Logs begin at Tue 2017-07-25 17:31:58 UTC, end at Tue 2017-07-25 17:49:58 UTC. --\nJul 25 17:31:58 witherspoon kernel: Booting Linux on physical CPU 0x0\nJul 25 17:31:58 witherspoon kernel: Linu...</msg>
<status endtime="20170725 17:50:01.123" starttime="20170725 17:49:57.905" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.125">${stdout} = -- Logs begin at Tue 2017-07-25 17:31:58 UTC, end at Tue 2017-07-25 17:49:58 UTC. --
Jul 25 17:31:58 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 25 17:31:58 witherspoon kernel: Linux ver...</msg>
<status endtime="20170725 17:50:01.125" starttime="20170725 17:50:01.124" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.126">${stderr} = </msg>
<status endtime="20170725 17:50:01.126" starttime="20170725 17:50:01.125" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:01.135" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_journalctl.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:01.135" starttime="20170725 17:50:01.133" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.135" starttime="20170725 17:50:01.131" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.135" starttime="20170725 17:50:01.126" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.135" starttime="20170725 17:49:57.903" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.135" starttime="20170725 17:49:57.902" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.136">${logpath} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_proc_list.txt</msg>
<status endtime="20170725 17:50:01.136" starttime="20170725 17:50:01.135" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170725 17:50:01.137" starttime="20170725 17:50:01.137" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.138">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170725 17:50:01.138" starttime="20170725 17:50:01.138" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:01.204">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:50:01.204">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170725 17:50:01.503">Command exited with return code 0.</msg>
<status endtime="20170725 17:50:01.503" starttime="20170725 17:50:01.169" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:01.503">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:50:01.503">${ret_values} = (u'Mem: 154740K used, 277540K free, 15624K shrd, 11176K buff, 53032K cached\nCPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq\nLoad average: 0.27 0.63 0.90 1/140 2116\n  PID  PPID ...</msg>
<status endtime="20170725 17:50:01.503" starttime="20170725 17:50:01.138" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.504">${stdout} = Mem: 154740K used, 277540K free, 15624K shrd, 11176K buff, 53032K cached
CPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 0.27 0.63 0.90 1/140 2116
  PID  PPID USER  ...</msg>
<status endtime="20170725 17:50:01.504" starttime="20170725 17:50:01.504" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.505">${stderr} = </msg>
<status endtime="20170725 17:50:01.505" starttime="20170725 17:50:01.504" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:01.511" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_proc_list.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:01.511" starttime="20170725 17:50:01.511" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.511" starttime="20170725 17:50:01.510" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.512" starttime="20170725 17:50:01.505" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.512" starttime="20170725 17:50:01.136" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.512" starttime="20170725 17:50:01.135" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.512">${logpath} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_meminfo.txt</msg>
<status endtime="20170725 17:50:01.513" starttime="20170725 17:50:01.512" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170725 17:50:01.514" starttime="20170725 17:50:01.513" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.515">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170725 17:50:01.515" starttime="20170725 17:50:01.514" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:01.581">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:50:01.582">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170725 17:50:01.690">Command exited with return code 0.</msg>
<status endtime="20170725 17:50:01.690" starttime="20170725 17:50:01.545" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:01.690">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:50:01.690">${ret_values} = (u'MemTotal:         432280 kB\nMemFree:          277540 kB\nMemAvailable:     323700 kB\nBuffers:           11176 kB\nCached:            53032 kB\nSwapCached:            0 kB\nActive:           10302...</msg>
<status endtime="20170725 17:50:01.690" starttime="20170725 17:50:01.515" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.691">${stdout} = MemTotal:         432280 kB
MemFree:          277540 kB
MemAvailable:     323700 kB
Buffers:           11176 kB
Cached:            53032 kB
SwapCached:            0 kB
Active:           103020 kB
Inac...</msg>
<status endtime="20170725 17:50:01.691" starttime="20170725 17:50:01.691" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.692">${stderr} = </msg>
<status endtime="20170725 17:50:01.692" starttime="20170725 17:50:01.691" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:01.698" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_meminfo.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:01.698" starttime="20170725 17:50:01.697" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.698" starttime="20170725 17:50:01.697" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.698" starttime="20170725 17:50:01.692" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.699" starttime="20170725 17:50:01.513" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.699" starttime="20170725 17:50:01.512" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.699">${logpath} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_procinfo.txt</msg>
<status endtime="20170725 17:50:01.699" starttime="20170725 17:50:01.699" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170725 17:50:01.701" starttime="20170725 17:50:01.700" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.701">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170725 17:50:01.701" starttime="20170725 17:50:01.701" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:01.767">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:50:01.768">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170725 17:50:01.825">Command exited with return code 0.</msg>
<status endtime="20170725 17:50:01.825" starttime="20170725 17:50:01.732" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:01.825">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:50:01.825">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170725 17:50:01.825" starttime="20170725 17:50:01.702" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.826">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170725 17:50:01.826" starttime="20170725 17:50:01.825" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.826">${stderr} = </msg>
<status endtime="20170725 17:50:01.826" starttime="20170725 17:50:01.826" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:01.832" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_procinfo.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:01.833" starttime="20170725 17:50:01.832" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.833" starttime="20170725 17:50:01.831" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.833" starttime="20170725 17:50:01.826" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.833" starttime="20170725 17:50:01.700" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.833" starttime="20170725 17:50:01.699" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.834">${logpath} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_dmesg.txt</msg>
<status endtime="20170725 17:50:01.834" starttime="20170725 17:50:01.833" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170725 17:50:01.835" starttime="20170725 17:50:01.835" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.836">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170725 17:50:01.836" starttime="20170725 17:50:01.835" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:01.902">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:50:01.903">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170725 17:50:01.970">Command exited with return code 0.</msg>
<status endtime="20170725 17:50:01.970" starttime="20170725 17:50:01.867" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:01.970">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:50:01.970">${ret_values} = (u"[    4.870000] rtc-rv8803 11-0032: setting system clock to 2017-07-25 17:31:44 UTC (1501003904)\n[    4.870000] Freeing unused kernel memory: 284K\n[    4.870000] This architecture does not have ke...</msg>
<status endtime="20170725 17:50:01.970" starttime="20170725 17:50:01.836" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.971">${stdout} = [    4.870000] rtc-rv8803 11-0032: setting system clock to 2017-07-25 17:31:44 UTC (1501003904)
[    4.870000] Freeing unused kernel memory: 284K
[    4.870000] This architecture does not have kernel ...</msg>
<status endtime="20170725 17:50:01.971" starttime="20170725 17:50:01.971" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.972">${stderr} = </msg>
<status endtime="20170725 17:50:01.972" starttime="20170725 17:50:01.971" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:01.978" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_dmesg.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:01.978" starttime="20170725 17:50:01.978" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.978" starttime="20170725 17:50:01.977" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.979" starttime="20170725 17:50:01.972" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.979" starttime="20170725 17:50:01.834" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:01.979" starttime="20170725 17:50:01.833" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.979">${logpath} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170725 17:50:01.979" starttime="20170725 17:50:01.979" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170725 17:50:01.981" starttime="20170725 17:50:01.980" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:01.982">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170725 17:50:01.982" starttime="20170725 17:50:01.981" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:02.048">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:50:02.048">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170725 17:50:02.508">Command exited with return code 0.</msg>
<status endtime="20170725 17:50:02.509" starttime="20170725 17:50:02.012" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:02.509">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:50:02.510">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Jul 25 17:50 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Jul 25 17:50 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170725 17:50:02.510" starttime="20170725 17:50:01.982" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:02.511">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Jul 25 17:50 0 -&gt; /dev/null
lrwx------    1 root     root            64 Jul 25 17:50 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170725 17:50:02.511" starttime="20170725 17:50:02.510" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:02.511">${stderr} = ls: /proc/2120/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170725 17:50:02.511" starttime="20170725 17:50:02.511" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:02.519" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:02.519" starttime="20170725 17:50:02.518" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:02.519" starttime="20170725 17:50:02.516" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:02.519" starttime="20170725 17:50:02.512" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:02.519" starttime="20170725 17:50:01.980" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:02.519" starttime="20170725 17:50:01.979" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:02.519" starttime="20170725 17:49:57.902" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:02.519" starttime="20170725 17:49:57.901" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:02.519" starttime="20170725 17:49:57.901" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:02.520" starttime="20170725 17:49:57.900" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:02.520" starttime="20170725 17:49:57.899" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:02.520" starttime="20170725 17:49:57.875" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:02.520" starttime="20170725 17:49:57.871" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:02.520" starttime="20170725 17:49:57.871" status="PASS"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170725 17:50:02.522" starttime="20170725 17:50:02.521" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:02.522">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:50:02.522">${ret_values} = None</msg>
<status endtime="20170725 17:50:02.522" starttime="20170725 17:50:02.521" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170725 17:50:02.522" starttime="20170725 17:50:02.522" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:02.579">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:50:02.579">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170725 17:50:02.636">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170725 17:50:02.648">${core_files} = /tmp/core_phosphor-fan-co.2057
/tmp/core_phosphor-fan-co.2061
/tmp/core_phosphor-fan-co.2067</msg>
<msg level="INFO" timestamp="20170725 17:50:02.648">${stderr} = </msg>
<msg level="INFO" timestamp="20170725 17:50:02.648">${rc} = 0</msg>
<status endtime="20170725 17:50:02.648" starttime="20170725 17:50:02.548" status="PASS"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:02.649">@{core_list} = [ /tmp/core_phosphor-fan-co.2057 | /tmp/core_phosphor-fan-co.2061 | /tmp/core_phosphor-fan-co.2067 ]</msg>
<status endtime="20170725 17:50:02.649" starttime="20170725 17:50:02.649" status="PASS"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170725 17:50:02.670" starttime="20170725 17:50:02.659" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170725 17:50:03.307" starttime="20170725 17:50:02.672" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:03.307" starttime="20170725 17:50:02.671" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:03.307" starttime="20170725 17:50:02.670" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:03.307" starttime="20170725 17:50:02.659" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:03.308" starttime="20170725 17:50:02.649" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_phosphor-fan-co.2057" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170725 17:50:03.567" starttime="20170725 17:50:03.308" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:03.600">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:50:03.600">Executing command 'rm /tmp/core_phosphor-fan-co.2057'.</msg>
<msg level="INFO" timestamp="20170725 17:50:03.648">Command exited with return code 0.</msg>
<status endtime="20170725 17:50:03.659" starttime="20170725 17:50:03.568" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:03.659" starttime="20170725 17:50:03.308" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-co.2061" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170725 17:50:03.943" starttime="20170725 17:50:03.660" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:03.976">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:50:03.976">Executing command 'rm /tmp/core_phosphor-fan-co.2061'.</msg>
<msg level="INFO" timestamp="20170725 17:50:04.024">Command exited with return code 0.</msg>
<status endtime="20170725 17:50:04.036" starttime="20170725 17:50:03.944" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:04.036" starttime="20170725 17:50:03.659" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-co.2067" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170725 17:50:04.287" starttime="20170725 17:50:04.036" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:04.321">alias=bmc_connection
prompt=# 
encoding=UTF-8
newline=

term_type=vt100
width=80
host=9.3.21.61
height=24
index=1
path_separator=/
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170725 17:50:04.322">Executing command 'rm /tmp/core_phosphor-fan-co.2067'.</msg>
<msg level="INFO" timestamp="20170725 17:50:04.380">Command exited with return code 0.</msg>
<status endtime="20170725 17:50:04.393" starttime="20170725 17:50:04.288" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:04.393" starttime="20170725 17:50:04.036" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:04.393" starttime="20170725 17:50:03.308" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:04.394" starttime="20170725 17:50:02.548" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:04.394" starttime="20170725 17:50:02.523" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:04.394" starttime="20170725 17:50:02.520" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:04.394" starttime="20170725 17:50:02.520" status="PASS"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170725 17:50:04.397" starttime="20170725 17:50:04.396" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:04.397">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:50:04.397">${ret_values} = None</msg>
<status endtime="20170725 17:50:04.397" starttime="20170725 17:50:04.396" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170725 17:50:04.398" starttime="20170725 17:50:04.398" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:04.428">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:50:04.428" starttime="20170725 17:50:04.427" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:04.429">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:50:04.429" starttime="20170725 17:50:04.428" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:04.429">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:50:04.429" starttime="20170725 17:50:04.429" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:04.430">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:50:04.430" starttime="20170725 17:50:04.430" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:04.617">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:50:04.617" starttime="20170725 17:50:04.431" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:04.617">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:50:04.617">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:04.617" starttime="20170725 17:50:04.430" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:04.618">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:04.618" starttime="20170725 17:50:04.618" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:04.619">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:04.619" starttime="20170725 17:50:04.618" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:04.619" starttime="20170725 17:50:04.426" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:04.619" starttime="20170725 17:50:04.426" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:04.619" starttime="20170725 17:50:04.425" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:04.620">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170725 17:50:04.620" starttime="20170725 17:50:04.619" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170725 17:50:04.620" starttime="20170725 17:50:04.620" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:04.858">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:50:04.859">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:04.859" starttime="20170725 17:50:04.621" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170725 17:50:04.859" starttime="20170725 17:50:04.859" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:50:04.860">Delete All Sessions</msg>
<status endtime="20170725 17:50:04.860" starttime="20170725 17:50:04.860" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:04.860">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:04.860" starttime="20170725 17:50:04.425" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:04.861">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:04.861" starttime="20170725 17:50:04.861" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:04.861">${status} = True</msg>
<status endtime="20170725 17:50:04.861" starttime="20170725 17:50:04.860" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170725 17:50:04.862" starttime="20170725 17:50:04.862" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:04.863">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501004450432, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 08 10 86 c6 50 00 00 00 08 10 cd c2 a0 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 02 89 00 00 02 55 48 00 18 01 00 e5 00 10 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 00 20 00 00 00 05 00 01 00 00 03 03 9f 05 00 34 00 00 00 00 42 43 31 30 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 0d 69 8b 00 00 00 05 00 00 00 00 00 00 00 00 ff ff ff ff 23 01 00 02 00 05 01 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 05 00 01 00 03 20 02 9e 81 db c0 00 01 00 01 03 03 00 00 00 00 00 01 00 05 00 01 01 05 00 00 00 00 00 00 55 44 02 1c 02 01 e5 00 00 00 00 02 e4 00 05 00 01 00 00 00 00 3d d1 13 00 08 60 04 02 00 02 00 00 dd b6 00 08 04 00 02 04 00 80 02 00 51 3a 00 00 08 0f ff bc 2b fc 40 01 00 00 0f 0c 00 08 f0 04 44 21 09 82 06 80 00 03 e2 00 01 80 00 ac c5 00 08 f7 ff ff ff 83 13 40 ff b5 a3 00 08 0f c0 04 42 40 b6 15 40 10 03 fc 00 ff ef 0c ff e0 06 5a 09 81 13 40 c0 00 00 00 7f 90 00 08 11 07 08 20 eb c3 0d 00 29 4f 00 08 30 09 82 10 7e 40 1d 00 06 61 1b 87 02 1d 60 00 08 4c 70 04 43 1d 48 64 27 87 26 b9 06 80 20 01 02 02 00 0d 7c 00 06 68 1b 87 f1 09 25 00 08 fe 04 44 8c 45 06 80 ca 01 c1 02 00 06 6f 1b 83 1f 1d 40 80 65 2d 0f 81 1c c2 00 f6 3c 40 11 3b 01 92 02 00 02 11 06 80 ff 1f 3d c2 a5 40 00 03 87 ee e1 00 08 0e 1c 82 04 43 f8 bf 00 08 f1 40 83 00 60 a8 4b 40 13 42 fc 00 00 d6 28 02 00 08 3f 02 06 f8 04 41 7d 60 e7 4e 82 04 42 60 de 00 08 18 92 0d 04 ca e3 03 80 04 7c 04 42 6f c4 12 40 04 44 04 bb 5b 0f 81 fa f8 02 00 ff 00 04 99 2b 5d 87 99 a9 3c 40 91 5f 40 0f 5f 40 d6 08 5d 85 18 08 00 31 54 40 02 00 40 04 02 10 80 00 1b 12 40 95 54 02 1f 03 80 11 0f cf 88 fc 21 80 04 44 21 c4 db 4e 80 24 f0 30 3f 13 40 54 ae 2d 41 4b 04 43 16 75 41 6d b0 4b 00 1c 01 4c d8 1b 87 cd 45 40 16 05 54 26 48 41 38 04 43 30 4b 48 e4 71 89 5d 86 01 a2 55 69 87 3b 33 06 80 0a c3 00 0c 05 02 00 b5 1b 40 03 08 f3 00 00 3f 02 00 43 d2 00 10 08 0b 60 04 43 39 5d 00 08 09 06 c0 6c cc 04 41 d9 cc 06 80 44 3f 94 c2 00 d8 99 03 87 f5 7d d4 12 80 04 44 83 60 40 28 04 44 fb 1e ac 5d 82 37 04 41 c9 a8 43 02 00 80 03 2e 4d 19 5d 84 b0 56 80 33 40 04 41 03 80 0d 00 3c bd 00 08 9f c0 20 01 00 f0 00 40 00 2c cd 5d 82 00 08 10 a6 f8 2f 00 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 66 61 38 62 65 39 2f 68 62 69 72 74 2e 62 69 6e 00 00 00"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501004451327, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 5a 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 07 e0 61 75 00 00 00 00 07 e0 a7 39 50 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 01 89 00 00 01 55 48 00 18 01 00 e5 00 10 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 00 20 00 00 00 05 00 00 00 00 03 03 9f 05 00 34 00 00 00 00 42 43 31 30 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 0d 59 7f 00 00 00 05 00 00 00 00 00 00 00 00 ff ff ff ff 23 01 00 02 00 05 00 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 05 00 00 00 03 20 01 9e 83 0f 80 00 01 00 01 03 03 00 00 00 00 00 01 00 05 00 00 01 05 00 00 00 00 00 00 55 44 02 0c 02 01 e5 00 00 00 00 02 cc 00 05 00 00 00 00 00 00 3b d1 13 00 08 80 01 43 00 00 dd b6 00 08 00 08 02 04 00 80 01 80 51 3a 00 00 08 0f ff bc 2b fc 40 00 02 00 0f 0c 00 08 f0 04 44 09 40 82 06 80 00 03 e2 00 00 01 00 00 ac c5 00 08 f7 ff ff 41 ff 13 40 ff b5 a3 00 08 0f c0 a0 01 82 b6 15 40 10 03 fc 00 ff 06 ef ff e0 06 5a 09 81 13 40 c0 00 00 00 7f 90 00 08 11 07 10 08 eb c3 0d 00 29 4f 00 08 04 30 82 10 7e 40 1d 00 06 61 81 1b 87 1d 60 00 08 4c 70 04 43 24 1d 64 27 87 26 b9 06 80 20 01 01 02 00 0d 7c 00 06 68 1b 87 04 f1 25 00 08 fe 04 44 8c 45 a5 06 80 01 04 43 06 6f 1b 83 1f 1d 40 32 80 2d 0f 81 1c c2 00 f6 3c 40 11 c9 3b 01 01 80 02 11 06 80 ff 1f 3d c2 04 a5 00 00 08 04 04 44 ee e1 08 00 08 0e 1c 04 43 f8 bf 00 26 08 f1 40 83 00 a8 4b 40 13 42 fc 00 00 00 d6 28 00 08 3f 02 26 06 f8 01 81 7d e7 4e 82 01 82 60 09 de 00 08 18 0d 04 ca e3 45 80 2c 04 7c 01 82 6f 12 40 04 44 04 bb 40 5b 0f 81 fa f8 00 ff 00 04 2a 99 2b 5d 87 99 3c 40 91 5f 40 0f 91 5f 40 d6 08 5d 85 08 00 31 54 40 81 01 80 40 04 02 80 00 1b 12 40 00 95 54 02 1f 80 11 0f cf 32 88 fc 21 80 04 44 c4 db 4e 80 24 15 f0 30 3f 13 40 ae 2d 41 4b 04 43 44 16 75 41 6d b0 00 1c 01 4c d8 b5 1b 87 cd 45 40 16 05 26 48 41 38 04 43 48 30 4b 48 e4 71 5d 86 01 a2 55 95 69 87 3b 33 15 81 c3 01 02 b5 1b 40 04 03 f3 00 10 3f 01 80 43 d2 10 00 08 69 04 44 39 5d 00 08 12 07 e6 1d 46 02 d9 cc 06 80 3e 44 00 95 01 00 d8 99 45 87 f5 7d d4 12 80 04 44 83 60 40 28 04 44 fb 1e ba 5d 82 37 56 02 33 40 01 81 03 0d 00 3c 00 bd 00 08 9f c0 20 00 f0 04 00 40 00 2c cd 5d 82 07 e0 00 85 cf 1f 00 00 00 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 66 61 38 62 65 39 2f 68 62 69 72 74 2e 62 69 6e 00 00 00"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501004670252, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 07 fc f4 69 00 00 00 00 07 fd 35 61 e0 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 02 89 00 00 02 55 48 00 18 01 00 e5 00 10 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 00 20 00 00 00 05 00 01 00 00 03 03 9f 05 00 34 00 00 00 00 42 43 31 30 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 0d 59 7f 00 00 00 05 00 00 00 00 00 00 00 00 ff ff ff ff 23 01 00 02 00 05 01 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 05 00 01 00 03 20 02 9e 83 0f 80 00 01 00 01 03 03 00 00 00 00 00 01 00 05 00 01 01 05 00 00 00 00 00 00 55 44 02 1c 02 01 e5 00 00 00 00 02 e4 00 05 00 01 00 00 00 00 3d d1 13 00 08 60 04 02 00 02 00 00 dd b6 00 08 04 00 02 04 00 80 02 00 51 3a 00 00 08 0f ff bc 2b fc 40 01 00 00 0f 0c 00 08 f0 04 44 21 09 82 06 80 00 03 e2 00 01 80 00 ac c5 00 08 f7 ff ff ff 83 13 40 ff b5 a3 00 08 0f c0 04 42 40 b6 15 40 10 03 fc 00 ff ef 0c ff e0 06 5a 09 81 13 40 c0 00 00 00 7f 90 00 08 11 07 08 20 eb c3 0d 00 29 4f 00 08 30 09 82 10 7e 40 1d 00 06 61 1b 87 02 1d 60 00 08 4c 70 04 43 1d 48 64 27 87 26 b9 06 80 20 01 02 02 00 0d 7c 00 06 68 1b 87 f1 09 25 00 08 fe 04 44 8c 45 06 80 ca 01 c1 02 00 06 6f 1b 83 1f 1d 40 80 65 2d 0f 81 1c c2 00 f6 3c 40 11 3b 01 92 02 00 02 11 06 80 ff 1f 3d c2 a5 40 00 03 87 ee e1 00 08 0e 1c 82 04 43 f8 bf 00 08 f1 40 83 00 60 a8 4b 40 13 42 fc 00 00 d6 28 02 00 08 3f 02 06 f8 04 41 7d 60 e7 4e 82 04 42 60 de 00 08 18 92 0d 04 ca e3 03 80 04 7c 04 42 6f c4 12 40 04 44 04 bb 5b 0f 81 fa f8 02 00 ff 00 04 99 2b 5d 87 99 a9 3c 40 91 5f 40 0f 5f 40 d6 08 5d 85 18 08 00 31 54 40 02 00 40 04 02 10 80 00 1b 12 40 95 54 02 1f 03 80 11 0f cf 88 fc 21 80 04 44 21 c4 db 4e 80 24 f0 30 3f 13 40 54 ae 2d 41 4b 04 43 16 75 41 6d b0 4b 00 1c 01 4c d8 1b 87 cd 45 40 16 05 54 26 48 41 38 04 43 30 4b 48 e4 71 89 5d 86 01 a2 55 69 87 3b 33 06 80 0a c3 00 0c 05 02 00 b5 1b 40 03 60 f3 02 40 02 00 43 d2 00 08 0b 40 60 04 43 39 5d 00 08 07 e0 25 6c cc 04 41 d9 cc 06 80 3e 94 c2 13 00 d8 99 03 87 f5 7d 12 80 04 44 52 83 60 40 28 04 44 fb 1e 5d 82 37 b0 04 41 c9 a8 43 02 00 80 03 4d 19 ba 5d 84 b0 56 80 33 40 04 41 03 0d 00 3c 00 bd 00 08 9f c0 20 00 f0 04 00 40 00 2c cd 5d 82 07 fd 00 15 0d ff 00 00 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 66 61 38 62 65 39 2f 68 62 69 72 74 2e 62 69 6e 00 00 00"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501004671193, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "TIMEOUT_IN_MSEC=300000"
      ], 
      "Id": 7, 
      "Message": "xyz.openbmc_project.State.Host.Error.SoftOffTimeout", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501004932076, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:50:04.863">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:50:04.863">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/4': {u'Message': u'org.open_power.Error.Host.Event.Event', u'Timestamp': 1501004451327, u'Resolved': 0, u'Sever...</msg>
<status endtime="20170725 17:50:04.863" starttime="20170725 17:50:04.862" status="PASS"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:04.864">${esel_list} = [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/entry/5', u'/xyz/openbmc_project/logging/entry/6', u'/xyz/openbmc_project/logging/entr...</msg>
<status endtime="20170725 17:50:04.864" starttime="20170725 17:50:04.864" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:04.865">${logpath} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel</msg>
<status endtime="20170725 17:50:04.865" starttime="20170725 17:50:04.864" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:04.865" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:04.866" starttime="20170725 17:50:04.865" status="PASS"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:04.869">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:50:04.870" starttime="20170725 17:50:04.869" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:04.870">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:50:04.870" starttime="20170725 17:50:04.870" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:04.871">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:50:04.871" starttime="20170725 17:50:04.871" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:04.872">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:50:04.872" starttime="20170725 17:50:04.871" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.063">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:50:05.063" starttime="20170725 17:50:04.872" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:05.063">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:50:05.063">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:05.063" starttime="20170725 17:50:04.872" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.064">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:05.064" starttime="20170725 17:50:05.064" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.065">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:05.065" starttime="20170725 17:50:05.064" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:05.065" starttime="20170725 17:50:04.869" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:05.065" starttime="20170725 17:50:04.868" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:05.065" starttime="20170725 17:50:04.867" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.066">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170725 17:50:05.066" starttime="20170725 17:50:05.065" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170725 17:50:05.066" starttime="20170725 17:50:05.066" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.152">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:50:05.153">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:05.153" starttime="20170725 17:50:05.067" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170725 17:50:05.153" starttime="20170725 17:50:05.153" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:50:05.154">Delete All Sessions</msg>
<status endtime="20170725 17:50:05.154" starttime="20170725 17:50:05.154" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:05.154">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:05.154" starttime="20170725 17:50:04.867" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.155">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:05.155" starttime="20170725 17:50:05.154" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.155">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:50:05.155">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:50:05.155">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170725 17:50:05.155" starttime="20170725 17:50:05.155" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:05.156">${esel_data} = []</msg>
<status endtime="20170725 17:50:05.156" starttime="20170725 17:50:04.866" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.156">Length is 0</msg>
<msg level="INFO" timestamp="20170725 17:50:05.156">${length} = 0</msg>
<status endtime="20170725 17:50:05.156" starttime="20170725 17:50:05.156" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.157">Continuing for loop from the next iteration.</msg>
<status endtime="20170725 17:50:05.157" starttime="20170725 17:50:05.157" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:05.157" starttime="20170725 17:50:04.866" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.162">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:50:05.163" starttime="20170725 17:50:05.162" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.163">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:50:05.164" starttime="20170725 17:50:05.163" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.164">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:50:05.164" starttime="20170725 17:50:05.164" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.165">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:50:05.165" starttime="20170725 17:50:05.164" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.355">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:50:05.355" starttime="20170725 17:50:05.166" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:05.355">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:50:05.355">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:05.355" starttime="20170725 17:50:05.165" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.356">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:05.356" starttime="20170725 17:50:05.355" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.356">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:05.356" starttime="20170725 17:50:05.356" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:05.357" starttime="20170725 17:50:05.161" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:05.357" starttime="20170725 17:50:05.161" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:05.357" starttime="20170725 17:50:05.159" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.357">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170725 17:50:05.357" starttime="20170725 17:50:05.357" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170725 17:50:05.358" starttime="20170725 17:50:05.358" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.448">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:50:05.448">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:05.448" starttime="20170725 17:50:05.358" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170725 17:50:05.449" starttime="20170725 17:50:05.448" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:50:05.449">Delete All Sessions</msg>
<status endtime="20170725 17:50:05.449" starttime="20170725 17:50:05.449" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:05.450">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:05.450" starttime="20170725 17:50:05.158" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.450">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:05.450" starttime="20170725 17:50:05.450" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.451">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 08 10 86 c6 50 00 00 00 08 10 cd c2 a0 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 02 89 00 00 02 55 48 00 18 01 00 e5 00 10 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 00 20 00 00 00 05 00 01 00 00 03 03 9f 05 00 34 00 00 00 00 42 43 31 30 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 0d 69 8b 00 00 00 05 00 00 00 00 00 00 00 00 ff ff ff ff 23 01 00 02 00 05 01 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 05 00 01 00 03 20 02 9e 81 db c0 00 01 00 01 03 03 00 00 00 00 00 01 00 05 00 01 01 05 00 00 00 00 00 00 55 44 02 1c 02 01 e5 00 00 00 00 02 e4 00 05 00 01 00 00 00 00 3d d1 13 00 08 60 04 02 00 02 00 00 dd b6 00 08 04 00 02 04 00 80 02 00 51 3a 00 00 08 0f ff bc 2b fc 40 01 00 00 0f 0c 00 08 f0 04 44 21 09 82 06 80 00 03 e2 00 01 80 00 ac c5 00 08 f7 ff ff ff 83 13 40 ff b5 a3 00 08 0f c0 04 42 40 b6 15 40 10 03 fc 00 ff ef 0c ff e0 06 5a 09 81 13 40 c0 00 00 00 7f 90 00 08 11 07 08 20 eb c3 0d 00 29 4f 00 08 30 09 82 10 7e 40 1d 00 06 61 1b 87 02 1d 60 00 08 4c 70 04 43 1d 48 64 27 87 26 b9 06 80 20 01 02 02 00 0d 7c 00 06 68 1b 87 f1 09 25 00 08 fe 04 44 8c 45 06 80 ca 01 c1 02 00 06 6f 1b 83 1f 1d 40 80 65 2d 0f 81 1c c2 00 f6 3c 40 11 3b 01 92 02 00 02 11 06 80 ff 1f 3d c2 a5 40 00 03 87 ee e1 00 08 0e 1c 82 04 43 f8 bf 00 08 f1 40 83 00 60 a8 4b 40 13 42 fc 00 00 d6 28 02 00 08 3f 02 06 f8 04 41 7d 60 e7 4e 82 04 42 60 de 00 08 18 92 0d 04 ca e3 03 80 04 7c 04 42 6f c4 12 40 04 44 04 bb 5b 0f 81 fa f8 02 00 ff 00 04 99 2b 5d 87 99 a9 3c 40 91 5f 40 0f 5f 40 d6 08 5d 85 18 08 00 31 54 40 02 00 40 04 02 10 80 00 1b 12 40 95 54 02 1f 03 80 11 0f cf 88 fc 21 80 04 44 21 c4 db 4e 80 24 f0 30 3f 13 40 54 ae 2d 41 4b 04 43 16 75 41 6d b0 4b 00 1c 01 4c d8 1b 87 cd 45 40 16 05 54 26 48 41 38 04 43 30 4b 48 e4 71 89 5d 86 01 a2 55 69 87 3b 33 06 80 0a c3 00 0c 05 02 00 b5 1b 40 03 08 f3 00 00 3f 02 00 43 d2 00 10 08 0b 60 04 43 39 5d 00 08 09 06 c0 6c cc 04 41 d9 cc 06 80 44 3f 94 c2 00 d8 99 03 87 f5 7d d4 12 80 04 44 83 60 40 28 04 44 fb 1e ac 5d 82 37 04 41 c9 a8 43 02 00 80 03 2e 4d 19 5d 84 b0 56 80 33 40 04 41 03 80 0d 00 3c bd 00 08 9f c0 20 01 00 f0 00 40 00 2c cd 5d 82 00 08 10 a6 f8 2f 00 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 66 61 38 62 65 39 2f 68 62 69 72 74 2e 62 69 6e 00 00 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:50:05.451">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:50:05.451">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 08 10 86 c6 50 00 00 00 08 10 cd c2 a0 42 00 00 07 00 00 00 ...</msg>
<status endtime="20170725 17:50:05.451" starttime="20170725 17:50:05.450" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:05.452">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 08 10 86 c6 50 00 00 00 08 10 cd c2 a0 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 02 89 00 00 02 ...</msg>
<status endtime="20170725 17:50:05.452" starttime="20170725 17:50:05.158" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.452">Length is 1</msg>
<msg level="INFO" timestamp="20170725 17:50:05.452">${length} = 1</msg>
<status endtime="20170725 17:50:05.452" starttime="20170725 17:50:05.452" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170725 17:50:05.453" starttime="20170725 17:50:05.452" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.454" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:05.454" starttime="20170725 17:50:05.454" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:05.454" starttime="20170725 17:50:05.453" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.455" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:05.455" starttime="20170725 17:50:05.455" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:05.456" starttime="20170725 17:50:05.454" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:05.456" starttime="20170725 17:50:05.157" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.459">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:50:05.460" starttime="20170725 17:50:05.459" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.460">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:50:05.460" starttime="20170725 17:50:05.460" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.461">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:50:05.461" starttime="20170725 17:50:05.461" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.462">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:50:05.462" starttime="20170725 17:50:05.461" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.648">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:50:05.648" starttime="20170725 17:50:05.462" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:05.648">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:50:05.648">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:05.648" starttime="20170725 17:50:05.462" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.649">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:05.649" starttime="20170725 17:50:05.648" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.649">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:05.649" starttime="20170725 17:50:05.649" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:05.650" starttime="20170725 17:50:05.458" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:05.650" starttime="20170725 17:50:05.458" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:05.650" starttime="20170725 17:50:05.457" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.650">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status endtime="20170725 17:50:05.650" starttime="20170725 17:50:05.650" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170725 17:50:05.651" starttime="20170725 17:50:05.651" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.755">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:50:05.755">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:05.755" starttime="20170725 17:50:05.651" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170725 17:50:05.756" starttime="20170725 17:50:05.756" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:50:05.756">Delete All Sessions</msg>
<status endtime="20170725 17:50:05.757" starttime="20170725 17:50:05.756" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:05.757">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:05.757" starttime="20170725 17:50:05.456" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.757">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:05.757" starttime="20170725 17:50:05.757" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.758">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 5a 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 07 e0 61 75 00 00 00 00 07 e0 a7 39 50 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 01 89 00 00 01 55 48 00 18 01 00 e5 00 10 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 00 20 00 00 00 05 00 00 00 00 03 03 9f 05 00 34 00 00 00 00 42 43 31 30 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 0d 59 7f 00 00 00 05 00 00 00 00 00 00 00 00 ff ff ff ff 23 01 00 02 00 05 00 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 05 00 00 00 03 20 01 9e 83 0f 80 00 01 00 01 03 03 00 00 00 00 00 01 00 05 00 00 01 05 00 00 00 00 00 00 55 44 02 0c 02 01 e5 00 00 00 00 02 cc 00 05 00 00 00 00 00 00 3b d1 13 00 08 80 01 43 00 00 dd b6 00 08 00 08 02 04 00 80 01 80 51 3a 00 00 08 0f ff bc 2b fc 40 00 02 00 0f 0c 00 08 f0 04 44 09 40 82 06 80 00 03 e2 00 00 01 00 00 ac c5 00 08 f7 ff ff 41 ff 13 40 ff b5 a3 00 08 0f c0 a0 01 82 b6 15 40 10 03 fc 00 ff 06 ef ff e0 06 5a 09 81 13 40 c0 00 00 00 7f 90 00 08 11 07 10 08 eb c3 0d 00 29 4f 00 08 04 30 82 10 7e 40 1d 00 06 61 81 1b 87 1d 60 00 08 4c 70 04 43 24 1d 64 27 87 26 b9 06 80 20 01 01 02 00 0d 7c 00 06 68 1b 87 04 f1 25 00 08 fe 04 44 8c 45 a5 06 80 01 04 43 06 6f 1b 83 1f 1d 40 32 80 2d 0f 81 1c c2 00 f6 3c 40 11 c9 3b 01 01 80 02 11 06 80 ff 1f 3d c2 04 a5 00 00 08 04 04 44 ee e1 08 00 08 0e 1c 04 43 f8 bf 00 26 08 f1 40 83 00 a8 4b 40 13 42 fc 00 00 00 d6 28 00 08 3f 02 26 06 f8 01 81 7d e7 4e 82 01 82 60 09 de 00 08 18 0d 04 ca e3 45 80 2c 04 7c 01 82 6f 12 40 04 44 04 bb 40 5b 0f 81 fa f8 00 ff 00 04 2a 99 2b 5d 87 99 3c 40 91 5f 40 0f 91 5f 40 d6 08 5d 85 08 00 31 54 40 81 01 80 40 04 02 80 00 1b 12 40 00 95 54 02 1f 80 11 0f cf 32 88 fc 21 80 04 44 c4 db 4e 80 24 15 f0 30 3f 13 40 ae 2d 41 4b 04 43 44 16 75 41 6d b0 00 1c 01 4c d8 b5 1b 87 cd 45 40 16 05 26 48 41 38 04 43 48 30 4b 48 e4 71 5d 86 01 a2 55 95 69 87 3b 33 15 81 c3 01 02 b5 1b 40 04 03 f3 00 10 3f 01 80 43 d2 10 00 08 69 04 44 39 5d 00 08 12 07 e6 1d 46 02 d9 cc 06 80 3e 44 00 95 01 00 d8 99 45 87 f5 7d d4 12 80 04 44 83 60 40 28 04 44 fb 1e ba 5d 82 37 56 02 33 40 01 81 03 0d 00 3c 00 bd 00 08 9f c0 20 00 f0 04 00 40 00 2c cd 5d 82 07 e0 00 85 cf 1f 00 00 00 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 66 61 38 62 65 39 2f 68 62 69 72 74 2e 62 69 6e 00 00 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:50:05.758">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:50:05.758">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 5a 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 07 e0 61 75 00 00 00 00 07 e0 a7 39 50 42 00 00 07 00 00 00 ...</msg>
<status endtime="20170725 17:50:05.758" starttime="20170725 17:50:05.758" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:05.759">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 5a 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 07 e0 61 75 00 00 00 00 07 e0 a7 39 50 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 01 89 00 00 01 ...</msg>
<status endtime="20170725 17:50:05.759" starttime="20170725 17:50:05.456" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.759">Length is 1</msg>
<msg level="INFO" timestamp="20170725 17:50:05.759">${length} = 1</msg>
<status endtime="20170725 17:50:05.759" starttime="20170725 17:50:05.759" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170725 17:50:05.760" starttime="20170725 17:50:05.760" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.761" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:05.761" starttime="20170725 17:50:05.761" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:05.761" starttime="20170725 17:50:05.760" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.763" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:05.763" starttime="20170725 17:50:05.762" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:05.763" starttime="20170725 17:50:05.762" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:05.763" starttime="20170725 17:50:05.456" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/6" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:05.766">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:50:05.767" starttime="20170725 17:50:05.766" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.767">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:50:05.767" starttime="20170725 17:50:05.767" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.768">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:50:05.768" starttime="20170725 17:50:05.768" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:05.769">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:50:05.769" starttime="20170725 17:50:05.768" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.002">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:50:06.002" starttime="20170725 17:50:05.769" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:06.002">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:50:06.002">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:06.002" starttime="20170725 17:50:05.769" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.003">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:06.003" starttime="20170725 17:50:06.002" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.003">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:06.003" starttime="20170725 17:50:06.003" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.004" starttime="20170725 17:50:05.766" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.004" starttime="20170725 17:50:05.765" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.004" starttime="20170725 17:50:05.765" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.004">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status endtime="20170725 17:50:06.004" starttime="20170725 17:50:06.004" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170725 17:50:06.005" starttime="20170725 17:50:06.005" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.093">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:50:06.094">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:06.094" starttime="20170725 17:50:06.005" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170725 17:50:06.094" starttime="20170725 17:50:06.094" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:50:06.095">Delete All Sessions</msg>
<status endtime="20170725 17:50:06.095" starttime="20170725 17:50:06.095" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:06.095">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:06.095" starttime="20170725 17:50:05.764" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.096">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:06.096" starttime="20170725 17:50:06.096" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.097">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 07 fc f4 69 00 00 00 00 07 fd 35 61 e0 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 02 89 00 00 02 55 48 00 18 01 00 e5 00 10 03 20 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 e5 04 00 48 00 00 00 e0 00 00 0b 00 00 00 00 00 00 20 00 00 00 05 00 01 00 00 03 03 9f 05 00 34 00 00 00 00 42 43 31 30 45 35 30 34 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 0d 59 7f 00 00 00 05 00 00 00 00 00 00 00 00 ff ff ff ff 23 01 00 02 00 05 01 00 55 44 00 38 01 33 e5 00 4d 53 20 20 44 55 4d 50 40 00 00 00 00 05 00 01 00 03 20 02 9e 83 0f 80 00 01 00 01 03 03 00 00 00 00 00 01 00 05 00 01 01 05 00 00 00 00 00 00 55 44 02 1c 02 01 e5 00 00 00 00 02 e4 00 05 00 01 00 00 00 00 3d d1 13 00 08 60 04 02 00 02 00 00 dd b6 00 08 04 00 02 04 00 80 02 00 51 3a 00 00 08 0f ff bc 2b fc 40 01 00 00 0f 0c 00 08 f0 04 44 21 09 82 06 80 00 03 e2 00 01 80 00 ac c5 00 08 f7 ff ff ff 83 13 40 ff b5 a3 00 08 0f c0 04 42 40 b6 15 40 10 03 fc 00 ff ef 0c ff e0 06 5a 09 81 13 40 c0 00 00 00 7f 90 00 08 11 07 08 20 eb c3 0d 00 29 4f 00 08 30 09 82 10 7e 40 1d 00 06 61 1b 87 02 1d 60 00 08 4c 70 04 43 1d 48 64 27 87 26 b9 06 80 20 01 02 02 00 0d 7c 00 06 68 1b 87 f1 09 25 00 08 fe 04 44 8c 45 06 80 ca 01 c1 02 00 06 6f 1b 83 1f 1d 40 80 65 2d 0f 81 1c c2 00 f6 3c 40 11 3b 01 92 02 00 02 11 06 80 ff 1f 3d c2 a5 40 00 03 87 ee e1 00 08 0e 1c 82 04 43 f8 bf 00 08 f1 40 83 00 60 a8 4b 40 13 42 fc 00 00 d6 28 02 00 08 3f 02 06 f8 04 41 7d 60 e7 4e 82 04 42 60 de 00 08 18 92 0d 04 ca e3 03 80 04 7c 04 42 6f c4 12 40 04 44 04 bb 5b 0f 81 fa f8 02 00 ff 00 04 99 2b 5d 87 99 a9 3c 40 91 5f 40 0f 5f 40 d6 08 5d 85 18 08 00 31 54 40 02 00 40 04 02 10 80 00 1b 12 40 95 54 02 1f 03 80 11 0f cf 88 fc 21 80 04 44 21 c4 db 4e 80 24 f0 30 3f 13 40 54 ae 2d 41 4b 04 43 16 75 41 6d b0 4b 00 1c 01 4c d8 1b 87 cd 45 40 16 05 54 26 48 41 38 04 43 30 4b 48 e4 71 89 5d 86 01 a2 55 69 87 3b 33 06 80 0a c3 00 0c 05 02 00 b5 1b 40 03 60 f3 02 40 02 00 43 d2 00 08 0b 40 60 04 43 39 5d 00 08 07 e0 25 6c cc 04 41 d9 cc 06 80 3e 94 c2 13 00 d8 99 03 87 f5 7d 12 80 04 44 52 83 60 40 28 04 44 fb 1e 5d 82 37 b0 04 41 c9 a8 43 02 00 80 03 4d 19 ba 5d 84 b0 56 80 33 40 04 41 03 0d 00 3c 00 bd 00 08 9f c0 20 00 f0 04 00 40 00 2c cd 5d 82 07 fd 00 15 0d ff 00 00 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 66 61 38 62 65 39 2f 68 62 69 72 74 2e 62 69 6e 00 00 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:50:06.097">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:50:06.097">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 07 fc f4 69 00 00 00 00 07 fd 35 61 e0 42 00 00 07 00 00 00 ...</msg>
<status endtime="20170725 17:50:06.097" starttime="20170725 17:50:06.096" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:06.097">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 04 aa 00 00 50 48 00 30 01 00 e5 00 00 00 00 07 fc f4 69 00 00 00 00 07 fd 35 61 e0 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 89 00 00 02 89 00 00 02 ...</msg>
<status endtime="20170725 17:50:06.097" starttime="20170725 17:50:05.763" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.098">Length is 1</msg>
<msg level="INFO" timestamp="20170725 17:50:06.098">${length} = 1</msg>
<status endtime="20170725 17:50:06.098" starttime="20170725 17:50:06.098" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170725 17:50:06.099" starttime="20170725 17:50:06.098" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.100" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:06.100" starttime="20170725 17:50:06.099" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.100" starttime="20170725 17:50:06.099" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.102" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:06.102" starttime="20170725 17:50:06.101" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.102" starttime="20170725 17:50:06.100" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.102" starttime="20170725 17:50:05.763" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/7" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.105">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170725 17:50:06.106" starttime="20170725 17:50:06.105" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.106">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170725 17:50:06.106" starttime="20170725 17:50:06.106" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.107">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170725 17:50:06.107" starttime="20170725 17:50:06.106" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.107">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170725 17:50:06.107" starttime="20170725 17:50:06.107" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.296">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170725 17:50:06.296" starttime="20170725 17:50:06.108" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:06.296">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:50:06.296">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:06.296" starttime="20170725 17:50:06.108" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.297">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:06.297" starttime="20170725 17:50:06.296" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.297">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:06.298" starttime="20170725 17:50:06.297" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.298" starttime="20170725 17:50:06.104" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.298" starttime="20170725 17:50:06.104" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.298" starttime="20170725 17:50:06.103" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.298">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status endtime="20170725 17:50:06.299" starttime="20170725 17:50:06.298" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170725 17:50:06.299" starttime="20170725 17:50:06.299" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.390">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170725 17:50:06.390">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:06.390" starttime="20170725 17:50:06.299" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170725 17:50:06.391" starttime="20170725 17:50:06.390" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170725 17:50:06.391">Delete All Sessions</msg>
<status endtime="20170725 17:50:06.391" starttime="20170725 17:50:06.391" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:06.392">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170725 17:50:06.392" starttime="20170725 17:50:06.103" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.392">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170725 17:50:06.392" starttime="20170725 17:50:06.392" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.393">To JSON using : content={
  "data": [
    "TIMEOUT_IN_MSEC=300000"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170725 17:50:06.393">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170725 17:50:06.393">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'TIMEOUT_IN_MSEC=300000']}</msg>
<status endtime="20170725 17:50:06.393" starttime="20170725 17:50:06.393" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:06.393">${esel_data} = [u'TIMEOUT_IN_MSEC=300000']</msg>
<status endtime="20170725 17:50:06.393" starttime="20170725 17:50:06.102" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.394">Length is 1</msg>
<msg level="INFO" timestamp="20170725 17:50:06.394">${length} = 1</msg>
<status endtime="20170725 17:50:06.394" starttime="20170725 17:50:06.394" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170725 17:50:06.395" starttime="20170725 17:50:06.394" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.396" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:06.396" starttime="20170725 17:50:06.395" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.396" starttime="20170725 17:50:06.395" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.397" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel"&gt;/tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/20170725174952019592_esel&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:06.397" starttime="20170725 17:50:06.397" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.398" starttime="20170725 17:50:06.396" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.398" starttime="20170725 17:50:06.102" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.398" starttime="20170725 17:50:04.866" status="PASS"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.402">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170725 17:50:06.411">${out} = </msg>
<status endtime="20170725 17:50:06.411" starttime="20170725 17:50:06.398" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170725 17:50:06.415">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170725 17:50:06.415" starttime="20170725 17:50:06.414" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:06.415">${status} = False</msg>
<status endtime="20170725 17:50:06.415" starttime="20170725 17:50:06.413" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.416">Returning from the enclosing user keyword.</msg>
<status endtime="20170725 17:50:06.416" starttime="20170725 17:50:06.415" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.416" starttime="20170725 17:50:04.424" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.416" starttime="20170725 17:50:04.398" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.417" starttime="20170725 17:50:04.394" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.417" starttime="20170725 17:50:04.394" status="PASS"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170725 17:50:06.419" starttime="20170725 17:50:06.418" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:06.419">${status} = PASS</msg>
<msg level="INFO" timestamp="20170725 17:50:06.419">${ret_values} = None</msg>
<status endtime="20170725 17:50:06.419" starttime="20170725 17:50:06.418" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170725 17:50:06.420" starttime="20170725 17:50:06.419" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.449">Returning from the enclosing user keyword.</msg>
<status endtime="20170725 17:50:06.449" starttime="20170725 17:50:06.448" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.449" starttime="20170725 17:50:06.448" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.449" starttime="20170725 17:50:06.420" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.449" starttime="20170725 17:50:06.417" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.449" starttime="20170725 17:50:06.417" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.449" starttime="20170725 17:49:52.235" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.449" starttime="20170725 17:49:52.233" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.450" starttime="20170725 17:49:52.233" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.450" starttime="20170725 17:49:52.233" status="PASS"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170725 17:50:06.457" starttime="20170725 17:50:06.457" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.457" starttime="20170725 17:50:06.450" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.457" starttime="20170725 17:49:52.232" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.457" starttime="20170725 17:49:48.958" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.457" starttime="20170725 17:49:48.958" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170725 17:50:06.458" starttime="20170725 17:50:06.458" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.467">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170725 17:50:06.467" starttime="20170725 17:50:06.459" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.468">${FFDC_DIR_PATH} = /tmp/fspcibld/2705/obmc-robot/logs/20170725174952019592_TestsTestBasicPoweron/20170725174952019592_PowerOnTest/</msg>
<status endtime="20170725 17:50:06.468" starttime="20170725 17:50:06.468" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170725 17:50:06.469" starttime="20170725 17:50:06.468" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170725 17:50:06.469" starttime="20170725 17:50:06.469" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.470" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs"&gt;/tmp/fspcibld/2705/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170725 17:50:06.470" starttime="20170725 17:50:06.469" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.471" html="yes">File '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170725 17:50:06.471" starttime="20170725 17:50:06.470" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:06.471">${exist} = True</msg>
<status endtime="20170725 17:50:06.471" starttime="20170725 17:50:06.470" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170725 17:50:06.472" starttime="20170725 17:50:06.471" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170725 17:50:06.472" starttime="20170725 17:50:06.472" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.473">${cur_time} = 2017-07-25 17:50:06:472947</msg>
<status endtime="20170725 17:50:06.473" starttime="20170725 17:50:06.473" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.474">${cur_time} = 20170725175006472947</msg>
<status endtime="20170725 17:50:06.474" starttime="20170725 17:50:06.473" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:06.474">${cur_time} = 20170725175006472947</msg>
<status endtime="20170725 17:50:06.474" starttime="20170725 17:50:06.472" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.475" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2705/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:06.475" starttime="20170725 17:50:06.474" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.476" starttime="20170725 17:50:06.458" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.476" starttime="20170725 17:49:48.610" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.478">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170725 17:50:06.478" starttime="20170725 17:50:06.477" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.478">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170725 17:50:06.478" starttime="20170725 17:50:06.478" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:06.478">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170725 17:50:06.479" starttime="20170725 17:50:06.477" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.479">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170725 17:50:06.479" starttime="20170725 17:50:06.479" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170725 17:50:06.480" starttime="20170725 17:50:06.480" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.485">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170725 17:50:06.488">${rc} = 0</msg>
<msg level="INFO" timestamp="20170725 17:50:06.488">${output} = /tmp/fspcibld/2705/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170725 17:50:06.488" starttime="20170725 17:50:06.480" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170725 17:50:06.491" starttime="20170725 17:50:06.491" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170725 17:50:06.492" starttime="20170725 17:50:06.492" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.493">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170725 17:50:06.493" starttime="20170725 17:50:06.493" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:06.493">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170725 17:50:06.493" starttime="20170725 17:50:06.479" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.494">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170725 17:50:06.494" starttime="20170725 17:50:06.494" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170725 17:50:06.495" starttime="20170725 17:50:06.494" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.498">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170725 17:50:06.511">${rc} = 0</msg>
<msg level="INFO" timestamp="20170725 17:50:06.511">${os_con_pid} = </msg>
<status endtime="20170725 17:50:06.512" starttime="20170725 17:50:06.495" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170725 17:50:06.515" starttime="20170725 17:50:06.514" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.515">${cmd_buf} = kill -9 </msg>
<status endtime="20170725 17:50:06.515" starttime="20170725 17:50:06.515" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170725 17:50:06.517" starttime="20170725 17:50:06.516" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.517">${rc} = None</msg>
<msg level="INFO" timestamp="20170725 17:50:06.517">${output} = None</msg>
<status endtime="20170725 17:50:06.517" starttime="20170725 17:50:06.517" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170725 17:50:06.518" starttime="20170725 17:50:06.518" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.522" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/2705/obmc-robot/logs/9.3.21.61_os_console"&gt;/tmp/fspcibld/2705/obmc-robot/logs/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170725 17:50:06.522" starttime="20170725 17:50:06.520" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.522" starttime="20170725 17:50:06.519" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.523" starttime="20170725 17:50:06.518" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.523">${output} = </msg>
<status endtime="20170725 17:50:06.523" starttime="20170725 17:50:06.523" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170725 17:50:06.524">${loc_quiet} = 1</msg>
<status endtime="20170725 17:50:06.524" starttime="20170725 17:50:06.523" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170725 17:50:06.582" starttime="20170725 17:50:06.525" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:06.583">${rc} = 0</msg>
<msg level="INFO" timestamp="20170725 17:50:06.585">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[  112.002026000,5] IPMI: S...</msg>
<status endtime="20170725 17:50:06.585" starttime="20170725 17:50:06.524" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170725 17:50:06.587">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[  112.002026000,5] IPMI: S...</msg>
<status endtime="20170725 17:50:06.587" starttime="20170725 17:50:06.476" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170725 17:50:06.590">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[  112.002026000,5] IPMI: Soft shutdown requested
[40m[2J[-1;-1f[?25l[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [37m.[   65.375947] reboot: Power down
[  116.339685632,5] OPAL: Shutdown request type 0x0...


--== Welcome to Hostboot hostboot-3fa8be9/hbicore.bin ==--

  3.86282|secure|Booting in non-secure mode.
  3.86323|secure|SecureROM invalid - skipping functionality
  7.86619|ISTEP  6. 5 - host_init_fsi
  7.96086|ISTEP  6. 6 - host_set_ipl_parms
  9.25006|ISTEP  6. 7 - host_discover_targets
  9.87346|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  9.87347|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  9.90313|ISTEP  6. 8 - host_update_master_tpm
  9.91135|SECURE|Security Access Bit&gt; 0x0000000000000000
  9.91136|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  9.91155|ISTEP  6. 9 - host_gard
  9.93871|ISTEP  6.10 - host_revert_sbe_mcs_setup
  9.95317|ISTEP  6.11 - host_start_occ_xstop_handler
  9.95410|ISTEP  6.12 - host_voltage_config
  9.99334|ISTEP  7. 2 - mss_volt
 10.30091|ISTEP  7. 3 - mss_freq
 10.43881|ISTEP  7. 4 - mss_eff_config
 13.62287|ISTEP  7. 5 - mss_attr_update
 13.63154|ISTEP  8. 1 - host_slave_sbe_config
 13.66633|ISTEP  8. 2 - host_setup_sbe
 13.67085|ISTEP  8. 3 - host_cbs_start
 13.68083|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 20.89806|ISTEP  8. 5 - host_attnlisten_proc
 20.89883|ISTEP  8. 6 - host_p9_fbc_eff_config
 20.90423|ISTEP  8. 7 - host_p9_eff_config_links
 20.91387|ISTEP  8. 8 - proc_attr_update
 20.91553|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 20.96351|ISTEP  8.10 - proc_xbus_scominit
 23.94964|ISTEP  8.11 - proc_xbus_enable_ridi
 23.95393|ISTEP  9. 1 - fabric_erepair
 24.09515|ISTEP  9. 2 - fabric_io_dccal
 24.92399|ISTEP  9. 3 - fabric_pre_trainadv
 24.92834|ISTEP  9. 4 - fabric_io_run_training
 25.13137|ISTEP  9. 5 - fabric_post_trainadv
 25.13609|ISTEP  9. 6 - proc_smp_link_layer
 25.14132|ISTEP  9. 7 - proc_fab_iovalid
 25.17097|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 25.18062|ISTEP 10. 1 - proc_build_smp
 25.30792|ISTEP 10. 2 - host_slave_sbe_update
 25.53251|ISTEP 10. 3 - host_set_voltages
 25.54465|ISTEP 10. 4 - proc_cen_ref_clk_enable
 25.54986|ISTEP 10. 5 - proc_enable_osclite
 25.55112|ISTEP 10. 6 - proc_chiplet_scominit
 25.57669|ISTEP 10. 7 - proc_abus_scominit
 25.57870|ISTEP 10. 8 - proc_obus_scominit
 25.65838|ISTEP 10. 9 - proc_npu_scominit
 25.68051|ISTEP 10.10 - proc_pcie_scominit
 25.72560|ISTEP 10.11 - proc_scomoverride_chiplets
 25.72790|ISTEP 10.12 - proc_chiplet_enable_ridi
 25.73634|ISTEP 10.13 - host_rng_bist
 25.74202|ISTEP 10.14 - host_update_redundant_tpm
 25.79921|ISTEP 11. 1 - host_prd_hwreconfig
 25.80535|ISTEP 12. 1 - mss_getecid
 25.81109|ISTEP 13. 1 - host_disable_memvolt
 25.82600|ISTEP 13. 2 - mem_pll_reset
 25.83893|ISTEP 13. 3 - mem_pll_initf
 25.85803|ISTEP 13. 4 - mem_pll_setup
 25.88448|ISTEP 13. 6 - mem_startclocks
 25.90077|ISTEP 13. 7 - host_enable_memvolt
 25.90278|ISTEP 13. 8 - mss_scominit
 26.34333|ISTEP 13. 9 - mss_ddr_phy_reset
 26.42196|ISTEP 13.10 - mss_draminit
 26.60870|ISTEP 13.11 - mss_draminit_training
 26.92606|ISTEP 13.12 - mss_draminit_trainadv
 26.92880|ISTEP 13.13 - mss_draminit_mc
 26.95512|ISTEP 14. 1 - mss_memdiag
 67.67917|ISTEP 14. 2 - mss_thermal_init
 67.69346|ISTEP 14. 3 - proc_pcie_config
 67.71082|ISTEP 14. 4 - mss_power_cleanup
 67.71519|ISTEP 14. 5 - proc_setup_bars
 67.76306|ISTEP 14. 6 - proc_htm_setup
 67.77380|ISTEP 14. 7 - proc_exit_cache_contained
 67.79069|ISTEP 15. 1 - host_build_stop_image
 68.22842|ISTEP 15. 2 - proc_set_pba_homer_bar
 68.23577|ISTEP 15. 3 - host_establish_ex_chiplet
 68.24586|ISTEP 15. 4 - host_start_stop_engine
 68.35213|ISTEP 16. 1 - host_activate_master
 69.47509|ISTEP 16. 2 - host_activate_slave_cores
 69.55289|ISTEP 16. 3 - host_secure_rng
 69.56182|ISTEP 16. 4 - mss_scrub
 69.57552|ISTEP 16. 5 - host_ipl_complete
 69.87829|ISTEP 16. 6 - host_load_io_ppe
 69.88200|ISTEP 18.11 - proc_tod_setup
 69.94225|ISTEP 18.12 - proc_tod_init
 69.95248|ISTEP 20. 1 - host_load_payload
 70.36715|ISTEP 20. 2 - host_load_hdat
 74.15273|ISTEP 21. 1 - host_runtime_setup
 83.54087|htmgt|OCCs are now running in ACTIVE state
 83.54114|ISTEP 21. 2 - host_verify_hdat
 83.54219|ISTEP 21. 3 - host_start_payload
[   84.348840723,5] OPAL skiboot-v5.7-rc2-p7582c9b starting...
[   84.348844692,7] initial console log level: memory 7, driver 5
[   84.348847522,6] CPU: P9 generation processor (max 4 threads/core)
[   84.348850205,7] CPU: Boot CPU PIR is 0x0858 PVR is 0x004e0100
[   84.348852938,7] CPU: Initial max PIR set to 0x7fff
[   84.350325741,7] OPAL table: 0x300e0340 .. 0x300e0830, branch table: 0x30002000
[   84.350330424,7] Assigning physical memory map table for nimbus
[   84.350334374,7] Parsing HDAT...
[   84.350336140,5] SPIRA-S found.
[   84.350340507,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[   84.350784222,6] SP Family is ibm,ast2500,openbmc
[   84.350792068,7] LPC: IOPATH chip id = 0
[   84.350793983,7] LPC: FW BAR       = f0000000
[   84.350796116,7] LPC: MEM BAR      = e0000000
[   84.350798233,7] LPC: IO BAR       = d0010000
[   84.350800303,7] LPC: Internal BAR = c0012000
[   84.350815319,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[   84.350819143,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[   84.351482767,5] UART: Using UART at 0x60300d00103f8
[   84.352268714,3] I2C: HDAT device array has no version! Assuming v1
[   84.352558699,3] I2C: HDAT device array has no version! Assuming v1
[   84.353091690,5] P9 DD1.03 detected
[   84.353138432,5] CHIP: Chip ID 0000 type: P9N DD1.0
[   84.353188248,5] P9 DD1.03 detected
[   84.353216375,5] CHIP: Chip ID 0008 type: P9N DD1.0
[   84.353475829,5] SLW: Enabling: stop0_lite
[   84.353532277,3] ********************************************************************************
[   84.353591580,3] *     README: THIS BUILD IS ONLY FOR SYSTEMS SUPPORTING A MAXIMUM OF 4 GPUS    *
[   84.353651708,3] *                                                                              *
[   84.353711148,3] *       !!! THIS BUILD WILL NOT WORK ON SYSTEMS WHICH SUPPORT 6 GPUS !!!       *
[   84.353767741,3] ********************************************************************************
[   84.353906854,5] PLAT: Using virtual UART
[   84.354073783,7] LPC: Routing irq 9, policy: 0 (r=1)
[   84.354076642,7] LPC: SerIRQ 9 using route 0 targetted at OPAL
[   84.354259576,5] PLAT: Detected Witherspoon platform
[   84.374872845,5] CPU: All 16 processors called in...
[    0.495896176,5] FLASH: Found system flash:  id:0
[    0.495984928,5] BT: Interface initialized, IO 0x00e4
[    0.496032336,7] LPC: Routing irq 10, policy: 0 (r=1)
[    0.496034752,7] LPC: SerIRQ 10 using route 1 targetted at OPAL
[    1.444992656,5] NVRAM: Size is 576 KB
[    2.257844384,5] STB: secure and trusted boot not supported
[    2.257903680,5] OPAL: Using OPAL UART console
[    2.257940240,7] LPC: Routing irq 4, policy: 0 (r=1)
[    2.257942560,7] LPC: SerIRQ 4 using route 2 targetted at OPAL
[    3.422010688,5] PCI: Resetting PHBs and training links...
[    5.148637376,5] PCI: Probing slots...
[    5.205210528,3] PCI: built-in device not found:  (loc: 100)
[    5.205273232,3] PCI: built-in device not found: GPU0 down (loc: 250)
[    5.205326736,3] PCI: built-in device not found: GPU0 (loc: 400)
[    5.205361248,3] PCI: built-in device not found: GPU1 down (loc: 258)
[    5.205409120,3] PCI: built-in device not found: GPU1 (loc: 500)
[    5.205448656,3] PCI: built-in device not found:  (loc: 100)
[    5.205494304,3] PCI: built-in device not found: GPU2 down (loc: 220)
[    5.205543392,3] PCI: built-in device not found: GPU2 (loc: 300)
[    5.205579056,3] PCI: built-in device not found: GPU3 down (loc: 228)
[    5.205617040,3] PCI: built-in device not found: GPU3 (loc: 400)
[    5.205667184,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    5.205721168,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    5.205774032,5] PHB#0001:01:00.0 [EP  ] 104c 8241 R:02 C:0c0330 (      usb-xhci) 
[    5.205843968,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[    5.205893920,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[    5.205957328,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[    5.206008944,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    5.206057600,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..0a 
[    5.206106416,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..0a 
[    5.206174480,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[    5.206236112,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[    5.206305456,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 SLOT=GPU0 down 
[    5.206377712,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 SLOT=GPU1 down 
[    5.206440832,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:06..0a 
[    5.206494416,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    5.206549440,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    5.206609440,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    5.206668096,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    5.206722144,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    5.206774336,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    5.206832048,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    5.206904640,5] PHB#0006:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    5.206981056,5] PHB#0006:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    5.207039984,5] PHB#0006:00:00.2 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    5.207104624,5] PHB#0006:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    5.207170656,5] PHB#0006:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    5.207234016,5] PHB#0006:00:01.2 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    5.207295424,5] PHB#0007:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    5.207358784,5] PHB#0007:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    5.207423056,5] PHB#0007:00:00.2 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    5.207491824,5] PHB#0007:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    5.207556512,5] PHB#0007:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    5.207618416,5] PHB#0007:00:01.2 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    5.207672528,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    5.207719072,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    5.207766960,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    5.207818880,5] PHB#0034:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    5.207871376,5] PHB#0034:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    5.207921520,5] PHB#0034:01:00.2 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    5.207982352,5] PHB#0034:01:00.3 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    5.208031680,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..09 
[    5.208081920,5] PHB#0035:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..09 
[    5.208161296,5] PHB#0035:02:04.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=GPU2 down 
[    5.208231552,5] PHB#0035:02:05.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 SLOT=GPU3 down 
[    5.208307392,5] PHB#0035:02:0d.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..09 
[   13.214794544,5] IPMI: Resetting boot count on successful boot
[   13.214852768,5] INIT: Waiting for kernel...
[   13.214880016,5] INIT: 64-bit LE kernel discovered
[   13.214928080,5] OCC: All Chip Rdy after 0 ms
[   13.241750560,5] INIT: Starting kernel at 0x20010000, fdt at 0x30920360 267293 bytes)
[   15.020803424,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c000200fff7f0000
[    0.000000] Mapped range 0x0 - 0x1000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x201000000000 with 0x40000000
[    0.000000] Process table c000200ffe800000 and radix root for kernel: c000000001430000
[    0.000000] Linux version 4.12.1-openpower1 (fspbld@gfw262.aus.stglabs.ibm.com) (gcc version 4.9.4 (Buildroot 2017.05.1-00093-g9b91216) ) #2 SMP Thu Jul 13 13:08:44 CDT 2017
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 15
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x2000000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x475c3afd18500249
[    0.000000]   possible        = 0x5f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaee00000
[    0.000000] mmu_features      = 0x3c006041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa:   NODE_DATA [mem 0xfffff6700-0xfffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x200fff754700-0x200fff75dfff]
[    0.000000] numa:   NODE_DATA [mem 0x200fff726700-0x200fff72ffff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x200fff71ce00-0x200fff7266ff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x200fff713500-0x200fff71cdff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x200fff709c00-0x200fff7134ff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x0000200fffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000000fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200fffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000000fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x0000200fffffffff]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 2 pages/cpu @c000000ffc6c0000 s67992 r0 d63080 u131072
[    0.000000] Built 6 zonelists in Node order, mobility grouping on.  Total pages: 2095360
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 133937600K/134217728K available (6272K kernel code, 1088K rwdata, 1968K rodata, 11328K init, 1694K bss, 280128K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=16, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	RCU debugfs-based tracing is enabled.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=16.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=16
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: VP block alloc, for max VCPUs 16 use order 4
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000006] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000264] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.000697] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001077] Console: colour dummy device 80x25
[    0.003238] console [tty0] enabled
[    0.003419] console [hvc0] enabled
[    0.003419] console [hvc0] enabled
[    0.003636] bootconsole [udbg0] disabled
[    0.003636] bootconsole [udbg0] disabled
[    0.004643] pid_max: default: 32768 minimum: 301
[    0.007655] Security Framework initialized
[    0.010716] Dentry cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.084153] Inode-cache hash table entries: 8388608 (order: 10, 67108864 bytes)
[    0.133994] Mount-cache hash table entries: 262144 (order: 5, 2097152 bytes)
[    0.134196] Mountpoint-cache hash table entries: 262144 (order: 5, 2097152 bytes)
[    0.139766] EEH: PowerNV platform initialized
[    0.139904] POWER9 performance monitor hardware support registered
[    0.140785] smp: Bringing up secondary CPUs ...
[    0.149913] smp: Brought up 6 nodes, 16 CPUs
[    0.150101] numa: Node 0 CPUs: 0-7
[    0.150204] numa: Node 8 CPUs: 8-15
[    0.150281] numa: Node 252 CPUs:
[    0.150348] numa: Node 253 CPUs:
[    0.150415] numa: Node 254 CPUs:
[    0.150476] numa: Node 255 CPUs:
[    0.160916] devtmpfs: initialized
[    0.175877] evm: security.capability
[    0.176694] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.176928] futex hash table entries: 4096 (order: 3, 524288 bytes)
[    0.178663] NET: Registered protocol family 16
[    0.179559] cpuidle: using governor menu
[    0.189244] PCI: Probing PCI hardware
[    0.189408] PCI host bridge to bus 0000:00
[    0.189523] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.189750] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003f7fffffff 64bit pref]
[    0.189981] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.190276] pci 0000:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.190453] pci 0000:00:00.0: disabling bridge mem windows
[    0.190829] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.191152] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    0.191391] PCI host bridge to bus 0001:00
[    0.191478] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.191732] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007effffffff 64bit pref]
[    0.191951] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.192211] pci 0001:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.192379] pci 0001:00:00.0: disabling bridge mem windows
[    0.193052] pci 0001:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.193253] pci 0001:01:00.0: BAR2 [mem size 0x00002000 64bit]: requesting alignment to 0x10000
[    0.193736] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.194015] PCI host bridge to bus 0002:00
[    0.194099] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.194355] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600beffffffff 64bit pref]
[    0.194563] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.194834] pci 0002:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.195031] pci 0002:00:00.0: disabling bridge mem windows
[    0.195682] pci 0002:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.195880] pci 0002:01:00.0: disabling bridge mem windows
[    0.196299] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.196837] pci 0002:02:00.0: Disabling memory decoding and releasing memory resources.
[    0.197260] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.197553] PCI host bridge to bus 0003:00
[    0.197646] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.197891] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023f7fffffff 64bit pref]
[    0.198110] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.198358] pci 0003:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.198547] pci 0003:00:00.0: disabling bridge mem windows
[    0.198900] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.199184] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    0.199406] PCI host bridge to bus 0004:00
[    0.199507] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.199725] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027effffffff 64bit pref]
[    0.199935] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.200163] pci 0004:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.200355] pci 0004:00:00.0: disabling bridge mem windows
[    0.201032] pci 0004:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.201232] pci 0004:01:00.0: disabling bridge mem windows
[    0.201985] pci 0004:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.202165] pci 0004:01:00.1: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.202856] pci 0004:01:00.2: Disabling memory decoding and releasing memory resources.
[    0.203055] pci 0004:01:00.2: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.203762] pci 0004:01:00.3: Disabling memory decoding and releasing memory resources.
[    0.203958] pci 0004:01:00.3: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.204667] pci 0004:01:00.4: Disabling memory decoding and releasing memory resources.
[    0.204865] pci 0004:01:00.4: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.205308] pci 0004:00:00.0: PCI bridge to [bus 01-0a]
[    0.206035] pci 0004:02:02.0: Disabling memory decoding and releasing memory resources.
[    0.206214] pci 0004:02:02.0: disabling bridge mem windows
[    0.206890] pci 0004:02:0a.0: Disabling memory decoding and releasing memory resources.
[    0.207086] pci 0004:02:0a.0: disabling bridge mem windows
[    0.207753] pci 0004:02:0b.0: Disabling memory decoding and releasing memory resources.
[    0.207927] pci 0004:02:0b.0: disabling bridge mem windows
[    0.208606] pci 0004:02:0c.0: Disabling memory decoding and releasing memory resources.
[    0.208662] random: fast init done
[    0.208884] pci 0004:02:0c.0: disabling bridge mem windows
[    0.209338] pci 0004:01:00.0: PCI bridge to [bus 02-0a]
[    0.212084] pci 0004:03:00.0: Disabling memory decoding and releasing memory resources.
[    0.212265] pci 0004:03:00.0: BAR5 [mem size 0x00000800]: requesting alignment to 0x10000
[    0.212721] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.213041] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.213313] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.213592] pci 0004:02:0c.0: PCI bridge to [bus 06-0a]
[    0.213908] PCI host bridge to bus 0005:00
[    0.213988] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.214244] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602beffffffff 64bit pref]
[    0.214455] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.214724] pci 0005:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.214917] pci 0005:00:00.0: disabling bridge mem windows
[    0.215614] pci 0005:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.216413] pci 0005:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.216933] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.217293] PCI host bridge to bus 0030:00
[    0.217376] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.217633] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203f7fffffff 64bit pref]
[    0.217841] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.218094] pci 0030:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.218295] pci 0030:00:00.0: disabling bridge mem windows
[    0.218636] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.218937] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.219167] PCI host bridge to bus 0033:00
[    0.219260] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.219506] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223f7fffffff 64bit pref]
[    0.219660] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.219920] pci 0033:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.220112] pci 0033:00:00.0: disabling bridge mem windows
[    0.220446] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.220745] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    0.220973] PCI host bridge to bus 0034:00
[    0.221078] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.221303] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227effffffff 64bit pref]
[    0.221516] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.221775] pci 0034:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.221963] pci 0034:00:00.0: disabling bridge mem windows
[    0.222608] pci 0034:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.223350] pci 0034:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.224049] pci 0034:01:00.2: Disabling memory decoding and releasing memory resources.
[    0.224780] pci 0034:01:00.3: Disabling memory decoding and releasing memory resources.
[    0.225258] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.225677] PCI host bridge to bus 0035:00
[    0.225764] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.226017] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622beffffffff 64bit pref]
[    0.226223] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.226474] pci 0035:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.226669] pci 0035:00:00.0: disabling bridge mem windows
[    0.227283] pci 0035:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.227477] pci 0035:01:00.0: disabling bridge mem windows
[    0.227922] pci 0035:00:00.0: PCI bridge to [bus 01-09]
[    0.228430] pci 0035:02:04.0: Disabling memory decoding and releasing memory resources.
[    0.228589] pci 0035:02:04.0: disabling bridge mem windows
[    0.229183] pci 0035:02:05.0: Disabling memory decoding and releasing memory resources.
[    0.229375] pci 0035:02:05.0: disabling bridge mem windows
[    0.229964] pci 0035:02:0d.0: Disabling memory decoding and releasing memory resources.
[    0.230158] pci 0035:02:0d.0: disabling bridge mem windows
[    0.230576] pci 0035:01:00.0: PCI bridge to [bus 02-09]
[    0.232196] pci 0035:02:04.0: PCI bridge to [bus 03]
[    0.232453] pci 0035:02:05.0: PCI bridge to [bus 04]
[    0.232720] pci 0035:02:0d.0: PCI bridge to [bus 05-09]
[    0.233008] PCI host bridge to bus 0006:00
[    0.233094] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.233286] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.233570] pci 0006:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.234055] pci 0006:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.234534] pci 0006:00:00.2: Disabling memory decoding and releasing memory resources.
[    0.235001] pci 0006:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.235497] pci 0006:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.235985] pci 0006:00:01.2: Disabling memory decoding and releasing memory resources.
[    0.236647] PCI host bridge to bus 0007:00
[    0.236732] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.236919] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.237194] pci 0007:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.237667] pci 0007:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.238141] pci 0007:00:00.2: Disabling memory decoding and releasing memory resources.
[    0.238617] pci 0007:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.239091] pci 0007:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.239573] pci 0007:00:01.2: Disabling memory decoding and releasing memory resources.
[    0.240157] pci 0000:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.240774] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.240956] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c080ffffff]
[    0.241145] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.241362] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.241570] pci 0001:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.242170] pci 0001:01     : [PE# 7d] Secondary bus 1 associated with PE#7d
[    0.242784] pci 0001:01     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    0.254615] IOMMU table initialized, virtual merging enabled
[    0.254754] pci 0001:01     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    0.254946] pci 0001:01     : [PE# 7d] Enabling 64-bit DMA bypass
[    0.255093] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.255222] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.255502] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
[    0.255694] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
[    0.255882] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.256029] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.256180] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.256369] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.256566] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.256716] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.256867] pci 0002:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.257477] pci 0002:02     : [PE# 7d] Secondary bus 2..2 associated with PE#7d
[    0.258076] pci 0002:02     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    0.269901] pci 0002:02     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    0.270052] pci 0002:02     : [PE# 7d] Enabling 64-bit DMA bypass
[    0.270211] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.270337] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.270537] pci 0002:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
[    0.271135] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.271271] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.271474] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.271738] pci 0003:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.272343] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.272669] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x60240ffffffff 64bit pref]
[    0.272884] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c201ffffff]
[    0.273078] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x60240ffffffff 64bit pref]
[    0.273282] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.273459] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c201000000-0x600c20103ffff]
[    0.273652] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c201040000-0x600c201041fff]
[    0.273841] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c201050000-0x600c201051fff]
[    0.274032] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c201060000-0x600c201061fff]
[    0.274223] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c201070000-0x600c201071fff]
[    0.274418] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.274566] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.274714] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.274856] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.275007] pci 0004:02:02.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.275210] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.275390] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.275542] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.275670] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.275818] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.275972] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200000000-0x600c2000007ff]
[    0.276158] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200010000-0x600c20001ffff pref]
[    0.276347] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.276493] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.276650] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.276795] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.276940] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.277088] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.277238] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.277387] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.277538] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.277682] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.277836] pci 0004:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.278449] pci 0004:03     : [PE# 7d] Secondary bus 3 associated with PE#7d
[    0.279050] pci 0004:03     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    0.290855] pci 0004:03     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    0.291044] pci 0004:03     : [PE# 7d] Enabling 64-bit DMA bypass
[    0.291186] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.291316] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c200ffffff]
[    0.291503] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.291720] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.291868] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.292009] pci 0004:02:0c.0: PCI bridge to [bus 06-0a]
[    0.292157] pci 0004:02     : [PE# 7c] Secondary bus 2 associated with PE#7c
[    0.292760] pci 0004:01:00.0: PCI bridge to [bus 02-0a]
[    0.292874] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.293069] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027efff0ffff 64bit pref]
[    0.293291] pci 0004:01     : [PE# 7b] Secondary bus 1 associated with PE#7b
[    0.293905] pci 0004:01     : [PE# 7b] Setting up 32-bit TCE table at 0..80000000
[    0.305734] pci 0004:01     : [PE# 7b] Setting up window#0 0..7fffffff pg=1000
[    0.305895] pci 0004:01     : [PE# 7b] Enabling 64-bit DMA bypass
[    0.306060] pci 0004:00:00.0: PCI bridge to [bus 01-0a]
[    0.306190] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.306369] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027efff0ffff 64bit pref]
[    0.306586] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.306889] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602807fffffff 64bit pref]
[    0.307106] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.307334] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.307565] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.307790] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.308028] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.308259] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.308496] pci 0005:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.309115] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.309689] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.321510] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.321700] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.321844] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.321978] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602beffffffff 64bit pref]
[    0.322242] pci 0030:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.322854] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.323030] pci 0033:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.323634] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.323825] pci 0034:00:00.0: BAR 9: assigned [mem 0x6224000000000-0x622407fffffff 64bit pref]
[    0.324029] pci 0034:00:00.0: BAR 8: assigned [mem 0x620c200000000-0x620c200ffffff]
[    0.324217] pci 0034:01:00.0: BAR 6: assigned [mem 0x620c200000000-0x620c20007ffff pref]
[    0.324403] pci 0034:01:00.1: BAR 6: assigned [mem 0x620c200080000-0x620c2000fffff pref]
[    0.324573] pci 0034:01:00.2: BAR 6: assigned [mem 0x620c200100000-0x620c20017ffff pref]
[    0.324760] pci 0034:01:00.3: BAR 6: assigned [mem 0x620c200180000-0x620c2001fffff pref]
[    0.324954] pci 0034:01:00.0: BAR 0: assigned [mem 0x6224000000000-0x622400000ffff 64bit pref]
[    0.325174] pci 0034:01:00.0: BAR 2: assigned [mem 0x6224000010000-0x622400001ffff 64bit pref]
[    0.325399] pci 0034:01:00.0: BAR 4: assigned [mem 0x6224000020000-0x622400002ffff 64bit pref]
[    0.325622] pci 0034:01:00.1: BAR 0: assigned [mem 0x6224000030000-0x622400003ffff 64bit pref]
[    0.325846] pci 0034:01:00.1: BAR 2: assigned [mem 0x6224000040000-0x622400004ffff 64bit pref]
[    0.326075] pci 0034:01:00.1: BAR 4: assigned [mem 0x6224000050000-0x622400005ffff 64bit pref]
[    0.326296] pci 0034:01:00.2: BAR 0: assigned [mem 0x6224000060000-0x622400006ffff 64bit pref]
[    0.326525] pci 0034:01:00.2: BAR 2: assigned [mem 0x6224000070000-0x622400007ffff 64bit pref]
[    0.326753] pci 0034:01:00.2: BAR 4: assigned [mem 0x6224000080000-0x622400008ffff 64bit pref]
[    0.326980] pci 0034:01:00.3: BAR 0: assigned [mem 0x6224000090000-0x622400009ffff 64bit pref]
[    0.327211] pci 0034:01:00.3: BAR 2: assigned [mem 0x62240000a0000-0x62240000affff 64bit pref]
[    0.327443] pci 0034:01:00.3: BAR 4: assigned [mem 0x62240000b0000-0x62240000bffff 64bit pref]
[    0.327676] pci 0034:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.328301] pci 0034:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.328869] pci 0034:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.340714] pci 0034:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.341116] pci 0034:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.341255] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.341392] pci 0034:00:00.0:   bridge window [mem 0x620c200000000-0x620c27fefffff]
[    0.341578] pci 0034:00:00.0:   bridge window [mem 0x6224000000000-0x6227efff0ffff 64bit pref]
[    0.341918] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c280ffffff]
[    0.342090] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.342290] pci 0035:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.342905] pci 0035:02:04.0: PCI bridge to [bus 03]
[    0.343021] pci 0035:02:05.0: PCI bridge to [bus 04]
[    0.343166] pci 0035:02:0d.0: PCI bridge to [bus 05-09]
[    0.343311] pci 0035:02     : [PE# 7d] Secondary bus 2 associated with PE#7d
[    0.343918] pci 0035:01:00.0: PCI bridge to [bus 02-09]
[    0.344034] pci 0035:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
[    0.344648] pci 0035:00:00.0: PCI bridge to [bus 01-09]
[    0.344763] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.344971] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.345220] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.345468] pci 0006:00:00.2: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.345725] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.345970] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.346225] pci 0006:00:01.2: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.346476] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.346728] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.346974] pci 0006:00:00.2: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.347202] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.347433] pci 0006:00:01.1: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.347683] pci 0006:00:01.2: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.347952] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.348200] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.348449] pci 0007:00:00.2: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.348693] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.348937] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.349172] pci 0007:00:01.2: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.349413] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.349655] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.349903] pci 0007:00:00.2: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.350142] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.350387] pci 0007:00:01.1: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.350633] pci 0007:00:01.2: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.350892] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.351035] pci 0006:00:00.1: Associating to existing PE d
[    0.351173] pci 0006:00:00.2: Associating to existing PE d
[    0.351310] pci 0006:00:01.0: Associating to existing PE d
[    0.351443] pci 0006:00:01.1: Associating to existing PE d
[    0.351561] pci 0006:00:01.2: Associating to existing PE d
[    0.351728] NPU6: Found 1 MMIO ATSD registers
[    0.351741] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.351986] pci 0007:00:00.1: Associating to existing PE d
[    0.352126] pci 0007:00:00.2: Associating to existing PE d
[    0.352263] pci 0007:00:01.0: Associating to existing PE d
[    0.352395] pci 0007:00:01.1: Associating to existing PE d
[    0.352522] pci 0007:00:01.2: Associating to existing PE d
[    0.352666] NPU7: Found 1 MMIO ATSD registers
[    0.359804] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.372526] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.372754] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.372892] vgaarb: loaded
[    0.373151] SCSI subsystem initialized
[    0.373429] usbcore: registered new interface driver usbfs
[    0.373585] usbcore: registered new interface driver hub
[    0.373798] usbcore: registered new device driver usb
[    0.373995] pps_core: LinuxPPS API ver. 1 registered
[    0.374108] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.374333] PTP clock support registered
[    0.374906] clocksource: Switched to clocksource timebase
[    0.380628] NET: Registered protocol family 2
[    0.381137] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.384632] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.385219] TCP: Hash tables configured (established 524288 bind 65536)
[    0.385480] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.386928] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.388760] NET: Registered protocol family 1
[    0.388916] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)
[    6.744372] Initialise system trusted keyrings
[    6.744584] workingset: timestamp_bits=54 max_order=21 bucket_order=0
[    6.752480] Key type asymmetric registered
[    6.752570] Asymmetric key parser 'x509' registered
[    6.752734] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    6.752910] io scheduler noop registered
[    6.753742] io scheduler cfq registered (default)
[    6.753845] io scheduler mq-deadline registered
[    6.753978] io scheduler kyber registered
[    6.754922] ipmi message handler version 39.2
[    6.755033] ipmi device interface
[    6.755213] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[   11.819448] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[   11.844106] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[   11.844281] hvc0: No interrupts property, using OPAL event
[   11.844956] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[   11.845965] [drm] radeon kernel modesetting enabled.
[   11.852256] brd: module loaded
[   11.859477] loop: module loaded
[   11.859817] pci 0004:01:00.0: enabling device (0545 -&gt; 0547)
[   11.859957] pci 0004:02:02.0: enabling device (0545 -&gt; 0547)
[   11.860088] ahci 0004:03:00.0: enabling device (0141 -&gt; 0143)
[   11.860403] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[   11.870610] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[   11.870747] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[   11.871962] scsi host0: ahci
[   11.872363] scsi host1: ahci
[   11.872725] scsi host2: ahci
[   11.873076] scsi host3: ahci
[   11.873257] ata1: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000100 irq 88
[   11.873410] ata2: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000180 irq 88
[   11.873554] ata3: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000200 irq 88
[   11.873715] ata4: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000280 irq 88
[   11.874120] libphy: Fixed MDIO Bus: probed
[   11.874255] tg3.c:v3.137 (May 11, 2014)
[   11.874360] tg3 0005:01:00.0: enabling device (0140 -&gt; 0142)
[   11.900605] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[   11.901386] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:28:aa
[   11.901600] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   11.901798] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[   11.901953] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[   11.902228] tg3 0005:01:00.1: enabling device (0140 -&gt; 0142)
[   11.932067] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[   11.932749] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:28:ab
[   11.932938] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   11.933146] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[   11.933297] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[   11.933572] tg3 0034:01:00.0: enabling device (0140 -&gt; 0142)
[   11.962890] tg3 0034:01:00.0: Using 64-bit DMA iommu bypass
[   11.963621] tg3 0034:01:00.0 eth2: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:07:e2:50
[   11.963872] tg3 0034:01:00.0 eth2: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   11.964115] tg3 0034:01:00.0 eth2: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[   11.964301] tg3 0034:01:00.0 eth2: dma_rwctrl[00000000] dma_mask[64-bit]
[   11.964564] tg3 0034:01:00.1: enabling device (0140 -&gt; 0142)
[   12.004308] tg3 0034:01:00.1: Using 64-bit DMA iommu bypass
[   12.005081] tg3 0034:01:00.1 eth3: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:07:e2:51
[   12.005297] tg3 0034:01:00.1 eth3: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   12.005545] tg3 0034:01:00.1 eth3: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[   12.005742] tg3 0034:01:00.1 eth3: dma_rwctrl[00000000] dma_mask[64-bit]
[   12.006009] tg3 0034:01:00.2: enabling device (0140 -&gt; 0142)
[   12.044314] tg3 0034:01:00.2: Using 64-bit DMA iommu bypass
[   12.045009] tg3 0034:01:00.2 eth4: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:07:e2:52
[   12.045252] tg3 0034:01:00.2 eth4: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   12.045490] tg3 0034:01:00.2 eth4: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[   12.045675] tg3 0034:01:00.2 eth4: dma_rwctrl[00000000] dma_mask[64-bit]
[   12.045951] tg3 0034:01:00.3: enabling device (0140 -&gt; 0142)
[   12.094332] tg3 0034:01:00.3: Using 64-bit DMA iommu bypass
[   12.095054] tg3 0034:01:00.3 eth5: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:07:e2:53
[   12.095278] tg3 0034:01:00.3 eth5: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   12.095518] tg3 0034:01:00.3 eth5: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[   12.095704] tg3 0034:01:00.3 eth5: dma_rwctrl[00000000] dma_mask[64-bit]
[   12.096158] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[   12.096298] ehci-pci: EHCI PCI platform driver
[   12.096457] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[   12.096610] ohci-pci: OHCI PCI platform driver
[   12.096886] xhci_hcd 0001:01:00.0: xHCI Host Controller
[   12.097133] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[   12.097370] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[   12.097583] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[   12.098638] hub 1-0:1.0: USB hub found
[   12.098731] hub 1-0:1.0: 4 ports detected
[   12.099091] xhci_hcd 0001:01:00.0: xHCI Host Controller
[   12.099265] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[   12.099475] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[   12.099951] hub 2-0:1.0: USB hub found
[   12.100045] hub 2-0:1.0: 4 ports detected
[   12.100469] usbcore: registered new interface driver usb-storage
[   12.216204] ata4: SATA link down (SStatus 0 SControl 300)
[   12.216362] ata3: SATA link down (SStatus 0 SControl 300)
[   12.374918] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[   12.376097] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[   12.376343] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[   12.377132] ata1.00: configured for UDMA/133
[   12.377659] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[   12.384919] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[   12.386859] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[   12.387020] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[   12.387852] ata2.00: configured for UDMA/133
[   12.454520] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[   12.475002] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[   12.475182] i2c /dev entries driver
[   12.475716] at24 0-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   12.476257] at24 1-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   12.476814] at24 2-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   12.477364] at24 3-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   12.477904] at24 4-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   28.139211312,5] IPMI: Soft shutdown requested
[   12.519974] opal-power: Poweroff requested
[   12.825357] at24 7-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   12.825859] at24 8-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   12.826389] at24 9-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   12.826926] at24 10-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   13.152427] powernv-cpufreq: cpufreq pstate min 60 nominal 57 max 18
[   13.152565] powernv-cpufreq: Workload Optimized Frequency is disabled in the platform
[   13.153510] powernv-cpufreq: pstate 0 is out of bound
[   13.153767] usbcore: registered new interface driver usbhid
[   13.153883] usbhid: USB HID core driver
[   13.154152] ipip: IPv4 and MPLS over IPv4 tunneling driver
[   13.154529] NET: Registered protocol family 17
[   13.154663] Key type dns_resolver registered
[   13.155063] registered taskstats version 1
[   13.155137] Loading compiled-in X.509 certificates
[   13.163696] Loaded X.509 cert 'Build time autogenerated kernel key: 7372b14ca72d896d00be2b7d71e44f10e864f8e9'
[   13.170209] Key type encrypted registered
[   13.170299] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[   13.170510] evm: HMAC attrs: 0x1
[   13.234963] rtc-opal opal-rtc: setting system clock to 2017-07-25 17:43:52 UTC (1501004632)
[   13.238641] Freeing unused kernel memory: 11328K
[   13.238769] This architecture does not have kernel memory protection.
[   13.266324] udevd[1560]: starting version 3.2.2
[   13.273944] udevd[1561]: starting eudev-3.2.2
[   13.348921] pci 0002:01:00.0: enabling device (0145 -&gt; 0147)
[   13.349063] ast 0002:02:00.0: enabling device (0140 -&gt; 0142)
[   13.349394] [drm] platform has no IO space, trying MMIO
[   13.349503] [drm] VGA not enabled on entry, requesting chip POST
[   13.349680] [drm] Using P2A bridge for configuration
[   13.349796] [drm] AST 2500 detected
[   13.349879] [drm] Analog VGA only
[   13.350009] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[   13.350278] [TTM] Zone  kernel: Available graphics memory: 66974464 kiB
[   13.350420] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[   13.350565] [TTM] Initializing pool allocator
[   13.356187] scsi 0:0:0:0: Attached scsi generic sg0 type 0
[   13.356418] scsi 1:0:0:0: Attached scsi generic sg1 type 0
[   13.362387] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[   13.362389] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[   13.362394] sd 0:0:0:0: [sda] 4096-byte physical blocks
[   13.362421] sd 0:0:0:0: [sda] Write Protect is off
[   13.362466] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[   13.363149] sd 1:0:0:0: [sdb] 4096-byte physical blocks
[   13.363301] sd 1:0:0:0: [sdb] Write Protect is off
[   13.363470] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[   13.364567] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0

(B)0[1;24r[m[?7h[?1h=[H[J[H[J Petitboot (v1.5.0-pc8fef8e)[1B [0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[2B  [0mSystem information[1B  System configuration[1B  System status log[1B  Language[1B  Rescan devices[1B  Retrieve config from URL[1B *[0;7mExit to shell           [12B[25D[0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[1B [0mEnter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[1B Welcome to Petitboot[J[1;64H8335-GTC 13186FA[23B [3;21r[3;1HMM[1;24r[3;3H[Disk: sda2 / a15dffae-a611-4fd5-a81e-8bdd6ab27fc1][1B[49DUbuntu[12;27H[0;7m                           [12B[52D[m[4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic[20B [4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic (recovery mode)[14;54H[0;7m   [10B[55D[m[4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-14-generic[20B [4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-14-generic (recovery mode)[20B Booting in 9 sec: Ubuntu[24;13H8[24;26H[24;13H7[24;26H[24;13H6[24;26H[24;13H5[24;26H[24;13H4[24;26H[24;13H3[24;26H[24;13H2[24;26H[24;13H1[24;26H[24;10HUbuntu          [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-2[?7l6[?7h Running boot hooks[K Performing kexec loadrebootThe system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   34.266008] kexec_core: Starting new kernel
[   50.115805552,5] OPAL: Switch to big-endian OS
[   50.267002176,5] OPAL: Switch to little-endian OS
 -&gt; smp_release_cpus()
spinning_secondaries = 15
 &lt;- smp_release_cpus()
[    1.821352] Unable to open file: /etc/keys/x509_ima.der (-2)
[    1.821358] Unable to open file: /etc/keys/x509_evm.der (-2)
[40m[2J[-1;-1f[?25l[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [37m.[49m[2J[-1;-1f[?25h
Ubuntu 17.04 ws017p1 hvc0

ws017p1 login: </msg>
<status endtime="20170725 17:50:06.592" starttime="20170725 17:50:06.588" status="PASS"></status>
</kw>
<status endtime="20170725 17:50:06.592" starttime="20170725 17:49:48.610" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170725 17:50:06.592" critical="yes" starttime="20170725 17:41:21.746" status="FAIL">Keyword 'Is Host Off' failed after retrying for 6 minutes. The last error was: Off != On</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170725 17:50:06.593" starttime="20170725 17:41:21.712" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170725 17:50:06.596" starttime="20170725 17:41:15.700" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" id="s1" name="Tests" fail="1">Tests</stat>
<stat pass="1" id="s1-s1" name="Security" fail="0">Tests.Security</stat>
<stat pass="1" id="s1-s1-s1" name="Test Ssl" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="0" id="s1-s2" name="Test Basic Poweron" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
