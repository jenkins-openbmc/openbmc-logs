<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170817 21:19:42.592">
<suite id="s1" source="/tmp/fspcibld/6080/obmc-robot/tests" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:19:43.252">Dictionary does not contain key 'host'.</msg>
<status starttime="20170817 21:19:43.252" status="FAIL" endtime="20170817 21:19:43.253"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:43.253">${has_host} = False</msg>
<status starttime="20170817 21:19:43.251" status="PASS" endtime="20170817 21:19:43.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170817 21:19:43.253" status="PASS" endtime="20170817 21:19:43.254"></status>
</kw>
<status starttime="20170817 21:19:43.253" status="PASS" endtime="20170817 21:19:43.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:43.255">${port_num} = 22</msg>
<status starttime="20170817 21:19:43.255" status="PASS" endtime="20170817 21:19:43.255"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:43.256">${SSH_PORT} = 22</msg>
<status starttime="20170817 21:19:43.255" status="PASS" endtime="20170817 21:19:43.256"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:43.256">${https_num} = 443</msg>
<status starttime="20170817 21:19:43.256" status="PASS" endtime="20170817 21:19:43.256"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:43.257">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170817 21:19:43.257" status="PASS" endtime="20170817 21:19:43.257"></status>
</kw>
<status starttime="20170817 21:19:43.255" status="PASS" endtime="20170817 21:19:43.257"></status>
</kw>
<status starttime="20170817 21:19:43.254" status="PASS" endtime="20170817 21:19:43.257"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:19:43.258">Dictionary does not contain key 'port'.</msg>
<status starttime="20170817 21:19:43.258" status="FAIL" endtime="20170817 21:19:43.258"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:43.258">${has_port} = False</msg>
<status starttime="20170817 21:19:43.258" status="PASS" endtime="20170817 21:19:43.258"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170817 21:19:43.260" status="PASS" endtime="20170817 21:19:43.260"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170817 21:19:43.260" status="PASS" endtime="20170817 21:19:43.261"></status>
</kw>
<status starttime="20170817 21:19:43.259" status="PASS" endtime="20170817 21:19:43.261"></status>
</kw>
<status starttime="20170817 21:19:43.259" status="PASS" endtime="20170817 21:19:43.261"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:43.261">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170817 21:19:44.997">Read output: root@witherspoon:~#</msg>
<status starttime="20170817 21:19:43.261" status="PASS" endtime="20170817 21:19:44.998"></status>
</kw>
<status starttime="20170817 21:19:43.250" status="PASS" endtime="20170817 21:19:44.998"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:44.999">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170817 21:19:45.136">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170817 21:19:45.136">${output} = VERSION_ID="v1.99.8-267-g6c0b2cb"</msg>
<msg level="INFO" timestamp="20170817 21:19:45.136">${stderr} = </msg>
<status starttime="20170817 21:19:44.999" status="PASS" endtime="20170817 21:19:45.136"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:45.137">Length is 0</msg>
<status starttime="20170817 21:19:45.137" status="PASS" endtime="20170817 21:19:45.137"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:45.137">VERSION_ID="v1.99.8-267-g6c0b2cb"</msg>
<status starttime="20170817 21:19:45.137" status="PASS" endtime="20170817 21:19:45.137"></status>
</kw>
<status starttime="20170817 21:19:44.998" status="PASS" endtime="20170817 21:19:45.137"></status>
</kw>
<status starttime="20170817 21:19:44.998" status="PASS" endtime="20170817 21:19:45.138"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:45.139">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170817 21:19:45.245">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170817 21:19:45.245">${stdout} = </msg>
<msg level="INFO" timestamp="20170817 21:19:45.245">${stderr} = sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status starttime="20170817 21:19:45.139" status="PASS" endtime="20170817 21:19:45.245"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:45.246">Length is 105</msg>
<msg level="FAIL" timestamp="20170817 21:19:45.246">'sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status starttime="20170817 21:19:45.246" status="FAIL" endtime="20170817 21:19:45.246"></status>
</kw>
<status starttime="20170817 21:19:45.138" status="FAIL" endtime="20170817 21:19:45.246"></status>
</kw>
<status starttime="20170817 21:19:45.138" status="FAIL" endtime="20170817 21:19:45.246"></status>
</kw>
<status starttime="20170817 21:19:45.138" status="PASS" endtime="20170817 21:19:45.247"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:45.635">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170817 21:19:45.635">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170817 21:19:46.459">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170817 21:19:46.460">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170817 21:19:46.587">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170817 21:19:46.597">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170817 21:19:46.597">${stderr} = </msg>
<msg level="INFO" timestamp="20170817 21:19:46.598">${rc} = 0</msg>
<status starttime="20170817 21:19:45.248" status="PASS" endtime="20170817 21:19:46.598"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:46.598">Length is 0</msg>
<status starttime="20170817 21:19:46.598" status="PASS" endtime="20170817 21:19:46.599"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:46.599">Length is 11</msg>
<status starttime="20170817 21:19:46.599" status="PASS" endtime="20170817 21:19:46.599"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:46.599">${bmc_model} = Witherspoon</msg>
<status starttime="20170817 21:19:45.247" status="PASS" endtime="20170817 21:19:46.599"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:46.600">BMC Model=Witherspoon</msg>
<status starttime="20170817 21:19:46.599" status="PASS" endtime="20170817 21:19:46.600"></status>
</kw>
<status starttime="20170817 21:19:45.247" status="PASS" endtime="20170817 21:19:46.600"></status>
</kw>
<status starttime="20170817 21:19:45.247" status="PASS" endtime="20170817 21:19:46.600"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:19:46.602">Dictionary does not contain key 'host'.</msg>
<status starttime="20170817 21:19:46.602" status="FAIL" endtime="20170817 21:19:46.602"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:46.602">${has_host} = False</msg>
<status starttime="20170817 21:19:46.602" status="PASS" endtime="20170817 21:19:46.602"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170817 21:19:46.603" status="PASS" endtime="20170817 21:19:46.603"></status>
</kw>
<status starttime="20170817 21:19:46.603" status="PASS" endtime="20170817 21:19:46.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:46.605">${port_num} = 22</msg>
<status starttime="20170817 21:19:46.605" status="PASS" endtime="20170817 21:19:46.605"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:46.606">${SSH_PORT} = 22</msg>
<status starttime="20170817 21:19:46.605" status="PASS" endtime="20170817 21:19:46.606"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:46.606">${https_num} = 443</msg>
<status starttime="20170817 21:19:46.606" status="PASS" endtime="20170817 21:19:46.606"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:46.607">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170817 21:19:46.606" status="PASS" endtime="20170817 21:19:46.607"></status>
</kw>
<status starttime="20170817 21:19:46.604" status="PASS" endtime="20170817 21:19:46.607"></status>
</kw>
<status starttime="20170817 21:19:46.604" status="PASS" endtime="20170817 21:19:46.607"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:19:46.608">Dictionary does not contain key 'port'.</msg>
<status starttime="20170817 21:19:46.608" status="FAIL" endtime="20170817 21:19:46.608"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:46.608">${has_port} = False</msg>
<status starttime="20170817 21:19:46.607" status="PASS" endtime="20170817 21:19:46.608"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170817 21:19:46.609" status="PASS" endtime="20170817 21:19:46.610"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170817 21:19:46.610" status="PASS" endtime="20170817 21:19:46.610"></status>
</kw>
<status starttime="20170817 21:19:46.609" status="PASS" endtime="20170817 21:19:46.610"></status>
</kw>
<status starttime="20170817 21:19:46.608" status="PASS" endtime="20170817 21:19:46.610"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:46.611">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170817 21:19:48.336">Read output: root@witherspoon:~#</msg>
<status starttime="20170817 21:19:46.611" status="PASS" endtime="20170817 21:19:48.337"></status>
</kw>
<status starttime="20170817 21:19:46.601" status="PASS" endtime="20170817 21:19:48.337"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:48.338">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170817 21:19:48.414">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170817 21:19:48.414">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170817 21:19:48.414">${stderr} = </msg>
<status starttime="20170817 21:19:48.337" status="PASS" endtime="20170817 21:19:48.414"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:48.415">Length is 0</msg>
<status starttime="20170817 21:19:48.415" status="PASS" endtime="20170817 21:19:48.415"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:48.415">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170817 21:19:48.337" status="PASS" endtime="20170817 21:19:48.415"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170817 21:19:48.415" status="PASS" endtime="20170817 21:19:48.416"></status>
</kw>
<status starttime="20170817 21:19:46.601" status="PASS" endtime="20170817 21:19:48.416"></status>
</kw>
<status starttime="20170817 21:19:46.600" status="PASS" endtime="20170817 21:19:48.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status starttime="20170817 21:19:48.416" status="PASS" endtime="20170817 21:19:48.416"></status>
</kw>
<status starttime="20170817 21:19:43.250" status="PASS" endtime="20170817 21:19:48.417"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/6080/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/6080/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:48.502">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:19:48.502" status="PASS" endtime="20170817 21:19:48.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:48.504">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:19:48.503" status="PASS" endtime="20170817 21:19:48.504"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:48.504">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:19:48.504" status="PASS" endtime="20170817 21:19:48.504"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:48.505">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:19:48.504" status="PASS" endtime="20170817 21:19:48.505"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:48.684">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:19:48.506" status="PASS" endtime="20170817 21:19:48.685"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:48.685">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:19:48.685">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:48.505" status="PASS" endtime="20170817 21:19:48.685"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:48.685">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:48.685" status="PASS" endtime="20170817 21:19:48.686"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:48.686">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:48.686" status="PASS" endtime="20170817 21:19:48.686"></status>
</kw>
<status starttime="20170817 21:19:48.502" status="PASS" endtime="20170817 21:19:48.686"></status>
</kw>
<status starttime="20170817 21:19:48.501" status="PASS" endtime="20170817 21:19:48.686"></status>
</kw>
<status starttime="20170817 21:19:48.501" status="PASS" endtime="20170817 21:19:48.687"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:48.691">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:19:48.691" status="PASS" endtime="20170817 21:19:48.692"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:48.692">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:19:48.692" status="PASS" endtime="20170817 21:19:48.692"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:48.693">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:19:48.693" status="PASS" endtime="20170817 21:19:48.693"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:48.694">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:19:48.693" status="PASS" endtime="20170817 21:19:48.694"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:48.878">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:19:48.694" status="PASS" endtime="20170817 21:19:48.878"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:48.878">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:19:48.878">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:48.694" status="PASS" endtime="20170817 21:19:48.878"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:48.879">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:48.878" status="PASS" endtime="20170817 21:19:48.879"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:48.879">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:48.879" status="PASS" endtime="20170817 21:19:48.879"></status>
</kw>
<status starttime="20170817 21:19:48.690" status="PASS" endtime="20170817 21:19:48.879"></status>
</kw>
<status starttime="20170817 21:19:48.690" status="PASS" endtime="20170817 21:19:48.880"></status>
</kw>
<status starttime="20170817 21:19:48.689" status="PASS" endtime="20170817 21:19:48.880"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:48.880">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:19:48.880" status="PASS" endtime="20170817 21:19:48.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:48.882">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:19:48.882" status="PASS" endtime="20170817 21:19:48.882"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:48.883">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:19:48.883" status="PASS" endtime="20170817 21:19:48.883"></status>
</kw>
<status starttime="20170817 21:19:48.883" status="PASS" endtime="20170817 21:19:48.884"></status>
</kw>
<status starttime="20170817 21:19:48.881" status="PASS" endtime="20170817 21:19:48.884"></status>
</kw>
<status starttime="20170817 21:19:48.881" status="PASS" endtime="20170817 21:19:48.884"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:48.971">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:19:48.971">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:48.884" status="PASS" endtime="20170817 21:19:48.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:48.973">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:19:48.972" status="PASS" endtime="20170817 21:19:48.973"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:48.974">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:19:48.973" status="PASS" endtime="20170817 21:19:48.974"></status>
</kw>
<status starttime="20170817 21:19:48.973" status="PASS" endtime="20170817 21:19:48.974"></status>
</kw>
<status starttime="20170817 21:19:48.972" status="PASS" endtime="20170817 21:19:48.974"></status>
</kw>
<status starttime="20170817 21:19:48.971" status="PASS" endtime="20170817 21:19:48.974"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:19:48.974">Delete All Sessions</msg>
<status starttime="20170817 21:19:48.974" status="PASS" endtime="20170817 21:19:48.974"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:48.975">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:48.689" status="PASS" endtime="20170817 21:19:48.975"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:48.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:48.975" status="PASS" endtime="20170817 21:19:48.975"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:48.976">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:19:48.976">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:19:48.976">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:19:48.976" status="PASS" endtime="20170817 21:19:48.976"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:48.977">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170817 21:19:48.688" status="PASS" endtime="20170817 21:19:48.977"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:48.977">${host_state} = Off</msg>
<status starttime="20170817 21:19:48.688" status="PASS" endtime="20170817 21:19:48.977"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:19:48.978">Off != Quiesced</msg>
<status starttime="20170817 21:19:48.978" status="FAIL" endtime="20170817 21:19:48.978"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:48.978">${status} = False</msg>
<status starttime="20170817 21:19:48.977" status="PASS" endtime="20170817 21:19:48.978"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:48.979">${status} = False</msg>
<status starttime="20170817 21:19:48.687" status="PASS" endtime="20170817 21:19:48.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170817 21:19:48.979" status="PASS" endtime="20170817 21:19:48.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170817 21:19:48.979" status="PASS" endtime="20170817 21:19:48.980"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:48.991">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170817 21:19:48.980" status="PASS" endtime="20170817 21:19:48.991"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.006">${FFDC_DIR_PATH} = </msg>
<status starttime="20170817 21:19:48.991" status="PASS" endtime="20170817 21:19:49.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.009">${cur_time} = 2017-08-17 21:19:49:009033</msg>
<status starttime="20170817 21:19:49.009" status="PASS" endtime="20170817 21:19:49.009"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.010">${cur_time} = 20170817211949009033</msg>
<status starttime="20170817 21:19:49.010" status="PASS" endtime="20170817 21:19:49.010"></status>
</kw>
<status starttime="20170817 21:19:49.008" status="PASS" endtime="20170817 21:19:49.010"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:49.018">${FFDC_TIME} = 20170817211949009033</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.019">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170817 21:19:49.019" status="PASS" endtime="20170817 21:19:49.019"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.019">${suite_name} = 20170817211949009033_TestsSecurityTestSsl</msg>
<status starttime="20170817 21:19:49.019" status="PASS" endtime="20170817 21:19:49.019"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.020">${test_name} = TestSSLConnection</msg>
<status starttime="20170817 21:19:49.020" status="PASS" endtime="20170817 21:19:49.020"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.021">${test_name} = 20170817211949009033_TestSSLConnection</msg>
<status starttime="20170817 21:19:49.020" status="PASS" endtime="20170817 21:19:49.021"></status>
</kw>
<status starttime="20170817 21:19:49.018" status="PASS" endtime="20170817 21:19:49.021"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:49.021">${FFDC_DIR_PATH} = /tmp/fspcibld/6080/obmc-robot/logs/20170817211949009033_TestsSecurityTestSsl/20170817211949009033_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170817 21:19:49.026">${FFDC_PREFIX} = 20170817211949009033_</msg>
<status starttime="20170817 21:19:49.007" status="PASS" endtime="20170817 21:19:49.026"></status>
</kw>
<status starttime="20170817 21:19:49.007" status="PASS" endtime="20170817 21:19:49.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170817 21:19:49.026" status="PASS" endtime="20170817 21:19:49.027"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:49.027" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs"&gt;/tmp/fspcibld/6080/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170817 21:19:49.027" status="PASS" endtime="20170817 21:19:49.028"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:19:49.029">File '/tmp/fspcibld/6080/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170817 21:19:49.029" status="FAIL" endtime="20170817 21:19:49.029"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:49.029">${exist} = False</msg>
<status starttime="20170817 21:19:49.028" status="PASS" endtime="20170817 21:19:49.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:49.030" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:19:49.030" status="PASS" endtime="20170817 21:19:49.030"></status>
</kw>
<status starttime="20170817 21:19:49.029" status="PASS" endtime="20170817 21:19:49.031"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170817 21:19:49.031" status="PASS" endtime="20170817 21:19:49.031"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.032">${cur_time} = 2017-08-17 21:19:49:031859</msg>
<status starttime="20170817 21:19:49.032" status="PASS" endtime="20170817 21:19:49.032"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.033">${cur_time} = 20170817211949031859</msg>
<status starttime="20170817 21:19:49.032" status="PASS" endtime="20170817 21:19:49.033"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:49.033">${cur_time} = 20170817211949031859</msg>
<status starttime="20170817 21:19:49.031" status="PASS" endtime="20170817 21:19:49.033"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:49.034" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:19:49.033" status="PASS" endtime="20170817 21:19:49.034"></status>
</kw>
<status starttime="20170817 21:19:48.980" status="PASS" endtime="20170817 21:19:49.034"></status>
</kw>
<status starttime="20170817 21:19:48.687" status="PASS" endtime="20170817 21:19:49.034"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170817 21:19:48.500" critical="yes" status="PASS" endtime="20170817 21:19:49.034"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:19:49.035">Delete All Sessions</msg>
<status starttime="20170817 21:19:49.035" status="PASS" endtime="20170817 21:19:49.035"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170817 21:19:48.419" status="PASS" endtime="20170817 21:19:49.035"></status>
</suite>
<status starttime="20170817 21:19:48.417" status="PASS" endtime="20170817 21:19:49.038"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/6080/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.076">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 21:19:49.076" status="PASS" endtime="20170817 21:19:49.077"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.077">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 21:19:49.077" status="PASS" endtime="20170817 21:19:49.077"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:49.077">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 21:19:49.076" status="PASS" endtime="20170817 21:19:49.077"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.079">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 21:19:49.079" status="PASS" endtime="20170817 21:19:49.079"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.080">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 21:19:49.079" status="PASS" endtime="20170817 21:19:49.080"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:49.080">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 21:19:49.078" status="PASS" endtime="20170817 21:19:49.080"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.081">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170817 21:19:49.081" status="PASS" endtime="20170817 21:19:49.081"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170817 21:19:49.081" status="PASS" endtime="20170817 21:19:49.081"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.086">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170817 21:19:49.089">${rc} = 0</msg>
<msg level="INFO" timestamp="20170817 21:19:49.089">${output} = /tmp/fspcibld/6080/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170817 21:19:49.082" status="PASS" endtime="20170817 21:19:49.089"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170817 21:19:49.091" status="PASS" endtime="20170817 21:19:49.092"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170817 21:19:49.092" status="PASS" endtime="20170817 21:19:49.093"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.093">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170817 21:19:49.093" status="PASS" endtime="20170817 21:19:49.093"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:49.094">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170817 21:19:49.080" status="PASS" endtime="20170817 21:19:49.094"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.094">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170817 21:19:49.094" status="PASS" endtime="20170817 21:19:49.094"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170817 21:19:49.095" status="PASS" endtime="20170817 21:19:49.095"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.098">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170817 21:19:49.108">${rc} = 0</msg>
<msg level="INFO" timestamp="20170817 21:19:49.108">${os_con_pid} = </msg>
<status starttime="20170817 21:19:49.095" status="PASS" endtime="20170817 21:19:49.108"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170817 21:19:49.110" status="PASS" endtime="20170817 21:19:49.111"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.112">${cmd_buf} = kill -9 </msg>
<status starttime="20170817 21:19:49.111" status="PASS" endtime="20170817 21:19:49.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170817 21:19:49.112" status="PASS" endtime="20170817 21:19:49.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.114">${rc} = None</msg>
<msg level="INFO" timestamp="20170817 21:19:49.114">${output} = None</msg>
<status starttime="20170817 21:19:49.113" status="PASS" endtime="20170817 21:19:49.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170817 21:19:49.114" status="PASS" endtime="20170817 21:19:49.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:19:49.117">Source file '/tmp/9.41.166.169_os_console' does not exist.</msg>
<status starttime="20170817 21:19:49.116" status="FAIL" endtime="20170817 21:19:49.118"></status>
</kw>
<status starttime="20170817 21:19:49.115" status="PASS" endtime="20170817 21:19:49.118"></status>
</kw>
<status starttime="20170817 21:19:49.115" status="PASS" endtime="20170817 21:19:49.118"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.119">${output} = </msg>
<status starttime="20170817 21:19:49.118" status="PASS" endtime="20170817 21:19:49.119"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.119">${loc_quiet} = 1</msg>
<status starttime="20170817 21:19:49.119" status="PASS" endtime="20170817 21:19:49.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170817 21:19:49.120" status="PASS" endtime="20170817 21:19:49.172"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:49.173">${rc} = 1</msg>
<msg level="INFO" timestamp="20170817 21:19:49.173">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status starttime="20170817 21:19:49.120" status="PASS" endtime="20170817 21:19:49.173"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:49.174">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status starttime="20170817 21:19:49.078" status="PASS" endtime="20170817 21:19:49.174"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:49.175" html="yes">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status starttime="20170817 21:19:49.175" status="PASS" endtime="20170817 21:19:49.176"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.177">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170817 21:19:49.176" status="PASS" endtime="20170817 21:19:49.177"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170817 21:19:49.177" status="PASS" endtime="20170817 21:19:49.177"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.180">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170817 21:19:49.183">${rc} = 0</msg>
<msg level="INFO" timestamp="20170817 21:19:49.183">${output} = /tmp/fspcibld/6080/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170817 21:19:49.177" status="PASS" endtime="20170817 21:19:49.183"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170817 21:19:49.186" status="PASS" endtime="20170817 21:19:49.186"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170817 21:19:49.187" status="PASS" endtime="20170817 21:19:49.187"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.188">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170817 21:19:49.187" status="PASS" endtime="20170817 21:19:49.188"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:49.188">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170817 21:19:49.176" status="PASS" endtime="20170817 21:19:49.188"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.189">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170817 21:19:49.189" status="PASS" endtime="20170817 21:19:49.189"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170817 21:19:49.189" status="PASS" endtime="20170817 21:19:49.190"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.193">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170817 21:19:49.195">${rc} = 0</msg>
<msg level="INFO" timestamp="20170817 21:19:49.195">${output} = </msg>
<status starttime="20170817 21:19:49.190" status="PASS" endtime="20170817 21:19:49.195"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170817 21:19:49.198" status="PASS" endtime="20170817 21:19:49.199"></status>
</kw>
<status starttime="20170817 21:19:49.075" status="PASS" endtime="20170817 21:19:49.199"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:49.200">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.202">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170817 21:19:49.201" status="PASS" endtime="20170817 21:19:49.202"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.203">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170817 21:19:49.203" status="PASS" endtime="20170817 21:19:49.203"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:49.207">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:19:49.207" status="PASS" endtime="20170817 21:19:49.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.209">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:19:49.208" status="PASS" endtime="20170817 21:19:49.209"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.209">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:19:49.209" status="PASS" endtime="20170817 21:19:49.209"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.210">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:19:49.210" status="PASS" endtime="20170817 21:19:49.210"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:49.820">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:19:49.211" status="PASS" endtime="20170817 21:19:49.821"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:49.821">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:19:49.821">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:49.210" status="PASS" endtime="20170817 21:19:49.821"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:49.821">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:49.821" status="PASS" endtime="20170817 21:19:49.821"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:49.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:49.822" status="PASS" endtime="20170817 21:19:49.822"></status>
</kw>
<status starttime="20170817 21:19:49.206" status="PASS" endtime="20170817 21:19:49.822"></status>
</kw>
<status starttime="20170817 21:19:49.205" status="PASS" endtime="20170817 21:19:49.822"></status>
</kw>
<status starttime="20170817 21:19:49.204" status="PASS" endtime="20170817 21:19:49.823"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.823">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170817 21:19:49.823" status="PASS" endtime="20170817 21:19:49.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.824">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:19:49.823" status="PASS" endtime="20170817 21:19:49.824"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170817 21:19:49.824" status="PASS" endtime="20170817 21:19:49.824"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:49.826">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170817 21:19:49.825" status="PASS" endtime="20170817 21:19:49.826"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:49.827">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170817 21:19:49.827" status="PASS" endtime="20170817 21:19:49.827"></status>
</kw>
<status starttime="20170817 21:19:49.826" status="PASS" endtime="20170817 21:19:49.827"></status>
</kw>
<status starttime="20170817 21:19:49.824" status="PASS" endtime="20170817 21:19:49.827"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:50.426">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170817 21:19:50.426">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:49.827" status="PASS" endtime="20170817 21:19:50.426"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:50.427">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:19:50.427" status="PASS" endtime="20170817 21:19:50.427"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:50.428">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:19:50.428" status="PASS" endtime="20170817 21:19:50.428"></status>
</kw>
<status starttime="20170817 21:19:50.427" status="PASS" endtime="20170817 21:19:50.428"></status>
</kw>
<status starttime="20170817 21:19:50.426" status="PASS" endtime="20170817 21:19:50.429"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:19:50.429">Delete All Sessions</msg>
<status starttime="20170817 21:19:50.429" status="PASS" endtime="20170817 21:19:50.429"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:50.429">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:49.203" status="PASS" endtime="20170817 21:19:50.429"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:50.430">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:50.429" status="PASS" endtime="20170817 21:19:50.430"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:50.430">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:19:50.431">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:19:50.431">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:19:50.430" status="PASS" endtime="20170817 21:19:50.431"></status>
</kw>
<status starttime="20170817 21:19:49.202" status="PASS" endtime="20170817 21:19:50.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170817 21:19:50.431" status="PASS" endtime="20170817 21:19:50.431"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:50.436">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:19:50.436" status="PASS" endtime="20170817 21:19:50.436"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:50.437">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:19:50.437" status="PASS" endtime="20170817 21:19:50.437"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:50.437">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:19:50.437" status="PASS" endtime="20170817 21:19:50.438"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:50.438">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:19:50.438" status="PASS" endtime="20170817 21:19:50.438"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:52.015">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:19:50.439" status="PASS" endtime="20170817 21:19:52.015"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:52.015">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:19:52.015">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:50.439" status="PASS" endtime="20170817 21:19:52.015"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:52.016">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:52.016" status="PASS" endtime="20170817 21:19:52.016"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:52.017">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:52.016" status="PASS" endtime="20170817 21:19:52.017"></status>
</kw>
<status starttime="20170817 21:19:50.435" status="PASS" endtime="20170817 21:19:52.017"></status>
</kw>
<status starttime="20170817 21:19:50.435" status="PASS" endtime="20170817 21:19:52.017"></status>
</kw>
<status starttime="20170817 21:19:50.434" status="PASS" endtime="20170817 21:19:52.017"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:52.018">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:19:52.017" status="PASS" endtime="20170817 21:19:52.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:52.020">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:19:52.019" status="PASS" endtime="20170817 21:19:52.020"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:52.021">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:19:52.021" status="PASS" endtime="20170817 21:19:52.021"></status>
</kw>
<status starttime="20170817 21:19:52.020" status="PASS" endtime="20170817 21:19:52.021"></status>
</kw>
<status starttime="20170817 21:19:52.018" status="PASS" endtime="20170817 21:19:52.021"></status>
</kw>
<status starttime="20170817 21:19:52.018" status="PASS" endtime="20170817 21:19:52.021"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:56.117">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:19:56.118">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:52.021" status="PASS" endtime="20170817 21:19:56.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:56.120">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:19:56.119" status="PASS" endtime="20170817 21:19:56.120"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:56.121">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:19:56.120" status="PASS" endtime="20170817 21:19:56.121"></status>
</kw>
<status starttime="20170817 21:19:56.120" status="PASS" endtime="20170817 21:19:56.121"></status>
</kw>
<status starttime="20170817 21:19:56.119" status="PASS" endtime="20170817 21:19:56.121"></status>
</kw>
<status starttime="20170817 21:19:56.118" status="PASS" endtime="20170817 21:19:56.121"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:19:56.121">Delete All Sessions</msg>
<status starttime="20170817 21:19:56.121" status="PASS" endtime="20170817 21:19:56.121"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:56.122">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:50.434" status="PASS" endtime="20170817 21:19:56.122"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:56.122">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:56.122" status="PASS" endtime="20170817 21:19:56.122"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:56.123">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:19:56.123">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:19:56.123">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:19:56.123" status="PASS" endtime="20170817 21:19:56.123"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:56.123">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170817 21:19:50.433" status="PASS" endtime="20170817 21:19:56.123"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:56.124">${power_state} = Off</msg>
<status starttime="20170817 21:19:50.433" status="PASS" endtime="20170817 21:19:56.124"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:19:56.124" status="PASS" endtime="20170817 21:19:56.124"></status>
</kw>
<status starttime="20170817 21:19:50.432" status="PASS" endtime="20170817 21:19:56.124"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:56.129">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:19:56.128" status="PASS" endtime="20170817 21:19:56.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:56.130">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:19:56.130" status="PASS" endtime="20170817 21:19:56.130"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:56.131">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:19:56.131" status="PASS" endtime="20170817 21:19:56.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:56.132">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:19:56.132" status="PASS" endtime="20170817 21:19:56.132"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:57.019">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:19:56.133" status="PASS" endtime="20170817 21:19:57.019"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:57.019">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:19:57.019">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:56.133" status="PASS" endtime="20170817 21:19:57.019"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:57.020">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:57.020" status="PASS" endtime="20170817 21:19:57.020"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:57.021">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:57.021" status="PASS" endtime="20170817 21:19:57.021"></status>
</kw>
<status starttime="20170817 21:19:56.127" status="PASS" endtime="20170817 21:19:57.021"></status>
</kw>
<status starttime="20170817 21:19:56.127" status="PASS" endtime="20170817 21:19:57.021"></status>
</kw>
<status starttime="20170817 21:19:56.126" status="PASS" endtime="20170817 21:19:57.021"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.022">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:19:57.021" status="PASS" endtime="20170817 21:19:57.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.024">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:19:57.023" status="PASS" endtime="20170817 21:19:57.024"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:57.025">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:19:57.025" status="PASS" endtime="20170817 21:19:57.025"></status>
</kw>
<status starttime="20170817 21:19:57.024" status="PASS" endtime="20170817 21:19:57.025"></status>
</kw>
<status starttime="20170817 21:19:57.023" status="PASS" endtime="20170817 21:19:57.025"></status>
</kw>
<status starttime="20170817 21:19:57.022" status="PASS" endtime="20170817 21:19:57.025"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.258">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:19:57.258">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:57.025" status="PASS" endtime="20170817 21:19:57.258"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.260">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:19:57.259" status="PASS" endtime="20170817 21:19:57.260"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:57.261">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:19:57.261" status="PASS" endtime="20170817 21:19:57.261"></status>
</kw>
<status starttime="20170817 21:19:57.260" status="PASS" endtime="20170817 21:19:57.261"></status>
</kw>
<status starttime="20170817 21:19:57.259" status="PASS" endtime="20170817 21:19:57.261"></status>
</kw>
<status starttime="20170817 21:19:57.258" status="PASS" endtime="20170817 21:19:57.262"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:19:57.262">Delete All Sessions</msg>
<status starttime="20170817 21:19:57.262" status="PASS" endtime="20170817 21:19:57.262"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:57.262">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:56.125" status="PASS" endtime="20170817 21:19:57.262"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:57.263">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:57.262" status="PASS" endtime="20170817 21:19:57.263"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.263">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:19:57.263">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:19:57.264">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:19:57.263" status="PASS" endtime="20170817 21:19:57.264"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:57.264">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170817 21:19:56.125" status="PASS" endtime="20170817 21:19:57.264"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:57.264">${host_state} = Off</msg>
<status starttime="20170817 21:19:56.125" status="PASS" endtime="20170817 21:19:57.264"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:19:57.264" status="PASS" endtime="20170817 21:19:57.265"></status>
</kw>
<status starttime="20170817 21:19:50.432" status="PASS" endtime="20170817 21:19:57.265"></status>
</kw>
<status starttime="20170817 21:19:50.432" status="PASS" endtime="20170817 21:19:57.265"></status>
</kw>
<status starttime="20170817 21:19:49.201" status="PASS" endtime="20170817 21:19:57.265"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.266">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170817 21:19:57.266" status="PASS" endtime="20170817 21:19:57.266"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.267">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170817 21:19:57.267" status="PASS" endtime="20170817 21:19:57.267"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:57.270">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:19:57.269" status="PASS" endtime="20170817 21:19:57.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.271">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:19:57.270" status="PASS" endtime="20170817 21:19:57.271"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.271">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:19:57.271" status="PASS" endtime="20170817 21:19:57.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.272">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:19:57.272" status="PASS" endtime="20170817 21:19:57.272"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:57.459">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:19:57.273" status="PASS" endtime="20170817 21:19:57.459"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:57.460">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:19:57.460">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:57.272" status="PASS" endtime="20170817 21:19:57.460"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:57.460">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:57.460" status="PASS" endtime="20170817 21:19:57.460"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:57.461">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:57.461" status="PASS" endtime="20170817 21:19:57.461"></status>
</kw>
<status starttime="20170817 21:19:57.269" status="PASS" endtime="20170817 21:19:57.461"></status>
</kw>
<status starttime="20170817 21:19:57.269" status="PASS" endtime="20170817 21:19:57.461"></status>
</kw>
<status starttime="20170817 21:19:57.268" status="PASS" endtime="20170817 21:19:57.461"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.462">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170817 21:19:57.462" status="PASS" endtime="20170817 21:19:57.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.463">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:19:57.462" status="PASS" endtime="20170817 21:19:57.463"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170817 21:19:57.463" status="PASS" endtime="20170817 21:19:57.463"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.465">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status starttime="20170817 21:19:57.464" status="PASS" endtime="20170817 21:19:57.465"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:57.466">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170817 21:19:57.466" status="PASS" endtime="20170817 21:19:57.466"></status>
</kw>
<status starttime="20170817 21:19:57.465" status="PASS" endtime="20170817 21:19:57.466"></status>
</kw>
<status starttime="20170817 21:19:57.463" status="PASS" endtime="20170817 21:19:57.466"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.811">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170817 21:19:57.811">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:57.467" status="PASS" endtime="20170817 21:19:57.811"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.813">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:19:57.812" status="PASS" endtime="20170817 21:19:57.813"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:57.814">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:19:57.813" status="PASS" endtime="20170817 21:19:57.814"></status>
</kw>
<status starttime="20170817 21:19:57.813" status="PASS" endtime="20170817 21:19:57.814"></status>
</kw>
<status starttime="20170817 21:19:57.812" status="PASS" endtime="20170817 21:19:57.814"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:19:57.814">Delete All Sessions</msg>
<status starttime="20170817 21:19:57.814" status="PASS" endtime="20170817 21:19:57.814"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:57.815">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:57.267" status="PASS" endtime="20170817 21:19:57.815"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:57.815">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:57.815" status="PASS" endtime="20170817 21:19:57.815"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.816">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:19:57.816">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:19:57.816">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:19:57.816" status="PASS" endtime="20170817 21:19:57.816"></status>
</kw>
<status starttime="20170817 21:19:57.266" status="PASS" endtime="20170817 21:19:57.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170817 21:19:57.817" status="PASS" endtime="20170817 21:19:57.817"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:57.822">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:19:57.821" status="PASS" endtime="20170817 21:19:57.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.823">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:19:57.822" status="PASS" endtime="20170817 21:19:57.823"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.824">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:19:57.823" status="PASS" endtime="20170817 21:19:57.824"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:57.824">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:19:57.824" status="PASS" endtime="20170817 21:19:57.824"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:59.918">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:19:57.825" status="PASS" endtime="20170817 21:19:59.919"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:19:59.919">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:19:59.919">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:57.824" status="PASS" endtime="20170817 21:19:59.919"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:59.919">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:59.919" status="PASS" endtime="20170817 21:19:59.919"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:59.920">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:19:59.920" status="PASS" endtime="20170817 21:19:59.920"></status>
</kw>
<status starttime="20170817 21:19:57.821" status="PASS" endtime="20170817 21:19:59.920"></status>
</kw>
<status starttime="20170817 21:19:57.820" status="PASS" endtime="20170817 21:19:59.920"></status>
</kw>
<status starttime="20170817 21:19:57.820" status="PASS" endtime="20170817 21:19:59.921"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:59.921">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:19:59.921" status="PASS" endtime="20170817 21:19:59.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:19:59.923">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:19:59.922" status="PASS" endtime="20170817 21:19:59.923"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:19:59.924">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:19:59.924" status="PASS" endtime="20170817 21:19:59.924"></status>
</kw>
<status starttime="20170817 21:19:59.923" status="PASS" endtime="20170817 21:19:59.924"></status>
</kw>
<status starttime="20170817 21:19:59.922" status="PASS" endtime="20170817 21:19:59.924"></status>
</kw>
<status starttime="20170817 21:19:59.921" status="PASS" endtime="20170817 21:19:59.925"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:03.317">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:03.317">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:59.925" status="PASS" endtime="20170817 21:20:03.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:03.319">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:03.318" status="PASS" endtime="20170817 21:20:03.319"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:03.320">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:03.319" status="PASS" endtime="20170817 21:20:03.320"></status>
</kw>
<status starttime="20170817 21:20:03.319" status="PASS" endtime="20170817 21:20:03.320"></status>
</kw>
<status starttime="20170817 21:20:03.318" status="PASS" endtime="20170817 21:20:03.320"></status>
</kw>
<status starttime="20170817 21:20:03.317" status="PASS" endtime="20170817 21:20:03.320"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:03.320">Delete All Sessions</msg>
<status starttime="20170817 21:20:03.320" status="PASS" endtime="20170817 21:20:03.320"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:03.321">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:19:57.819" status="PASS" endtime="20170817 21:20:03.321"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:03.321">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:03.321" status="PASS" endtime="20170817 21:20:03.321"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:03.322">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:03.322">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:03.322">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:03.322" status="PASS" endtime="20170817 21:20:03.322"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:03.322">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170817 21:19:57.819" status="PASS" endtime="20170817 21:20:03.322"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:03.323">${power_state} = Off</msg>
<status starttime="20170817 21:19:57.818" status="PASS" endtime="20170817 21:20:03.323"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:20:03.323">On != Off</msg>
<status starttime="20170817 21:20:03.323" status="FAIL" endtime="20170817 21:20:03.323"></status>
</kw>
<status starttime="20170817 21:19:57.818" status="FAIL" endtime="20170817 21:20:03.324"></status>
</kw>
<status starttime="20170817 21:19:57.818" status="FAIL" endtime="20170817 21:20:03.324"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:13.329">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:20:13.329" status="PASS" endtime="20170817 21:20:13.329"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:13.330">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:20:13.330" status="PASS" endtime="20170817 21:20:13.330"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:13.331">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:20:13.330" status="PASS" endtime="20170817 21:20:13.331"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:13.331">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:20:13.331" status="PASS" endtime="20170817 21:20:13.331"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:14.105">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:20:13.332" status="PASS" endtime="20170817 21:20:14.105"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:14.105">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:20:14.105">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:13.332" status="PASS" endtime="20170817 21:20:14.105"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:14.105">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:14.105" status="PASS" endtime="20170817 21:20:14.106"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:14.106">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:14.106" status="PASS" endtime="20170817 21:20:14.106"></status>
</kw>
<status starttime="20170817 21:20:13.328" status="PASS" endtime="20170817 21:20:14.106"></status>
</kw>
<status starttime="20170817 21:20:13.328" status="PASS" endtime="20170817 21:20:14.106"></status>
</kw>
<status starttime="20170817 21:20:13.327" status="PASS" endtime="20170817 21:20:14.107"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:14.107">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:20:14.107" status="PASS" endtime="20170817 21:20:14.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:14.109">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:20:14.108" status="PASS" endtime="20170817 21:20:14.109"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:14.110">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:20:14.110" status="PASS" endtime="20170817 21:20:14.111"></status>
</kw>
<status starttime="20170817 21:20:14.110" status="PASS" endtime="20170817 21:20:14.111"></status>
</kw>
<status starttime="20170817 21:20:14.108" status="PASS" endtime="20170817 21:20:14.111"></status>
</kw>
<status starttime="20170817 21:20:14.107" status="PASS" endtime="20170817 21:20:14.111"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:14.864">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:14.864">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:14.111" status="PASS" endtime="20170817 21:20:14.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:14.866">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:14.865" status="PASS" endtime="20170817 21:20:14.866"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:14.866">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:14.866" status="PASS" endtime="20170817 21:20:14.867"></status>
</kw>
<status starttime="20170817 21:20:14.866" status="PASS" endtime="20170817 21:20:14.867"></status>
</kw>
<status starttime="20170817 21:20:14.865" status="PASS" endtime="20170817 21:20:14.867"></status>
</kw>
<status starttime="20170817 21:20:14.864" status="PASS" endtime="20170817 21:20:14.867"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:14.867">Delete All Sessions</msg>
<status starttime="20170817 21:20:14.867" status="PASS" endtime="20170817 21:20:14.867"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:14.868">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:13.326" status="PASS" endtime="20170817 21:20:14.868"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:14.868">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:14.868" status="PASS" endtime="20170817 21:20:14.868"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:14.869">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:14.869">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:14.869">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:14.869" status="PASS" endtime="20170817 21:20:14.869"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:14.869">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:20:13.326" status="PASS" endtime="20170817 21:20:14.869"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:14.870">${power_state} = On</msg>
<status starttime="20170817 21:20:13.325" status="PASS" endtime="20170817 21:20:14.870"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:20:14.870" status="PASS" endtime="20170817 21:20:14.870"></status>
</kw>
<status starttime="20170817 21:20:13.325" status="PASS" endtime="20170817 21:20:14.871"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:14.874">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:20:14.874" status="PASS" endtime="20170817 21:20:14.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:14.875">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:20:14.875" status="PASS" endtime="20170817 21:20:14.875"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:14.876">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:20:14.875" status="PASS" endtime="20170817 21:20:14.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:14.876">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:20:14.876" status="PASS" endtime="20170817 21:20:14.876"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:15.252">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:20:14.877" status="PASS" endtime="20170817 21:20:15.252"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:15.252">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:20:15.252">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:14.877" status="PASS" endtime="20170817 21:20:15.252"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:15.253">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:15.252" status="PASS" endtime="20170817 21:20:15.253"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:15.253">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:15.253" status="PASS" endtime="20170817 21:20:15.254"></status>
</kw>
<status starttime="20170817 21:20:14.873" status="PASS" endtime="20170817 21:20:15.254"></status>
</kw>
<status starttime="20170817 21:20:14.873" status="PASS" endtime="20170817 21:20:15.254"></status>
</kw>
<status starttime="20170817 21:20:14.872" status="PASS" endtime="20170817 21:20:15.254"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:15.254">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:20:15.254" status="PASS" endtime="20170817 21:20:15.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:15.257">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:20:15.256" status="PASS" endtime="20170817 21:20:15.257"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:15.257">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:20:15.257" status="PASS" endtime="20170817 21:20:15.258"></status>
</kw>
<status starttime="20170817 21:20:15.257" status="PASS" endtime="20170817 21:20:15.258"></status>
</kw>
<status starttime="20170817 21:20:15.255" status="PASS" endtime="20170817 21:20:15.258"></status>
</kw>
<status starttime="20170817 21:20:15.255" status="PASS" endtime="20170817 21:20:15.258"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:15.728">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:15.728">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:15.258" status="PASS" endtime="20170817 21:20:15.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:15.729">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:15.729" status="PASS" endtime="20170817 21:20:15.729"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:15.730">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:15.730" status="PASS" endtime="20170817 21:20:15.731"></status>
</kw>
<status starttime="20170817 21:20:15.730" status="PASS" endtime="20170817 21:20:15.731"></status>
</kw>
<status starttime="20170817 21:20:15.728" status="PASS" endtime="20170817 21:20:15.731"></status>
</kw>
<status starttime="20170817 21:20:15.728" status="PASS" endtime="20170817 21:20:15.731"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:15.731">Delete All Sessions</msg>
<status starttime="20170817 21:20:15.731" status="PASS" endtime="20170817 21:20:15.731"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:15.731">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:14.872" status="PASS" endtime="20170817 21:20:15.732"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:15.732">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:15.732" status="PASS" endtime="20170817 21:20:15.732"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:15.733">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:15.733">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:15.733">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:15.732" status="PASS" endtime="20170817 21:20:15.733"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:15.733">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 21:20:14.871" status="PASS" endtime="20170817 21:20:15.733"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:15.733">${host_state} = Running</msg>
<status starttime="20170817 21:20:14.871" status="PASS" endtime="20170817 21:20:15.734"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:20:15.734" status="PASS" endtime="20170817 21:20:15.734"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:15.739">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:20:15.739" status="PASS" endtime="20170817 21:20:15.739"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:15.740">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:20:15.740" status="PASS" endtime="20170817 21:20:15.740"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:15.741">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:20:15.740" status="PASS" endtime="20170817 21:20:15.741"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:15.741">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:20:15.741" status="PASS" endtime="20170817 21:20:15.741"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:16.178">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:20:15.742" status="PASS" endtime="20170817 21:20:16.179"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:16.179">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:20:16.179">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:15.742" status="PASS" endtime="20170817 21:20:16.179"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:16.179">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:16.179" status="PASS" endtime="20170817 21:20:16.179"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:16.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:16.180" status="PASS" endtime="20170817 21:20:16.180"></status>
</kw>
<status starttime="20170817 21:20:15.738" status="PASS" endtime="20170817 21:20:16.180"></status>
</kw>
<status starttime="20170817 21:20:15.738" status="PASS" endtime="20170817 21:20:16.181"></status>
</kw>
<status starttime="20170817 21:20:15.737" status="PASS" endtime="20170817 21:20:16.181"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:16.182">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 21:20:16.181" status="PASS" endtime="20170817 21:20:16.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:16.185">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:20:16.184" status="PASS" endtime="20170817 21:20:16.185"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:16.186">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:20:16.186" status="PASS" endtime="20170817 21:20:16.186"></status>
</kw>
<status starttime="20170817 21:20:16.185" status="PASS" endtime="20170817 21:20:16.186"></status>
</kw>
<status starttime="20170817 21:20:16.183" status="PASS" endtime="20170817 21:20:16.186"></status>
</kw>
<status starttime="20170817 21:20:16.182" status="PASS" endtime="20170817 21:20:16.187"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:16.539">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:16.539">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:16.187" status="PASS" endtime="20170817 21:20:16.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:16.542">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:16.541" status="PASS" endtime="20170817 21:20:16.542"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:16.543">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:16.542" status="PASS" endtime="20170817 21:20:16.543"></status>
</kw>
<status starttime="20170817 21:20:16.542" status="PASS" endtime="20170817 21:20:16.543"></status>
</kw>
<status starttime="20170817 21:20:16.540" status="PASS" endtime="20170817 21:20:16.543"></status>
</kw>
<status starttime="20170817 21:20:16.540" status="PASS" endtime="20170817 21:20:16.543"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:16.543">Delete All Sessions</msg>
<status starttime="20170817 21:20:16.543" status="PASS" endtime="20170817 21:20:16.543"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:16.544">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:15.736" status="PASS" endtime="20170817 21:20:16.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:16.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:16.544" status="PASS" endtime="20170817 21:20:16.545"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:16.545">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:16.545">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:16.545">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:16.545" status="PASS" endtime="20170817 21:20:16.545"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:16.546">${state} = Off</msg>
<status starttime="20170817 21:20:15.736" status="PASS" endtime="20170817 21:20:16.546"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:16.546">${boot_progress} = Off</msg>
<status starttime="20170817 21:20:15.735" status="PASS" endtime="20170817 21:20:16.546"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:20:16.546">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 21:20:16.546" status="FAIL" endtime="20170817 21:20:16.546"></status>
</kw>
<status starttime="20170817 21:20:15.735" status="FAIL" endtime="20170817 21:20:16.547"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:16.547">${status} = False</msg>
<status starttime="20170817 21:20:15.735" status="PASS" endtime="20170817 21:20:16.547"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 21:20:16.547" status="PASS" endtime="20170817 21:20:16.547"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:16.551">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:20:16.551" status="PASS" endtime="20170817 21:20:16.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:16.552">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:20:16.552" status="PASS" endtime="20170817 21:20:16.552"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:16.552">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:20:16.552" status="PASS" endtime="20170817 21:20:16.552"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:16.553">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:20:16.553" status="PASS" endtime="20170817 21:20:16.553"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:16.742">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:20:16.554" status="PASS" endtime="20170817 21:20:16.742"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:16.742">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:20:16.742">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:16.553" status="PASS" endtime="20170817 21:20:16.742"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:16.743">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:16.743" status="PASS" endtime="20170817 21:20:16.743"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:16.744">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:16.743" status="PASS" endtime="20170817 21:20:16.744"></status>
</kw>
<status starttime="20170817 21:20:16.550" status="PASS" endtime="20170817 21:20:16.744"></status>
</kw>
<status starttime="20170817 21:20:16.550" status="PASS" endtime="20170817 21:20:16.744"></status>
</kw>
<status starttime="20170817 21:20:16.549" status="PASS" endtime="20170817 21:20:16.744"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:16.745">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 21:20:16.744" status="PASS" endtime="20170817 21:20:16.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:16.747">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:20:16.746" status="PASS" endtime="20170817 21:20:16.747"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:16.748">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:20:16.748" status="PASS" endtime="20170817 21:20:16.748"></status>
</kw>
<status starttime="20170817 21:20:16.747" status="PASS" endtime="20170817 21:20:16.748"></status>
</kw>
<status starttime="20170817 21:20:16.745" status="PASS" endtime="20170817 21:20:16.748"></status>
</kw>
<status starttime="20170817 21:20:16.745" status="PASS" endtime="20170817 21:20:16.748"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:16.983">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:16.983">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:16.749" status="PASS" endtime="20170817 21:20:16.983"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:16.985">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:16.985" status="PASS" endtime="20170817 21:20:16.985"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:16.986">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:16.986" status="PASS" endtime="20170817 21:20:16.986"></status>
</kw>
<status starttime="20170817 21:20:16.985" status="PASS" endtime="20170817 21:20:16.986"></status>
</kw>
<status starttime="20170817 21:20:16.984" status="PASS" endtime="20170817 21:20:16.986"></status>
</kw>
<status starttime="20170817 21:20:16.984" status="PASS" endtime="20170817 21:20:16.986"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:16.987">Delete All Sessions</msg>
<status starttime="20170817 21:20:16.987" status="PASS" endtime="20170817 21:20:16.987"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:16.987">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:16.548" status="PASS" endtime="20170817 21:20:16.987"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:16.988">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:16.987" status="PASS" endtime="20170817 21:20:16.988"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:16.989">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:16.989">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:16.989">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:16.988" status="PASS" endtime="20170817 21:20:16.989"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:16.990">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:20:16.548" status="PASS" endtime="20170817 21:20:16.990"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:16.990">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:20:16.547" status="PASS" endtime="20170817 21:20:16.990"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:16.990">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:20:16.991">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:20:16.990" status="FAIL" endtime="20170817 21:20:16.991"></status>
</kw>
<status starttime="20170817 21:20:15.734" status="FAIL" endtime="20170817 21:20:16.991"></status>
</kw>
<status starttime="20170817 21:20:13.324" status="FAIL" endtime="20170817 21:20:16.991"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:26.996">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:20:26.996" status="PASS" endtime="20170817 21:20:26.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:26.997">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:20:26.997" status="PASS" endtime="20170817 21:20:26.997"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:26.998">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:20:26.997" status="PASS" endtime="20170817 21:20:26.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.001">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:20:26.998" status="PASS" endtime="20170817 21:20:27.001"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.219">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:20:27.002" status="PASS" endtime="20170817 21:20:27.219"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:27.219">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:20:27.219">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:27.001" status="PASS" endtime="20170817 21:20:27.219"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.220">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:27.220" status="PASS" endtime="20170817 21:20:27.220"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.221">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:27.220" status="PASS" endtime="20170817 21:20:27.221"></status>
</kw>
<status starttime="20170817 21:20:26.995" status="PASS" endtime="20170817 21:20:27.221"></status>
</kw>
<status starttime="20170817 21:20:26.995" status="PASS" endtime="20170817 21:20:27.221"></status>
</kw>
<status starttime="20170817 21:20:26.994" status="PASS" endtime="20170817 21:20:27.221"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.222">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:20:27.221" status="PASS" endtime="20170817 21:20:27.222"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.224">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:20:27.223" status="PASS" endtime="20170817 21:20:27.224"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.225">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:20:27.225" status="PASS" endtime="20170817 21:20:27.225"></status>
</kw>
<status starttime="20170817 21:20:27.224" status="PASS" endtime="20170817 21:20:27.225"></status>
</kw>
<status starttime="20170817 21:20:27.222" status="PASS" endtime="20170817 21:20:27.225"></status>
</kw>
<status starttime="20170817 21:20:27.222" status="PASS" endtime="20170817 21:20:27.225"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.289">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:27.289">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:27.226" status="PASS" endtime="20170817 21:20:27.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.291">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:27.291" status="PASS" endtime="20170817 21:20:27.291"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.292">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:27.292" status="PASS" endtime="20170817 21:20:27.292"></status>
</kw>
<status starttime="20170817 21:20:27.291" status="PASS" endtime="20170817 21:20:27.292"></status>
</kw>
<status starttime="20170817 21:20:27.290" status="PASS" endtime="20170817 21:20:27.292"></status>
</kw>
<status starttime="20170817 21:20:27.290" status="PASS" endtime="20170817 21:20:27.293"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:27.293">Delete All Sessions</msg>
<status starttime="20170817 21:20:27.293" status="PASS" endtime="20170817 21:20:27.293"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:27.293">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:26.994" status="PASS" endtime="20170817 21:20:27.293"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.294">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:27.293" status="PASS" endtime="20170817 21:20:27.294"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.294">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:27.294">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:27.295">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:27.294" status="PASS" endtime="20170817 21:20:27.295"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:27.295">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:20:26.993" status="PASS" endtime="20170817 21:20:27.295"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:27.295">${power_state} = On</msg>
<status starttime="20170817 21:20:26.993" status="PASS" endtime="20170817 21:20:27.295"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:20:27.295" status="PASS" endtime="20170817 21:20:27.296"></status>
</kw>
<status starttime="20170817 21:20:26.992" status="PASS" endtime="20170817 21:20:27.296"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.300">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:20:27.299" status="PASS" endtime="20170817 21:20:27.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.301">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:20:27.300" status="PASS" endtime="20170817 21:20:27.301"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.301">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:20:27.301" status="PASS" endtime="20170817 21:20:27.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.302">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:20:27.302" status="PASS" endtime="20170817 21:20:27.302"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.515">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:20:27.303" status="PASS" endtime="20170817 21:20:27.515"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:27.515">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:20:27.515">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:27.302" status="PASS" endtime="20170817 21:20:27.515"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.516">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:27.516" status="PASS" endtime="20170817 21:20:27.516"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.517">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:27.516" status="PASS" endtime="20170817 21:20:27.517"></status>
</kw>
<status starttime="20170817 21:20:27.299" status="PASS" endtime="20170817 21:20:27.517"></status>
</kw>
<status starttime="20170817 21:20:27.298" status="PASS" endtime="20170817 21:20:27.517"></status>
</kw>
<status starttime="20170817 21:20:27.297" status="PASS" endtime="20170817 21:20:27.517"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.518">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:20:27.517" status="PASS" endtime="20170817 21:20:27.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.520">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:20:27.519" status="PASS" endtime="20170817 21:20:27.520"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.521">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:20:27.520" status="PASS" endtime="20170817 21:20:27.521"></status>
</kw>
<status starttime="20170817 21:20:27.520" status="PASS" endtime="20170817 21:20:27.521"></status>
</kw>
<status starttime="20170817 21:20:27.518" status="PASS" endtime="20170817 21:20:27.521"></status>
</kw>
<status starttime="20170817 21:20:27.518" status="PASS" endtime="20170817 21:20:27.521"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.698">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:27.698">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:27.521" status="PASS" endtime="20170817 21:20:27.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.700">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:27.699" status="PASS" endtime="20170817 21:20:27.700"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.701">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:27.701" status="PASS" endtime="20170817 21:20:27.701"></status>
</kw>
<status starttime="20170817 21:20:27.700" status="PASS" endtime="20170817 21:20:27.701"></status>
</kw>
<status starttime="20170817 21:20:27.699" status="PASS" endtime="20170817 21:20:27.701"></status>
</kw>
<status starttime="20170817 21:20:27.698" status="PASS" endtime="20170817 21:20:27.701"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:27.702">Delete All Sessions</msg>
<status starttime="20170817 21:20:27.702" status="PASS" endtime="20170817 21:20:27.702"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:27.702">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:27.297" status="PASS" endtime="20170817 21:20:27.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.703">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:27.702" status="PASS" endtime="20170817 21:20:27.703"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.703">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:27.703">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:27.703">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:27.703" status="PASS" endtime="20170817 21:20:27.704"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:27.704">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 21:20:27.296" status="PASS" endtime="20170817 21:20:27.704"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:27.704">${host_state} = Running</msg>
<status starttime="20170817 21:20:27.296" status="PASS" endtime="20170817 21:20:27.704"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:20:27.704" status="PASS" endtime="20170817 21:20:27.705"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.709">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:20:27.709" status="PASS" endtime="20170817 21:20:27.709"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.710">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:20:27.710" status="PASS" endtime="20170817 21:20:27.710"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.711">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:20:27.710" status="PASS" endtime="20170817 21:20:27.711"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.711">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:20:27.711" status="PASS" endtime="20170817 21:20:27.711"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.945">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:20:27.712" status="PASS" endtime="20170817 21:20:27.945"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:27.945">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:20:27.945">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:27.712" status="PASS" endtime="20170817 21:20:27.945"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.946">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:27.946" status="PASS" endtime="20170817 21:20:27.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.947">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:27.946" status="PASS" endtime="20170817 21:20:27.947"></status>
</kw>
<status starttime="20170817 21:20:27.708" status="PASS" endtime="20170817 21:20:27.947"></status>
</kw>
<status starttime="20170817 21:20:27.708" status="PASS" endtime="20170817 21:20:27.947"></status>
</kw>
<status starttime="20170817 21:20:27.707" status="PASS" endtime="20170817 21:20:27.947"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.948">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 21:20:27.947" status="PASS" endtime="20170817 21:20:27.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:27.950">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:20:27.949" status="PASS" endtime="20170817 21:20:27.950"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:27.951">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:20:27.951" status="PASS" endtime="20170817 21:20:27.951"></status>
</kw>
<status starttime="20170817 21:20:27.950" status="PASS" endtime="20170817 21:20:27.951"></status>
</kw>
<status starttime="20170817 21:20:27.949" status="PASS" endtime="20170817 21:20:27.951"></status>
</kw>
<status starttime="20170817 21:20:27.948" status="PASS" endtime="20170817 21:20:27.951"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:28.029">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:28.029">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:27.951" status="PASS" endtime="20170817 21:20:28.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:28.031">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:28.030" status="PASS" endtime="20170817 21:20:28.031"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:28.031">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:28.031" status="PASS" endtime="20170817 21:20:28.032"></status>
</kw>
<status starttime="20170817 21:20:28.031" status="PASS" endtime="20170817 21:20:28.032"></status>
</kw>
<status starttime="20170817 21:20:28.030" status="PASS" endtime="20170817 21:20:28.032"></status>
</kw>
<status starttime="20170817 21:20:28.029" status="PASS" endtime="20170817 21:20:28.032"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:28.032">Delete All Sessions</msg>
<status starttime="20170817 21:20:28.032" status="PASS" endtime="20170817 21:20:28.032"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:28.033">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:27.707" status="PASS" endtime="20170817 21:20:28.033"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:28.033">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:28.033" status="PASS" endtime="20170817 21:20:28.033"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:28.034">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:28.034">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:28.034">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:28.033" status="PASS" endtime="20170817 21:20:28.034"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:28.034">${state} = Off</msg>
<status starttime="20170817 21:20:27.706" status="PASS" endtime="20170817 21:20:28.034"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:28.034">${boot_progress} = Off</msg>
<status starttime="20170817 21:20:27.706" status="PASS" endtime="20170817 21:20:28.035"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:20:28.035">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 21:20:28.035" status="FAIL" endtime="20170817 21:20:28.035"></status>
</kw>
<status starttime="20170817 21:20:27.705" status="FAIL" endtime="20170817 21:20:28.035"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:28.035">${status} = False</msg>
<status starttime="20170817 21:20:27.705" status="PASS" endtime="20170817 21:20:28.035"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 21:20:28.036" status="PASS" endtime="20170817 21:20:28.036"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:28.040">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:20:28.039" status="PASS" endtime="20170817 21:20:28.040"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:28.041">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:20:28.041" status="PASS" endtime="20170817 21:20:28.041"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:28.042">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:20:28.041" status="PASS" endtime="20170817 21:20:28.042"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:28.042">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:20:28.042" status="PASS" endtime="20170817 21:20:28.042"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:28.292">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:20:28.043" status="PASS" endtime="20170817 21:20:28.292"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:28.292">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:20:28.292">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:28.043" status="PASS" endtime="20170817 21:20:28.292"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:28.293">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:28.292" status="PASS" endtime="20170817 21:20:28.293"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:28.293">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:28.293" status="PASS" endtime="20170817 21:20:28.293"></status>
</kw>
<status starttime="20170817 21:20:28.039" status="PASS" endtime="20170817 21:20:28.294"></status>
</kw>
<status starttime="20170817 21:20:28.038" status="PASS" endtime="20170817 21:20:28.294"></status>
</kw>
<status starttime="20170817 21:20:28.038" status="PASS" endtime="20170817 21:20:28.294"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:28.294">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 21:20:28.294" status="PASS" endtime="20170817 21:20:28.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:28.296">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:20:28.296" status="PASS" endtime="20170817 21:20:28.296"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:28.297">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:20:28.297" status="PASS" endtime="20170817 21:20:28.297"></status>
</kw>
<status starttime="20170817 21:20:28.297" status="PASS" endtime="20170817 21:20:28.297"></status>
</kw>
<status starttime="20170817 21:20:28.295" status="PASS" endtime="20170817 21:20:28.298"></status>
</kw>
<status starttime="20170817 21:20:28.295" status="PASS" endtime="20170817 21:20:28.298"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:28.402">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:28.402">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:28.298" status="PASS" endtime="20170817 21:20:28.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:28.404">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:28.403" status="PASS" endtime="20170817 21:20:28.404"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:28.405">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:28.404" status="PASS" endtime="20170817 21:20:28.405"></status>
</kw>
<status starttime="20170817 21:20:28.404" status="PASS" endtime="20170817 21:20:28.405"></status>
</kw>
<status starttime="20170817 21:20:28.403" status="PASS" endtime="20170817 21:20:28.405"></status>
</kw>
<status starttime="20170817 21:20:28.402" status="PASS" endtime="20170817 21:20:28.405"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:28.405">Delete All Sessions</msg>
<status starttime="20170817 21:20:28.405" status="PASS" endtime="20170817 21:20:28.405"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:28.406">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:28.037" status="PASS" endtime="20170817 21:20:28.406"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:28.406">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:28.406" status="PASS" endtime="20170817 21:20:28.406"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:28.407">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:28.407">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:28.407">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:28.407" status="PASS" endtime="20170817 21:20:28.407"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:28.407">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:20:28.037" status="PASS" endtime="20170817 21:20:28.407"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:28.408">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:20:28.036" status="PASS" endtime="20170817 21:20:28.408"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:28.408">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:20:28.408">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:20:28.408" status="FAIL" endtime="20170817 21:20:28.408"></status>
</kw>
<status starttime="20170817 21:20:27.705" status="FAIL" endtime="20170817 21:20:28.409"></status>
</kw>
<status starttime="20170817 21:20:26.992" status="FAIL" endtime="20170817 21:20:28.409"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:38.414">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:20:38.414" status="PASS" endtime="20170817 21:20:38.414"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:38.415">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:20:38.415" status="PASS" endtime="20170817 21:20:38.415"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:38.416">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:20:38.415" status="PASS" endtime="20170817 21:20:38.416"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:38.416">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:20:38.416" status="PASS" endtime="20170817 21:20:38.416"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:38.640">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:20:38.417" status="PASS" endtime="20170817 21:20:38.640"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:38.640">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:20:38.640">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:38.417" status="PASS" endtime="20170817 21:20:38.640"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:38.641">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:38.640" status="PASS" endtime="20170817 21:20:38.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:38.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:38.641" status="PASS" endtime="20170817 21:20:38.641"></status>
</kw>
<status starttime="20170817 21:20:38.413" status="PASS" endtime="20170817 21:20:38.642"></status>
</kw>
<status starttime="20170817 21:20:38.413" status="PASS" endtime="20170817 21:20:38.642"></status>
</kw>
<status starttime="20170817 21:20:38.412" status="PASS" endtime="20170817 21:20:38.642"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:38.642">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:20:38.642" status="PASS" endtime="20170817 21:20:38.642"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:38.644">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:20:38.644" status="PASS" endtime="20170817 21:20:38.644"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:38.645">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:20:38.645" status="PASS" endtime="20170817 21:20:38.645"></status>
</kw>
<status starttime="20170817 21:20:38.645" status="PASS" endtime="20170817 21:20:38.645"></status>
</kw>
<status starttime="20170817 21:20:38.643" status="PASS" endtime="20170817 21:20:38.646"></status>
</kw>
<status starttime="20170817 21:20:38.643" status="PASS" endtime="20170817 21:20:38.646"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:38.722">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:38.722">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:38.646" status="PASS" endtime="20170817 21:20:38.723"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:38.724">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:38.724" status="PASS" endtime="20170817 21:20:38.724"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:38.725">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:38.725" status="PASS" endtime="20170817 21:20:38.725"></status>
</kw>
<status starttime="20170817 21:20:38.724" status="PASS" endtime="20170817 21:20:38.725"></status>
</kw>
<status starttime="20170817 21:20:38.723" status="PASS" endtime="20170817 21:20:38.725"></status>
</kw>
<status starttime="20170817 21:20:38.723" status="PASS" endtime="20170817 21:20:38.725"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:38.726">Delete All Sessions</msg>
<status starttime="20170817 21:20:38.726" status="PASS" endtime="20170817 21:20:38.726"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:38.726">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:38.411" status="PASS" endtime="20170817 21:20:38.726"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:38.727">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:38.726" status="PASS" endtime="20170817 21:20:38.727"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:38.727">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:38.728">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:38.728">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:38.727" status="PASS" endtime="20170817 21:20:38.728"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:38.728">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:20:38.410" status="PASS" endtime="20170817 21:20:38.728"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:38.729">${power_state} = On</msg>
<status starttime="20170817 21:20:38.410" status="PASS" endtime="20170817 21:20:38.729"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:20:38.729" status="PASS" endtime="20170817 21:20:38.729"></status>
</kw>
<status starttime="20170817 21:20:38.410" status="PASS" endtime="20170817 21:20:38.729"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:38.733">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:20:38.733" status="PASS" endtime="20170817 21:20:38.733"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:38.734">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:20:38.734" status="PASS" endtime="20170817 21:20:38.734"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:38.735">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:20:38.734" status="PASS" endtime="20170817 21:20:38.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:38.735">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:20:38.735" status="PASS" endtime="20170817 21:20:38.735"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:38.961">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:20:38.736" status="PASS" endtime="20170817 21:20:38.961"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:38.961">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:20:38.961">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:38.735" status="PASS" endtime="20170817 21:20:38.961"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:38.962">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:38.962" status="PASS" endtime="20170817 21:20:38.962"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:38.963">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:38.962" status="PASS" endtime="20170817 21:20:38.963"></status>
</kw>
<status starttime="20170817 21:20:38.732" status="PASS" endtime="20170817 21:20:38.963"></status>
</kw>
<status starttime="20170817 21:20:38.732" status="PASS" endtime="20170817 21:20:38.963"></status>
</kw>
<status starttime="20170817 21:20:38.731" status="PASS" endtime="20170817 21:20:38.963"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:38.964">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:20:38.964" status="PASS" endtime="20170817 21:20:38.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:38.966">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:20:38.965" status="PASS" endtime="20170817 21:20:38.966"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:38.967">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:20:38.967" status="PASS" endtime="20170817 21:20:38.967"></status>
</kw>
<status starttime="20170817 21:20:38.966" status="PASS" endtime="20170817 21:20:38.967"></status>
</kw>
<status starttime="20170817 21:20:38.965" status="PASS" endtime="20170817 21:20:38.967"></status>
</kw>
<status starttime="20170817 21:20:38.964" status="PASS" endtime="20170817 21:20:38.967"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.056">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:39.056">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:38.968" status="PASS" endtime="20170817 21:20:39.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.058">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:39.058" status="PASS" endtime="20170817 21:20:39.058"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.059">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:39.059" status="PASS" endtime="20170817 21:20:39.059"></status>
</kw>
<status starttime="20170817 21:20:39.058" status="PASS" endtime="20170817 21:20:39.059"></status>
</kw>
<status starttime="20170817 21:20:39.057" status="PASS" endtime="20170817 21:20:39.059"></status>
</kw>
<status starttime="20170817 21:20:39.057" status="PASS" endtime="20170817 21:20:39.059"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:39.060">Delete All Sessions</msg>
<status starttime="20170817 21:20:39.060" status="PASS" endtime="20170817 21:20:39.060"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:39.060">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:38.730" status="PASS" endtime="20170817 21:20:39.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.061">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:39.060" status="PASS" endtime="20170817 21:20:39.061"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.061">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:39.061">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:39.062">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:39.061" status="PASS" endtime="20170817 21:20:39.062"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:39.062">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 21:20:38.730" status="PASS" endtime="20170817 21:20:39.062"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:39.062">${host_state} = Running</msg>
<status starttime="20170817 21:20:38.730" status="PASS" endtime="20170817 21:20:39.062"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:20:39.062" status="PASS" endtime="20170817 21:20:39.063"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.068">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:20:39.067" status="PASS" endtime="20170817 21:20:39.068"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.068">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:20:39.068" status="PASS" endtime="20170817 21:20:39.069"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.069">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:20:39.069" status="PASS" endtime="20170817 21:20:39.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.070">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:20:39.069" status="PASS" endtime="20170817 21:20:39.070"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.254">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:20:39.071" status="PASS" endtime="20170817 21:20:39.255"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:39.255">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:20:39.255">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:39.070" status="PASS" endtime="20170817 21:20:39.255"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.255">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:39.255" status="PASS" endtime="20170817 21:20:39.255"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.256">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:39.256" status="PASS" endtime="20170817 21:20:39.256"></status>
</kw>
<status starttime="20170817 21:20:39.067" status="PASS" endtime="20170817 21:20:39.256"></status>
</kw>
<status starttime="20170817 21:20:39.066" status="PASS" endtime="20170817 21:20:39.256"></status>
</kw>
<status starttime="20170817 21:20:39.065" status="PASS" endtime="20170817 21:20:39.256"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.257">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 21:20:39.257" status="PASS" endtime="20170817 21:20:39.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.259">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:20:39.258" status="PASS" endtime="20170817 21:20:39.259"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.260">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:20:39.260" status="PASS" endtime="20170817 21:20:39.260"></status>
</kw>
<status starttime="20170817 21:20:39.259" status="PASS" endtime="20170817 21:20:39.260"></status>
</kw>
<status starttime="20170817 21:20:39.258" status="PASS" endtime="20170817 21:20:39.260"></status>
</kw>
<status starttime="20170817 21:20:39.257" status="PASS" endtime="20170817 21:20:39.260"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.327">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:39.327">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:39.261" status="PASS" endtime="20170817 21:20:39.327"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.329">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:39.329" status="PASS" endtime="20170817 21:20:39.329"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.330">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:39.330" status="PASS" endtime="20170817 21:20:39.331"></status>
</kw>
<status starttime="20170817 21:20:39.330" status="PASS" endtime="20170817 21:20:39.331"></status>
</kw>
<status starttime="20170817 21:20:39.328" status="PASS" endtime="20170817 21:20:39.331"></status>
</kw>
<status starttime="20170817 21:20:39.327" status="PASS" endtime="20170817 21:20:39.331"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:39.331">Delete All Sessions</msg>
<status starttime="20170817 21:20:39.331" status="PASS" endtime="20170817 21:20:39.331"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:39.332">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:39.065" status="PASS" endtime="20170817 21:20:39.332"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.332">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:39.332" status="PASS" endtime="20170817 21:20:39.332"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.333">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:39.333">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:39.333">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:39.333" status="PASS" endtime="20170817 21:20:39.333"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:39.333">${state} = Off</msg>
<status starttime="20170817 21:20:39.064" status="PASS" endtime="20170817 21:20:39.333"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:39.334">${boot_progress} = Off</msg>
<status starttime="20170817 21:20:39.064" status="PASS" endtime="20170817 21:20:39.334"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:20:39.334">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 21:20:39.334" status="FAIL" endtime="20170817 21:20:39.334"></status>
</kw>
<status starttime="20170817 21:20:39.064" status="FAIL" endtime="20170817 21:20:39.334"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:39.335">${status} = False</msg>
<status starttime="20170817 21:20:39.063" status="PASS" endtime="20170817 21:20:39.335"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 21:20:39.335" status="PASS" endtime="20170817 21:20:39.335"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.339">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:20:39.338" status="PASS" endtime="20170817 21:20:39.339"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.340">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:20:39.339" status="PASS" endtime="20170817 21:20:39.340"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.340">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:20:39.340" status="PASS" endtime="20170817 21:20:39.340"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.341">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:20:39.340" status="PASS" endtime="20170817 21:20:39.341"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.571">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:20:39.342" status="PASS" endtime="20170817 21:20:39.571"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:39.571">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:20:39.571">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:39.341" status="PASS" endtime="20170817 21:20:39.571"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.572">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:39.571" status="PASS" endtime="20170817 21:20:39.572"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:39.572" status="PASS" endtime="20170817 21:20:39.572"></status>
</kw>
<status starttime="20170817 21:20:39.338" status="PASS" endtime="20170817 21:20:39.573"></status>
</kw>
<status starttime="20170817 21:20:39.337" status="PASS" endtime="20170817 21:20:39.573"></status>
</kw>
<status starttime="20170817 21:20:39.337" status="PASS" endtime="20170817 21:20:39.573"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.573">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 21:20:39.573" status="PASS" endtime="20170817 21:20:39.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.576">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:20:39.575" status="PASS" endtime="20170817 21:20:39.576"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.577">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:20:39.577" status="PASS" endtime="20170817 21:20:39.577"></status>
</kw>
<status starttime="20170817 21:20:39.576" status="PASS" endtime="20170817 21:20:39.577"></status>
</kw>
<status starttime="20170817 21:20:39.574" status="PASS" endtime="20170817 21:20:39.577"></status>
</kw>
<status starttime="20170817 21:20:39.574" status="PASS" endtime="20170817 21:20:39.577"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.720">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:39.720">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:39.577" status="PASS" endtime="20170817 21:20:39.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.721">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:39.721" status="PASS" endtime="20170817 21:20:39.722"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.722">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:39.722" status="PASS" endtime="20170817 21:20:39.722"></status>
</kw>
<status starttime="20170817 21:20:39.722" status="PASS" endtime="20170817 21:20:39.723"></status>
</kw>
<status starttime="20170817 21:20:39.720" status="PASS" endtime="20170817 21:20:39.723"></status>
</kw>
<status starttime="20170817 21:20:39.720" status="PASS" endtime="20170817 21:20:39.723"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:39.723">Delete All Sessions</msg>
<status starttime="20170817 21:20:39.723" status="PASS" endtime="20170817 21:20:39.723"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:39.723">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:39.336" status="PASS" endtime="20170817 21:20:39.723"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.724">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:39.724" status="PASS" endtime="20170817 21:20:39.724"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:39.725">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:39.725">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:39.725">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:39.724" status="PASS" endtime="20170817 21:20:39.725"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:39.725">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:20:39.336" status="PASS" endtime="20170817 21:20:39.725"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:39.725">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:20:39.335" status="PASS" endtime="20170817 21:20:39.725"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:39.726">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:20:39.726">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:20:39.726" status="FAIL" endtime="20170817 21:20:39.726"></status>
</kw>
<status starttime="20170817 21:20:39.063" status="FAIL" endtime="20170817 21:20:39.726"></status>
</kw>
<status starttime="20170817 21:20:38.409" status="FAIL" endtime="20170817 21:20:39.726"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:49.732">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:20:49.731" status="PASS" endtime="20170817 21:20:49.732"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:49.733">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:20:49.733" status="PASS" endtime="20170817 21:20:49.733"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:49.733">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:20:49.733" status="PASS" endtime="20170817 21:20:49.733"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:49.734">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:20:49.734" status="PASS" endtime="20170817 21:20:49.734"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:50.084">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:20:49.735" status="PASS" endtime="20170817 21:20:50.084"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:50.084">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:20:50.084">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:49.734" status="PASS" endtime="20170817 21:20:50.084"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:50.085">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:50.085" status="PASS" endtime="20170817 21:20:50.085"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:50.086">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:50.085" status="PASS" endtime="20170817 21:20:50.086"></status>
</kw>
<status starttime="20170817 21:20:49.731" status="PASS" endtime="20170817 21:20:50.086"></status>
</kw>
<status starttime="20170817 21:20:49.730" status="PASS" endtime="20170817 21:20:50.086"></status>
</kw>
<status starttime="20170817 21:20:49.730" status="PASS" endtime="20170817 21:20:50.086"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:50.087">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:20:50.086" status="PASS" endtime="20170817 21:20:50.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:50.089">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:20:50.088" status="PASS" endtime="20170817 21:20:50.089"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:50.090">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:20:50.089" status="PASS" endtime="20170817 21:20:50.090"></status>
</kw>
<status starttime="20170817 21:20:50.089" status="PASS" endtime="20170817 21:20:50.090"></status>
</kw>
<status starttime="20170817 21:20:50.087" status="PASS" endtime="20170817 21:20:50.090"></status>
</kw>
<status starttime="20170817 21:20:50.087" status="PASS" endtime="20170817 21:20:50.090"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:54.107">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:54.107">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:50.090" status="PASS" endtime="20170817 21:20:54.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:54.109">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:54.108" status="PASS" endtime="20170817 21:20:54.109"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:54.110">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:54.109" status="PASS" endtime="20170817 21:20:54.110"></status>
</kw>
<status starttime="20170817 21:20:54.109" status="PASS" endtime="20170817 21:20:54.110"></status>
</kw>
<status starttime="20170817 21:20:54.108" status="PASS" endtime="20170817 21:20:54.110"></status>
</kw>
<status starttime="20170817 21:20:54.107" status="PASS" endtime="20170817 21:20:54.110"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:54.110">Delete All Sessions</msg>
<status starttime="20170817 21:20:54.110" status="PASS" endtime="20170817 21:20:54.111"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:54.111">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:49.729" status="PASS" endtime="20170817 21:20:54.111"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:54.112">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:54.111" status="PASS" endtime="20170817 21:20:54.112"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:54.113">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:54.113">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:54.113">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:54.112" status="PASS" endtime="20170817 21:20:54.113"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:54.113">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:20:49.728" status="PASS" endtime="20170817 21:20:54.113"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:54.114">${power_state} = On</msg>
<status starttime="20170817 21:20:49.728" status="PASS" endtime="20170817 21:20:54.114"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:20:54.114" status="PASS" endtime="20170817 21:20:54.115"></status>
</kw>
<status starttime="20170817 21:20:49.728" status="PASS" endtime="20170817 21:20:54.115"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:54.121">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:20:54.121" status="PASS" endtime="20170817 21:20:54.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:54.122">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:20:54.122" status="PASS" endtime="20170817 21:20:54.122"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:54.123">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:20:54.123" status="PASS" endtime="20170817 21:20:54.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:54.124">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:20:54.123" status="PASS" endtime="20170817 21:20:54.124"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.140">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:20:54.124" status="PASS" endtime="20170817 21:20:55.140"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:55.140">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:20:55.140">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:54.124" status="PASS" endtime="20170817 21:20:55.140"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.141">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:55.140" status="PASS" endtime="20170817 21:20:55.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.141">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:55.141" status="PASS" endtime="20170817 21:20:55.141"></status>
</kw>
<status starttime="20170817 21:20:54.118" status="PASS" endtime="20170817 21:20:55.142"></status>
</kw>
<status starttime="20170817 21:20:54.117" status="PASS" endtime="20170817 21:20:55.142"></status>
</kw>
<status starttime="20170817 21:20:54.117" status="PASS" endtime="20170817 21:20:55.142"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.142">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:20:55.142" status="PASS" endtime="20170817 21:20:55.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.144">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:20:55.144" status="PASS" endtime="20170817 21:20:55.145"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.145">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:20:55.145" status="PASS" endtime="20170817 21:20:55.145"></status>
</kw>
<status starttime="20170817 21:20:55.145" status="PASS" endtime="20170817 21:20:55.146"></status>
</kw>
<status starttime="20170817 21:20:55.143" status="PASS" endtime="20170817 21:20:55.146"></status>
</kw>
<status starttime="20170817 21:20:55.143" status="PASS" endtime="20170817 21:20:55.146"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.235">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:55.235">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:55.146" status="PASS" endtime="20170817 21:20:55.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.237">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:55.236" status="PASS" endtime="20170817 21:20:55.237"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.238">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:55.237" status="PASS" endtime="20170817 21:20:55.262"></status>
</kw>
<status starttime="20170817 21:20:55.237" status="PASS" endtime="20170817 21:20:55.262"></status>
</kw>
<status starttime="20170817 21:20:55.236" status="PASS" endtime="20170817 21:20:55.263"></status>
</kw>
<status starttime="20170817 21:20:55.235" status="PASS" endtime="20170817 21:20:55.263"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:55.263">Delete All Sessions</msg>
<status starttime="20170817 21:20:55.263" status="PASS" endtime="20170817 21:20:55.263"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:55.263">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:54.116" status="PASS" endtime="20170817 21:20:55.263"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.264">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:55.264" status="PASS" endtime="20170817 21:20:55.264"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.265">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:55.265">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:55.265">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:55.264" status="PASS" endtime="20170817 21:20:55.265"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:55.265">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 21:20:54.115" status="PASS" endtime="20170817 21:20:55.265"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:55.265">${host_state} = Running</msg>
<status starttime="20170817 21:20:54.115" status="PASS" endtime="20170817 21:20:55.265"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:20:55.266" status="PASS" endtime="20170817 21:20:55.266"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.271">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:20:55.270" status="PASS" endtime="20170817 21:20:55.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.272">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:20:55.271" status="PASS" endtime="20170817 21:20:55.272"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.272">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:20:55.272" status="PASS" endtime="20170817 21:20:55.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.273">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:20:55.273" status="PASS" endtime="20170817 21:20:55.273"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.461">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:20:55.274" status="PASS" endtime="20170817 21:20:55.461"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:55.461">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:20:55.461">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:55.274" status="PASS" endtime="20170817 21:20:55.461"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.462">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:55.461" status="PASS" endtime="20170817 21:20:55.462"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.463">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:55.462" status="PASS" endtime="20170817 21:20:55.463"></status>
</kw>
<status starttime="20170817 21:20:55.270" status="PASS" endtime="20170817 21:20:55.463"></status>
</kw>
<status starttime="20170817 21:20:55.269" status="PASS" endtime="20170817 21:20:55.463"></status>
</kw>
<status starttime="20170817 21:20:55.269" status="PASS" endtime="20170817 21:20:55.463"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.464">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 21:20:55.463" status="PASS" endtime="20170817 21:20:55.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.467">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:20:55.466" status="PASS" endtime="20170817 21:20:55.467"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.468">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:20:55.468" status="PASS" endtime="20170817 21:20:55.468"></status>
</kw>
<status starttime="20170817 21:20:55.467" status="PASS" endtime="20170817 21:20:55.469"></status>
</kw>
<status starttime="20170817 21:20:55.465" status="PASS" endtime="20170817 21:20:55.469"></status>
</kw>
<status starttime="20170817 21:20:55.464" status="PASS" endtime="20170817 21:20:55.469"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.562">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:55.562">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:55.469" status="PASS" endtime="20170817 21:20:55.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.564">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:55.564" status="PASS" endtime="20170817 21:20:55.564"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.565">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:55.565" status="PASS" endtime="20170817 21:20:55.565"></status>
</kw>
<status starttime="20170817 21:20:55.564" status="PASS" endtime="20170817 21:20:55.565"></status>
</kw>
<status starttime="20170817 21:20:55.563" status="PASS" endtime="20170817 21:20:55.566"></status>
</kw>
<status starttime="20170817 21:20:55.563" status="PASS" endtime="20170817 21:20:55.566"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:55.566">Delete All Sessions</msg>
<status starttime="20170817 21:20:55.566" status="PASS" endtime="20170817 21:20:55.566"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:55.566">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:55.268" status="PASS" endtime="20170817 21:20:55.566"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.567">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:55.567" status="PASS" endtime="20170817 21:20:55.567"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.567">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:55.568">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:55.568">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:55.567" status="PASS" endtime="20170817 21:20:55.568"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:55.568">${state} = Off</msg>
<status starttime="20170817 21:20:55.268" status="PASS" endtime="20170817 21:20:55.568"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:55.568">${boot_progress} = Off</msg>
<status starttime="20170817 21:20:55.267" status="PASS" endtime="20170817 21:20:55.568"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:20:55.569">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 21:20:55.568" status="FAIL" endtime="20170817 21:20:55.569"></status>
</kw>
<status starttime="20170817 21:20:55.267" status="FAIL" endtime="20170817 21:20:55.569"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:55.569">${status} = False</msg>
<status starttime="20170817 21:20:55.267" status="PASS" endtime="20170817 21:20:55.569"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 21:20:55.570" status="PASS" endtime="20170817 21:20:55.570"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.576">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:20:55.575" status="PASS" endtime="20170817 21:20:55.576"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.577">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:20:55.577" status="PASS" endtime="20170817 21:20:55.577"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.578">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:20:55.578" status="PASS" endtime="20170817 21:20:55.578"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.579">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:20:55.579" status="PASS" endtime="20170817 21:20:55.579"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.802">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:20:55.580" status="PASS" endtime="20170817 21:20:55.802"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:55.802">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:20:55.802">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:55.580" status="PASS" endtime="20170817 21:20:55.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.803">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:55.802" status="PASS" endtime="20170817 21:20:55.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.803">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:55.803" status="PASS" endtime="20170817 21:20:55.803"></status>
</kw>
<status starttime="20170817 21:20:55.575" status="PASS" endtime="20170817 21:20:55.804"></status>
</kw>
<status starttime="20170817 21:20:55.574" status="PASS" endtime="20170817 21:20:55.804"></status>
</kw>
<status starttime="20170817 21:20:55.573" status="PASS" endtime="20170817 21:20:55.804"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.804">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 21:20:55.804" status="PASS" endtime="20170817 21:20:55.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.807">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:20:55.806" status="PASS" endtime="20170817 21:20:55.807"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.807">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:20:55.807" status="PASS" endtime="20170817 21:20:55.808"></status>
</kw>
<status starttime="20170817 21:20:55.807" status="PASS" endtime="20170817 21:20:55.808"></status>
</kw>
<status starttime="20170817 21:20:55.805" status="PASS" endtime="20170817 21:20:55.808"></status>
</kw>
<status starttime="20170817 21:20:55.805" status="PASS" endtime="20170817 21:20:55.808"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.896">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:20:55.897">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:55.808" status="PASS" endtime="20170817 21:20:55.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.899">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:55.898" status="PASS" endtime="20170817 21:20:55.899"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.900">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:20:55.899" status="PASS" endtime="20170817 21:20:55.900"></status>
</kw>
<status starttime="20170817 21:20:55.899" status="PASS" endtime="20170817 21:20:55.900"></status>
</kw>
<status starttime="20170817 21:20:55.898" status="PASS" endtime="20170817 21:20:55.900"></status>
</kw>
<status starttime="20170817 21:20:55.897" status="PASS" endtime="20170817 21:20:55.900"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:20:55.900">Delete All Sessions</msg>
<status starttime="20170817 21:20:55.900" status="PASS" endtime="20170817 21:20:55.900"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:55.901">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:20:55.572" status="PASS" endtime="20170817 21:20:55.901"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.901">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:20:55.901" status="PASS" endtime="20170817 21:20:55.901"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:20:55.902">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:20:55.902">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:20:55.902">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:20:55.902" status="PASS" endtime="20170817 21:20:55.902"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:55.903">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:20:55.571" status="PASS" endtime="20170817 21:20:55.903"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:20:55.903">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:20:55.570" status="PASS" endtime="20170817 21:20:55.903"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:20:55.903">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:20:55.904">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:20:55.903" status="FAIL" endtime="20170817 21:20:55.904"></status>
</kw>
<status starttime="20170817 21:20:55.266" status="FAIL" endtime="20170817 21:20:55.904"></status>
</kw>
<status starttime="20170817 21:20:49.727" status="FAIL" endtime="20170817 21:20:55.904"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:05.910">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:21:05.910" status="PASS" endtime="20170817 21:21:05.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:05.911">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:21:05.911" status="PASS" endtime="20170817 21:21:05.911"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:05.912">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:21:05.911" status="PASS" endtime="20170817 21:21:05.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:05.912">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:21:05.912" status="PASS" endtime="20170817 21:21:05.912"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:08.250">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:21:05.913" status="PASS" endtime="20170817 21:21:08.251"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:08.251">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:21:08.251">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:05.913" status="PASS" endtime="20170817 21:21:08.251"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:08.251">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:08.251" status="PASS" endtime="20170817 21:21:08.251"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:08.252">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:08.252" status="PASS" endtime="20170817 21:21:08.252"></status>
</kw>
<status starttime="20170817 21:21:05.909" status="PASS" endtime="20170817 21:21:08.252"></status>
</kw>
<status starttime="20170817 21:21:05.909" status="PASS" endtime="20170817 21:21:08.252"></status>
</kw>
<status starttime="20170817 21:21:05.908" status="PASS" endtime="20170817 21:21:08.253"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:08.253">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:21:08.253" status="PASS" endtime="20170817 21:21:08.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:08.255">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:21:08.254" status="PASS" endtime="20170817 21:21:08.255"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:08.256">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:21:08.256" status="PASS" endtime="20170817 21:21:08.256"></status>
</kw>
<status starttime="20170817 21:21:08.255" status="PASS" endtime="20170817 21:21:08.256"></status>
</kw>
<status starttime="20170817 21:21:08.254" status="PASS" endtime="20170817 21:21:08.256"></status>
</kw>
<status starttime="20170817 21:21:08.253" status="PASS" endtime="20170817 21:21:08.257"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:14.310">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:21:14.310">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:08.257" status="PASS" endtime="20170817 21:21:14.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:14.312">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:14.311" status="PASS" endtime="20170817 21:21:14.312"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:14.313">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:14.313" status="PASS" endtime="20170817 21:21:14.313"></status>
</kw>
<status starttime="20170817 21:21:14.312" status="PASS" endtime="20170817 21:21:14.313"></status>
</kw>
<status starttime="20170817 21:21:14.311" status="PASS" endtime="20170817 21:21:14.313"></status>
</kw>
<status starttime="20170817 21:21:14.310" status="PASS" endtime="20170817 21:21:14.313"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:21:14.314">Delete All Sessions</msg>
<status starttime="20170817 21:21:14.313" status="PASS" endtime="20170817 21:21:14.314"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:14.314">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:05.908" status="PASS" endtime="20170817 21:21:14.314"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:14.314">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:14.314" status="PASS" endtime="20170817 21:21:14.315"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:14.315">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:21:14.315">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:21:14.315">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:21:14.315" status="PASS" endtime="20170817 21:21:14.315"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:14.316">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170817 21:21:05.907" status="PASS" endtime="20170817 21:21:14.316"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:14.316">${power_state} = Off</msg>
<status starttime="20170817 21:21:05.907" status="PASS" endtime="20170817 21:21:14.316"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:21:14.317">On != Off</msg>
<status starttime="20170817 21:21:14.316" status="FAIL" endtime="20170817 21:21:14.317"></status>
</kw>
<status starttime="20170817 21:21:05.906" status="FAIL" endtime="20170817 21:21:14.317"></status>
</kw>
<status starttime="20170817 21:21:05.905" status="FAIL" endtime="20170817 21:21:14.317"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:24.323">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:21:24.323" status="PASS" endtime="20170817 21:21:24.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:24.324">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:21:24.323" status="PASS" endtime="20170817 21:21:24.324"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:24.325">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:21:24.324" status="PASS" endtime="20170817 21:21:24.325"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:24.325">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:21:24.325" status="PASS" endtime="20170817 21:21:24.325"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:24.722">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:21:24.326" status="PASS" endtime="20170817 21:21:24.722"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:24.722">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:21:24.722">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:24.325" status="PASS" endtime="20170817 21:21:24.722"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:24.723">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:24.723" status="PASS" endtime="20170817 21:21:24.723"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:24.724">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:24.723" status="PASS" endtime="20170817 21:21:24.724"></status>
</kw>
<status starttime="20170817 21:21:24.322" status="PASS" endtime="20170817 21:21:24.724"></status>
</kw>
<status starttime="20170817 21:21:24.321" status="PASS" endtime="20170817 21:21:24.724"></status>
</kw>
<status starttime="20170817 21:21:24.320" status="PASS" endtime="20170817 21:21:24.724"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:24.725">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:21:24.724" status="PASS" endtime="20170817 21:21:24.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:24.727">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:21:24.726" status="PASS" endtime="20170817 21:21:24.727"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:24.728">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:21:24.727" status="PASS" endtime="20170817 21:21:24.728"></status>
</kw>
<status starttime="20170817 21:21:24.727" status="PASS" endtime="20170817 21:21:24.728"></status>
</kw>
<status starttime="20170817 21:21:24.725" status="PASS" endtime="20170817 21:21:24.728"></status>
</kw>
<status starttime="20170817 21:21:24.725" status="PASS" endtime="20170817 21:21:24.728"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:25.329">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:21:25.330">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:24.728" status="PASS" endtime="20170817 21:21:25.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:25.331">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:25.331" status="PASS" endtime="20170817 21:21:25.331"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:25.333">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:25.332" status="PASS" endtime="20170817 21:21:25.333"></status>
</kw>
<status starttime="20170817 21:21:25.332" status="PASS" endtime="20170817 21:21:25.333"></status>
</kw>
<status starttime="20170817 21:21:25.330" status="PASS" endtime="20170817 21:21:25.333"></status>
</kw>
<status starttime="20170817 21:21:25.330" status="PASS" endtime="20170817 21:21:25.333"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:21:25.334">Delete All Sessions</msg>
<status starttime="20170817 21:21:25.333" status="PASS" endtime="20170817 21:21:25.334"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:25.334">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:24.320" status="PASS" endtime="20170817 21:21:25.334"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:25.334">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:25.334" status="PASS" endtime="20170817 21:21:25.335"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:25.335">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:21:25.335">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:21:25.335">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:21:25.335" status="PASS" endtime="20170817 21:21:25.335"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:25.335">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:21:24.319" status="PASS" endtime="20170817 21:21:25.336"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:25.336">${power_state} = On</msg>
<status starttime="20170817 21:21:24.319" status="PASS" endtime="20170817 21:21:25.336"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:21:25.336" status="PASS" endtime="20170817 21:21:25.336"></status>
</kw>
<status starttime="20170817 21:21:24.318" status="PASS" endtime="20170817 21:21:25.336"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:25.340">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:21:25.340" status="PASS" endtime="20170817 21:21:25.340"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:25.341">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:21:25.341" status="PASS" endtime="20170817 21:21:25.341"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:25.341">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:21:25.341" status="PASS" endtime="20170817 21:21:25.342"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:25.342">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:21:25.342" status="PASS" endtime="20170817 21:21:25.342"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:25.765">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:21:25.343" status="PASS" endtime="20170817 21:21:25.765"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:25.766">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:21:25.766">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:25.342" status="PASS" endtime="20170817 21:21:25.766"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:25.766">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:25.766" status="PASS" endtime="20170817 21:21:25.766"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:25.767">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:25.767" status="PASS" endtime="20170817 21:21:25.767"></status>
</kw>
<status starttime="20170817 21:21:25.339" status="PASS" endtime="20170817 21:21:25.767"></status>
</kw>
<status starttime="20170817 21:21:25.339" status="PASS" endtime="20170817 21:21:25.767"></status>
</kw>
<status starttime="20170817 21:21:25.338" status="PASS" endtime="20170817 21:21:25.767"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:25.768">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:21:25.768" status="PASS" endtime="20170817 21:21:25.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:25.770">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:21:25.769" status="PASS" endtime="20170817 21:21:25.770"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:25.771">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:21:25.771" status="PASS" endtime="20170817 21:21:25.771"></status>
</kw>
<status starttime="20170817 21:21:25.771" status="PASS" endtime="20170817 21:21:25.772"></status>
</kw>
<status starttime="20170817 21:21:25.769" status="PASS" endtime="20170817 21:21:25.772"></status>
</kw>
<status starttime="20170817 21:21:25.768" status="PASS" endtime="20170817 21:21:25.772"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.132">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:21:26.132">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:25.772" status="PASS" endtime="20170817 21:21:26.132"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.134">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:26.133" status="PASS" endtime="20170817 21:21:26.134"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.135">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:26.135" status="PASS" endtime="20170817 21:21:26.135"></status>
</kw>
<status starttime="20170817 21:21:26.134" status="PASS" endtime="20170817 21:21:26.135"></status>
</kw>
<status starttime="20170817 21:21:26.133" status="PASS" endtime="20170817 21:21:26.135"></status>
</kw>
<status starttime="20170817 21:21:26.133" status="PASS" endtime="20170817 21:21:26.135"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:21:26.136">Delete All Sessions</msg>
<status starttime="20170817 21:21:26.135" status="PASS" endtime="20170817 21:21:26.136"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:26.136">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:25.338" status="PASS" endtime="20170817 21:21:26.136"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.137">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:26.136" status="PASS" endtime="20170817 21:21:26.137"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.137">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:21:26.137">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:21:26.137">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:21:26.137" status="PASS" endtime="20170817 21:21:26.137"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:26.138">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 21:21:25.337" status="PASS" endtime="20170817 21:21:26.138"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:26.138">${host_state} = Running</msg>
<status starttime="20170817 21:21:25.337" status="PASS" endtime="20170817 21:21:26.138"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:21:26.138" status="PASS" endtime="20170817 21:21:26.138"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.143">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:21:26.143" status="PASS" endtime="20170817 21:21:26.144"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.144">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:21:26.144" status="PASS" endtime="20170817 21:21:26.144"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.145">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:21:26.145" status="PASS" endtime="20170817 21:21:26.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.146">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:21:26.145" status="PASS" endtime="20170817 21:21:26.146"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.423">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:21:26.146" status="PASS" endtime="20170817 21:21:26.423"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:26.423">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:21:26.423">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:26.146" status="PASS" endtime="20170817 21:21:26.423"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.424">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:26.423" status="PASS" endtime="20170817 21:21:26.424"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.424">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:26.424" status="PASS" endtime="20170817 21:21:26.424"></status>
</kw>
<status starttime="20170817 21:21:26.142" status="PASS" endtime="20170817 21:21:26.424"></status>
</kw>
<status starttime="20170817 21:21:26.142" status="PASS" endtime="20170817 21:21:26.425"></status>
</kw>
<status starttime="20170817 21:21:26.141" status="PASS" endtime="20170817 21:21:26.425"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.425">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 21:21:26.425" status="PASS" endtime="20170817 21:21:26.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.427">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:21:26.427" status="PASS" endtime="20170817 21:21:26.427"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.428">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:21:26.428" status="PASS" endtime="20170817 21:21:26.428"></status>
</kw>
<status starttime="20170817 21:21:26.427" status="PASS" endtime="20170817 21:21:26.428"></status>
</kw>
<status starttime="20170817 21:21:26.426" status="PASS" endtime="20170817 21:21:26.428"></status>
</kw>
<status starttime="20170817 21:21:26.425" status="PASS" endtime="20170817 21:21:26.429"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.520">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:21:26.520">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:26.429" status="PASS" endtime="20170817 21:21:26.520"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.522">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:26.521" status="PASS" endtime="20170817 21:21:26.522"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.523">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:26.523" status="PASS" endtime="20170817 21:21:26.523"></status>
</kw>
<status starttime="20170817 21:21:26.522" status="PASS" endtime="20170817 21:21:26.523"></status>
</kw>
<status starttime="20170817 21:21:26.521" status="PASS" endtime="20170817 21:21:26.523"></status>
</kw>
<status starttime="20170817 21:21:26.520" status="PASS" endtime="20170817 21:21:26.523"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:21:26.523">Delete All Sessions</msg>
<status starttime="20170817 21:21:26.523" status="PASS" endtime="20170817 21:21:26.524"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:26.524">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:26.140" status="PASS" endtime="20170817 21:21:26.524"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.524">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:26.524" status="PASS" endtime="20170817 21:21:26.524"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.525">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:21:26.525">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:21:26.525">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:21:26.525" status="PASS" endtime="20170817 21:21:26.525"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:26.525">${state} = Off</msg>
<status starttime="20170817 21:21:26.140" status="PASS" endtime="20170817 21:21:26.526"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:26.526">${boot_progress} = Off</msg>
<status starttime="20170817 21:21:26.140" status="PASS" endtime="20170817 21:21:26.526"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:21:26.527">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 21:21:26.526" status="FAIL" endtime="20170817 21:21:26.527"></status>
</kw>
<status starttime="20170817 21:21:26.139" status="FAIL" endtime="20170817 21:21:26.527"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:26.527">${status} = False</msg>
<status starttime="20170817 21:21:26.139" status="PASS" endtime="20170817 21:21:26.527"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 21:21:26.527" status="PASS" endtime="20170817 21:21:26.528"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.532">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:21:26.531" status="PASS" endtime="20170817 21:21:26.532"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.533">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:21:26.532" status="PASS" endtime="20170817 21:21:26.533"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.533">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:21:26.533" status="PASS" endtime="20170817 21:21:26.533"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.534">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:21:26.533" status="PASS" endtime="20170817 21:21:26.534"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.784">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:21:26.534" status="PASS" endtime="20170817 21:21:26.784"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:26.784">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:21:26.784">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:26.534" status="PASS" endtime="20170817 21:21:26.784"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.785">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:26.785" status="PASS" endtime="20170817 21:21:26.785"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.786">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:26.785" status="PASS" endtime="20170817 21:21:26.786"></status>
</kw>
<status starttime="20170817 21:21:26.531" status="PASS" endtime="20170817 21:21:26.786"></status>
</kw>
<status starttime="20170817 21:21:26.530" status="PASS" endtime="20170817 21:21:26.786"></status>
</kw>
<status starttime="20170817 21:21:26.530" status="PASS" endtime="20170817 21:21:26.786"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.787">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 21:21:26.786" status="PASS" endtime="20170817 21:21:26.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.789">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:21:26.788" status="PASS" endtime="20170817 21:21:26.789"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.790">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:21:26.789" status="PASS" endtime="20170817 21:21:26.790"></status>
</kw>
<status starttime="20170817 21:21:26.789" status="PASS" endtime="20170817 21:21:26.790"></status>
</kw>
<status starttime="20170817 21:21:26.787" status="PASS" endtime="20170817 21:21:26.790"></status>
</kw>
<status starttime="20170817 21:21:26.787" status="PASS" endtime="20170817 21:21:26.790"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.879">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:21:26.879">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:26.790" status="PASS" endtime="20170817 21:21:26.879"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.881">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:26.881" status="PASS" endtime="20170817 21:21:26.881"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.882">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:26.882" status="PASS" endtime="20170817 21:21:26.882"></status>
</kw>
<status starttime="20170817 21:21:26.881" status="PASS" endtime="20170817 21:21:26.882"></status>
</kw>
<status starttime="20170817 21:21:26.880" status="PASS" endtime="20170817 21:21:26.882"></status>
</kw>
<status starttime="20170817 21:21:26.880" status="PASS" endtime="20170817 21:21:26.882"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:21:26.883">Delete All Sessions</msg>
<status starttime="20170817 21:21:26.883" status="PASS" endtime="20170817 21:21:26.883"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:26.883">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:26.529" status="PASS" endtime="20170817 21:21:26.883"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.884">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:26.883" status="PASS" endtime="20170817 21:21:26.884"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:26.884">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:21:26.884">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:21:26.884">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:21:26.884" status="PASS" endtime="20170817 21:21:26.885"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:26.885">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:21:26.528" status="PASS" endtime="20170817 21:21:26.885"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:26.885">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:21:26.528" status="PASS" endtime="20170817 21:21:26.885"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:26.886">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:21:26.886">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:21:26.885" status="FAIL" endtime="20170817 21:21:26.886"></status>
</kw>
<status starttime="20170817 21:21:26.139" status="FAIL" endtime="20170817 21:21:26.886"></status>
</kw>
<status starttime="20170817 21:21:24.318" status="FAIL" endtime="20170817 21:21:26.886"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:36.891">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:21:36.891" status="PASS" endtime="20170817 21:21:36.892"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:36.892">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:21:36.892" status="PASS" endtime="20170817 21:21:36.892"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:36.893">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:21:36.892" status="PASS" endtime="20170817 21:21:36.893"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:36.893">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:21:36.893" status="PASS" endtime="20170817 21:21:36.893"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.113">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:21:36.894" status="PASS" endtime="20170817 21:21:37.113"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:37.113">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:21:37.113">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:36.894" status="PASS" endtime="20170817 21:21:37.113"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.114">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:37.114" status="PASS" endtime="20170817 21:21:37.114"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.115">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:37.114" status="PASS" endtime="20170817 21:21:37.115"></status>
</kw>
<status starttime="20170817 21:21:36.890" status="PASS" endtime="20170817 21:21:37.115"></status>
</kw>
<status starttime="20170817 21:21:36.890" status="PASS" endtime="20170817 21:21:37.115"></status>
</kw>
<status starttime="20170817 21:21:36.889" status="PASS" endtime="20170817 21:21:37.115"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.115">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:21:37.115" status="PASS" endtime="20170817 21:21:37.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.118">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:21:37.117" status="PASS" endtime="20170817 21:21:37.118"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.119">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:21:37.118" status="PASS" endtime="20170817 21:21:37.119"></status>
</kw>
<status starttime="20170817 21:21:37.118" status="PASS" endtime="20170817 21:21:37.119"></status>
</kw>
<status starttime="20170817 21:21:37.116" status="PASS" endtime="20170817 21:21:37.119"></status>
</kw>
<status starttime="20170817 21:21:37.116" status="PASS" endtime="20170817 21:21:37.119"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.195">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:21:37.195">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:37.119" status="PASS" endtime="20170817 21:21:37.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.197">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:37.197" status="PASS" endtime="20170817 21:21:37.197"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.198">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:37.198" status="PASS" endtime="20170817 21:21:37.198"></status>
</kw>
<status starttime="20170817 21:21:37.197" status="PASS" endtime="20170817 21:21:37.198"></status>
</kw>
<status starttime="20170817 21:21:37.196" status="PASS" endtime="20170817 21:21:37.198"></status>
</kw>
<status starttime="20170817 21:21:37.196" status="PASS" endtime="20170817 21:21:37.198"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:21:37.199">Delete All Sessions</msg>
<status starttime="20170817 21:21:37.199" status="PASS" endtime="20170817 21:21:37.199"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:37.199">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:36.889" status="PASS" endtime="20170817 21:21:37.199"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.200">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:37.199" status="PASS" endtime="20170817 21:21:37.200"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.200">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:21:37.200">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:21:37.200">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:21:37.200" status="PASS" endtime="20170817 21:21:37.200"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:37.201">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:21:36.888" status="PASS" endtime="20170817 21:21:37.201"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:37.201">${power_state} = On</msg>
<status starttime="20170817 21:21:36.888" status="PASS" endtime="20170817 21:21:37.201"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:21:37.201" status="PASS" endtime="20170817 21:21:37.202"></status>
</kw>
<status starttime="20170817 21:21:36.887" status="PASS" endtime="20170817 21:21:37.202"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.208">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:21:37.205" status="PASS" endtime="20170817 21:21:37.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.209">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:21:37.208" status="PASS" endtime="20170817 21:21:37.209"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.210">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:21:37.209" status="PASS" endtime="20170817 21:21:37.210"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.210">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:21:37.210" status="PASS" endtime="20170817 21:21:37.210"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.465">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:21:37.211" status="PASS" endtime="20170817 21:21:37.465"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:37.466">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:21:37.466">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:37.211" status="PASS" endtime="20170817 21:21:37.466"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.466">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:37.466" status="PASS" endtime="20170817 21:21:37.466"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.467">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:37.467" status="PASS" endtime="20170817 21:21:37.467"></status>
</kw>
<status starttime="20170817 21:21:37.204" status="PASS" endtime="20170817 21:21:37.467"></status>
</kw>
<status starttime="20170817 21:21:37.204" status="PASS" endtime="20170817 21:21:37.467"></status>
</kw>
<status starttime="20170817 21:21:37.203" status="PASS" endtime="20170817 21:21:37.467"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.468">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:21:37.468" status="PASS" endtime="20170817 21:21:37.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.470">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:21:37.469" status="PASS" endtime="20170817 21:21:37.470"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.471">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:21:37.471" status="PASS" endtime="20170817 21:21:37.471"></status>
</kw>
<status starttime="20170817 21:21:37.470" status="PASS" endtime="20170817 21:21:37.471"></status>
</kw>
<status starttime="20170817 21:21:37.469" status="PASS" endtime="20170817 21:21:37.471"></status>
</kw>
<status starttime="20170817 21:21:37.468" status="PASS" endtime="20170817 21:21:37.471"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.604">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:21:37.604">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:37.472" status="PASS" endtime="20170817 21:21:37.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.606">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:37.605" status="PASS" endtime="20170817 21:21:37.606"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.607">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:37.606" status="PASS" endtime="20170817 21:21:37.607"></status>
</kw>
<status starttime="20170817 21:21:37.606" status="PASS" endtime="20170817 21:21:37.607"></status>
</kw>
<status starttime="20170817 21:21:37.605" status="PASS" endtime="20170817 21:21:37.607"></status>
</kw>
<status starttime="20170817 21:21:37.604" status="PASS" endtime="20170817 21:21:37.607"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:21:37.607">Delete All Sessions</msg>
<status starttime="20170817 21:21:37.607" status="PASS" endtime="20170817 21:21:37.608"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:37.608">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:37.203" status="PASS" endtime="20170817 21:21:37.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.608">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:37.608" status="PASS" endtime="20170817 21:21:37.608"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.609">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:21:37.609">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:21:37.609">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:21:37.609" status="PASS" endtime="20170817 21:21:37.609"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:37.610">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 21:21:37.202" status="PASS" endtime="20170817 21:21:37.610"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:37.610">${host_state} = Running</msg>
<status starttime="20170817 21:21:37.202" status="PASS" endtime="20170817 21:21:37.610"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:21:37.610" status="PASS" endtime="20170817 21:21:37.611"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.616">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:21:37.615" status="PASS" endtime="20170817 21:21:37.616"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.616">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:21:37.616" status="PASS" endtime="20170817 21:21:37.616"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.617">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:21:37.617" status="PASS" endtime="20170817 21:21:37.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.618">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:21:37.617" status="PASS" endtime="20170817 21:21:37.618"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.811">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:21:37.618" status="PASS" endtime="20170817 21:21:37.811"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:37.811">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:21:37.812">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:37.618" status="PASS" endtime="20170817 21:21:37.812"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.812">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:37.812" status="PASS" endtime="20170817 21:21:37.812"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.813">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:37.813" status="PASS" endtime="20170817 21:21:37.813"></status>
</kw>
<status starttime="20170817 21:21:37.615" status="PASS" endtime="20170817 21:21:37.813"></status>
</kw>
<status starttime="20170817 21:21:37.614" status="PASS" endtime="20170817 21:21:37.813"></status>
</kw>
<status starttime="20170817 21:21:37.614" status="PASS" endtime="20170817 21:21:37.813"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.814">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 21:21:37.814" status="PASS" endtime="20170817 21:21:37.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.817">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:21:37.816" status="PASS" endtime="20170817 21:21:37.817"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.817">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:21:37.817" status="PASS" endtime="20170817 21:21:37.818"></status>
</kw>
<status starttime="20170817 21:21:37.817" status="PASS" endtime="20170817 21:21:37.818"></status>
</kw>
<status starttime="20170817 21:21:37.815" status="PASS" endtime="20170817 21:21:37.818"></status>
</kw>
<status starttime="20170817 21:21:37.814" status="PASS" endtime="20170817 21:21:37.818"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.911">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:21:37.911">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:37.818" status="PASS" endtime="20170817 21:21:37.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.913">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:37.913" status="PASS" endtime="20170817 21:21:37.913"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.914">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:37.914" status="PASS" endtime="20170817 21:21:37.914"></status>
</kw>
<status starttime="20170817 21:21:37.913" status="PASS" endtime="20170817 21:21:37.914"></status>
</kw>
<status starttime="20170817 21:21:37.912" status="PASS" endtime="20170817 21:21:37.914"></status>
</kw>
<status starttime="20170817 21:21:37.912" status="PASS" endtime="20170817 21:21:37.914"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:21:37.915">Delete All Sessions</msg>
<status starttime="20170817 21:21:37.915" status="PASS" endtime="20170817 21:21:37.915"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:37.915">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:37.613" status="PASS" endtime="20170817 21:21:37.915"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.916">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:37.915" status="PASS" endtime="20170817 21:21:37.916"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.916">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:21:37.916">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:21:37.916">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:21:37.916" status="PASS" endtime="20170817 21:21:37.916"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:37.917">${state} = Off</msg>
<status starttime="20170817 21:21:37.613" status="PASS" endtime="20170817 21:21:37.917"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:37.917">${boot_progress} = Off</msg>
<status starttime="20170817 21:21:37.612" status="PASS" endtime="20170817 21:21:37.917"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:21:37.918">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 21:21:37.917" status="FAIL" endtime="20170817 21:21:37.918"></status>
</kw>
<status starttime="20170817 21:21:37.612" status="FAIL" endtime="20170817 21:21:37.918"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:37.918">${status} = False</msg>
<status starttime="20170817 21:21:37.611" status="PASS" endtime="20170817 21:21:37.918"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 21:21:37.918" status="PASS" endtime="20170817 21:21:37.918"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:37.922">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:21:37.922" status="PASS" endtime="20170817 21:21:37.923"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.923">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:21:37.923" status="PASS" endtime="20170817 21:21:37.923"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.924">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:21:37.923" status="PASS" endtime="20170817 21:21:37.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:37.924">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:21:37.924" status="PASS" endtime="20170817 21:21:37.924"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:38.140">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:21:37.925" status="PASS" endtime="20170817 21:21:38.140"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:38.140">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:21:38.140">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:37.925" status="PASS" endtime="20170817 21:21:38.140"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:38.141">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:38.140" status="PASS" endtime="20170817 21:21:38.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:38.141">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:38.141" status="PASS" endtime="20170817 21:21:38.142"></status>
</kw>
<status starttime="20170817 21:21:37.921" status="PASS" endtime="20170817 21:21:38.142"></status>
</kw>
<status starttime="20170817 21:21:37.921" status="PASS" endtime="20170817 21:21:38.142"></status>
</kw>
<status starttime="20170817 21:21:37.920" status="PASS" endtime="20170817 21:21:38.142"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:38.142">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 21:21:38.142" status="PASS" endtime="20170817 21:21:38.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:38.145">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:21:38.144" status="PASS" endtime="20170817 21:21:38.145"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:38.145">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:21:38.145" status="PASS" endtime="20170817 21:21:38.146"></status>
</kw>
<status starttime="20170817 21:21:38.145" status="PASS" endtime="20170817 21:21:38.146"></status>
</kw>
<status starttime="20170817 21:21:38.143" status="PASS" endtime="20170817 21:21:38.146"></status>
</kw>
<status starttime="20170817 21:21:38.143" status="PASS" endtime="20170817 21:21:38.146"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:38.260">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:21:38.261">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:38.146" status="PASS" endtime="20170817 21:21:38.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:38.262">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:38.262" status="PASS" endtime="20170817 21:21:38.262"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:38.263">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:38.263" status="PASS" endtime="20170817 21:21:38.263"></status>
</kw>
<status starttime="20170817 21:21:38.263" status="PASS" endtime="20170817 21:21:38.264"></status>
</kw>
<status starttime="20170817 21:21:38.261" status="PASS" endtime="20170817 21:21:38.264"></status>
</kw>
<status starttime="20170817 21:21:38.261" status="PASS" endtime="20170817 21:21:38.264"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:21:38.264">Delete All Sessions</msg>
<status starttime="20170817 21:21:38.264" status="PASS" endtime="20170817 21:21:38.264"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:38.264">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:37.920" status="PASS" endtime="20170817 21:21:38.264"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:38.265">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:38.265" status="PASS" endtime="20170817 21:21:38.265"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:38.266">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:21:38.266">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:21:38.266">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:21:38.265" status="PASS" endtime="20170817 21:21:38.266"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:38.266">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:21:37.919" status="PASS" endtime="20170817 21:21:38.266"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:38.266">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:21:37.919" status="PASS" endtime="20170817 21:21:38.266"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:38.267">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:21:38.267">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:21:38.267" status="FAIL" endtime="20170817 21:21:38.267"></status>
</kw>
<status starttime="20170817 21:21:37.611" status="FAIL" endtime="20170817 21:21:38.267"></status>
</kw>
<status starttime="20170817 21:21:36.887" status="FAIL" endtime="20170817 21:21:38.267"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:48.274">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:21:48.274" status="PASS" endtime="20170817 21:21:48.275"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:48.275">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:21:48.275" status="PASS" endtime="20170817 21:21:48.275"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:48.276">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:21:48.275" status="PASS" endtime="20170817 21:21:48.276"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:48.276">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:21:48.276" status="PASS" endtime="20170817 21:21:48.276"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:48.527">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:21:48.277" status="PASS" endtime="20170817 21:21:48.527"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:48.527">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:21:48.527">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:48.277" status="PASS" endtime="20170817 21:21:48.528"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:48.528">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:48.528" status="PASS" endtime="20170817 21:21:48.528"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:48.529">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:48.529" status="PASS" endtime="20170817 21:21:48.529"></status>
</kw>
<status starttime="20170817 21:21:48.273" status="PASS" endtime="20170817 21:21:48.529"></status>
</kw>
<status starttime="20170817 21:21:48.272" status="PASS" endtime="20170817 21:21:48.529"></status>
</kw>
<status starttime="20170817 21:21:48.272" status="PASS" endtime="20170817 21:21:48.529"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:48.530">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:21:48.530" status="PASS" endtime="20170817 21:21:48.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:48.532">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:21:48.531" status="PASS" endtime="20170817 21:21:48.532"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:48.533">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:21:48.533" status="PASS" endtime="20170817 21:21:48.533"></status>
</kw>
<status starttime="20170817 21:21:48.532" status="PASS" endtime="20170817 21:21:48.533"></status>
</kw>
<status starttime="20170817 21:21:48.531" status="PASS" endtime="20170817 21:21:48.533"></status>
</kw>
<status starttime="20170817 21:21:48.530" status="PASS" endtime="20170817 21:21:48.533"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:48.658">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:21:48.658">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:48.534" status="PASS" endtime="20170817 21:21:48.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:48.660">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:48.659" status="PASS" endtime="20170817 21:21:48.660"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:48.661">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:48.661" status="PASS" endtime="20170817 21:21:48.661"></status>
</kw>
<status starttime="20170817 21:21:48.660" status="PASS" endtime="20170817 21:21:48.661"></status>
</kw>
<status starttime="20170817 21:21:48.659" status="PASS" endtime="20170817 21:21:48.661"></status>
</kw>
<status starttime="20170817 21:21:48.658" status="PASS" endtime="20170817 21:21:48.661"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:21:48.662">Delete All Sessions</msg>
<status starttime="20170817 21:21:48.662" status="PASS" endtime="20170817 21:21:48.662"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:48.662">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:48.271" status="PASS" endtime="20170817 21:21:48.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:48.663">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:48.662" status="PASS" endtime="20170817 21:21:48.663"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:48.663">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:21:48.663">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:21:48.664">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:21:48.663" status="PASS" endtime="20170817 21:21:48.664"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:48.664">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:21:48.270" status="PASS" endtime="20170817 21:21:48.664"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:48.664">${power_state} = On</msg>
<status starttime="20170817 21:21:48.270" status="PASS" endtime="20170817 21:21:48.664"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:21:48.664" status="PASS" endtime="20170817 21:21:48.665"></status>
</kw>
<status starttime="20170817 21:21:48.269" status="PASS" endtime="20170817 21:21:48.665"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:48.668">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:21:48.668" status="PASS" endtime="20170817 21:21:48.669"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:48.669">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:21:48.669" status="PASS" endtime="20170817 21:21:48.669"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:48.670">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:21:48.670" status="PASS" endtime="20170817 21:21:48.670"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:48.670">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:21:48.670" status="PASS" endtime="20170817 21:21:48.671"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:48.897">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:21:48.671" status="PASS" endtime="20170817 21:21:48.897"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:48.897">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:21:48.897">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:48.671" status="PASS" endtime="20170817 21:21:48.897"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:48.898">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:48.898" status="PASS" endtime="20170817 21:21:48.898"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:48.899">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:48.898" status="PASS" endtime="20170817 21:21:48.899"></status>
</kw>
<status starttime="20170817 21:21:48.667" status="PASS" endtime="20170817 21:21:48.899"></status>
</kw>
<status starttime="20170817 21:21:48.667" status="PASS" endtime="20170817 21:21:48.899"></status>
</kw>
<status starttime="20170817 21:21:48.667" status="PASS" endtime="20170817 21:21:48.899"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:48.900">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:21:48.899" status="PASS" endtime="20170817 21:21:48.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:48.902">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:21:48.901" status="PASS" endtime="20170817 21:21:48.902"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:48.903">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:21:48.903" status="PASS" endtime="20170817 21:21:48.903"></status>
</kw>
<status starttime="20170817 21:21:48.902" status="PASS" endtime="20170817 21:21:48.903"></status>
</kw>
<status starttime="20170817 21:21:48.900" status="PASS" endtime="20170817 21:21:48.903"></status>
</kw>
<status starttime="20170817 21:21:48.900" status="PASS" endtime="20170817 21:21:48.903"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.018">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:21:49.018">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:48.904" status="PASS" endtime="20170817 21:21:49.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.020">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:49.019" status="PASS" endtime="20170817 21:21:49.020"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.021">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:49.021" status="PASS" endtime="20170817 21:21:49.021"></status>
</kw>
<status starttime="20170817 21:21:49.020" status="PASS" endtime="20170817 21:21:49.021"></status>
</kw>
<status starttime="20170817 21:21:49.019" status="PASS" endtime="20170817 21:21:49.021"></status>
</kw>
<status starttime="20170817 21:21:49.018" status="PASS" endtime="20170817 21:21:49.021"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:21:49.022">Delete All Sessions</msg>
<status starttime="20170817 21:21:49.021" status="PASS" endtime="20170817 21:21:49.022"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:49.022">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:48.666" status="PASS" endtime="20170817 21:21:49.022"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.023">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:49.022" status="PASS" endtime="20170817 21:21:49.023"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.023">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:21:49.023">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:21:49.023">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:21:49.023" status="PASS" endtime="20170817 21:21:49.023"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:49.024">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 21:21:48.665" status="PASS" endtime="20170817 21:21:49.024"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:49.024">${host_state} = Running</msg>
<status starttime="20170817 21:21:48.665" status="PASS" endtime="20170817 21:21:49.024"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:21:49.024" status="PASS" endtime="20170817 21:21:49.025"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.029">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:21:49.029" status="PASS" endtime="20170817 21:21:49.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.031">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:21:49.030" status="PASS" endtime="20170817 21:21:49.031"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.031">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:21:49.031" status="PASS" endtime="20170817 21:21:49.031"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.032">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:21:49.031" status="PASS" endtime="20170817 21:21:49.032"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.259">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:21:49.033" status="PASS" endtime="20170817 21:21:49.259"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:49.259">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:21:49.259">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:49.032" status="PASS" endtime="20170817 21:21:49.259"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.260">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:49.260" status="PASS" endtime="20170817 21:21:49.260"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.261">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:49.260" status="PASS" endtime="20170817 21:21:49.261"></status>
</kw>
<status starttime="20170817 21:21:49.028" status="PASS" endtime="20170817 21:21:49.261"></status>
</kw>
<status starttime="20170817 21:21:49.028" status="PASS" endtime="20170817 21:21:49.261"></status>
</kw>
<status starttime="20170817 21:21:49.028" status="PASS" endtime="20170817 21:21:49.261"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.262">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 21:21:49.261" status="PASS" endtime="20170817 21:21:49.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.264">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:21:49.263" status="PASS" endtime="20170817 21:21:49.264"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.265">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:21:49.265" status="PASS" endtime="20170817 21:21:49.265"></status>
</kw>
<status starttime="20170817 21:21:49.264" status="PASS" endtime="20170817 21:21:49.265"></status>
</kw>
<status starttime="20170817 21:21:49.263" status="PASS" endtime="20170817 21:21:49.265"></status>
</kw>
<status starttime="20170817 21:21:49.262" status="PASS" endtime="20170817 21:21:49.265"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.348">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:21:49.348">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:49.266" status="PASS" endtime="20170817 21:21:49.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.350">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:49.350" status="PASS" endtime="20170817 21:21:49.350"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.351">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:49.351" status="PASS" endtime="20170817 21:21:49.351"></status>
</kw>
<status starttime="20170817 21:21:49.350" status="PASS" endtime="20170817 21:21:49.351"></status>
</kw>
<status starttime="20170817 21:21:49.349" status="PASS" endtime="20170817 21:21:49.351"></status>
</kw>
<status starttime="20170817 21:21:49.349" status="PASS" endtime="20170817 21:21:49.351"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:21:49.352">Delete All Sessions</msg>
<status starttime="20170817 21:21:49.352" status="PASS" endtime="20170817 21:21:49.352"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:49.352">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:49.027" status="PASS" endtime="20170817 21:21:49.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.353">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:49.352" status="PASS" endtime="20170817 21:21:49.353"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.353">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:21:49.353">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:21:49.354">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:21:49.353" status="PASS" endtime="20170817 21:21:49.354"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:49.354">${state} = Off</msg>
<status starttime="20170817 21:21:49.026" status="PASS" endtime="20170817 21:21:49.354"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:49.354">${boot_progress} = Off</msg>
<status starttime="20170817 21:21:49.026" status="PASS" endtime="20170817 21:21:49.354"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:21:49.355">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 21:21:49.354" status="FAIL" endtime="20170817 21:21:49.355"></status>
</kw>
<status starttime="20170817 21:21:49.026" status="FAIL" endtime="20170817 21:21:49.355"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:49.355">${status} = False</msg>
<status starttime="20170817 21:21:49.025" status="PASS" endtime="20170817 21:21:49.355"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 21:21:49.355" status="PASS" endtime="20170817 21:21:49.356"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.360">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:21:49.359" status="PASS" endtime="20170817 21:21:49.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.360">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:21:49.360" status="PASS" endtime="20170817 21:21:49.361"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.361">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:21:49.361" status="PASS" endtime="20170817 21:21:49.361"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.362">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:21:49.361" status="PASS" endtime="20170817 21:21:49.362"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.597">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:21:49.363" status="PASS" endtime="20170817 21:21:49.597"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:49.597">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:21:49.597">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:49.362" status="PASS" endtime="20170817 21:21:49.597"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.598">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:49.598" status="PASS" endtime="20170817 21:21:49.598"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.599">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:49.598" status="PASS" endtime="20170817 21:21:49.599"></status>
</kw>
<status starttime="20170817 21:21:49.359" status="PASS" endtime="20170817 21:21:49.599"></status>
</kw>
<status starttime="20170817 21:21:49.358" status="PASS" endtime="20170817 21:21:49.599"></status>
</kw>
<status starttime="20170817 21:21:49.357" status="PASS" endtime="20170817 21:21:49.599"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.600">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 21:21:49.599" status="PASS" endtime="20170817 21:21:49.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.602">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:21:49.601" status="PASS" endtime="20170817 21:21:49.602"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.603">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:21:49.603" status="PASS" endtime="20170817 21:21:49.603"></status>
</kw>
<status starttime="20170817 21:21:49.602" status="PASS" endtime="20170817 21:21:49.603"></status>
</kw>
<status starttime="20170817 21:21:49.600" status="PASS" endtime="20170817 21:21:49.603"></status>
</kw>
<status starttime="20170817 21:21:49.600" status="PASS" endtime="20170817 21:21:49.603"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.780">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:21:49.780">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:49.603" status="PASS" endtime="20170817 21:21:49.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.782">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:49.781" status="PASS" endtime="20170817 21:21:49.782"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.783">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:21:49.783" status="PASS" endtime="20170817 21:21:49.783"></status>
</kw>
<status starttime="20170817 21:21:49.782" status="PASS" endtime="20170817 21:21:49.783"></status>
</kw>
<status starttime="20170817 21:21:49.781" status="PASS" endtime="20170817 21:21:49.783"></status>
</kw>
<status starttime="20170817 21:21:49.780" status="PASS" endtime="20170817 21:21:49.783"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:21:49.784">Delete All Sessions</msg>
<status starttime="20170817 21:21:49.783" status="PASS" endtime="20170817 21:21:49.784"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:49.784">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:49.357" status="PASS" endtime="20170817 21:21:49.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:21:49.784" status="PASS" endtime="20170817 21:21:49.785"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:49.785">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:21:49.785">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:21:49.785">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:21:49.785" status="PASS" endtime="20170817 21:21:49.785"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:49.786">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:21:49.356" status="PASS" endtime="20170817 21:21:49.786"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:21:49.786">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:21:49.356" status="PASS" endtime="20170817 21:21:49.786"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:49.786">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:21:49.787">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:21:49.786" status="FAIL" endtime="20170817 21:21:49.787"></status>
</kw>
<status starttime="20170817 21:21:49.025" status="FAIL" endtime="20170817 21:21:49.787"></status>
</kw>
<status starttime="20170817 21:21:48.268" status="FAIL" endtime="20170817 21:21:49.787"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:21:59.792">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:21:59.792" status="PASS" endtime="20170817 21:21:59.792"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:59.793">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:21:59.793" status="PASS" endtime="20170817 21:21:59.793"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:59.794">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:21:59.793" status="PASS" endtime="20170817 21:21:59.794"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:21:59.794">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:21:59.794" status="PASS" endtime="20170817 21:21:59.794"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:00.538">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:21:59.795" status="PASS" endtime="20170817 21:22:00.538"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:00.538">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:00.539">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:59.795" status="PASS" endtime="20170817 21:22:00.539"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:00.539">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:00.539" status="PASS" endtime="20170817 21:22:00.539"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:00.540">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:00.539" status="PASS" endtime="20170817 21:22:00.540"></status>
</kw>
<status starttime="20170817 21:21:59.791" status="PASS" endtime="20170817 21:22:00.540"></status>
</kw>
<status starttime="20170817 21:21:59.791" status="PASS" endtime="20170817 21:22:00.540"></status>
</kw>
<status starttime="20170817 21:21:59.790" status="PASS" endtime="20170817 21:22:00.540"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:00.541">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:22:00.541" status="PASS" endtime="20170817 21:22:00.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:00.543">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:00.542" status="PASS" endtime="20170817 21:22:00.543"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:00.544">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:00.544" status="PASS" endtime="20170817 21:22:00.544"></status>
</kw>
<status starttime="20170817 21:22:00.543" status="PASS" endtime="20170817 21:22:00.544"></status>
</kw>
<status starttime="20170817 21:22:00.542" status="PASS" endtime="20170817 21:22:00.544"></status>
</kw>
<status starttime="20170817 21:22:00.541" status="PASS" endtime="20170817 21:22:00.544"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:04.743">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:04.743">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:00.545" status="PASS" endtime="20170817 21:22:04.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:04.745">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:04.744" status="PASS" endtime="20170817 21:22:04.745"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:04.746">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:04.746" status="PASS" endtime="20170817 21:22:04.746"></status>
</kw>
<status starttime="20170817 21:22:04.745" status="PASS" endtime="20170817 21:22:04.746"></status>
</kw>
<status starttime="20170817 21:22:04.744" status="PASS" endtime="20170817 21:22:04.746"></status>
</kw>
<status starttime="20170817 21:22:04.743" status="PASS" endtime="20170817 21:22:04.746"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:04.747">Delete All Sessions</msg>
<status starttime="20170817 21:22:04.747" status="PASS" endtime="20170817 21:22:04.747"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:04.747">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:21:59.789" status="PASS" endtime="20170817 21:22:04.747"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:04.748">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:04.747" status="PASS" endtime="20170817 21:22:04.748"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:04.748">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:04.748">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:04.748">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:04.748" status="PASS" endtime="20170817 21:22:04.749"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:04.749">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:21:59.789" status="PASS" endtime="20170817 21:22:04.749"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:04.749">${power_state} = On</msg>
<status starttime="20170817 21:21:59.788" status="PASS" endtime="20170817 21:22:04.749"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:22:04.749" status="PASS" endtime="20170817 21:22:04.750"></status>
</kw>
<status starttime="20170817 21:21:59.788" status="PASS" endtime="20170817 21:22:04.750"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:04.753">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:22:04.753" status="PASS" endtime="20170817 21:22:04.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:04.755">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:22:04.754" status="PASS" endtime="20170817 21:22:04.755"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:04.755">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:22:04.755" status="PASS" endtime="20170817 21:22:04.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:04.756">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:22:04.755" status="PASS" endtime="20170817 21:22:04.756"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:05.772">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:22:04.757" status="PASS" endtime="20170817 21:22:05.772"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:05.772">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:05.772">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:04.756" status="PASS" endtime="20170817 21:22:05.772"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:05.773">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:05.772" status="PASS" endtime="20170817 21:22:05.773"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:05.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:05.773" status="PASS" endtime="20170817 21:22:05.774"></status>
</kw>
<status starttime="20170817 21:22:04.752" status="PASS" endtime="20170817 21:22:05.774"></status>
</kw>
<status starttime="20170817 21:22:04.752" status="PASS" endtime="20170817 21:22:05.774"></status>
</kw>
<status starttime="20170817 21:22:04.751" status="PASS" endtime="20170817 21:22:05.774"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:05.775">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:22:05.774" status="PASS" endtime="20170817 21:22:05.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:05.777">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:05.776" status="PASS" endtime="20170817 21:22:05.777"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:05.777">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:05.777" status="PASS" endtime="20170817 21:22:05.778"></status>
</kw>
<status starttime="20170817 21:22:05.777" status="PASS" endtime="20170817 21:22:05.778"></status>
</kw>
<status starttime="20170817 21:22:05.775" status="PASS" endtime="20170817 21:22:05.778"></status>
</kw>
<status starttime="20170817 21:22:05.775" status="PASS" endtime="20170817 21:22:05.778"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:06.187">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:06.188">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:05.778" status="PASS" endtime="20170817 21:22:06.188"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:06.189">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:06.189" status="PASS" endtime="20170817 21:22:06.189"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:06.190">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:06.190" status="PASS" endtime="20170817 21:22:06.190"></status>
</kw>
<status starttime="20170817 21:22:06.189" status="PASS" endtime="20170817 21:22:06.190"></status>
</kw>
<status starttime="20170817 21:22:06.188" status="PASS" endtime="20170817 21:22:06.191"></status>
</kw>
<status starttime="20170817 21:22:06.188" status="PASS" endtime="20170817 21:22:06.191"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:06.191">Delete All Sessions</msg>
<status starttime="20170817 21:22:06.191" status="PASS" endtime="20170817 21:22:06.191"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:06.191">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:04.751" status="PASS" endtime="20170817 21:22:06.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:06.192">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:06.192" status="PASS" endtime="20170817 21:22:06.192"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:06.193">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:06.193">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:06.193">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:06.192" status="PASS" endtime="20170817 21:22:06.193"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:06.193">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 21:22:04.750" status="PASS" endtime="20170817 21:22:06.193"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:06.193">${host_state} = Running</msg>
<status starttime="20170817 21:22:04.750" status="PASS" endtime="20170817 21:22:06.193"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:22:06.194" status="PASS" endtime="20170817 21:22:06.194"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:06.201">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:22:06.201" status="PASS" endtime="20170817 21:22:06.202"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:06.202">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:22:06.202" status="PASS" endtime="20170817 21:22:06.202"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:06.203">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:22:06.203" status="PASS" endtime="20170817 21:22:06.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:06.204">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:22:06.203" status="PASS" endtime="20170817 21:22:06.204"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:07.172">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:22:06.204" status="PASS" endtime="20170817 21:22:07.172"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:07.172">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:07.172">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:06.204" status="PASS" endtime="20170817 21:22:07.172"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:07.173">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:07.173" status="PASS" endtime="20170817 21:22:07.173"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:07.174">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:07.174" status="PASS" endtime="20170817 21:22:07.174"></status>
</kw>
<status starttime="20170817 21:22:06.200" status="PASS" endtime="20170817 21:22:07.175"></status>
</kw>
<status starttime="20170817 21:22:06.200" status="PASS" endtime="20170817 21:22:07.175"></status>
</kw>
<status starttime="20170817 21:22:06.199" status="PASS" endtime="20170817 21:22:07.175"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:07.176">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 21:22:07.175" status="PASS" endtime="20170817 21:22:07.176"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:07.179">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:22:07.178" status="PASS" endtime="20170817 21:22:07.179"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:07.181">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:22:07.180" status="PASS" endtime="20170817 21:22:07.181"></status>
</kw>
<status starttime="20170817 21:22:07.179" status="PASS" endtime="20170817 21:22:07.181"></status>
</kw>
<status starttime="20170817 21:22:07.177" status="PASS" endtime="20170817 21:22:07.181"></status>
</kw>
<status starttime="20170817 21:22:07.176" status="PASS" endtime="20170817 21:22:07.181"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:07.464">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:07.464">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:07.181" status="PASS" endtime="20170817 21:22:07.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:07.466">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:07.465" status="PASS" endtime="20170817 21:22:07.466"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:07.467">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:07.466" status="PASS" endtime="20170817 21:22:07.467"></status>
</kw>
<status starttime="20170817 21:22:07.466" status="PASS" endtime="20170817 21:22:07.467"></status>
</kw>
<status starttime="20170817 21:22:07.465" status="PASS" endtime="20170817 21:22:07.467"></status>
</kw>
<status starttime="20170817 21:22:07.464" status="PASS" endtime="20170817 21:22:07.467"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:07.467">Delete All Sessions</msg>
<status starttime="20170817 21:22:07.467" status="PASS" endtime="20170817 21:22:07.467"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:07.468">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:06.199" status="PASS" endtime="20170817 21:22:07.468"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:07.468">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:07.468" status="PASS" endtime="20170817 21:22:07.468"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:07.469">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:07.469">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:07.469">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:07.469" status="PASS" endtime="20170817 21:22:07.469"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:07.469">${state} = Off</msg>
<status starttime="20170817 21:22:06.198" status="PASS" endtime="20170817 21:22:07.469"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:07.470">${boot_progress} = Off</msg>
<status starttime="20170817 21:22:06.195" status="PASS" endtime="20170817 21:22:07.470"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:22:07.470">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 21:22:07.470" status="FAIL" endtime="20170817 21:22:07.470"></status>
</kw>
<status starttime="20170817 21:22:06.195" status="FAIL" endtime="20170817 21:22:07.470"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:07.470">${status} = False</msg>
<status starttime="20170817 21:22:06.194" status="PASS" endtime="20170817 21:22:07.471"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 21:22:07.471" status="PASS" endtime="20170817 21:22:07.471"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:07.475">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:22:07.474" status="PASS" endtime="20170817 21:22:07.475"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:07.476">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:22:07.475" status="PASS" endtime="20170817 21:22:07.476"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:07.476">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:22:07.476" status="PASS" endtime="20170817 21:22:07.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:07.477">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:22:07.477" status="PASS" endtime="20170817 21:22:07.477"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:08.346">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:22:07.478" status="PASS" endtime="20170817 21:22:08.347"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:08.347">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:08.347">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:07.477" status="PASS" endtime="20170817 21:22:08.347"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:08.347">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:08.347" status="PASS" endtime="20170817 21:22:08.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:08.348">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:08.348" status="PASS" endtime="20170817 21:22:08.348"></status>
</kw>
<status starttime="20170817 21:22:07.474" status="PASS" endtime="20170817 21:22:08.348"></status>
</kw>
<status starttime="20170817 21:22:07.474" status="PASS" endtime="20170817 21:22:08.348"></status>
</kw>
<status starttime="20170817 21:22:07.473" status="PASS" endtime="20170817 21:22:08.348"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:08.349">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 21:22:08.349" status="PASS" endtime="20170817 21:22:08.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:08.351">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:22:08.350" status="PASS" endtime="20170817 21:22:08.351"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:08.352">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:22:08.352" status="PASS" endtime="20170817 21:22:08.352"></status>
</kw>
<status starttime="20170817 21:22:08.351" status="PASS" endtime="20170817 21:22:08.352"></status>
</kw>
<status starttime="20170817 21:22:08.350" status="PASS" endtime="20170817 21:22:08.352"></status>
</kw>
<status starttime="20170817 21:22:08.349" status="PASS" endtime="20170817 21:22:08.353"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:11.090">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:11.090">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:08.353" status="PASS" endtime="20170817 21:22:11.090"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:11.092">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:11.091" status="PASS" endtime="20170817 21:22:11.092"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:11.093">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:11.093" status="PASS" endtime="20170817 21:22:11.093"></status>
</kw>
<status starttime="20170817 21:22:11.092" status="PASS" endtime="20170817 21:22:11.093"></status>
</kw>
<status starttime="20170817 21:22:11.091" status="PASS" endtime="20170817 21:22:11.093"></status>
</kw>
<status starttime="20170817 21:22:11.090" status="PASS" endtime="20170817 21:22:11.093"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:11.094">Delete All Sessions</msg>
<status starttime="20170817 21:22:11.094" status="PASS" endtime="20170817 21:22:11.094"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:11.094">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:07.472" status="PASS" endtime="20170817 21:22:11.094"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:11.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:11.094" status="PASS" endtime="20170817 21:22:11.095"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:11.095">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:11.095">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:11.095">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:11.095" status="PASS" endtime="20170817 21:22:11.095"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:11.096">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:22:07.472" status="PASS" endtime="20170817 21:22:11.096"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:11.096">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:22:07.471" status="PASS" endtime="20170817 21:22:11.096"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:11.096">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:22:11.097">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:22:11.096" status="FAIL" endtime="20170817 21:22:11.097"></status>
</kw>
<status starttime="20170817 21:22:06.194" status="FAIL" endtime="20170817 21:22:11.097"></status>
</kw>
<status starttime="20170817 21:21:59.787" status="FAIL" endtime="20170817 21:22:11.097"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:21.104">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:22:21.104" status="PASS" endtime="20170817 21:22:21.105"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:21.106">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:22:21.105" status="PASS" endtime="20170817 21:22:21.106"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:21.107">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:22:21.106" status="PASS" endtime="20170817 21:22:21.107"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:21.108">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:22:21.107" status="PASS" endtime="20170817 21:22:21.108"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:21.810">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:22:21.109" status="PASS" endtime="20170817 21:22:21.810"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:21.811">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:21.811">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:21.108" status="PASS" endtime="20170817 21:22:21.811"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:21.812">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:21.811" status="PASS" endtime="20170817 21:22:21.812"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:21.813">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:21.812" status="PASS" endtime="20170817 21:22:21.813"></status>
</kw>
<status starttime="20170817 21:22:21.103" status="PASS" endtime="20170817 21:22:21.813"></status>
</kw>
<status starttime="20170817 21:22:21.102" status="PASS" endtime="20170817 21:22:21.813"></status>
</kw>
<status starttime="20170817 21:22:21.101" status="PASS" endtime="20170817 21:22:21.813"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:21.814">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:22:21.814" status="PASS" endtime="20170817 21:22:21.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:21.817">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:21.816" status="PASS" endtime="20170817 21:22:21.818"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:21.818">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:21.818" status="PASS" endtime="20170817 21:22:21.819"></status>
</kw>
<status starttime="20170817 21:22:21.818" status="PASS" endtime="20170817 21:22:21.819"></status>
</kw>
<status starttime="20170817 21:22:21.815" status="PASS" endtime="20170817 21:22:21.819"></status>
</kw>
<status starttime="20170817 21:22:21.815" status="PASS" endtime="20170817 21:22:21.819"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:23.738">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:23.738">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:21.819" status="PASS" endtime="20170817 21:22:23.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:23.740">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:23.739" status="PASS" endtime="20170817 21:22:23.740"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:23.741">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:23.740" status="PASS" endtime="20170817 21:22:23.741"></status>
</kw>
<status starttime="20170817 21:22:23.740" status="PASS" endtime="20170817 21:22:23.741"></status>
</kw>
<status starttime="20170817 21:22:23.739" status="PASS" endtime="20170817 21:22:23.741"></status>
</kw>
<status starttime="20170817 21:22:23.738" status="PASS" endtime="20170817 21:22:23.741"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:23.742">Delete All Sessions</msg>
<status starttime="20170817 21:22:23.742" status="PASS" endtime="20170817 21:22:23.742"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:23.742">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:21.100" status="PASS" endtime="20170817 21:22:23.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:23.743">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:23.742" status="PASS" endtime="20170817 21:22:23.743"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:23.743">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:23.743">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:23.743">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:23.743" status="PASS" endtime="20170817 21:22:23.744"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:23.744">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170817 21:22:21.099" status="PASS" endtime="20170817 21:22:23.744"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:23.744">${power_state} = Off</msg>
<status starttime="20170817 21:22:21.098" status="PASS" endtime="20170817 21:22:23.744"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:22:23.745">On != Off</msg>
<status starttime="20170817 21:22:23.744" status="FAIL" endtime="20170817 21:22:23.745"></status>
</kw>
<status starttime="20170817 21:22:21.098" status="FAIL" endtime="20170817 21:22:23.745"></status>
</kw>
<status starttime="20170817 21:22:21.098" status="FAIL" endtime="20170817 21:22:23.745"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:33.750">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:22:33.750" status="PASS" endtime="20170817 21:22:33.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:33.751">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:22:33.751" status="PASS" endtime="20170817 21:22:33.751"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:33.752">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:22:33.751" status="PASS" endtime="20170817 21:22:33.752"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:33.752">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:22:33.752" status="PASS" endtime="20170817 21:22:33.752"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:34.755">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:22:33.753" status="PASS" endtime="20170817 21:22:34.755"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:34.755">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:34.755">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:33.753" status="PASS" endtime="20170817 21:22:34.755"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:34.756">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:34.755" status="PASS" endtime="20170817 21:22:34.756"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:34.756">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:34.756" status="PASS" endtime="20170817 21:22:34.757"></status>
</kw>
<status starttime="20170817 21:22:33.749" status="PASS" endtime="20170817 21:22:34.757"></status>
</kw>
<status starttime="20170817 21:22:33.749" status="PASS" endtime="20170817 21:22:34.757"></status>
</kw>
<status starttime="20170817 21:22:33.748" status="PASS" endtime="20170817 21:22:34.757"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:34.757">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:22:34.757" status="PASS" endtime="20170817 21:22:34.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:34.759">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:34.759" status="PASS" endtime="20170817 21:22:34.759"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:34.760">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:34.760" status="PASS" endtime="20170817 21:22:34.760"></status>
</kw>
<status starttime="20170817 21:22:34.760" status="PASS" endtime="20170817 21:22:34.761"></status>
</kw>
<status starttime="20170817 21:22:34.758" status="PASS" endtime="20170817 21:22:34.761"></status>
</kw>
<status starttime="20170817 21:22:34.758" status="PASS" endtime="20170817 21:22:34.761"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:34.862">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:34.862">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:34.761" status="PASS" endtime="20170817 21:22:34.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:34.864">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:34.864" status="PASS" endtime="20170817 21:22:34.864"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:34.865">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:34.865" status="PASS" endtime="20170817 21:22:34.865"></status>
</kw>
<status starttime="20170817 21:22:34.864" status="PASS" endtime="20170817 21:22:34.865"></status>
</kw>
<status starttime="20170817 21:22:34.863" status="PASS" endtime="20170817 21:22:34.865"></status>
</kw>
<status starttime="20170817 21:22:34.863" status="PASS" endtime="20170817 21:22:34.865"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:34.866">Delete All Sessions</msg>
<status starttime="20170817 21:22:34.866" status="PASS" endtime="20170817 21:22:34.866"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:34.866">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:33.747" status="PASS" endtime="20170817 21:22:34.866"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:34.867">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:34.866" status="PASS" endtime="20170817 21:22:34.867"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:34.867">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:34.867">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:34.867">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:34.867" status="PASS" endtime="20170817 21:22:34.868"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:34.868">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:22:33.747" status="PASS" endtime="20170817 21:22:34.868"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:34.868">${power_state} = On</msg>
<status starttime="20170817 21:22:33.746" status="PASS" endtime="20170817 21:22:34.868"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:22:34.868" status="PASS" endtime="20170817 21:22:34.869"></status>
</kw>
<status starttime="20170817 21:22:33.746" status="PASS" endtime="20170817 21:22:34.869"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:34.872">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:22:34.872" status="PASS" endtime="20170817 21:22:34.873"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:34.874">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:22:34.873" status="PASS" endtime="20170817 21:22:34.874"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:34.874">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:22:34.874" status="PASS" endtime="20170817 21:22:34.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:34.875">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:22:34.874" status="PASS" endtime="20170817 21:22:34.875"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:35.128">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:22:34.876" status="PASS" endtime="20170817 21:22:35.128"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:35.128">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:35.128">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:34.875" status="PASS" endtime="20170817 21:22:35.128"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:35.128">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:35.128" status="PASS" endtime="20170817 21:22:35.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:35.129">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:35.129" status="PASS" endtime="20170817 21:22:35.129"></status>
</kw>
<status starttime="20170817 21:22:34.871" status="PASS" endtime="20170817 21:22:35.129"></status>
</kw>
<status starttime="20170817 21:22:34.871" status="PASS" endtime="20170817 21:22:35.129"></status>
</kw>
<status starttime="20170817 21:22:34.870" status="PASS" endtime="20170817 21:22:35.130"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:35.130">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:22:35.130" status="PASS" endtime="20170817 21:22:35.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:35.132">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:35.132" status="PASS" endtime="20170817 21:22:35.132"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:35.133">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:35.133" status="PASS" endtime="20170817 21:22:35.133"></status>
</kw>
<status starttime="20170817 21:22:35.133" status="PASS" endtime="20170817 21:22:35.134"></status>
</kw>
<status starttime="20170817 21:22:35.131" status="PASS" endtime="20170817 21:22:35.134"></status>
</kw>
<status starttime="20170817 21:22:35.131" status="PASS" endtime="20170817 21:22:35.134"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:35.274">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:35.274">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:35.134" status="PASS" endtime="20170817 21:22:35.274"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:35.275">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:35.275" status="PASS" endtime="20170817 21:22:35.275"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:35.276">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:35.276" status="PASS" endtime="20170817 21:22:35.276"></status>
</kw>
<status starttime="20170817 21:22:35.276" status="PASS" endtime="20170817 21:22:35.277"></status>
</kw>
<status starttime="20170817 21:22:35.274" status="PASS" endtime="20170817 21:22:35.277"></status>
</kw>
<status starttime="20170817 21:22:35.274" status="PASS" endtime="20170817 21:22:35.277"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:35.277">Delete All Sessions</msg>
<status starttime="20170817 21:22:35.277" status="PASS" endtime="20170817 21:22:35.277"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:35.277">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:34.870" status="PASS" endtime="20170817 21:22:35.277"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:35.278">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:35.278" status="PASS" endtime="20170817 21:22:35.278"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:35.279">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:35.279">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:35.279">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:35.278" status="PASS" endtime="20170817 21:22:35.279"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:35.279">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 21:22:34.869" status="PASS" endtime="20170817 21:22:35.279"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:35.279">${host_state} = Running</msg>
<status starttime="20170817 21:22:34.869" status="PASS" endtime="20170817 21:22:35.279"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:22:35.280" status="PASS" endtime="20170817 21:22:35.280"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:35.285">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:22:35.285" status="PASS" endtime="20170817 21:22:35.285"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:35.286">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:22:35.285" status="PASS" endtime="20170817 21:22:35.286"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:35.286">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:22:35.286" status="PASS" endtime="20170817 21:22:35.286"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:35.287">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:22:35.287" status="PASS" endtime="20170817 21:22:35.287"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:35.711">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:22:35.288" status="PASS" endtime="20170817 21:22:35.711"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:35.711">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:35.712">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:35.287" status="PASS" endtime="20170817 21:22:35.712"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:35.712">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:35.712" status="PASS" endtime="20170817 21:22:35.712"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:35.713">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:35.713" status="PASS" endtime="20170817 21:22:35.713"></status>
</kw>
<status starttime="20170817 21:22:35.284" status="PASS" endtime="20170817 21:22:35.713"></status>
</kw>
<status starttime="20170817 21:22:35.284" status="PASS" endtime="20170817 21:22:35.713"></status>
</kw>
<status starttime="20170817 21:22:35.283" status="PASS" endtime="20170817 21:22:35.713"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:35.714">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 21:22:35.714" status="PASS" endtime="20170817 21:22:35.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:35.716">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:22:35.715" status="PASS" endtime="20170817 21:22:35.716"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:35.717">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:22:35.717" status="PASS" endtime="20170817 21:22:35.717"></status>
</kw>
<status starttime="20170817 21:22:35.716" status="PASS" endtime="20170817 21:22:35.717"></status>
</kw>
<status starttime="20170817 21:22:35.715" status="PASS" endtime="20170817 21:22:35.718"></status>
</kw>
<status starttime="20170817 21:22:35.714" status="PASS" endtime="20170817 21:22:35.718"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:35.789">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:35.789">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:35.718" status="PASS" endtime="20170817 21:22:35.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:35.791">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:35.790" status="PASS" endtime="20170817 21:22:35.791"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:35.792">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:35.791" status="PASS" endtime="20170817 21:22:35.792"></status>
</kw>
<status starttime="20170817 21:22:35.791" status="PASS" endtime="20170817 21:22:35.792"></status>
</kw>
<status starttime="20170817 21:22:35.790" status="PASS" endtime="20170817 21:22:35.792"></status>
</kw>
<status starttime="20170817 21:22:35.789" status="PASS" endtime="20170817 21:22:35.792"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:35.792">Delete All Sessions</msg>
<status starttime="20170817 21:22:35.792" status="PASS" endtime="20170817 21:22:35.792"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:35.793">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:35.282" status="PASS" endtime="20170817 21:22:35.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:35.793">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:35.793" status="PASS" endtime="20170817 21:22:35.793"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:35.794">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:35.794">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:35.794">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:35.794" status="PASS" endtime="20170817 21:22:35.794"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:35.794">${state} = Off</msg>
<status starttime="20170817 21:22:35.282" status="PASS" endtime="20170817 21:22:35.794"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:35.795">${boot_progress} = Off</msg>
<status starttime="20170817 21:22:35.281" status="PASS" endtime="20170817 21:22:35.795"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:22:35.795">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 21:22:35.795" status="FAIL" endtime="20170817 21:22:35.795"></status>
</kw>
<status starttime="20170817 21:22:35.281" status="FAIL" endtime="20170817 21:22:35.795"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:35.796">${status} = False</msg>
<status starttime="20170817 21:22:35.280" status="PASS" endtime="20170817 21:22:35.796"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 21:22:35.796" status="PASS" endtime="20170817 21:22:35.796"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:35.800">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:22:35.799" status="PASS" endtime="20170817 21:22:35.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:35.801">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:22:35.800" status="PASS" endtime="20170817 21:22:35.801"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:35.801">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:22:35.801" status="PASS" endtime="20170817 21:22:35.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:35.802">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:22:35.802" status="PASS" endtime="20170817 21:22:35.802"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:36.086">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:22:35.803" status="PASS" endtime="20170817 21:22:36.087"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:36.087">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:36.087">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:35.802" status="PASS" endtime="20170817 21:22:36.087"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:36.087">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:36.087" status="PASS" endtime="20170817 21:22:36.088"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:36.088">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:36.088" status="PASS" endtime="20170817 21:22:36.088"></status>
</kw>
<status starttime="20170817 21:22:35.799" status="PASS" endtime="20170817 21:22:36.088"></status>
</kw>
<status starttime="20170817 21:22:35.798" status="PASS" endtime="20170817 21:22:36.088"></status>
</kw>
<status starttime="20170817 21:22:35.798" status="PASS" endtime="20170817 21:22:36.089"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:36.089">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 21:22:36.089" status="PASS" endtime="20170817 21:22:36.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:36.091">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:22:36.090" status="PASS" endtime="20170817 21:22:36.091"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:36.092">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:22:36.092" status="PASS" endtime="20170817 21:22:36.092"></status>
</kw>
<status starttime="20170817 21:22:36.091" status="PASS" endtime="20170817 21:22:36.092"></status>
</kw>
<status starttime="20170817 21:22:36.090" status="PASS" endtime="20170817 21:22:36.092"></status>
</kw>
<status starttime="20170817 21:22:36.089" status="PASS" endtime="20170817 21:22:36.092"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:36.235">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:36.235">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:36.093" status="PASS" endtime="20170817 21:22:36.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:36.237">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:36.237" status="PASS" endtime="20170817 21:22:36.237"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:36.239">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:36.238" status="PASS" endtime="20170817 21:22:36.239"></status>
</kw>
<status starttime="20170817 21:22:36.238" status="PASS" endtime="20170817 21:22:36.239"></status>
</kw>
<status starttime="20170817 21:22:36.236" status="PASS" endtime="20170817 21:22:36.239"></status>
</kw>
<status starttime="20170817 21:22:36.235" status="PASS" endtime="20170817 21:22:36.239"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:36.239">Delete All Sessions</msg>
<status starttime="20170817 21:22:36.239" status="PASS" endtime="20170817 21:22:36.240"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:36.240">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:35.797" status="PASS" endtime="20170817 21:22:36.240"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:36.240">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:36.240" status="PASS" endtime="20170817 21:22:36.240"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:36.241">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:36.241">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:36.241">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:36.241" status="PASS" endtime="20170817 21:22:36.241"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:36.241">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:22:35.797" status="PASS" endtime="20170817 21:22:36.241"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:36.242">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:22:35.796" status="PASS" endtime="20170817 21:22:36.242"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:36.242">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:22:36.242">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:22:36.242" status="FAIL" endtime="20170817 21:22:36.243"></status>
</kw>
<status starttime="20170817 21:22:35.280" status="FAIL" endtime="20170817 21:22:36.243"></status>
</kw>
<status starttime="20170817 21:22:33.745" status="FAIL" endtime="20170817 21:22:36.243"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:46.248">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:22:46.248" status="PASS" endtime="20170817 21:22:46.249"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.249">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:22:46.249" status="PASS" endtime="20170817 21:22:46.249"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.250">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:22:46.250" status="PASS" endtime="20170817 21:22:46.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.251">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:22:46.250" status="PASS" endtime="20170817 21:22:46.251"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:46.498">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:22:46.251" status="PASS" endtime="20170817 21:22:46.498"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:46.498">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:46.498">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:46.251" status="PASS" endtime="20170817 21:22:46.498"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:46.499">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:46.499" status="PASS" endtime="20170817 21:22:46.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:46.500">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:46.499" status="PASS" endtime="20170817 21:22:46.500"></status>
</kw>
<status starttime="20170817 21:22:46.247" status="PASS" endtime="20170817 21:22:46.500"></status>
</kw>
<status starttime="20170817 21:22:46.247" status="PASS" endtime="20170817 21:22:46.500"></status>
</kw>
<status starttime="20170817 21:22:46.246" status="PASS" endtime="20170817 21:22:46.500"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.501">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:22:46.500" status="PASS" endtime="20170817 21:22:46.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.503">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:46.502" status="PASS" endtime="20170817 21:22:46.503"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:46.504">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:46.503" status="PASS" endtime="20170817 21:22:46.504"></status>
</kw>
<status starttime="20170817 21:22:46.503" status="PASS" endtime="20170817 21:22:46.504"></status>
</kw>
<status starttime="20170817 21:22:46.501" status="PASS" endtime="20170817 21:22:46.504"></status>
</kw>
<status starttime="20170817 21:22:46.501" status="PASS" endtime="20170817 21:22:46.504"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.567">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:46.567">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:46.504" status="PASS" endtime="20170817 21:22:46.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.569">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:46.568" status="PASS" endtime="20170817 21:22:46.569"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:46.570">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:46.569" status="PASS" endtime="20170817 21:22:46.570"></status>
</kw>
<status starttime="20170817 21:22:46.569" status="PASS" endtime="20170817 21:22:46.570"></status>
</kw>
<status starttime="20170817 21:22:46.568" status="PASS" endtime="20170817 21:22:46.570"></status>
</kw>
<status starttime="20170817 21:22:46.567" status="PASS" endtime="20170817 21:22:46.570"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:46.571">Delete All Sessions</msg>
<status starttime="20170817 21:22:46.571" status="PASS" endtime="20170817 21:22:46.571"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:46.571">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:46.245" status="PASS" endtime="20170817 21:22:46.571"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:46.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:46.571" status="PASS" endtime="20170817 21:22:46.572"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.572">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:46.572">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:46.572">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:46.572" status="PASS" endtime="20170817 21:22:46.573"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:46.573">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:22:46.245" status="PASS" endtime="20170817 21:22:46.573"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:46.573">${power_state} = On</msg>
<status starttime="20170817 21:22:46.244" status="PASS" endtime="20170817 21:22:46.573"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:22:46.573" status="PASS" endtime="20170817 21:22:46.574"></status>
</kw>
<status starttime="20170817 21:22:46.244" status="PASS" endtime="20170817 21:22:46.574"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:46.577">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:22:46.577" status="PASS" endtime="20170817 21:22:46.578"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.578">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:22:46.578" status="PASS" endtime="20170817 21:22:46.578"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.579">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:22:46.578" status="PASS" endtime="20170817 21:22:46.579"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.579">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:22:46.579" status="PASS" endtime="20170817 21:22:46.579"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:46.799">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:22:46.580" status="PASS" endtime="20170817 21:22:46.799"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:46.799">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:46.799">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:46.580" status="PASS" endtime="20170817 21:22:46.799"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:46.800">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:46.799" status="PASS" endtime="20170817 21:22:46.800"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:46.800">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:46.800" status="PASS" endtime="20170817 21:22:46.801"></status>
</kw>
<status starttime="20170817 21:22:46.576" status="PASS" endtime="20170817 21:22:46.801"></status>
</kw>
<status starttime="20170817 21:22:46.576" status="PASS" endtime="20170817 21:22:46.801"></status>
</kw>
<status starttime="20170817 21:22:46.575" status="PASS" endtime="20170817 21:22:46.801"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.801">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:22:46.801" status="PASS" endtime="20170817 21:22:46.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.806">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:46.803" status="PASS" endtime="20170817 21:22:46.807"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:46.807">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:46.807" status="PASS" endtime="20170817 21:22:46.808"></status>
</kw>
<status starttime="20170817 21:22:46.807" status="PASS" endtime="20170817 21:22:46.808"></status>
</kw>
<status starttime="20170817 21:22:46.802" status="PASS" endtime="20170817 21:22:46.808"></status>
</kw>
<status starttime="20170817 21:22:46.802" status="PASS" endtime="20170817 21:22:46.808"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.915">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:46.915">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:46.808" status="PASS" endtime="20170817 21:22:46.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.916">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:46.916" status="PASS" endtime="20170817 21:22:46.916"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:46.917">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:46.917" status="PASS" endtime="20170817 21:22:46.917"></status>
</kw>
<status starttime="20170817 21:22:46.917" status="PASS" endtime="20170817 21:22:46.918"></status>
</kw>
<status starttime="20170817 21:22:46.915" status="PASS" endtime="20170817 21:22:46.918"></status>
</kw>
<status starttime="20170817 21:22:46.915" status="PASS" endtime="20170817 21:22:46.918"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:46.918">Delete All Sessions</msg>
<status starttime="20170817 21:22:46.918" status="PASS" endtime="20170817 21:22:46.918"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:46.918">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:46.575" status="PASS" endtime="20170817 21:22:46.918"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:46.919">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:46.919" status="PASS" endtime="20170817 21:22:46.919"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.920">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:46.920">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:46.920">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:46.920" status="PASS" endtime="20170817 21:22:46.920"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:46.920">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 21:22:46.574" status="PASS" endtime="20170817 21:22:46.920"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:46.921">${host_state} = Running</msg>
<status starttime="20170817 21:22:46.574" status="PASS" endtime="20170817 21:22:46.921"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:22:46.921" status="PASS" endtime="20170817 21:22:46.921"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:46.926">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:22:46.926" status="PASS" endtime="20170817 21:22:46.927"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.927">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:22:46.927" status="PASS" endtime="20170817 21:22:46.927"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.928">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:22:46.928" status="PASS" endtime="20170817 21:22:46.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:46.929">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:22:46.928" status="PASS" endtime="20170817 21:22:46.929"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:47.119">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:22:46.929" status="PASS" endtime="20170817 21:22:47.119"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:47.119">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:47.119">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:46.929" status="PASS" endtime="20170817 21:22:47.119"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:47.120">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:47.119" status="PASS" endtime="20170817 21:22:47.120"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:47.120">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:47.120" status="PASS" endtime="20170817 21:22:47.121"></status>
</kw>
<status starttime="20170817 21:22:46.925" status="PASS" endtime="20170817 21:22:47.121"></status>
</kw>
<status starttime="20170817 21:22:46.925" status="PASS" endtime="20170817 21:22:47.121"></status>
</kw>
<status starttime="20170817 21:22:46.924" status="PASS" endtime="20170817 21:22:47.121"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:47.121">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 21:22:47.121" status="PASS" endtime="20170817 21:22:47.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:47.124">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:22:47.123" status="PASS" endtime="20170817 21:22:47.124"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:47.125">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:22:47.124" status="PASS" endtime="20170817 21:22:47.125"></status>
</kw>
<status starttime="20170817 21:22:47.124" status="PASS" endtime="20170817 21:22:47.125"></status>
</kw>
<status starttime="20170817 21:22:47.122" status="PASS" endtime="20170817 21:22:47.125"></status>
</kw>
<status starttime="20170817 21:22:47.122" status="PASS" endtime="20170817 21:22:47.125"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:47.200">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:47.200">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:47.125" status="PASS" endtime="20170817 21:22:47.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:47.202">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:47.202" status="PASS" endtime="20170817 21:22:47.202"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:47.203">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:47.203" status="PASS" endtime="20170817 21:22:47.203"></status>
</kw>
<status starttime="20170817 21:22:47.202" status="PASS" endtime="20170817 21:22:47.203"></status>
</kw>
<status starttime="20170817 21:22:47.201" status="PASS" endtime="20170817 21:22:47.203"></status>
</kw>
<status starttime="20170817 21:22:47.201" status="PASS" endtime="20170817 21:22:47.203"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:47.204">Delete All Sessions</msg>
<status starttime="20170817 21:22:47.204" status="PASS" endtime="20170817 21:22:47.204"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:47.204">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:46.923" status="PASS" endtime="20170817 21:22:47.204"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:47.205">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:47.204" status="PASS" endtime="20170817 21:22:47.205"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:47.205">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:47.205">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:47.206">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:47.205" status="PASS" endtime="20170817 21:22:47.206"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:47.206">${state} = Off</msg>
<status starttime="20170817 21:22:46.923" status="PASS" endtime="20170817 21:22:47.206"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:47.206">${boot_progress} = Off</msg>
<status starttime="20170817 21:22:46.922" status="PASS" endtime="20170817 21:22:47.206"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:22:47.207">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 21:22:47.206" status="FAIL" endtime="20170817 21:22:47.207"></status>
</kw>
<status starttime="20170817 21:22:46.922" status="FAIL" endtime="20170817 21:22:47.207"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:47.207">${status} = False</msg>
<status starttime="20170817 21:22:46.922" status="PASS" endtime="20170817 21:22:47.207"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 21:22:47.207" status="PASS" endtime="20170817 21:22:47.208"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:47.212">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:22:47.211" status="PASS" endtime="20170817 21:22:47.212"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:47.213">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:22:47.212" status="PASS" endtime="20170817 21:22:47.213"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:47.213">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:22:47.213" status="PASS" endtime="20170817 21:22:47.213"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:47.214">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:22:47.213" status="PASS" endtime="20170817 21:22:47.214"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:47.486">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:22:47.215" status="PASS" endtime="20170817 21:22:47.486"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:47.486">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:47.486">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:47.214" status="PASS" endtime="20170817 21:22:47.486"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:47.487">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:47.486" status="PASS" endtime="20170817 21:22:47.487"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:47.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:47.487" status="PASS" endtime="20170817 21:22:47.488"></status>
</kw>
<status starttime="20170817 21:22:47.211" status="PASS" endtime="20170817 21:22:47.488"></status>
</kw>
<status starttime="20170817 21:22:47.210" status="PASS" endtime="20170817 21:22:47.488"></status>
</kw>
<status starttime="20170817 21:22:47.209" status="PASS" endtime="20170817 21:22:47.488"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:47.488">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 21:22:47.488" status="PASS" endtime="20170817 21:22:47.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:47.490">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:22:47.490" status="PASS" endtime="20170817 21:22:47.491"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:47.491">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:22:47.491" status="PASS" endtime="20170817 21:22:47.491"></status>
</kw>
<status starttime="20170817 21:22:47.491" status="PASS" endtime="20170817 21:22:47.492"></status>
</kw>
<status starttime="20170817 21:22:47.489" status="PASS" endtime="20170817 21:22:47.492"></status>
</kw>
<status starttime="20170817 21:22:47.489" status="PASS" endtime="20170817 21:22:47.492"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:47.613">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:47.613">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:47.492" status="PASS" endtime="20170817 21:22:47.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:47.615">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:47.614" status="PASS" endtime="20170817 21:22:47.615"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:47.616">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:47.616" status="PASS" endtime="20170817 21:22:47.616"></status>
</kw>
<status starttime="20170817 21:22:47.615" status="PASS" endtime="20170817 21:22:47.616"></status>
</kw>
<status starttime="20170817 21:22:47.614" status="PASS" endtime="20170817 21:22:47.616"></status>
</kw>
<status starttime="20170817 21:22:47.613" status="PASS" endtime="20170817 21:22:47.616"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:47.617">Delete All Sessions</msg>
<status starttime="20170817 21:22:47.616" status="PASS" endtime="20170817 21:22:47.617"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:47.617">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:47.209" status="PASS" endtime="20170817 21:22:47.617"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:47.618">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:47.617" status="PASS" endtime="20170817 21:22:47.618"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:47.618">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:47.618">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:47.618">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:47.618" status="PASS" endtime="20170817 21:22:47.618"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:47.619">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:22:47.208" status="PASS" endtime="20170817 21:22:47.619"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:47.619">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:22:47.208" status="PASS" endtime="20170817 21:22:47.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:47.619">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:22:47.620">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:22:47.619" status="FAIL" endtime="20170817 21:22:47.620"></status>
</kw>
<status starttime="20170817 21:22:46.921" status="FAIL" endtime="20170817 21:22:47.620"></status>
</kw>
<status starttime="20170817 21:22:46.244" status="FAIL" endtime="20170817 21:22:47.620"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:57.625">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:22:57.625" status="PASS" endtime="20170817 21:22:57.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:57.626">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:22:57.626" status="PASS" endtime="20170817 21:22:57.626"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:57.626">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:22:57.626" status="PASS" endtime="20170817 21:22:57.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:57.627">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:22:57.627" status="PASS" endtime="20170817 21:22:57.627"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:57.830">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:22:57.628" status="PASS" endtime="20170817 21:22:57.830"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:57.830">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:57.830">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:57.627" status="PASS" endtime="20170817 21:22:57.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:57.831">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:57.831" status="PASS" endtime="20170817 21:22:57.831"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:57.832">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:57.831" status="PASS" endtime="20170817 21:22:57.832"></status>
</kw>
<status starttime="20170817 21:22:57.624" status="PASS" endtime="20170817 21:22:57.832"></status>
</kw>
<status starttime="20170817 21:22:57.624" status="PASS" endtime="20170817 21:22:57.832"></status>
</kw>
<status starttime="20170817 21:22:57.623" status="PASS" endtime="20170817 21:22:57.832"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:57.833">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:22:57.832" status="PASS" endtime="20170817 21:22:57.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:57.835">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:57.834" status="PASS" endtime="20170817 21:22:57.835"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:57.836">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:57.836" status="PASS" endtime="20170817 21:22:57.836"></status>
</kw>
<status starttime="20170817 21:22:57.835" status="PASS" endtime="20170817 21:22:57.836"></status>
</kw>
<status starttime="20170817 21:22:57.834" status="PASS" endtime="20170817 21:22:57.836"></status>
</kw>
<status starttime="20170817 21:22:57.833" status="PASS" endtime="20170817 21:22:57.836"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:57.899">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:57.899">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:57.836" status="PASS" endtime="20170817 21:22:57.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:57.901">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:57.901" status="PASS" endtime="20170817 21:22:57.901"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:57.902">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:57.902" status="PASS" endtime="20170817 21:22:57.902"></status>
</kw>
<status starttime="20170817 21:22:57.901" status="PASS" endtime="20170817 21:22:57.902"></status>
</kw>
<status starttime="20170817 21:22:57.900" status="PASS" endtime="20170817 21:22:57.902"></status>
</kw>
<status starttime="20170817 21:22:57.900" status="PASS" endtime="20170817 21:22:57.902"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:57.903">Delete All Sessions</msg>
<status starttime="20170817 21:22:57.903" status="PASS" endtime="20170817 21:22:57.903"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:57.903">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:57.622" status="PASS" endtime="20170817 21:22:57.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:57.904">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:57.903" status="PASS" endtime="20170817 21:22:57.904"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:57.904">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:57.904">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:57.905">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:57.904" status="PASS" endtime="20170817 21:22:57.905"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:57.905">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:22:57.622" status="PASS" endtime="20170817 21:22:57.905"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:57.905">${power_state} = On</msg>
<status starttime="20170817 21:22:57.621" status="PASS" endtime="20170817 21:22:57.905"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:22:57.905" status="PASS" endtime="20170817 21:22:57.906"></status>
</kw>
<status starttime="20170817 21:22:57.621" status="PASS" endtime="20170817 21:22:57.906"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:57.909">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:22:57.909" status="PASS" endtime="20170817 21:22:57.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:57.911">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:22:57.910" status="PASS" endtime="20170817 21:22:57.911"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:57.911">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:22:57.911" status="PASS" endtime="20170817 21:22:57.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:57.912">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:22:57.912" status="PASS" endtime="20170817 21:22:57.912"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.180">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:22:57.913" status="PASS" endtime="20170817 21:22:58.181"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:58.181">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:58.181">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:57.912" status="PASS" endtime="20170817 21:22:58.181"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.181">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:58.181" status="PASS" endtime="20170817 21:22:58.181"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.182">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:58.182" status="PASS" endtime="20170817 21:22:58.182"></status>
</kw>
<status starttime="20170817 21:22:57.909" status="PASS" endtime="20170817 21:22:58.182"></status>
</kw>
<status starttime="20170817 21:22:57.908" status="PASS" endtime="20170817 21:22:58.182"></status>
</kw>
<status starttime="20170817 21:22:57.908" status="PASS" endtime="20170817 21:22:58.182"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.183">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:22:58.183" status="PASS" endtime="20170817 21:22:58.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.186">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:58.185" status="PASS" endtime="20170817 21:22:58.186"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.187">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:22:58.187" status="PASS" endtime="20170817 21:22:58.187"></status>
</kw>
<status starttime="20170817 21:22:58.186" status="PASS" endtime="20170817 21:22:58.187"></status>
</kw>
<status starttime="20170817 21:22:58.184" status="PASS" endtime="20170817 21:22:58.187"></status>
</kw>
<status starttime="20170817 21:22:58.183" status="PASS" endtime="20170817 21:22:58.187"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.359">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:58.360">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:58.188" status="PASS" endtime="20170817 21:22:58.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.361">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:58.361" status="PASS" endtime="20170817 21:22:58.361"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.362">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:58.362" status="PASS" endtime="20170817 21:22:58.363"></status>
</kw>
<status starttime="20170817 21:22:58.362" status="PASS" endtime="20170817 21:22:58.363"></status>
</kw>
<status starttime="20170817 21:22:58.360" status="PASS" endtime="20170817 21:22:58.363"></status>
</kw>
<status starttime="20170817 21:22:58.360" status="PASS" endtime="20170817 21:22:58.363"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:58.363">Delete All Sessions</msg>
<status starttime="20170817 21:22:58.363" status="PASS" endtime="20170817 21:22:58.363"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:58.364">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:57.907" status="PASS" endtime="20170817 21:22:58.364"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.364">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:58.364" status="PASS" endtime="20170817 21:22:58.364"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.365">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:58.365">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:58.365">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:58.365" status="PASS" endtime="20170817 21:22:58.365"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:58.365">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 21:22:57.906" status="PASS" endtime="20170817 21:22:58.365"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:58.366">${host_state} = Running</msg>
<status starttime="20170817 21:22:57.906" status="PASS" endtime="20170817 21:22:58.366"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:22:58.366" status="PASS" endtime="20170817 21:22:58.366"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.373">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:22:58.372" status="PASS" endtime="20170817 21:22:58.373"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.374">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:22:58.373" status="PASS" endtime="20170817 21:22:58.374"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.375">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:22:58.374" status="PASS" endtime="20170817 21:22:58.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.376">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:22:58.375" status="PASS" endtime="20170817 21:22:58.376"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.611">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:22:58.377" status="PASS" endtime="20170817 21:22:58.611"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:58.612">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:58.612">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:58.376" status="PASS" endtime="20170817 21:22:58.612"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.612">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:58.612" status="PASS" endtime="20170817 21:22:58.612"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.613">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:58.613" status="PASS" endtime="20170817 21:22:58.613"></status>
</kw>
<status starttime="20170817 21:22:58.371" status="PASS" endtime="20170817 21:22:58.613"></status>
</kw>
<status starttime="20170817 21:22:58.371" status="PASS" endtime="20170817 21:22:58.613"></status>
</kw>
<status starttime="20170817 21:22:58.370" status="PASS" endtime="20170817 21:22:58.613"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.614">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 21:22:58.614" status="PASS" endtime="20170817 21:22:58.614"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.616">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:22:58.615" status="PASS" endtime="20170817 21:22:58.616"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.617">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:22:58.617" status="PASS" endtime="20170817 21:22:58.617"></status>
</kw>
<status starttime="20170817 21:22:58.617" status="PASS" endtime="20170817 21:22:58.618"></status>
</kw>
<status starttime="20170817 21:22:58.615" status="PASS" endtime="20170817 21:22:58.618"></status>
</kw>
<status starttime="20170817 21:22:58.614" status="PASS" endtime="20170817 21:22:58.618"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.699">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:58.699">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:58.618" status="PASS" endtime="20170817 21:22:58.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.701">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:58.700" status="PASS" endtime="20170817 21:22:58.701"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.701">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:58.701" status="PASS" endtime="20170817 21:22:58.702"></status>
</kw>
<status starttime="20170817 21:22:58.701" status="PASS" endtime="20170817 21:22:58.702"></status>
</kw>
<status starttime="20170817 21:22:58.700" status="PASS" endtime="20170817 21:22:58.702"></status>
</kw>
<status starttime="20170817 21:22:58.699" status="PASS" endtime="20170817 21:22:58.702"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:58.702">Delete All Sessions</msg>
<status starttime="20170817 21:22:58.702" status="PASS" endtime="20170817 21:22:58.703"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:58.703">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:58.369" status="PASS" endtime="20170817 21:22:58.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.703">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:58.703" status="PASS" endtime="20170817 21:22:58.704"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.704">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:58.704">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:58.704">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:58.704" status="PASS" endtime="20170817 21:22:58.704"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:58.704">${state} = Off</msg>
<status starttime="20170817 21:22:58.368" status="PASS" endtime="20170817 21:22:58.705"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:58.705">${boot_progress} = Off</msg>
<status starttime="20170817 21:22:58.367" status="PASS" endtime="20170817 21:22:58.705"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:22:58.706">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 21:22:58.705" status="FAIL" endtime="20170817 21:22:58.706"></status>
</kw>
<status starttime="20170817 21:22:58.367" status="FAIL" endtime="20170817 21:22:58.706"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:58.706">${status} = False</msg>
<status starttime="20170817 21:22:58.367" status="PASS" endtime="20170817 21:22:58.706"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 21:22:58.706" status="PASS" endtime="20170817 21:22:58.706"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.710">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:22:58.710" status="PASS" endtime="20170817 21:22:58.710"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.711">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:22:58.711" status="PASS" endtime="20170817 21:22:58.711"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.712">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:22:58.711" status="PASS" endtime="20170817 21:22:58.712"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.712">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:22:58.712" status="PASS" endtime="20170817 21:22:58.712"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.914">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:22:58.713" status="PASS" endtime="20170817 21:22:58.914"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:58.915">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:22:58.915">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:58.712" status="PASS" endtime="20170817 21:22:58.915"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.915">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:58.915" status="PASS" endtime="20170817 21:22:58.915"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.916">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:58.916" status="PASS" endtime="20170817 21:22:58.916"></status>
</kw>
<status starttime="20170817 21:22:58.709" status="PASS" endtime="20170817 21:22:58.916"></status>
</kw>
<status starttime="20170817 21:22:58.709" status="PASS" endtime="20170817 21:22:58.916"></status>
</kw>
<status starttime="20170817 21:22:58.708" status="PASS" endtime="20170817 21:22:58.916"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.917">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 21:22:58.917" status="PASS" endtime="20170817 21:22:58.917"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:58.919">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:22:58.918" status="PASS" endtime="20170817 21:22:58.919"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:58.920">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:22:58.920" status="PASS" endtime="20170817 21:22:58.920"></status>
</kw>
<status starttime="20170817 21:22:58.919" status="PASS" endtime="20170817 21:22:58.920"></status>
</kw>
<status starttime="20170817 21:22:58.918" status="PASS" endtime="20170817 21:22:58.920"></status>
</kw>
<status starttime="20170817 21:22:58.917" status="PASS" endtime="20170817 21:22:58.920"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:59.037">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:22:59.037">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:58.921" status="PASS" endtime="20170817 21:22:59.037"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:59.039">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:59.038" status="PASS" endtime="20170817 21:22:59.039"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:59.040">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:22:59.040" status="PASS" endtime="20170817 21:22:59.040"></status>
</kw>
<status starttime="20170817 21:22:59.039" status="PASS" endtime="20170817 21:22:59.040"></status>
</kw>
<status starttime="20170817 21:22:59.038" status="PASS" endtime="20170817 21:22:59.040"></status>
</kw>
<status starttime="20170817 21:22:59.037" status="PASS" endtime="20170817 21:22:59.040"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:22:59.041">Delete All Sessions</msg>
<status starttime="20170817 21:22:59.040" status="PASS" endtime="20170817 21:22:59.041"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:59.041">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:22:58.708" status="PASS" endtime="20170817 21:22:59.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:59.041">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:22:59.041" status="PASS" endtime="20170817 21:22:59.042"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:22:59.042">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:22:59.042">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:22:59.042">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:22:59.042" status="PASS" endtime="20170817 21:22:59.042"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:59.043">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:22:58.707" status="PASS" endtime="20170817 21:22:59.043"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:22:59.043">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:22:58.707" status="PASS" endtime="20170817 21:22:59.043"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:22:59.043">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:22:59.044">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:22:59.043" status="FAIL" endtime="20170817 21:22:59.044"></status>
</kw>
<status starttime="20170817 21:22:58.366" status="FAIL" endtime="20170817 21:22:59.044"></status>
</kw>
<status starttime="20170817 21:22:57.620" status="FAIL" endtime="20170817 21:22:59.044"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:09.049">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:23:09.049" status="PASS" endtime="20170817 21:23:09.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:09.050">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:23:09.050" status="PASS" endtime="20170817 21:23:09.050"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:09.051">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:23:09.050" status="PASS" endtime="20170817 21:23:09.051"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:09.051">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:23:09.051" status="PASS" endtime="20170817 21:23:09.051"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:09.594">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:23:09.052" status="PASS" endtime="20170817 21:23:09.594"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:09.594">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:23:09.594">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:09.052" status="PASS" endtime="20170817 21:23:09.594"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:09.595">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:09.594" status="PASS" endtime="20170817 21:23:09.595"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:09.595">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:09.595" status="PASS" endtime="20170817 21:23:09.595"></status>
</kw>
<status starttime="20170817 21:23:09.048" status="PASS" endtime="20170817 21:23:09.595"></status>
</kw>
<status starttime="20170817 21:23:09.047" status="PASS" endtime="20170817 21:23:09.595"></status>
</kw>
<status starttime="20170817 21:23:09.047" status="PASS" endtime="20170817 21:23:09.596"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:09.596">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:23:09.596" status="PASS" endtime="20170817 21:23:09.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:09.598">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:23:09.598" status="PASS" endtime="20170817 21:23:09.598"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:09.599">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:23:09.599" status="PASS" endtime="20170817 21:23:09.599"></status>
</kw>
<status starttime="20170817 21:23:09.598" status="PASS" endtime="20170817 21:23:09.599"></status>
</kw>
<status starttime="20170817 21:23:09.597" status="PASS" endtime="20170817 21:23:09.599"></status>
</kw>
<status starttime="20170817 21:23:09.596" status="PASS" endtime="20170817 21:23:09.600"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:10.352">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:23:10.352">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:09.600" status="PASS" endtime="20170817 21:23:10.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:10.354">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:10.353" status="PASS" endtime="20170817 21:23:10.354"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:10.355">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:10.355" status="PASS" endtime="20170817 21:23:10.355"></status>
</kw>
<status starttime="20170817 21:23:10.354" status="PASS" endtime="20170817 21:23:10.355"></status>
</kw>
<status starttime="20170817 21:23:10.353" status="PASS" endtime="20170817 21:23:10.355"></status>
</kw>
<status starttime="20170817 21:23:10.352" status="PASS" endtime="20170817 21:23:10.356"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:23:10.356">Delete All Sessions</msg>
<status starttime="20170817 21:23:10.356" status="PASS" endtime="20170817 21:23:10.356"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:10.356">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:09.046" status="PASS" endtime="20170817 21:23:10.356"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:10.357">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:10.357" status="PASS" endtime="20170817 21:23:10.357"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:10.357">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:23:10.358">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:23:10.358">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:23:10.357" status="PASS" endtime="20170817 21:23:10.358"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:10.358">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:23:09.046" status="PASS" endtime="20170817 21:23:10.358"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:10.358">${power_state} = On</msg>
<status starttime="20170817 21:23:09.045" status="PASS" endtime="20170817 21:23:10.358"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:23:10.359" status="PASS" endtime="20170817 21:23:10.359"></status>
</kw>
<status starttime="20170817 21:23:09.045" status="PASS" endtime="20170817 21:23:10.359"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:10.363">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:23:10.362" status="PASS" endtime="20170817 21:23:10.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:10.364">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:23:10.363" status="PASS" endtime="20170817 21:23:10.364"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:10.364">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:23:10.364" status="PASS" endtime="20170817 21:23:10.364"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:10.365">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:23:10.365" status="PASS" endtime="20170817 21:23:10.365"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:10.730">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:23:10.366" status="PASS" endtime="20170817 21:23:10.731"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:10.731">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:23:10.731">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:10.365" status="PASS" endtime="20170817 21:23:10.731"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:10.731">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:10.731" status="PASS" endtime="20170817 21:23:10.731"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:10.732">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:10.732" status="PASS" endtime="20170817 21:23:10.732"></status>
</kw>
<status starttime="20170817 21:23:10.362" status="PASS" endtime="20170817 21:23:10.732"></status>
</kw>
<status starttime="20170817 21:23:10.361" status="PASS" endtime="20170817 21:23:10.732"></status>
</kw>
<status starttime="20170817 21:23:10.361" status="PASS" endtime="20170817 21:23:10.732"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:10.733">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:23:10.733" status="PASS" endtime="20170817 21:23:10.733"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:10.736">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:23:10.735" status="PASS" endtime="20170817 21:23:10.736"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:10.737">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:23:10.736" status="PASS" endtime="20170817 21:23:10.737"></status>
</kw>
<status starttime="20170817 21:23:10.736" status="PASS" endtime="20170817 21:23:10.737"></status>
</kw>
<status starttime="20170817 21:23:10.734" status="PASS" endtime="20170817 21:23:10.737"></status>
</kw>
<status starttime="20170817 21:23:10.734" status="PASS" endtime="20170817 21:23:10.737"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:11.247">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:23:11.247">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:10.737" status="PASS" endtime="20170817 21:23:11.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:11.249">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:11.249" status="PASS" endtime="20170817 21:23:11.249"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:11.250">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:11.250" status="PASS" endtime="20170817 21:23:11.250"></status>
</kw>
<status starttime="20170817 21:23:11.249" status="PASS" endtime="20170817 21:23:11.250"></status>
</kw>
<status starttime="20170817 21:23:11.248" status="PASS" endtime="20170817 21:23:11.250"></status>
</kw>
<status starttime="20170817 21:23:11.248" status="PASS" endtime="20170817 21:23:11.250"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:23:11.251">Delete All Sessions</msg>
<status starttime="20170817 21:23:11.251" status="PASS" endtime="20170817 21:23:11.251"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:11.251">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:10.360" status="PASS" endtime="20170817 21:23:11.251"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:11.252">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:11.251" status="PASS" endtime="20170817 21:23:11.252"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:11.252">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:23:11.252">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:23:11.252">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:23:11.252" status="PASS" endtime="20170817 21:23:11.252"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:11.253">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 21:23:10.359" status="PASS" endtime="20170817 21:23:11.253"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:11.253">${host_state} = Running</msg>
<status starttime="20170817 21:23:10.359" status="PASS" endtime="20170817 21:23:11.253"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:23:11.253" status="PASS" endtime="20170817 21:23:11.254"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:11.258">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:23:11.258" status="PASS" endtime="20170817 21:23:11.261"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:11.262">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:23:11.262" status="PASS" endtime="20170817 21:23:11.262"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:11.263">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:23:11.262" status="PASS" endtime="20170817 21:23:11.263"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:11.263">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:23:11.263" status="PASS" endtime="20170817 21:23:11.263"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:11.657">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:23:11.264" status="PASS" endtime="20170817 21:23:11.657"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:11.657">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:23:11.657">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:11.264" status="PASS" endtime="20170817 21:23:11.657"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:11.658">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:11.657" status="PASS" endtime="20170817 21:23:11.658"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:11.658">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:11.658" status="PASS" endtime="20170817 21:23:11.659"></status>
</kw>
<status starttime="20170817 21:23:11.257" status="PASS" endtime="20170817 21:23:11.659"></status>
</kw>
<status starttime="20170817 21:23:11.257" status="PASS" endtime="20170817 21:23:11.659"></status>
</kw>
<status starttime="20170817 21:23:11.256" status="PASS" endtime="20170817 21:23:11.659"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:11.659">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 21:23:11.659" status="PASS" endtime="20170817 21:23:11.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:11.661">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:23:11.661" status="PASS" endtime="20170817 21:23:11.662"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:11.662">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:23:11.662" status="PASS" endtime="20170817 21:23:11.663"></status>
</kw>
<status starttime="20170817 21:23:11.662" status="PASS" endtime="20170817 21:23:11.663"></status>
</kw>
<status starttime="20170817 21:23:11.660" status="PASS" endtime="20170817 21:23:11.663"></status>
</kw>
<status starttime="20170817 21:23:11.660" status="PASS" endtime="20170817 21:23:11.663"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:11.746">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:23:11.746">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:11.663" status="PASS" endtime="20170817 21:23:11.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:11.748">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:11.747" status="PASS" endtime="20170817 21:23:11.748"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:11.749">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:11.749" status="PASS" endtime="20170817 21:23:11.749"></status>
</kw>
<status starttime="20170817 21:23:11.748" status="PASS" endtime="20170817 21:23:11.749"></status>
</kw>
<status starttime="20170817 21:23:11.747" status="PASS" endtime="20170817 21:23:11.749"></status>
</kw>
<status starttime="20170817 21:23:11.746" status="PASS" endtime="20170817 21:23:11.749"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:23:11.750">Delete All Sessions</msg>
<status starttime="20170817 21:23:11.749" status="PASS" endtime="20170817 21:23:11.750"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:11.750">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:11.256" status="PASS" endtime="20170817 21:23:11.750"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:11.751">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:11.750" status="PASS" endtime="20170817 21:23:11.751"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:11.751">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:23:11.751">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:23:11.751">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:23:11.751" status="PASS" endtime="20170817 21:23:11.751"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:11.752">${state} = Off</msg>
<status starttime="20170817 21:23:11.255" status="PASS" endtime="20170817 21:23:11.752"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:11.752">${boot_progress} = Off</msg>
<status starttime="20170817 21:23:11.255" status="PASS" endtime="20170817 21:23:11.752"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:23:11.752">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 21:23:11.752" status="FAIL" endtime="20170817 21:23:11.753"></status>
</kw>
<status starttime="20170817 21:23:11.254" status="FAIL" endtime="20170817 21:23:11.753"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:11.753">${status} = False</msg>
<status starttime="20170817 21:23:11.254" status="PASS" endtime="20170817 21:23:11.753"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 21:23:11.753" status="PASS" endtime="20170817 21:23:11.753"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:11.757">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:23:11.757" status="PASS" endtime="20170817 21:23:11.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:11.758">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:23:11.758" status="PASS" endtime="20170817 21:23:11.758"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:11.759">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:23:11.759" status="PASS" endtime="20170817 21:23:11.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:11.760">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:23:11.759" status="PASS" endtime="20170817 21:23:11.760"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:11.969">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:23:11.760" status="PASS" endtime="20170817 21:23:11.970"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:11.970">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:23:11.970">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:11.760" status="PASS" endtime="20170817 21:23:11.970"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:11.970">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:11.970" status="PASS" endtime="20170817 21:23:11.971"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:11.971">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:11.971" status="PASS" endtime="20170817 21:23:11.971"></status>
</kw>
<status starttime="20170817 21:23:11.757" status="PASS" endtime="20170817 21:23:11.971"></status>
</kw>
<status starttime="20170817 21:23:11.756" status="PASS" endtime="20170817 21:23:11.971"></status>
</kw>
<status starttime="20170817 21:23:11.755" status="PASS" endtime="20170817 21:23:11.972"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:11.972">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 21:23:11.972" status="PASS" endtime="20170817 21:23:11.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:11.974">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:23:11.974" status="PASS" endtime="20170817 21:23:11.974"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:11.975">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:23:11.975" status="PASS" endtime="20170817 21:23:11.975"></status>
</kw>
<status starttime="20170817 21:23:11.974" status="PASS" endtime="20170817 21:23:11.975"></status>
</kw>
<status starttime="20170817 21:23:11.973" status="PASS" endtime="20170817 21:23:11.976"></status>
</kw>
<status starttime="20170817 21:23:11.972" status="PASS" endtime="20170817 21:23:11.976"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:12.109">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:23:12.109">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:11.976" status="PASS" endtime="20170817 21:23:12.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:12.111">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:12.111" status="PASS" endtime="20170817 21:23:12.111"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:12.112">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:12.112" status="PASS" endtime="20170817 21:23:12.112"></status>
</kw>
<status starttime="20170817 21:23:12.112" status="PASS" endtime="20170817 21:23:12.113"></status>
</kw>
<status starttime="20170817 21:23:12.110" status="PASS" endtime="20170817 21:23:12.113"></status>
</kw>
<status starttime="20170817 21:23:12.110" status="PASS" endtime="20170817 21:23:12.113"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:23:12.113">Delete All Sessions</msg>
<status starttime="20170817 21:23:12.113" status="PASS" endtime="20170817 21:23:12.113"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:12.113">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:11.755" status="PASS" endtime="20170817 21:23:12.114"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:12.114">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:12.114" status="PASS" endtime="20170817 21:23:12.114"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:12.115">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:23:12.115">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:23:12.115">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:23:12.114" status="PASS" endtime="20170817 21:23:12.115"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:12.115">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:23:11.754" status="PASS" endtime="20170817 21:23:12.115"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:12.115">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:23:11.754" status="PASS" endtime="20170817 21:23:12.115"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:12.116">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:23:12.116">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:23:12.116" status="FAIL" endtime="20170817 21:23:12.116"></status>
</kw>
<status starttime="20170817 21:23:11.254" status="FAIL" endtime="20170817 21:23:12.116"></status>
</kw>
<status starttime="20170817 21:23:09.044" status="FAIL" endtime="20170817 21:23:12.117"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:22.123">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:23:22.123" status="PASS" endtime="20170817 21:23:22.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:22.125">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:23:22.124" status="PASS" endtime="20170817 21:23:22.125"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:22.126">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:23:22.125" status="PASS" endtime="20170817 21:23:22.126"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:22.127">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:23:22.126" status="PASS" endtime="20170817 21:23:22.127"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:22.844">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:23:22.128" status="PASS" endtime="20170817 21:23:22.845"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:22.845">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:23:22.845">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:22.127" status="PASS" endtime="20170817 21:23:22.845"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:22.845">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:22.845" status="PASS" endtime="20170817 21:23:22.846"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:22.846">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:22.846" status="PASS" endtime="20170817 21:23:22.846"></status>
</kw>
<status starttime="20170817 21:23:22.122" status="PASS" endtime="20170817 21:23:22.846"></status>
</kw>
<status starttime="20170817 21:23:22.121" status="PASS" endtime="20170817 21:23:22.846"></status>
</kw>
<status starttime="20170817 21:23:22.121" status="PASS" endtime="20170817 21:23:22.847"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:22.847">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:23:22.847" status="PASS" endtime="20170817 21:23:22.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:22.849">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:23:22.848" status="PASS" endtime="20170817 21:23:22.849"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:22.850">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:23:22.850" status="PASS" endtime="20170817 21:23:22.850"></status>
</kw>
<status starttime="20170817 21:23:22.849" status="PASS" endtime="20170817 21:23:22.850"></status>
</kw>
<status starttime="20170817 21:23:22.848" status="PASS" endtime="20170817 21:23:22.851"></status>
</kw>
<status starttime="20170817 21:23:22.847" status="PASS" endtime="20170817 21:23:22.851"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:27.305">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:23:27.305">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:22.851" status="PASS" endtime="20170817 21:23:27.305"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:27.307">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:27.307" status="PASS" endtime="20170817 21:23:27.307"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:27.308">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:27.308" status="PASS" endtime="20170817 21:23:27.308"></status>
</kw>
<status starttime="20170817 21:23:27.307" status="PASS" endtime="20170817 21:23:27.308"></status>
</kw>
<status starttime="20170817 21:23:27.306" status="PASS" endtime="20170817 21:23:27.308"></status>
</kw>
<status starttime="20170817 21:23:27.306" status="PASS" endtime="20170817 21:23:27.308"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:23:27.309">Delete All Sessions</msg>
<status starttime="20170817 21:23:27.309" status="PASS" endtime="20170817 21:23:27.309"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:27.309">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:22.120" status="PASS" endtime="20170817 21:23:27.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:27.310">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:27.309" status="PASS" endtime="20170817 21:23:27.310"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:27.310">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:23:27.310">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:23:27.310">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:23:27.310" status="PASS" endtime="20170817 21:23:27.311"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:27.311">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170817 21:23:22.119" status="PASS" endtime="20170817 21:23:27.311"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:27.311">${power_state} = Off</msg>
<status starttime="20170817 21:23:22.118" status="PASS" endtime="20170817 21:23:27.311"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:23:27.312">On != Off</msg>
<status starttime="20170817 21:23:27.311" status="FAIL" endtime="20170817 21:23:27.312"></status>
</kw>
<status starttime="20170817 21:23:22.118" status="FAIL" endtime="20170817 21:23:27.312"></status>
</kw>
<status starttime="20170817 21:23:22.117" status="FAIL" endtime="20170817 21:23:27.312"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:37.318">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:23:37.317" status="PASS" endtime="20170817 21:23:37.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:37.319">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:23:37.318" status="PASS" endtime="20170817 21:23:37.319"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:37.319">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:23:37.319" status="PASS" endtime="20170817 21:23:37.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:37.320">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:23:37.320" status="PASS" endtime="20170817 21:23:37.320"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:37.738">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:23:37.321" status="PASS" endtime="20170817 21:23:37.738"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:37.738">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:23:37.739">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:37.320" status="PASS" endtime="20170817 21:23:37.739"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:37.739">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:37.739" status="PASS" endtime="20170817 21:23:37.739"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:37.740">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:37.739" status="PASS" endtime="20170817 21:23:37.740"></status>
</kw>
<status starttime="20170817 21:23:37.317" status="PASS" endtime="20170817 21:23:37.740"></status>
</kw>
<status starttime="20170817 21:23:37.316" status="PASS" endtime="20170817 21:23:37.740"></status>
</kw>
<status starttime="20170817 21:23:37.315" status="PASS" endtime="20170817 21:23:37.740"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:37.741">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:23:37.740" status="PASS" endtime="20170817 21:23:37.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:37.743">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:23:37.742" status="PASS" endtime="20170817 21:23:37.743"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:37.744">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:23:37.744" status="PASS" endtime="20170817 21:23:37.744"></status>
</kw>
<status starttime="20170817 21:23:37.743" status="PASS" endtime="20170817 21:23:37.744"></status>
</kw>
<status starttime="20170817 21:23:37.742" status="PASS" endtime="20170817 21:23:37.744"></status>
</kw>
<status starttime="20170817 21:23:37.741" status="PASS" endtime="20170817 21:23:37.744"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:38.175">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:23:38.175">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:37.745" status="PASS" endtime="20170817 21:23:38.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:38.177">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:38.176" status="PASS" endtime="20170817 21:23:38.177"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:38.178">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:38.177" status="PASS" endtime="20170817 21:23:38.178"></status>
</kw>
<status starttime="20170817 21:23:38.177" status="PASS" endtime="20170817 21:23:38.178"></status>
</kw>
<status starttime="20170817 21:23:38.176" status="PASS" endtime="20170817 21:23:38.178"></status>
</kw>
<status starttime="20170817 21:23:38.175" status="PASS" endtime="20170817 21:23:38.178"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:23:38.179">Delete All Sessions</msg>
<status starttime="20170817 21:23:38.179" status="PASS" endtime="20170817 21:23:38.179"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:38.179">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:37.315" status="PASS" endtime="20170817 21:23:38.179"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:38.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:38.179" status="PASS" endtime="20170817 21:23:38.180"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:38.180">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:23:38.180">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:23:38.181">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:23:38.180" status="PASS" endtime="20170817 21:23:38.181"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:38.181">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:23:37.314" status="PASS" endtime="20170817 21:23:38.181"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:38.181">${power_state} = On</msg>
<status starttime="20170817 21:23:37.314" status="PASS" endtime="20170817 21:23:38.181"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:23:38.181" status="PASS" endtime="20170817 21:23:38.182"></status>
</kw>
<status starttime="20170817 21:23:37.313" status="PASS" endtime="20170817 21:23:38.182"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:38.185">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:23:38.185" status="PASS" endtime="20170817 21:23:38.186"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:38.186">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:23:38.186" status="PASS" endtime="20170817 21:23:38.186"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:38.187">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:23:38.187" status="PASS" endtime="20170817 21:23:38.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:38.188">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:23:38.187" status="PASS" endtime="20170817 21:23:38.188"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:38.583">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:23:38.188" status="PASS" endtime="20170817 21:23:38.583"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:38.583">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:23:38.583">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:38.188" status="PASS" endtime="20170817 21:23:38.583"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:38.584">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:38.584" status="PASS" endtime="20170817 21:23:38.584"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:38.585">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:38.584" status="PASS" endtime="20170817 21:23:38.585"></status>
</kw>
<status starttime="20170817 21:23:38.185" status="PASS" endtime="20170817 21:23:38.585"></status>
</kw>
<status starttime="20170817 21:23:38.184" status="PASS" endtime="20170817 21:23:38.585"></status>
</kw>
<status starttime="20170817 21:23:38.183" status="PASS" endtime="20170817 21:23:38.585"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:38.586">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:23:38.585" status="PASS" endtime="20170817 21:23:38.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:38.588">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:23:38.587" status="PASS" endtime="20170817 21:23:38.588"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:38.589">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:23:38.589" status="PASS" endtime="20170817 21:23:38.589"></status>
</kw>
<status starttime="20170817 21:23:38.588" status="PASS" endtime="20170817 21:23:38.589"></status>
</kw>
<status starttime="20170817 21:23:38.586" status="PASS" endtime="20170817 21:23:38.589"></status>
</kw>
<status starttime="20170817 21:23:38.586" status="PASS" endtime="20170817 21:23:38.589"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:38.740">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:23:38.740">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:38.590" status="PASS" endtime="20170817 21:23:38.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:38.742">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:38.741" status="PASS" endtime="20170817 21:23:38.742"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:38.743">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:38.743" status="PASS" endtime="20170817 21:23:38.743"></status>
</kw>
<status starttime="20170817 21:23:38.742" status="PASS" endtime="20170817 21:23:38.743"></status>
</kw>
<status starttime="20170817 21:23:38.741" status="PASS" endtime="20170817 21:23:38.743"></status>
</kw>
<status starttime="20170817 21:23:38.740" status="PASS" endtime="20170817 21:23:38.743"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:23:38.744">Delete All Sessions</msg>
<status starttime="20170817 21:23:38.743" status="PASS" endtime="20170817 21:23:38.744"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:38.744">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:38.183" status="PASS" endtime="20170817 21:23:38.744"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:38.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:38.744" status="PASS" endtime="20170817 21:23:38.745"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:38.745">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:23:38.745">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:23:38.745">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:23:38.745" status="PASS" endtime="20170817 21:23:38.745"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:38.746">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 21:23:38.182" status="PASS" endtime="20170817 21:23:38.746"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:38.746">${host_state} = Running</msg>
<status starttime="20170817 21:23:38.182" status="PASS" endtime="20170817 21:23:38.746"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:23:38.746" status="PASS" endtime="20170817 21:23:38.747"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:38.752">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:23:38.751" status="PASS" endtime="20170817 21:23:38.753"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:38.753">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:23:38.753" status="PASS" endtime="20170817 21:23:38.753"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:38.754">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:23:38.753" status="PASS" endtime="20170817 21:23:38.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:38.754">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:23:38.754" status="PASS" endtime="20170817 21:23:38.755"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:38.967">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:23:38.755" status="PASS" endtime="20170817 21:23:38.967"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:38.967">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:23:38.967">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:38.755" status="PASS" endtime="20170817 21:23:38.967"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:38.968">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:38.967" status="PASS" endtime="20170817 21:23:38.968"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:38.968">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:38.968" status="PASS" endtime="20170817 21:23:38.968"></status>
</kw>
<status starttime="20170817 21:23:38.750" status="PASS" endtime="20170817 21:23:38.968"></status>
</kw>
<status starttime="20170817 21:23:38.750" status="PASS" endtime="20170817 21:23:38.969"></status>
</kw>
<status starttime="20170817 21:23:38.749" status="PASS" endtime="20170817 21:23:38.969"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:38.969">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 21:23:38.969" status="PASS" endtime="20170817 21:23:38.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:38.971">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:23:38.971" status="PASS" endtime="20170817 21:23:38.971"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:38.972">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:23:38.972" status="PASS" endtime="20170817 21:23:38.972"></status>
</kw>
<status starttime="20170817 21:23:38.971" status="PASS" endtime="20170817 21:23:38.972"></status>
</kw>
<status starttime="20170817 21:23:38.970" status="PASS" endtime="20170817 21:23:38.972"></status>
</kw>
<status starttime="20170817 21:23:38.970" status="PASS" endtime="20170817 21:23:38.973"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:39.049">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:23:39.049">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:38.973" status="PASS" endtime="20170817 21:23:39.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:39.051">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:39.050" status="PASS" endtime="20170817 21:23:39.051"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:39.052">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:39.051" status="PASS" endtime="20170817 21:23:39.052"></status>
</kw>
<status starttime="20170817 21:23:39.051" status="PASS" endtime="20170817 21:23:39.052"></status>
</kw>
<status starttime="20170817 21:23:39.050" status="PASS" endtime="20170817 21:23:39.052"></status>
</kw>
<status starttime="20170817 21:23:39.049" status="PASS" endtime="20170817 21:23:39.052"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:23:39.053">Delete All Sessions</msg>
<status starttime="20170817 21:23:39.052" status="PASS" endtime="20170817 21:23:39.053"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:39.053">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:38.749" status="PASS" endtime="20170817 21:23:39.053"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:39.054">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:39.053" status="PASS" endtime="20170817 21:23:39.054"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:39.055">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:23:39.055">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:23:39.055">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:23:39.054" status="PASS" endtime="20170817 21:23:39.055"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:39.055">${state} = Off</msg>
<status starttime="20170817 21:23:38.748" status="PASS" endtime="20170817 21:23:39.055"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:39.056">${boot_progress} = Off</msg>
<status starttime="20170817 21:23:38.748" status="PASS" endtime="20170817 21:23:39.056"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:23:39.057">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 21:23:39.056" status="FAIL" endtime="20170817 21:23:39.057"></status>
</kw>
<status starttime="20170817 21:23:38.747" status="FAIL" endtime="20170817 21:23:39.057"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:39.057">${status} = False</msg>
<status starttime="20170817 21:23:38.747" status="PASS" endtime="20170817 21:23:39.057"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 21:23:39.058" status="PASS" endtime="20170817 21:23:39.058"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:39.063">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:23:39.063" status="PASS" endtime="20170817 21:23:39.064"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:39.065">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:23:39.064" status="PASS" endtime="20170817 21:23:39.065"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:39.066">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:23:39.065" status="PASS" endtime="20170817 21:23:39.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:39.067">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:23:39.066" status="PASS" endtime="20170817 21:23:39.067"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:39.275">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:23:39.068" status="PASS" endtime="20170817 21:23:39.275"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:39.275">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:23:39.275">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:39.067" status="PASS" endtime="20170817 21:23:39.275"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:39.276">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:39.276" status="PASS" endtime="20170817 21:23:39.276"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:39.277">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:39.276" status="PASS" endtime="20170817 21:23:39.277"></status>
</kw>
<status starttime="20170817 21:23:39.062" status="PASS" endtime="20170817 21:23:39.277"></status>
</kw>
<status starttime="20170817 21:23:39.062" status="PASS" endtime="20170817 21:23:39.277"></status>
</kw>
<status starttime="20170817 21:23:39.060" status="PASS" endtime="20170817 21:23:39.277"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:39.278">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 21:23:39.277" status="PASS" endtime="20170817 21:23:39.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:39.280">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:23:39.279" status="PASS" endtime="20170817 21:23:39.280"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:39.281">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:23:39.280" status="PASS" endtime="20170817 21:23:39.281"></status>
</kw>
<status starttime="20170817 21:23:39.280" status="PASS" endtime="20170817 21:23:39.281"></status>
</kw>
<status starttime="20170817 21:23:39.279" status="PASS" endtime="20170817 21:23:39.281"></status>
</kw>
<status starttime="20170817 21:23:39.278" status="PASS" endtime="20170817 21:23:39.281"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:39.380">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:23:39.380">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:39.281" status="PASS" endtime="20170817 21:23:39.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:39.382">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:39.381" status="PASS" endtime="20170817 21:23:39.382"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:39.383">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:39.383" status="PASS" endtime="20170817 21:23:39.383"></status>
</kw>
<status starttime="20170817 21:23:39.382" status="PASS" endtime="20170817 21:23:39.383"></status>
</kw>
<status starttime="20170817 21:23:39.381" status="PASS" endtime="20170817 21:23:39.383"></status>
</kw>
<status starttime="20170817 21:23:39.380" status="PASS" endtime="20170817 21:23:39.383"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:23:39.384">Delete All Sessions</msg>
<status starttime="20170817 21:23:39.384" status="PASS" endtime="20170817 21:23:39.384"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:39.384">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:39.060" status="PASS" endtime="20170817 21:23:39.384"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:39.385">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:39.384" status="PASS" endtime="20170817 21:23:39.385"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:39.385">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:23:39.385">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:23:39.386">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:23:39.385" status="PASS" endtime="20170817 21:23:39.386"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:39.386">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:23:39.059" status="PASS" endtime="20170817 21:23:39.386"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:39.386">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:23:39.058" status="PASS" endtime="20170817 21:23:39.386"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:39.387">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:23:39.387">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:23:39.386" status="FAIL" endtime="20170817 21:23:39.387"></status>
</kw>
<status starttime="20170817 21:23:38.747" status="FAIL" endtime="20170817 21:23:39.387"></status>
</kw>
<status starttime="20170817 21:23:37.313" status="FAIL" endtime="20170817 21:23:39.387"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:49.393">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:23:49.392" status="PASS" endtime="20170817 21:23:49.393"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:49.394">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:23:49.393" status="PASS" endtime="20170817 21:23:49.394"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:49.394">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:23:49.394" status="PASS" endtime="20170817 21:23:49.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:49.395">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:23:49.395" status="PASS" endtime="20170817 21:23:49.395"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:49.603">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:23:49.396" status="PASS" endtime="20170817 21:23:49.603"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:49.603">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:23:49.603">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:49.395" status="PASS" endtime="20170817 21:23:49.603"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:49.604">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:49.604" status="PASS" endtime="20170817 21:23:49.604"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:49.605">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:49.604" status="PASS" endtime="20170817 21:23:49.605"></status>
</kw>
<status starttime="20170817 21:23:49.392" status="PASS" endtime="20170817 21:23:49.605"></status>
</kw>
<status starttime="20170817 21:23:49.391" status="PASS" endtime="20170817 21:23:49.605"></status>
</kw>
<status starttime="20170817 21:23:49.391" status="PASS" endtime="20170817 21:23:49.605"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:49.606">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:23:49.605" status="PASS" endtime="20170817 21:23:49.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:49.608">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:23:49.607" status="PASS" endtime="20170817 21:23:49.608"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:49.609">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:23:49.608" status="PASS" endtime="20170817 21:23:49.609"></status>
</kw>
<status starttime="20170817 21:23:49.608" status="PASS" endtime="20170817 21:23:49.609"></status>
</kw>
<status starttime="20170817 21:23:49.606" status="PASS" endtime="20170817 21:23:49.609"></status>
</kw>
<status starttime="20170817 21:23:49.606" status="PASS" endtime="20170817 21:23:49.609"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:49.693">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:23:49.693">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:49.609" status="PASS" endtime="20170817 21:23:49.693"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:49.695">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:49.694" status="PASS" endtime="20170817 21:23:49.695"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:49.696">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:49.695" status="PASS" endtime="20170817 21:23:49.696"></status>
</kw>
<status starttime="20170817 21:23:49.695" status="PASS" endtime="20170817 21:23:49.696"></status>
</kw>
<status starttime="20170817 21:23:49.694" status="PASS" endtime="20170817 21:23:49.696"></status>
</kw>
<status starttime="20170817 21:23:49.693" status="PASS" endtime="20170817 21:23:49.696"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:23:49.696">Delete All Sessions</msg>
<status starttime="20170817 21:23:49.696" status="PASS" endtime="20170817 21:23:49.697"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:49.697">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:49.390" status="PASS" endtime="20170817 21:23:49.697"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:49.697">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:49.697" status="PASS" endtime="20170817 21:23:49.697"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:49.698">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:23:49.698">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:23:49.698">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:23:49.698" status="PASS" endtime="20170817 21:23:49.698"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:49.698">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:23:49.390" status="PASS" endtime="20170817 21:23:49.699"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:49.699">${power_state} = On</msg>
<status starttime="20170817 21:23:49.389" status="PASS" endtime="20170817 21:23:49.699"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:23:49.699" status="PASS" endtime="20170817 21:23:49.699"></status>
</kw>
<status starttime="20170817 21:23:49.389" status="PASS" endtime="20170817 21:23:49.699"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:49.703">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:23:49.703" status="PASS" endtime="20170817 21:23:49.704"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:49.704">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:23:49.704" status="PASS" endtime="20170817 21:23:49.704"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:49.705">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:23:49.705" status="PASS" endtime="20170817 21:23:49.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:49.706">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:23:49.705" status="PASS" endtime="20170817 21:23:49.706"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:49.940">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:23:49.706" status="PASS" endtime="20170817 21:23:49.940"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:49.940">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:23:49.940">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:49.706" status="PASS" endtime="20170817 21:23:49.940"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:49.941">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:49.940" status="PASS" endtime="20170817 21:23:49.941"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:49.942">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:49.941" status="PASS" endtime="20170817 21:23:49.942"></status>
</kw>
<status starttime="20170817 21:23:49.702" status="PASS" endtime="20170817 21:23:49.942"></status>
</kw>
<status starttime="20170817 21:23:49.702" status="PASS" endtime="20170817 21:23:49.942"></status>
</kw>
<status starttime="20170817 21:23:49.701" status="PASS" endtime="20170817 21:23:49.942"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:49.942">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:23:49.942" status="PASS" endtime="20170817 21:23:49.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:49.945">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:23:49.944" status="PASS" endtime="20170817 21:23:49.945"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:49.946">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:23:49.945" status="PASS" endtime="20170817 21:23:49.946"></status>
</kw>
<status starttime="20170817 21:23:49.945" status="PASS" endtime="20170817 21:23:49.946"></status>
</kw>
<status starttime="20170817 21:23:49.943" status="PASS" endtime="20170817 21:23:49.946"></status>
</kw>
<status starttime="20170817 21:23:49.943" status="PASS" endtime="20170817 21:23:49.946"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.079">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:23:50.079">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:49.946" status="PASS" endtime="20170817 21:23:50.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.081">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:50.080" status="PASS" endtime="20170817 21:23:50.081"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.082">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:50.081" status="PASS" endtime="20170817 21:23:50.082"></status>
</kw>
<status starttime="20170817 21:23:50.081" status="PASS" endtime="20170817 21:23:50.082"></status>
</kw>
<status starttime="20170817 21:23:50.080" status="PASS" endtime="20170817 21:23:50.082"></status>
</kw>
<status starttime="20170817 21:23:50.079" status="PASS" endtime="20170817 21:23:50.082"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:23:50.082">Delete All Sessions</msg>
<status starttime="20170817 21:23:50.082" status="PASS" endtime="20170817 21:23:50.082"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:50.083">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:49.700" status="PASS" endtime="20170817 21:23:50.083"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.083">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:50.083" status="PASS" endtime="20170817 21:23:50.083"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.084">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:23:50.084">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:23:50.084">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:23:50.084" status="PASS" endtime="20170817 21:23:50.084"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:50.085">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 21:23:49.700" status="PASS" endtime="20170817 21:23:50.085"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:50.085">${host_state} = Running</msg>
<status starttime="20170817 21:23:49.700" status="PASS" endtime="20170817 21:23:50.085"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:23:50.085" status="PASS" endtime="20170817 21:23:50.085"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.093">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:23:50.093" status="PASS" endtime="20170817 21:23:50.093"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.094">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:23:50.094" status="PASS" endtime="20170817 21:23:50.094"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.095">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:23:50.094" status="PASS" endtime="20170817 21:23:50.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.095">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:23:50.095" status="PASS" endtime="20170817 21:23:50.095"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.367">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:23:50.096" status="PASS" endtime="20170817 21:23:50.367"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:50.367">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:23:50.368">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:50.095" status="PASS" endtime="20170817 21:23:50.368"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.368">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:50.368" status="PASS" endtime="20170817 21:23:50.368"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:50.369" status="PASS" endtime="20170817 21:23:50.369"></status>
</kw>
<status starttime="20170817 21:23:50.092" status="PASS" endtime="20170817 21:23:50.369"></status>
</kw>
<status starttime="20170817 21:23:50.092" status="PASS" endtime="20170817 21:23:50.369"></status>
</kw>
<status starttime="20170817 21:23:50.091" status="PASS" endtime="20170817 21:23:50.369"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.370">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 21:23:50.370" status="PASS" endtime="20170817 21:23:50.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.372">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:23:50.371" status="PASS" endtime="20170817 21:23:50.372"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.373">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:23:50.373" status="PASS" endtime="20170817 21:23:50.373"></status>
</kw>
<status starttime="20170817 21:23:50.372" status="PASS" endtime="20170817 21:23:50.373"></status>
</kw>
<status starttime="20170817 21:23:50.371" status="PASS" endtime="20170817 21:23:50.374"></status>
</kw>
<status starttime="20170817 21:23:50.370" status="PASS" endtime="20170817 21:23:50.374"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.482">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:23:50.482">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:50.374" status="PASS" endtime="20170817 21:23:50.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.484">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:50.483" status="PASS" endtime="20170817 21:23:50.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.486">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:50.485" status="PASS" endtime="20170817 21:23:50.486"></status>
</kw>
<status starttime="20170817 21:23:50.485" status="PASS" endtime="20170817 21:23:50.486"></status>
</kw>
<status starttime="20170817 21:23:50.483" status="PASS" endtime="20170817 21:23:50.486"></status>
</kw>
<status starttime="20170817 21:23:50.482" status="PASS" endtime="20170817 21:23:50.486"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:23:50.487">Delete All Sessions</msg>
<status starttime="20170817 21:23:50.486" status="PASS" endtime="20170817 21:23:50.487"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:50.487">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:50.090" status="PASS" endtime="20170817 21:23:50.487"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:50.487" status="PASS" endtime="20170817 21:23:50.488"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.488">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:23:50.488">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:23:50.488">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:23:50.488" status="PASS" endtime="20170817 21:23:50.488"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:50.489">${state} = Off</msg>
<status starttime="20170817 21:23:50.090" status="PASS" endtime="20170817 21:23:50.489"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:50.489">${boot_progress} = Off</msg>
<status starttime="20170817 21:23:50.087" status="PASS" endtime="20170817 21:23:50.489"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:23:50.489">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 21:23:50.489" status="FAIL" endtime="20170817 21:23:50.490"></status>
</kw>
<status starttime="20170817 21:23:50.086" status="FAIL" endtime="20170817 21:23:50.490"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:50.490">${status} = False</msg>
<status starttime="20170817 21:23:50.086" status="PASS" endtime="20170817 21:23:50.490"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 21:23:50.490" status="PASS" endtime="20170817 21:23:50.490"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.494">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:23:50.494" status="PASS" endtime="20170817 21:23:50.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.495">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:23:50.495" status="PASS" endtime="20170817 21:23:50.495"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.496">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:23:50.495" status="PASS" endtime="20170817 21:23:50.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.496">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:23:50.496" status="PASS" endtime="20170817 21:23:50.496"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.726">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:23:50.497" status="PASS" endtime="20170817 21:23:50.726"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:50.726">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:23:50.726">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:50.497" status="PASS" endtime="20170817 21:23:50.726"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.727">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:50.726" status="PASS" endtime="20170817 21:23:50.727"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.727">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:50.727" status="PASS" endtime="20170817 21:23:50.727"></status>
</kw>
<status starttime="20170817 21:23:50.493" status="PASS" endtime="20170817 21:23:50.728"></status>
</kw>
<status starttime="20170817 21:23:50.493" status="PASS" endtime="20170817 21:23:50.728"></status>
</kw>
<status starttime="20170817 21:23:50.492" status="PASS" endtime="20170817 21:23:50.728"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.728">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 21:23:50.728" status="PASS" endtime="20170817 21:23:50.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.730">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:23:50.730" status="PASS" endtime="20170817 21:23:50.730"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.731">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:23:50.731" status="PASS" endtime="20170817 21:23:50.731"></status>
</kw>
<status starttime="20170817 21:23:50.731" status="PASS" endtime="20170817 21:23:50.732"></status>
</kw>
<status starttime="20170817 21:23:50.729" status="PASS" endtime="20170817 21:23:50.732"></status>
</kw>
<status starttime="20170817 21:23:50.729" status="PASS" endtime="20170817 21:23:50.732"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.822">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:23:50.822">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:50.732" status="PASS" endtime="20170817 21:23:50.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.824">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:50.823" status="PASS" endtime="20170817 21:23:50.824"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.825">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:23:50.825" status="PASS" endtime="20170817 21:23:50.825"></status>
</kw>
<status starttime="20170817 21:23:50.824" status="PASS" endtime="20170817 21:23:50.825"></status>
</kw>
<status starttime="20170817 21:23:50.823" status="PASS" endtime="20170817 21:23:50.825"></status>
</kw>
<status starttime="20170817 21:23:50.823" status="PASS" endtime="20170817 21:23:50.825"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:23:50.826">Delete All Sessions</msg>
<status starttime="20170817 21:23:50.826" status="PASS" endtime="20170817 21:23:50.826"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:50.826">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:23:50.491" status="PASS" endtime="20170817 21:23:50.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.827">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:23:50.826" status="PASS" endtime="20170817 21:23:50.827"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:23:50.827">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:23:50.827">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:23:50.827">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:23:50.827" status="PASS" endtime="20170817 21:23:50.827"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:50.828">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:23:50.491" status="PASS" endtime="20170817 21:23:50.828"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:23:50.828">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:23:50.491" status="PASS" endtime="20170817 21:23:50.828"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:23:50.829">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:23:50.829">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:23:50.828" status="FAIL" endtime="20170817 21:23:50.829"></status>
</kw>
<status starttime="20170817 21:23:50.086" status="FAIL" endtime="20170817 21:23:50.829"></status>
</kw>
<status starttime="20170817 21:23:49.388" status="FAIL" endtime="20170817 21:23:50.829"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:00.834">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:24:00.834" status="PASS" endtime="20170817 21:24:00.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:00.835">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:24:00.835" status="PASS" endtime="20170817 21:24:00.836"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:00.836">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:24:00.836" status="PASS" endtime="20170817 21:24:00.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:00.837">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:24:00.836" status="PASS" endtime="20170817 21:24:00.837"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.142">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:24:00.837" status="PASS" endtime="20170817 21:24:01.142"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:01.142">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:24:01.142">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:00.837" status="PASS" endtime="20170817 21:24:01.142"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.143">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:01.143" status="PASS" endtime="20170817 21:24:01.143"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.144">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:01.143" status="PASS" endtime="20170817 21:24:01.144"></status>
</kw>
<status starttime="20170817 21:24:00.833" status="PASS" endtime="20170817 21:24:01.144"></status>
</kw>
<status starttime="20170817 21:24:00.833" status="PASS" endtime="20170817 21:24:01.144"></status>
</kw>
<status starttime="20170817 21:24:00.832" status="PASS" endtime="20170817 21:24:01.144"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.145">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:24:01.144" status="PASS" endtime="20170817 21:24:01.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.147">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:01.146" status="PASS" endtime="20170817 21:24:01.147"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.148">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:01.148" status="PASS" endtime="20170817 21:24:01.148"></status>
</kw>
<status starttime="20170817 21:24:01.147" status="PASS" endtime="20170817 21:24:01.148"></status>
</kw>
<status starttime="20170817 21:24:01.146" status="PASS" endtime="20170817 21:24:01.148"></status>
</kw>
<status starttime="20170817 21:24:01.145" status="PASS" endtime="20170817 21:24:01.148"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.218">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:24:01.218">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:01.149" status="PASS" endtime="20170817 21:24:01.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.219">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:01.219" status="PASS" endtime="20170817 21:24:01.219"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.221">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:01.220" status="PASS" endtime="20170817 21:24:01.221"></status>
</kw>
<status starttime="20170817 21:24:01.220" status="PASS" endtime="20170817 21:24:01.221"></status>
</kw>
<status starttime="20170817 21:24:01.218" status="PASS" endtime="20170817 21:24:01.221"></status>
</kw>
<status starttime="20170817 21:24:01.218" status="PASS" endtime="20170817 21:24:01.221"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:24:01.221">Delete All Sessions</msg>
<status starttime="20170817 21:24:01.221" status="PASS" endtime="20170817 21:24:01.222"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:01.222">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:00.831" status="PASS" endtime="20170817 21:24:01.222"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.222">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:01.222" status="PASS" endtime="20170817 21:24:01.222"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.223">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:24:01.223">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:24:01.223">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:24:01.223" status="PASS" endtime="20170817 21:24:01.223"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:01.223">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:24:00.831" status="PASS" endtime="20170817 21:24:01.223"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:01.224">${power_state} = On</msg>
<status starttime="20170817 21:24:00.830" status="PASS" endtime="20170817 21:24:01.224"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:24:01.224" status="PASS" endtime="20170817 21:24:01.224"></status>
</kw>
<status starttime="20170817 21:24:00.830" status="PASS" endtime="20170817 21:24:01.224"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.228">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:24:01.228" status="PASS" endtime="20170817 21:24:01.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.229">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:24:01.229" status="PASS" endtime="20170817 21:24:01.229"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.230">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:24:01.230" status="PASS" endtime="20170817 21:24:01.230"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.231">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:24:01.230" status="PASS" endtime="20170817 21:24:01.231"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.471">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:24:01.231" status="PASS" endtime="20170817 21:24:01.471"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:01.471">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:24:01.471">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:01.231" status="PASS" endtime="20170817 21:24:01.471"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.472">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:01.472" status="PASS" endtime="20170817 21:24:01.472"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.473">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:01.472" status="PASS" endtime="20170817 21:24:01.473"></status>
</kw>
<status starttime="20170817 21:24:01.228" status="PASS" endtime="20170817 21:24:01.473"></status>
</kw>
<status starttime="20170817 21:24:01.227" status="PASS" endtime="20170817 21:24:01.473"></status>
</kw>
<status starttime="20170817 21:24:01.226" status="PASS" endtime="20170817 21:24:01.473"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.474">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:24:01.473" status="PASS" endtime="20170817 21:24:01.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.476">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:01.475" status="PASS" endtime="20170817 21:24:01.476"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.477">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:01.477" status="PASS" endtime="20170817 21:24:01.477"></status>
</kw>
<status starttime="20170817 21:24:01.476" status="PASS" endtime="20170817 21:24:01.477"></status>
</kw>
<status starttime="20170817 21:24:01.475" status="PASS" endtime="20170817 21:24:01.478"></status>
</kw>
<status starttime="20170817 21:24:01.474" status="PASS" endtime="20170817 21:24:01.478"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.652">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:24:01.653">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:01.478" status="PASS" endtime="20170817 21:24:01.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.654">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:01.654" status="PASS" endtime="20170817 21:24:01.655"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.655">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:01.655" status="PASS" endtime="20170817 21:24:01.655"></status>
</kw>
<status starttime="20170817 21:24:01.655" status="PASS" endtime="20170817 21:24:01.656"></status>
</kw>
<status starttime="20170817 21:24:01.653" status="PASS" endtime="20170817 21:24:01.656"></status>
</kw>
<status starttime="20170817 21:24:01.653" status="PASS" endtime="20170817 21:24:01.656"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:24:01.656">Delete All Sessions</msg>
<status starttime="20170817 21:24:01.656" status="PASS" endtime="20170817 21:24:01.656"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:01.657">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:01.226" status="PASS" endtime="20170817 21:24:01.657"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.657">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:01.657" status="PASS" endtime="20170817 21:24:01.657"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.658">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:24:01.658">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:24:01.658">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:24:01.657" status="PASS" endtime="20170817 21:24:01.658"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:01.658">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170817 21:24:01.225" status="PASS" endtime="20170817 21:24:01.658"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:01.659">${host_state} = Running</msg>
<status starttime="20170817 21:24:01.225" status="PASS" endtime="20170817 21:24:01.659"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:24:01.659" status="PASS" endtime="20170817 21:24:01.659"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.665">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:24:01.664" status="PASS" endtime="20170817 21:24:01.665"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.666">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:24:01.666" status="PASS" endtime="20170817 21:24:01.666"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.666">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:24:01.666" status="PASS" endtime="20170817 21:24:01.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.667">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:24:01.667" status="PASS" endtime="20170817 21:24:01.667"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.870">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:24:01.668" status="PASS" endtime="20170817 21:24:01.870"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:01.871">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:24:01.871">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:01.667" status="PASS" endtime="20170817 21:24:01.871"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.871">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:01.871" status="PASS" endtime="20170817 21:24:01.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.872">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:01.872" status="PASS" endtime="20170817 21:24:01.872"></status>
</kw>
<status starttime="20170817 21:24:01.663" status="PASS" endtime="20170817 21:24:01.872"></status>
</kw>
<status starttime="20170817 21:24:01.663" status="PASS" endtime="20170817 21:24:01.872"></status>
</kw>
<status starttime="20170817 21:24:01.662" status="PASS" endtime="20170817 21:24:01.873"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.873">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170817 21:24:01.873" status="PASS" endtime="20170817 21:24:01.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.875">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:24:01.875" status="PASS" endtime="20170817 21:24:01.875"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.876">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170817 21:24:01.876" status="PASS" endtime="20170817 21:24:01.876"></status>
</kw>
<status starttime="20170817 21:24:01.875" status="PASS" endtime="20170817 21:24:01.876"></status>
</kw>
<status starttime="20170817 21:24:01.874" status="PASS" endtime="20170817 21:24:01.877"></status>
</kw>
<status starttime="20170817 21:24:01.873" status="PASS" endtime="20170817 21:24:01.877"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.947">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:24:01.947">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:01.877" status="PASS" endtime="20170817 21:24:01.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.949">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:01.948" status="PASS" endtime="20170817 21:24:01.949"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.949">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:01.949" status="PASS" endtime="20170817 21:24:01.950"></status>
</kw>
<status starttime="20170817 21:24:01.949" status="PASS" endtime="20170817 21:24:01.950"></status>
</kw>
<status starttime="20170817 21:24:01.948" status="PASS" endtime="20170817 21:24:01.950"></status>
</kw>
<status starttime="20170817 21:24:01.947" status="PASS" endtime="20170817 21:24:01.950"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:24:01.950">Delete All Sessions</msg>
<status starttime="20170817 21:24:01.950" status="PASS" endtime="20170817 21:24:01.950"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:01.950">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:01.661" status="PASS" endtime="20170817 21:24:01.951"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.951">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:01.951" status="PASS" endtime="20170817 21:24:01.951"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.952">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:24:01.952">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:24:01.952">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:24:01.951" status="PASS" endtime="20170817 21:24:01.952"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:01.952">${state} = Off</msg>
<status starttime="20170817 21:24:01.661" status="PASS" endtime="20170817 21:24:01.952"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:01.952">${boot_progress} = Off</msg>
<status starttime="20170817 21:24:01.660" status="PASS" endtime="20170817 21:24:01.952"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:24:01.953">Off != FW Progress, Starting OS</msg>
<status starttime="20170817 21:24:01.953" status="FAIL" endtime="20170817 21:24:01.953"></status>
</kw>
<status starttime="20170817 21:24:01.660" status="FAIL" endtime="20170817 21:24:01.953"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:01.953">${status} = False</msg>
<status starttime="20170817 21:24:01.660" status="PASS" endtime="20170817 21:24:01.954"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status starttime="20170817 21:24:01.954" status="PASS" endtime="20170817 21:24:01.954"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:01.958">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:24:01.958" status="PASS" endtime="20170817 21:24:01.958"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.959">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:24:01.959" status="PASS" endtime="20170817 21:24:01.959"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.960">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:24:01.959" status="PASS" endtime="20170817 21:24:01.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:01.960">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:24:01.960" status="PASS" endtime="20170817 21:24:01.960"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:02.149">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:24:01.961" status="PASS" endtime="20170817 21:24:02.149"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:02.149">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:24:02.149">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:01.961" status="PASS" endtime="20170817 21:24:02.149"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:02.150">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:02.150" status="PASS" endtime="20170817 21:24:02.150"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:02.151">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:02.150" status="PASS" endtime="20170817 21:24:02.151"></status>
</kw>
<status starttime="20170817 21:24:01.957" status="PASS" endtime="20170817 21:24:02.151"></status>
</kw>
<status starttime="20170817 21:24:01.957" status="PASS" endtime="20170817 21:24:02.151"></status>
</kw>
<status starttime="20170817 21:24:01.956" status="PASS" endtime="20170817 21:24:02.151"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:02.152">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20170817 21:24:02.151" status="PASS" endtime="20170817 21:24:02.152"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:02.154">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:24:02.153" status="PASS" endtime="20170817 21:24:02.154"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:02.155">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20170817 21:24:02.154" status="PASS" endtime="20170817 21:24:02.155"></status>
</kw>
<status starttime="20170817 21:24:02.154" status="PASS" endtime="20170817 21:24:02.155"></status>
</kw>
<status starttime="20170817 21:24:02.152" status="PASS" endtime="20170817 21:24:02.155"></status>
</kw>
<status starttime="20170817 21:24:02.152" status="PASS" endtime="20170817 21:24:02.155"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:02.250">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:24:02.250">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:02.155" status="PASS" endtime="20170817 21:24:02.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:02.253">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:02.252" status="PASS" endtime="20170817 21:24:02.253"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:02.253">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:02.253" status="PASS" endtime="20170817 21:24:02.254"></status>
</kw>
<status starttime="20170817 21:24:02.253" status="PASS" endtime="20170817 21:24:02.254"></status>
</kw>
<status starttime="20170817 21:24:02.251" status="PASS" endtime="20170817 21:24:02.254"></status>
</kw>
<status starttime="20170817 21:24:02.251" status="PASS" endtime="20170817 21:24:02.254"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:24:02.254">Delete All Sessions</msg>
<status starttime="20170817 21:24:02.254" status="PASS" endtime="20170817 21:24:02.254"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:02.255">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:01.955" status="PASS" endtime="20170817 21:24:02.255"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:02.255">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:02.255" status="PASS" endtime="20170817 21:24:02.255"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:02.256">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:24:02.256">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:24:02.256">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:24:02.256" status="PASS" endtime="20170817 21:24:02.256"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:02.256">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:24:01.955" status="PASS" endtime="20170817 21:24:02.256"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:02.257">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:24:01.954" status="PASS" endtime="20170817 21:24:02.257"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:02.257">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:24:02.257">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20170817 21:24:02.257" status="FAIL" endtime="20170817 21:24:02.257"></status>
</kw>
<status starttime="20170817 21:24:01.659" status="FAIL" endtime="20170817 21:24:02.258"></status>
</kw>
<status starttime="20170817 21:24:00.829" status="FAIL" endtime="20170817 21:24:02.258"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:12.263">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:24:12.263" status="PASS" endtime="20170817 21:24:12.264"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:12.264">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:24:12.264" status="PASS" endtime="20170817 21:24:12.264"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:12.265">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:24:12.265" status="PASS" endtime="20170817 21:24:12.265"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:12.266">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:24:12.266" status="PASS" endtime="20170817 21:24:12.266"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:12.558">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:24:12.267" status="PASS" endtime="20170817 21:24:12.558"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:12.559">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:24:12.559">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:12.266" status="PASS" endtime="20170817 21:24:12.559"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:12.559">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:12.559" status="PASS" endtime="20170817 21:24:12.559"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:12.560">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:12.560" status="PASS" endtime="20170817 21:24:12.560"></status>
</kw>
<status starttime="20170817 21:24:12.262" status="PASS" endtime="20170817 21:24:12.560"></status>
</kw>
<status starttime="20170817 21:24:12.262" status="PASS" endtime="20170817 21:24:12.560"></status>
</kw>
<status starttime="20170817 21:24:12.261" status="PASS" endtime="20170817 21:24:12.560"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:12.561">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:24:12.561" status="PASS" endtime="20170817 21:24:12.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:12.563">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:12.562" status="PASS" endtime="20170817 21:24:12.563"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:12.564">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:12.564" status="PASS" endtime="20170817 21:24:12.564"></status>
</kw>
<status starttime="20170817 21:24:12.563" status="PASS" endtime="20170817 21:24:12.564"></status>
</kw>
<status starttime="20170817 21:24:12.562" status="PASS" endtime="20170817 21:24:12.565"></status>
</kw>
<status starttime="20170817 21:24:12.561" status="PASS" endtime="20170817 21:24:12.565"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:12.628">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:24:12.628">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:12.565" status="PASS" endtime="20170817 21:24:12.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:12.630">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:12.630" status="PASS" endtime="20170817 21:24:12.630"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:12.631">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:12.631" status="PASS" endtime="20170817 21:24:12.631"></status>
</kw>
<status starttime="20170817 21:24:12.630" status="PASS" endtime="20170817 21:24:12.631"></status>
</kw>
<status starttime="20170817 21:24:12.629" status="PASS" endtime="20170817 21:24:12.631"></status>
</kw>
<status starttime="20170817 21:24:12.629" status="PASS" endtime="20170817 21:24:12.631"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:24:12.632">Delete All Sessions</msg>
<status starttime="20170817 21:24:12.632" status="PASS" endtime="20170817 21:24:12.632"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:12.632">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:12.260" status="PASS" endtime="20170817 21:24:12.632"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:12.633">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:12.632" status="PASS" endtime="20170817 21:24:12.633"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:12.633">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:24:12.633">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:24:12.633">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:24:12.633" status="PASS" endtime="20170817 21:24:12.633"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:12.634">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:24:12.260" status="PASS" endtime="20170817 21:24:12.634"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:12.634">${power_state} = On</msg>
<status starttime="20170817 21:24:12.259" status="PASS" endtime="20170817 21:24:12.634"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:24:12.634" status="PASS" endtime="20170817 21:24:12.635"></status>
</kw>
<status starttime="20170817 21:24:12.259" status="PASS" endtime="20170817 21:24:12.635"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:12.638">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:24:12.638" status="PASS" endtime="20170817 21:24:12.639"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:12.640">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:24:12.639" status="PASS" endtime="20170817 21:24:12.640"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:12.640">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:24:12.640" status="PASS" endtime="20170817 21:24:12.640"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:12.641">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:24:12.640" status="PASS" endtime="20170817 21:24:12.641"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:12.841">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:24:12.642" status="PASS" endtime="20170817 21:24:12.841"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:12.841">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:24:12.841">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:12.641" status="PASS" endtime="20170817 21:24:12.841"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:12.842">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:12.841" status="PASS" endtime="20170817 21:24:12.842"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:12.842">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:12.842" status="PASS" endtime="20170817 21:24:12.843"></status>
</kw>
<status starttime="20170817 21:24:12.637" status="PASS" endtime="20170817 21:24:12.843"></status>
</kw>
<status starttime="20170817 21:24:12.637" status="PASS" endtime="20170817 21:24:12.843"></status>
</kw>
<status starttime="20170817 21:24:12.636" status="PASS" endtime="20170817 21:24:12.843"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:12.843">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:24:12.843" status="PASS" endtime="20170817 21:24:12.843"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:12.846">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:12.845" status="PASS" endtime="20170817 21:24:12.846"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:12.847">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:12.846" status="PASS" endtime="20170817 21:24:12.847"></status>
</kw>
<status starttime="20170817 21:24:12.846" status="PASS" endtime="20170817 21:24:12.847"></status>
</kw>
<status starttime="20170817 21:24:12.844" status="PASS" endtime="20170817 21:24:12.847"></status>
</kw>
<status starttime="20170817 21:24:12.844" status="PASS" endtime="20170817 21:24:12.847"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:12.935">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:24:12.935">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:12.847" status="PASS" endtime="20170817 21:24:12.935"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:12.937">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:12.936" status="PASS" endtime="20170817 21:24:12.937"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:12.938">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:12.937" status="PASS" endtime="20170817 21:24:12.938"></status>
</kw>
<status starttime="20170817 21:24:12.937" status="PASS" endtime="20170817 21:24:12.938"></status>
</kw>
<status starttime="20170817 21:24:12.936" status="PASS" endtime="20170817 21:24:12.938"></status>
</kw>
<status starttime="20170817 21:24:12.935" status="PASS" endtime="20170817 21:24:12.938"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:24:12.938">Delete All Sessions</msg>
<status starttime="20170817 21:24:12.938" status="PASS" endtime="20170817 21:24:12.939"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:12.939">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:12.636" status="PASS" endtime="20170817 21:24:12.939"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:12.939">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:12.939" status="PASS" endtime="20170817 21:24:12.939"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:12.940">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:24:12.940">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:24:12.940">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:24:12.940" status="PASS" endtime="20170817 21:24:12.940"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:12.940">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:24:12.635" status="PASS" endtime="20170817 21:24:12.940"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:12.941">${host_state} = Quiesced</msg>
<status starttime="20170817 21:24:12.635" status="PASS" endtime="20170817 21:24:12.941"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:24:12.941">Running != Quiesced</msg>
<status starttime="20170817 21:24:12.941" status="FAIL" endtime="20170817 21:24:12.942"></status>
</kw>
<status starttime="20170817 21:24:12.258" status="FAIL" endtime="20170817 21:24:12.942"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:22.947">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:24:22.947" status="PASS" endtime="20170817 21:24:22.949"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:22.949">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:24:22.949" status="PASS" endtime="20170817 21:24:22.949"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:22.950">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:24:22.950" status="PASS" endtime="20170817 21:24:22.950"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:22.951">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:24:22.950" status="PASS" endtime="20170817 21:24:22.951"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:23.176">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:24:22.952" status="PASS" endtime="20170817 21:24:23.176"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:23.176">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:24:23.176">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:22.951" status="PASS" endtime="20170817 21:24:23.176"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:23.177">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:23.177" status="PASS" endtime="20170817 21:24:23.177"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:23.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:23.177" status="PASS" endtime="20170817 21:24:23.178"></status>
</kw>
<status starttime="20170817 21:24:22.947" status="PASS" endtime="20170817 21:24:23.178"></status>
</kw>
<status starttime="20170817 21:24:22.946" status="PASS" endtime="20170817 21:24:23.178"></status>
</kw>
<status starttime="20170817 21:24:22.945" status="PASS" endtime="20170817 21:24:23.178"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:23.179">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:24:23.178" status="PASS" endtime="20170817 21:24:23.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:23.181">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:23.180" status="PASS" endtime="20170817 21:24:23.181"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:23.185">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:23.182" status="PASS" endtime="20170817 21:24:23.185"></status>
</kw>
<status starttime="20170817 21:24:23.181" status="PASS" endtime="20170817 21:24:23.185"></status>
</kw>
<status starttime="20170817 21:24:23.180" status="PASS" endtime="20170817 21:24:23.186"></status>
</kw>
<status starttime="20170817 21:24:23.179" status="PASS" endtime="20170817 21:24:23.186"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:23.279">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:24:23.279">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:23.186" status="PASS" endtime="20170817 21:24:23.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:23.281">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:23.281" status="PASS" endtime="20170817 21:24:23.281"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:23.282">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:23.282" status="PASS" endtime="20170817 21:24:23.283"></status>
</kw>
<status starttime="20170817 21:24:23.281" status="PASS" endtime="20170817 21:24:23.283"></status>
</kw>
<status starttime="20170817 21:24:23.280" status="PASS" endtime="20170817 21:24:23.283"></status>
</kw>
<status starttime="20170817 21:24:23.280" status="PASS" endtime="20170817 21:24:23.283"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:24:23.283">Delete All Sessions</msg>
<status starttime="20170817 21:24:23.283" status="PASS" endtime="20170817 21:24:23.283"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:23.284">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:22.945" status="PASS" endtime="20170817 21:24:23.284"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:23.284">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:23.284" status="PASS" endtime="20170817 21:24:23.284"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:23.285">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:24:23.285">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:24:23.285">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:24:23.285" status="PASS" endtime="20170817 21:24:23.285"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:23.286">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:24:22.944" status="PASS" endtime="20170817 21:24:23.286"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:23.286">${power_state} = On</msg>
<status starttime="20170817 21:24:22.943" status="PASS" endtime="20170817 21:24:23.286"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:24:23.286" status="PASS" endtime="20170817 21:24:23.287"></status>
</kw>
<status starttime="20170817 21:24:22.943" status="PASS" endtime="20170817 21:24:23.287"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:23.291">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:24:23.290" status="PASS" endtime="20170817 21:24:23.291"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:23.292">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:24:23.291" status="PASS" endtime="20170817 21:24:23.292"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:23.293">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:24:23.292" status="PASS" endtime="20170817 21:24:23.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:23.293">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:24:23.293" status="PASS" endtime="20170817 21:24:23.293"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:23.540">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:24:23.294" status="PASS" endtime="20170817 21:24:23.540"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:23.540">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:24:23.540">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:23.294" status="PASS" endtime="20170817 21:24:23.541"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:23.541">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:23.541" status="PASS" endtime="20170817 21:24:23.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:23.542">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:23.542" status="PASS" endtime="20170817 21:24:23.542"></status>
</kw>
<status starttime="20170817 21:24:23.290" status="PASS" endtime="20170817 21:24:23.542"></status>
</kw>
<status starttime="20170817 21:24:23.289" status="PASS" endtime="20170817 21:24:23.542"></status>
</kw>
<status starttime="20170817 21:24:23.289" status="PASS" endtime="20170817 21:24:23.542"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:23.543">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:24:23.543" status="PASS" endtime="20170817 21:24:23.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:23.546">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:23.545" status="PASS" endtime="20170817 21:24:23.546"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:23.547">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:23.546" status="PASS" endtime="20170817 21:24:23.547"></status>
</kw>
<status starttime="20170817 21:24:23.546" status="PASS" endtime="20170817 21:24:23.547"></status>
</kw>
<status starttime="20170817 21:24:23.544" status="PASS" endtime="20170817 21:24:23.547"></status>
</kw>
<status starttime="20170817 21:24:23.544" status="PASS" endtime="20170817 21:24:23.547"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:23.693">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:24:23.693">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:23.547" status="PASS" endtime="20170817 21:24:23.693"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:23.695">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:23.694" status="PASS" endtime="20170817 21:24:23.695"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:23.697">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:23.697" status="PASS" endtime="20170817 21:24:23.697"></status>
</kw>
<status starttime="20170817 21:24:23.696" status="PASS" endtime="20170817 21:24:23.697"></status>
</kw>
<status starttime="20170817 21:24:23.694" status="PASS" endtime="20170817 21:24:23.698"></status>
</kw>
<status starttime="20170817 21:24:23.693" status="PASS" endtime="20170817 21:24:23.698"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:24:23.698">Delete All Sessions</msg>
<status starttime="20170817 21:24:23.698" status="PASS" endtime="20170817 21:24:23.698"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:23.699">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:23.288" status="PASS" endtime="20170817 21:24:23.699"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:23.700">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:23.699" status="PASS" endtime="20170817 21:24:23.700"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:23.701">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:24:23.701">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:24:23.701">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:24:23.700" status="PASS" endtime="20170817 21:24:23.701"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:23.702">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:24:23.287" status="PASS" endtime="20170817 21:24:23.702"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:23.702">${host_state} = Quiesced</msg>
<status starttime="20170817 21:24:23.287" status="PASS" endtime="20170817 21:24:23.702"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:24:23.703">Running != Quiesced</msg>
<status starttime="20170817 21:24:23.703" status="FAIL" endtime="20170817 21:24:23.703"></status>
</kw>
<status starttime="20170817 21:24:22.942" status="FAIL" endtime="20170817 21:24:23.704"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:33.710">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:24:33.709" status="PASS" endtime="20170817 21:24:33.710"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:33.711">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:24:33.710" status="PASS" endtime="20170817 21:24:33.711"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:33.711">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:24:33.711" status="PASS" endtime="20170817 21:24:33.711"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:33.712">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:24:33.712" status="PASS" endtime="20170817 21:24:33.712"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:33.939">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:24:33.713" status="PASS" endtime="20170817 21:24:33.939"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:33.939">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:24:33.939">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:33.712" status="PASS" endtime="20170817 21:24:33.940"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:33.940">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:33.940" status="PASS" endtime="20170817 21:24:33.940"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:33.941">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:33.941" status="PASS" endtime="20170817 21:24:33.941"></status>
</kw>
<status starttime="20170817 21:24:33.708" status="PASS" endtime="20170817 21:24:33.941"></status>
</kw>
<status starttime="20170817 21:24:33.708" status="PASS" endtime="20170817 21:24:33.941"></status>
</kw>
<status starttime="20170817 21:24:33.707" status="PASS" endtime="20170817 21:24:33.941"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:33.942">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:24:33.942" status="PASS" endtime="20170817 21:24:33.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:33.945">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:33.944" status="PASS" endtime="20170817 21:24:33.946"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:33.947">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:33.947" status="PASS" endtime="20170817 21:24:33.947"></status>
</kw>
<status starttime="20170817 21:24:33.946" status="PASS" endtime="20170817 21:24:33.947"></status>
</kw>
<status starttime="20170817 21:24:33.943" status="PASS" endtime="20170817 21:24:33.947"></status>
</kw>
<status starttime="20170817 21:24:33.943" status="PASS" endtime="20170817 21:24:33.948"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:34.011">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:24:34.011">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:33.948" status="PASS" endtime="20170817 21:24:34.011"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:34.013">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:34.013" status="PASS" endtime="20170817 21:24:34.014"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:34.015">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:34.015" status="PASS" endtime="20170817 21:24:34.015"></status>
</kw>
<status starttime="20170817 21:24:34.014" status="PASS" endtime="20170817 21:24:34.015"></status>
</kw>
<status starttime="20170817 21:24:34.012" status="PASS" endtime="20170817 21:24:34.015"></status>
</kw>
<status starttime="20170817 21:24:34.012" status="PASS" endtime="20170817 21:24:34.015"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:24:34.016">Delete All Sessions</msg>
<status starttime="20170817 21:24:34.016" status="PASS" endtime="20170817 21:24:34.016"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:34.016">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:33.706" status="PASS" endtime="20170817 21:24:34.016"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:34.017">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:34.017" status="PASS" endtime="20170817 21:24:34.017"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:34.018">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:24:34.018">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:24:34.018">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:24:34.017" status="PASS" endtime="20170817 21:24:34.018"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:34.018">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:24:33.706" status="PASS" endtime="20170817 21:24:34.018"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:34.018">${power_state} = On</msg>
<status starttime="20170817 21:24:33.705" status="PASS" endtime="20170817 21:24:34.019"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:24:34.019" status="PASS" endtime="20170817 21:24:34.019"></status>
</kw>
<status starttime="20170817 21:24:33.705" status="PASS" endtime="20170817 21:24:34.019"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:34.023">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:24:34.023" status="PASS" endtime="20170817 21:24:34.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:34.024">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:24:34.024" status="PASS" endtime="20170817 21:24:34.024"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:34.025">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:24:34.024" status="PASS" endtime="20170817 21:24:34.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:34.026">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:24:34.025" status="PASS" endtime="20170817 21:24:34.026"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:34.210">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:24:34.026" status="PASS" endtime="20170817 21:24:34.210"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:34.210">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:24:34.210">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:34.026" status="PASS" endtime="20170817 21:24:34.210"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:34.211">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:34.210" status="PASS" endtime="20170817 21:24:34.211"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:34.212">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:34.211" status="PASS" endtime="20170817 21:24:34.212"></status>
</kw>
<status starttime="20170817 21:24:34.022" status="PASS" endtime="20170817 21:24:34.212"></status>
</kw>
<status starttime="20170817 21:24:34.022" status="PASS" endtime="20170817 21:24:34.212"></status>
</kw>
<status starttime="20170817 21:24:34.021" status="PASS" endtime="20170817 21:24:34.212"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:34.213">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:24:34.212" status="PASS" endtime="20170817 21:24:34.213"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:34.216">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:34.214" status="PASS" endtime="20170817 21:24:34.216"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:34.217">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:34.216" status="PASS" endtime="20170817 21:24:34.217"></status>
</kw>
<status starttime="20170817 21:24:34.216" status="PASS" endtime="20170817 21:24:34.217"></status>
</kw>
<status starttime="20170817 21:24:34.214" status="PASS" endtime="20170817 21:24:34.217"></status>
</kw>
<status starttime="20170817 21:24:34.213" status="PASS" endtime="20170817 21:24:34.217"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:34.339">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:24:34.339">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:34.217" status="PASS" endtime="20170817 21:24:34.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:34.341">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:34.340" status="PASS" endtime="20170817 21:24:34.341"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:34.342">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:34.342" status="PASS" endtime="20170817 21:24:34.342"></status>
</kw>
<status starttime="20170817 21:24:34.341" status="PASS" endtime="20170817 21:24:34.342"></status>
</kw>
<status starttime="20170817 21:24:34.340" status="PASS" endtime="20170817 21:24:34.342"></status>
</kw>
<status starttime="20170817 21:24:34.339" status="PASS" endtime="20170817 21:24:34.342"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:24:34.343">Delete All Sessions</msg>
<status starttime="20170817 21:24:34.342" status="PASS" endtime="20170817 21:24:34.343"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:34.343">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:34.020" status="PASS" endtime="20170817 21:24:34.343"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:34.344">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:34.343" status="PASS" endtime="20170817 21:24:34.344"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:34.344">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:24:34.344">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:24:34.344">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:24:34.344" status="PASS" endtime="20170817 21:24:34.344"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:34.345">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:24:34.020" status="PASS" endtime="20170817 21:24:34.345"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:34.345">${host_state} = Quiesced</msg>
<status starttime="20170817 21:24:34.019" status="PASS" endtime="20170817 21:24:34.345"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:24:34.346">Running != Quiesced</msg>
<status starttime="20170817 21:24:34.346" status="FAIL" endtime="20170817 21:24:34.346"></status>
</kw>
<status starttime="20170817 21:24:33.704" status="FAIL" endtime="20170817 21:24:34.346"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:44.352">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:24:44.352" status="PASS" endtime="20170817 21:24:44.352"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:44.353">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:24:44.353" status="PASS" endtime="20170817 21:24:44.353"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:44.354">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:24:44.353" status="PASS" endtime="20170817 21:24:44.354"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:44.355">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:24:44.354" status="PASS" endtime="20170817 21:24:44.355"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:44.557">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:24:44.356" status="PASS" endtime="20170817 21:24:44.557"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:44.557">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:24:44.557">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:44.355" status="PASS" endtime="20170817 21:24:44.557"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:44.558">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:44.557" status="PASS" endtime="20170817 21:24:44.558"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:44.559">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:44.558" status="PASS" endtime="20170817 21:24:44.559"></status>
</kw>
<status starttime="20170817 21:24:44.351" status="PASS" endtime="20170817 21:24:44.559"></status>
</kw>
<status starttime="20170817 21:24:44.350" status="PASS" endtime="20170817 21:24:44.559"></status>
</kw>
<status starttime="20170817 21:24:44.350" status="PASS" endtime="20170817 21:24:44.559"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:44.560">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:24:44.559" status="PASS" endtime="20170817 21:24:44.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:44.563">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:44.561" status="PASS" endtime="20170817 21:24:44.563"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:44.564">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:44.564" status="PASS" endtime="20170817 21:24:44.564"></status>
</kw>
<status starttime="20170817 21:24:44.563" status="PASS" endtime="20170817 21:24:44.564"></status>
</kw>
<status starttime="20170817 21:24:44.561" status="PASS" endtime="20170817 21:24:44.565"></status>
</kw>
<status starttime="20170817 21:24:44.560" status="PASS" endtime="20170817 21:24:44.565"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:44.628">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:24:44.628">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:44.565" status="PASS" endtime="20170817 21:24:44.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:44.630">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:44.629" status="PASS" endtime="20170817 21:24:44.630"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:44.631">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:44.630" status="PASS" endtime="20170817 21:24:44.631"></status>
</kw>
<status starttime="20170817 21:24:44.630" status="PASS" endtime="20170817 21:24:44.631"></status>
</kw>
<status starttime="20170817 21:24:44.629" status="PASS" endtime="20170817 21:24:44.631"></status>
</kw>
<status starttime="20170817 21:24:44.628" status="PASS" endtime="20170817 21:24:44.631"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:24:44.631">Delete All Sessions</msg>
<status starttime="20170817 21:24:44.631" status="PASS" endtime="20170817 21:24:44.632"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:44.632">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:44.349" status="PASS" endtime="20170817 21:24:44.632"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:44.633">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:44.632" status="PASS" endtime="20170817 21:24:44.633"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:44.634">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:24:44.634">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:24:44.634">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:24:44.633" status="PASS" endtime="20170817 21:24:44.634"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:44.634">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:24:44.348" status="PASS" endtime="20170817 21:24:44.634"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:44.635">${power_state} = On</msg>
<status starttime="20170817 21:24:44.348" status="PASS" endtime="20170817 21:24:44.635"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:24:44.635" status="PASS" endtime="20170817 21:24:44.636"></status>
</kw>
<status starttime="20170817 21:24:44.348" status="PASS" endtime="20170817 21:24:44.636"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:44.642">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:24:44.642" status="PASS" endtime="20170817 21:24:44.643"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:44.644">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:24:44.643" status="PASS" endtime="20170817 21:24:44.644"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:44.645">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:24:44.644" status="PASS" endtime="20170817 21:24:44.645"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:44.646">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:24:44.646" status="PASS" endtime="20170817 21:24:44.646"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:44.851">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:24:44.648" status="PASS" endtime="20170817 21:24:44.851"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:44.851">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:24:44.851">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:44.647" status="PASS" endtime="20170817 21:24:44.851"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:44.852">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:44.852" status="PASS" endtime="20170817 21:24:44.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:44.853">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:44.852" status="PASS" endtime="20170817 21:24:44.853"></status>
</kw>
<status starttime="20170817 21:24:44.641" status="PASS" endtime="20170817 21:24:44.853"></status>
</kw>
<status starttime="20170817 21:24:44.640" status="PASS" endtime="20170817 21:24:44.853"></status>
</kw>
<status starttime="20170817 21:24:44.639" status="PASS" endtime="20170817 21:24:44.853"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:44.854">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:24:44.854" status="PASS" endtime="20170817 21:24:44.854"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:44.856">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:44.856" status="PASS" endtime="20170817 21:24:44.857"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:44.858">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:44.857" status="PASS" endtime="20170817 21:24:44.858"></status>
</kw>
<status starttime="20170817 21:24:44.857" status="PASS" endtime="20170817 21:24:44.858"></status>
</kw>
<status starttime="20170817 21:24:44.855" status="PASS" endtime="20170817 21:24:44.858"></status>
</kw>
<status starttime="20170817 21:24:44.854" status="PASS" endtime="20170817 21:24:44.858"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:44.948">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:24:44.948">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:44.858" status="PASS" endtime="20170817 21:24:44.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:44.950">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:44.950" status="PASS" endtime="20170817 21:24:44.950"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:44.952">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:44.952" status="PASS" endtime="20170817 21:24:44.952"></status>
</kw>
<status starttime="20170817 21:24:44.951" status="PASS" endtime="20170817 21:24:44.953"></status>
</kw>
<status starttime="20170817 21:24:44.949" status="PASS" endtime="20170817 21:24:44.953"></status>
</kw>
<status starttime="20170817 21:24:44.948" status="PASS" endtime="20170817 21:24:44.953"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:24:44.953">Delete All Sessions</msg>
<status starttime="20170817 21:24:44.953" status="PASS" endtime="20170817 21:24:44.953"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:44.953">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:44.638" status="PASS" endtime="20170817 21:24:44.954"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:44.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:44.954" status="PASS" endtime="20170817 21:24:44.954"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:44.955">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:24:44.955">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:24:44.955">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:24:44.954" status="PASS" endtime="20170817 21:24:44.955"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:44.955">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:24:44.637" status="PASS" endtime="20170817 21:24:44.955"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:44.956">${host_state} = Quiesced</msg>
<status starttime="20170817 21:24:44.636" status="PASS" endtime="20170817 21:24:44.956"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:24:44.956">Running != Quiesced</msg>
<status starttime="20170817 21:24:44.956" status="FAIL" endtime="20170817 21:24:44.957"></status>
</kw>
<status starttime="20170817 21:24:44.347" status="FAIL" endtime="20170817 21:24:44.957"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:54.962">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:24:54.962" status="PASS" endtime="20170817 21:24:54.963"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:54.963">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:24:54.963" status="PASS" endtime="20170817 21:24:54.963"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:54.964">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:24:54.964" status="PASS" endtime="20170817 21:24:54.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:54.965">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:24:54.964" status="PASS" endtime="20170817 21:24:54.965"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:55.191">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:24:54.966" status="PASS" endtime="20170817 21:24:55.192"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:55.192">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:24:55.192">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:54.965" status="PASS" endtime="20170817 21:24:55.192"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:55.193">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:55.192" status="PASS" endtime="20170817 21:24:55.193"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:55.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:55.193" status="PASS" endtime="20170817 21:24:55.194"></status>
</kw>
<status starttime="20170817 21:24:54.961" status="PASS" endtime="20170817 21:24:55.194"></status>
</kw>
<status starttime="20170817 21:24:54.961" status="PASS" endtime="20170817 21:24:55.194"></status>
</kw>
<status starttime="20170817 21:24:54.960" status="PASS" endtime="20170817 21:24:55.194"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:55.195">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:24:55.194" status="PASS" endtime="20170817 21:24:55.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:55.197">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:55.196" status="PASS" endtime="20170817 21:24:55.197"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:55.198">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:55.198" status="PASS" endtime="20170817 21:24:55.198"></status>
</kw>
<status starttime="20170817 21:24:55.197" status="PASS" endtime="20170817 21:24:55.198"></status>
</kw>
<status starttime="20170817 21:24:55.195" status="PASS" endtime="20170817 21:24:55.199"></status>
</kw>
<status starttime="20170817 21:24:55.195" status="PASS" endtime="20170817 21:24:55.199"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:55.283">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:24:55.283">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:55.199" status="PASS" endtime="20170817 21:24:55.283"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:55.285">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:55.285" status="PASS" endtime="20170817 21:24:55.285"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:55.286">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:55.286" status="PASS" endtime="20170817 21:24:55.286"></status>
</kw>
<status starttime="20170817 21:24:55.286" status="PASS" endtime="20170817 21:24:55.287"></status>
</kw>
<status starttime="20170817 21:24:55.284" status="PASS" endtime="20170817 21:24:55.287"></status>
</kw>
<status starttime="20170817 21:24:55.284" status="PASS" endtime="20170817 21:24:55.287"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:24:55.287">Delete All Sessions</msg>
<status starttime="20170817 21:24:55.287" status="PASS" endtime="20170817 21:24:55.287"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:55.288">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:54.959" status="PASS" endtime="20170817 21:24:55.288"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:55.288">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:55.288" status="PASS" endtime="20170817 21:24:55.288"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:55.289">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:24:55.289">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:24:55.289">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:24:55.289" status="PASS" endtime="20170817 21:24:55.289"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:55.289">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:24:54.959" status="PASS" endtime="20170817 21:24:55.289"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:55.290">${power_state} = On</msg>
<status starttime="20170817 21:24:54.958" status="PASS" endtime="20170817 21:24:55.290"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:24:55.290" status="PASS" endtime="20170817 21:24:55.290"></status>
</kw>
<status starttime="20170817 21:24:54.958" status="PASS" endtime="20170817 21:24:55.291"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:55.294">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:24:55.294" status="PASS" endtime="20170817 21:24:55.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:55.296">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:24:55.296" status="PASS" endtime="20170817 21:24:55.296"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:55.297">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:24:55.296" status="PASS" endtime="20170817 21:24:55.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:55.297">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:24:55.297" status="PASS" endtime="20170817 21:24:55.297"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:55.535">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:24:55.298" status="PASS" endtime="20170817 21:24:55.535"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:55.535">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:24:55.535">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:55.298" status="PASS" endtime="20170817 21:24:55.535"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:55.536">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:55.535" status="PASS" endtime="20170817 21:24:55.536"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:55.537">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:55.536" status="PASS" endtime="20170817 21:24:55.537"></status>
</kw>
<status starttime="20170817 21:24:55.294" status="PASS" endtime="20170817 21:24:55.537"></status>
</kw>
<status starttime="20170817 21:24:55.293" status="PASS" endtime="20170817 21:24:55.537"></status>
</kw>
<status starttime="20170817 21:24:55.292" status="PASS" endtime="20170817 21:24:55.537"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:55.538">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:24:55.537" status="PASS" endtime="20170817 21:24:55.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:55.540">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:55.539" status="PASS" endtime="20170817 21:24:55.540"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:55.541">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:24:55.541" status="PASS" endtime="20170817 21:24:55.541"></status>
</kw>
<status starttime="20170817 21:24:55.540" status="PASS" endtime="20170817 21:24:55.541"></status>
</kw>
<status starttime="20170817 21:24:55.539" status="PASS" endtime="20170817 21:24:55.542"></status>
</kw>
<status starttime="20170817 21:24:55.538" status="PASS" endtime="20170817 21:24:55.542"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:55.651">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:24:55.651">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:55.542" status="PASS" endtime="20170817 21:24:55.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:55.653">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:55.652" status="PASS" endtime="20170817 21:24:55.653"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:55.654">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:24:55.654" status="PASS" endtime="20170817 21:24:55.654"></status>
</kw>
<status starttime="20170817 21:24:55.653" status="PASS" endtime="20170817 21:24:55.654"></status>
</kw>
<status starttime="20170817 21:24:55.652" status="PASS" endtime="20170817 21:24:55.654"></status>
</kw>
<status starttime="20170817 21:24:55.651" status="PASS" endtime="20170817 21:24:55.654"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:24:55.655">Delete All Sessions</msg>
<status starttime="20170817 21:24:55.655" status="PASS" endtime="20170817 21:24:55.655"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:55.655">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:24:55.292" status="PASS" endtime="20170817 21:24:55.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:24:55.656">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:24:55.655" status="PASS" endtime="20170817 21:24:55.656"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:24:55.657">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:24:55.657">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:24:55.657">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:24:55.656" status="PASS" endtime="20170817 21:24:55.657"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:55.657">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:24:55.291" status="PASS" endtime="20170817 21:24:55.657"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:24:55.657">${host_state} = Quiesced</msg>
<status starttime="20170817 21:24:55.291" status="PASS" endtime="20170817 21:24:55.657"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:24:55.658">Running != Quiesced</msg>
<status starttime="20170817 21:24:55.658" status="FAIL" endtime="20170817 21:24:55.658"></status>
</kw>
<status starttime="20170817 21:24:54.957" status="FAIL" endtime="20170817 21:24:55.658"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:05.665">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:25:05.664" status="PASS" endtime="20170817 21:25:05.665"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:05.666">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:25:05.665" status="PASS" endtime="20170817 21:25:05.666"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:05.666">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:25:05.666" status="PASS" endtime="20170817 21:25:05.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:05.667">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:25:05.667" status="PASS" endtime="20170817 21:25:05.667"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:05.912">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:25:05.668" status="PASS" endtime="20170817 21:25:05.912"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:05.913">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:25:05.913">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:05.667" status="PASS" endtime="20170817 21:25:05.913"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:05.913">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:05.913" status="PASS" endtime="20170817 21:25:05.913"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:05.914">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:05.914" status="PASS" endtime="20170817 21:25:05.914"></status>
</kw>
<status starttime="20170817 21:25:05.664" status="PASS" endtime="20170817 21:25:05.914"></status>
</kw>
<status starttime="20170817 21:25:05.663" status="PASS" endtime="20170817 21:25:05.914"></status>
</kw>
<status starttime="20170817 21:25:05.662" status="PASS" endtime="20170817 21:25:05.915"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:05.915">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:25:05.915" status="PASS" endtime="20170817 21:25:05.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:05.918">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:05.917" status="PASS" endtime="20170817 21:25:05.918"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:05.919">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:05.918" status="PASS" endtime="20170817 21:25:05.919"></status>
</kw>
<status starttime="20170817 21:25:05.918" status="PASS" endtime="20170817 21:25:05.919"></status>
</kw>
<status starttime="20170817 21:25:05.916" status="PASS" endtime="20170817 21:25:05.919"></status>
</kw>
<status starttime="20170817 21:25:05.915" status="PASS" endtime="20170817 21:25:05.919"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:05.982">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:25:05.982">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:05.920" status="PASS" endtime="20170817 21:25:05.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:05.984">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:05.984" status="PASS" endtime="20170817 21:25:05.984"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:05.985">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:05.985" status="PASS" endtime="20170817 21:25:05.985"></status>
</kw>
<status starttime="20170817 21:25:05.984" status="PASS" endtime="20170817 21:25:05.985"></status>
</kw>
<status starttime="20170817 21:25:05.983" status="PASS" endtime="20170817 21:25:05.985"></status>
</kw>
<status starttime="20170817 21:25:05.983" status="PASS" endtime="20170817 21:25:05.985"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:25:05.986">Delete All Sessions</msg>
<status starttime="20170817 21:25:05.986" status="PASS" endtime="20170817 21:25:05.986"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:05.986">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:05.662" status="PASS" endtime="20170817 21:25:05.986"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:05.987">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:05.986" status="PASS" endtime="20170817 21:25:05.987"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:05.988">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:25:05.988">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:25:05.988">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:25:05.987" status="PASS" endtime="20170817 21:25:05.988"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:05.988">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:25:05.660" status="PASS" endtime="20170817 21:25:05.988"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:05.988">${power_state} = On</msg>
<status starttime="20170817 21:25:05.660" status="PASS" endtime="20170817 21:25:05.988"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:25:05.989" status="PASS" endtime="20170817 21:25:05.989"></status>
</kw>
<status starttime="20170817 21:25:05.660" status="PASS" endtime="20170817 21:25:05.989"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:05.993">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:25:05.993" status="PASS" endtime="20170817 21:25:05.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:05.994">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:25:05.994" status="PASS" endtime="20170817 21:25:05.994"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:05.995">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:25:05.995" status="PASS" endtime="20170817 21:25:05.995"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:05.996">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:25:05.995" status="PASS" endtime="20170817 21:25:05.996"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:06.244">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:25:05.997" status="PASS" endtime="20170817 21:25:06.244"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:06.244">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:25:06.244">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:05.996" status="PASS" endtime="20170817 21:25:06.244"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:06.245">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:06.245" status="PASS" endtime="20170817 21:25:06.245"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:06.246">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:06.245" status="PASS" endtime="20170817 21:25:06.246"></status>
</kw>
<status starttime="20170817 21:25:05.992" status="PASS" endtime="20170817 21:25:06.246"></status>
</kw>
<status starttime="20170817 21:25:05.992" status="PASS" endtime="20170817 21:25:06.246"></status>
</kw>
<status starttime="20170817 21:25:05.991" status="PASS" endtime="20170817 21:25:06.246"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:06.247">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:25:06.247" status="PASS" endtime="20170817 21:25:06.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:06.249">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:06.249" status="PASS" endtime="20170817 21:25:06.249"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:06.250">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:06.250" status="PASS" endtime="20170817 21:25:06.251"></status>
</kw>
<status starttime="20170817 21:25:06.250" status="PASS" endtime="20170817 21:25:06.251"></status>
</kw>
<status starttime="20170817 21:25:06.248" status="PASS" endtime="20170817 21:25:06.251"></status>
</kw>
<status starttime="20170817 21:25:06.247" status="PASS" endtime="20170817 21:25:06.251"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:06.344">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:25:06.344">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:06.251" status="PASS" endtime="20170817 21:25:06.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:06.346">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:06.346" status="PASS" endtime="20170817 21:25:06.346"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:06.347">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:06.347" status="PASS" endtime="20170817 21:25:06.348"></status>
</kw>
<status starttime="20170817 21:25:06.347" status="PASS" endtime="20170817 21:25:06.348"></status>
</kw>
<status starttime="20170817 21:25:06.345" status="PASS" endtime="20170817 21:25:06.348"></status>
</kw>
<status starttime="20170817 21:25:06.345" status="PASS" endtime="20170817 21:25:06.348"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:25:06.348">Delete All Sessions</msg>
<status starttime="20170817 21:25:06.348" status="PASS" endtime="20170817 21:25:06.349"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:06.349">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:05.990" status="PASS" endtime="20170817 21:25:06.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:06.350">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:06.349" status="PASS" endtime="20170817 21:25:06.350"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:06.350">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:25:06.350">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:25:06.350">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:25:06.350" status="PASS" endtime="20170817 21:25:06.350"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:06.351">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:25:05.990" status="PASS" endtime="20170817 21:25:06.351"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:06.351">${host_state} = Quiesced</msg>
<status starttime="20170817 21:25:05.989" status="PASS" endtime="20170817 21:25:06.351"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:25:06.352">Running != Quiesced</msg>
<status starttime="20170817 21:25:06.351" status="FAIL" endtime="20170817 21:25:06.352"></status>
</kw>
<status starttime="20170817 21:25:05.659" status="FAIL" endtime="20170817 21:25:06.352"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:16.358">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:25:16.358" status="PASS" endtime="20170817 21:25:16.358"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:16.359">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:25:16.359" status="PASS" endtime="20170817 21:25:16.359"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:16.360">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:25:16.359" status="PASS" endtime="20170817 21:25:16.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:16.360">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:25:16.360" status="PASS" endtime="20170817 21:25:16.360"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:16.679">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:25:16.361" status="PASS" endtime="20170817 21:25:16.679"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:16.679">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:25:16.679">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:16.361" status="PASS" endtime="20170817 21:25:16.679"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:16.680">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:16.680" status="PASS" endtime="20170817 21:25:16.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:16.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:16.680" status="PASS" endtime="20170817 21:25:16.681"></status>
</kw>
<status starttime="20170817 21:25:16.357" status="PASS" endtime="20170817 21:25:16.681"></status>
</kw>
<status starttime="20170817 21:25:16.356" status="PASS" endtime="20170817 21:25:16.681"></status>
</kw>
<status starttime="20170817 21:25:16.355" status="PASS" endtime="20170817 21:25:16.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:16.682">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:25:16.682" status="PASS" endtime="20170817 21:25:16.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:16.684">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:16.684" status="PASS" endtime="20170817 21:25:16.684"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:16.685">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:16.685" status="PASS" endtime="20170817 21:25:16.686"></status>
</kw>
<status starttime="20170817 21:25:16.685" status="PASS" endtime="20170817 21:25:16.686"></status>
</kw>
<status starttime="20170817 21:25:16.683" status="PASS" endtime="20170817 21:25:16.686"></status>
</kw>
<status starttime="20170817 21:25:16.682" status="PASS" endtime="20170817 21:25:16.686"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:16.761">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:25:16.761">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:16.686" status="PASS" endtime="20170817 21:25:16.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:16.763">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:16.763" status="PASS" endtime="20170817 21:25:16.764"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:16.765">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:16.765" status="PASS" endtime="20170817 21:25:16.765"></status>
</kw>
<status starttime="20170817 21:25:16.764" status="PASS" endtime="20170817 21:25:16.765"></status>
</kw>
<status starttime="20170817 21:25:16.762" status="PASS" endtime="20170817 21:25:16.766"></status>
</kw>
<status starttime="20170817 21:25:16.762" status="PASS" endtime="20170817 21:25:16.766"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:25:16.766">Delete All Sessions</msg>
<status starttime="20170817 21:25:16.766" status="PASS" endtime="20170817 21:25:16.766"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:16.767">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:16.355" status="PASS" endtime="20170817 21:25:16.767"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:16.767">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:16.767" status="PASS" endtime="20170817 21:25:16.767"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:16.768">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:25:16.768">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:25:16.768">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:25:16.768" status="PASS" endtime="20170817 21:25:16.768"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:16.768">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:25:16.354" status="PASS" endtime="20170817 21:25:16.769"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:16.769">${power_state} = On</msg>
<status starttime="20170817 21:25:16.354" status="PASS" endtime="20170817 21:25:16.769"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:25:16.769" status="PASS" endtime="20170817 21:25:16.769"></status>
</kw>
<status starttime="20170817 21:25:16.353" status="PASS" endtime="20170817 21:25:16.770"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:16.774">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:25:16.773" status="PASS" endtime="20170817 21:25:16.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:16.775">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:25:16.774" status="PASS" endtime="20170817 21:25:16.775"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:16.775">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:25:16.775" status="PASS" endtime="20170817 21:25:16.776"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:16.776">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:25:16.776" status="PASS" endtime="20170817 21:25:16.776"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:16.996">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:25:16.777" status="PASS" endtime="20170817 21:25:16.996"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:16.996">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:25:16.996">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:16.777" status="PASS" endtime="20170817 21:25:16.996"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:16.997">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:16.997" status="PASS" endtime="20170817 21:25:16.998"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:16.999">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:16.998" status="PASS" endtime="20170817 21:25:16.999"></status>
</kw>
<status starttime="20170817 21:25:16.773" status="PASS" endtime="20170817 21:25:16.999"></status>
</kw>
<status starttime="20170817 21:25:16.772" status="PASS" endtime="20170817 21:25:16.999"></status>
</kw>
<status starttime="20170817 21:25:16.772" status="PASS" endtime="20170817 21:25:16.999"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:17.001">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:25:17.000" status="PASS" endtime="20170817 21:25:17.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:17.004">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:17.003" status="PASS" endtime="20170817 21:25:17.005"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:17.006">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:17.006" status="PASS" endtime="20170817 21:25:17.006"></status>
</kw>
<status starttime="20170817 21:25:17.005" status="PASS" endtime="20170817 21:25:17.006"></status>
</kw>
<status starttime="20170817 21:25:17.002" status="PASS" endtime="20170817 21:25:17.006"></status>
</kw>
<status starttime="20170817 21:25:17.001" status="PASS" endtime="20170817 21:25:17.006"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:17.109">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:25:17.109">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:17.007" status="PASS" endtime="20170817 21:25:17.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:17.111">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:17.110" status="PASS" endtime="20170817 21:25:17.111"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:17.112">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:17.112" status="PASS" endtime="20170817 21:25:17.112"></status>
</kw>
<status starttime="20170817 21:25:17.111" status="PASS" endtime="20170817 21:25:17.112"></status>
</kw>
<status starttime="20170817 21:25:17.110" status="PASS" endtime="20170817 21:25:17.112"></status>
</kw>
<status starttime="20170817 21:25:17.109" status="PASS" endtime="20170817 21:25:17.112"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:25:17.113">Delete All Sessions</msg>
<status starttime="20170817 21:25:17.113" status="PASS" endtime="20170817 21:25:17.113"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:17.113">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:16.771" status="PASS" endtime="20170817 21:25:17.113"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:17.114">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:17.114" status="PASS" endtime="20170817 21:25:17.114"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:17.115">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:25:17.115">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:25:17.115">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:25:17.114" status="PASS" endtime="20170817 21:25:17.115"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:17.115">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:25:16.770" status="PASS" endtime="20170817 21:25:17.115"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:17.116">${host_state} = Quiesced</msg>
<status starttime="20170817 21:25:16.770" status="PASS" endtime="20170817 21:25:17.116"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:25:17.116">Running != Quiesced</msg>
<status starttime="20170817 21:25:17.116" status="FAIL" endtime="20170817 21:25:17.116"></status>
</kw>
<status starttime="20170817 21:25:16.352" status="FAIL" endtime="20170817 21:25:17.117"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:27.123">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:25:27.123" status="PASS" endtime="20170817 21:25:27.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:27.125">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:25:27.124" status="PASS" endtime="20170817 21:25:27.125"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:27.126">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:25:27.125" status="PASS" endtime="20170817 21:25:27.126"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:27.128">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:25:27.127" status="PASS" endtime="20170817 21:25:27.128"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:27.337">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:25:27.129" status="PASS" endtime="20170817 21:25:27.337"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:27.337">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:25:27.337">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:27.128" status="PASS" endtime="20170817 21:25:27.337"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:27.338">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:27.338" status="PASS" endtime="20170817 21:25:27.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:27.339">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:27.338" status="PASS" endtime="20170817 21:25:27.339"></status>
</kw>
<status starttime="20170817 21:25:27.122" status="PASS" endtime="20170817 21:25:27.339"></status>
</kw>
<status starttime="20170817 21:25:27.121" status="PASS" endtime="20170817 21:25:27.339"></status>
</kw>
<status starttime="20170817 21:25:27.120" status="PASS" endtime="20170817 21:25:27.339"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:27.340">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:25:27.340" status="PASS" endtime="20170817 21:25:27.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:27.342">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:27.342" status="PASS" endtime="20170817 21:25:27.343"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:27.344">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:27.343" status="PASS" endtime="20170817 21:25:27.344"></status>
</kw>
<status starttime="20170817 21:25:27.343" status="PASS" endtime="20170817 21:25:27.344"></status>
</kw>
<status starttime="20170817 21:25:27.341" status="PASS" endtime="20170817 21:25:27.344"></status>
</kw>
<status starttime="20170817 21:25:27.340" status="PASS" endtime="20170817 21:25:27.344"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:27.435">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:25:27.435">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:27.344" status="PASS" endtime="20170817 21:25:27.435"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:27.437">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:27.437" status="PASS" endtime="20170817 21:25:27.437"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:27.438">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:27.438" status="PASS" endtime="20170817 21:25:27.438"></status>
</kw>
<status starttime="20170817 21:25:27.437" status="PASS" endtime="20170817 21:25:27.438"></status>
</kw>
<status starttime="20170817 21:25:27.436" status="PASS" endtime="20170817 21:25:27.438"></status>
</kw>
<status starttime="20170817 21:25:27.435" status="PASS" endtime="20170817 21:25:27.438"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:25:27.439">Delete All Sessions</msg>
<status starttime="20170817 21:25:27.439" status="PASS" endtime="20170817 21:25:27.439"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:27.439">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:27.119" status="PASS" endtime="20170817 21:25:27.439"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:27.440">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:27.440" status="PASS" endtime="20170817 21:25:27.440"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:27.441">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:25:27.441">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:25:27.441">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:25:27.440" status="PASS" endtime="20170817 21:25:27.441"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:27.441">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:25:27.119" status="PASS" endtime="20170817 21:25:27.441"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:27.442">${power_state} = On</msg>
<status starttime="20170817 21:25:27.118" status="PASS" endtime="20170817 21:25:27.442"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:25:27.442" status="PASS" endtime="20170817 21:25:27.442"></status>
</kw>
<status starttime="20170817 21:25:27.118" status="PASS" endtime="20170817 21:25:27.442"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:27.447">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:25:27.446" status="PASS" endtime="20170817 21:25:27.447"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:27.448">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:25:27.447" status="PASS" endtime="20170817 21:25:27.448"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:27.448">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:25:27.448" status="PASS" endtime="20170817 21:25:27.448"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:27.449">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:25:27.449" status="PASS" endtime="20170817 21:25:27.449"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:27.745">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:25:27.450" status="PASS" endtime="20170817 21:25:27.745"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:27.745">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:25:27.745">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:27.449" status="PASS" endtime="20170817 21:25:27.745"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:27.746">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:27.746" status="PASS" endtime="20170817 21:25:27.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:27.747">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:27.746" status="PASS" endtime="20170817 21:25:27.747"></status>
</kw>
<status starttime="20170817 21:25:27.446" status="PASS" endtime="20170817 21:25:27.747"></status>
</kw>
<status starttime="20170817 21:25:27.445" status="PASS" endtime="20170817 21:25:27.747"></status>
</kw>
<status starttime="20170817 21:25:27.444" status="PASS" endtime="20170817 21:25:27.747"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:27.748">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:25:27.748" status="PASS" endtime="20170817 21:25:27.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:27.750">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:27.750" status="PASS" endtime="20170817 21:25:27.750"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:27.751">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:27.751" status="PASS" endtime="20170817 21:25:27.751"></status>
</kw>
<status starttime="20170817 21:25:27.750" status="PASS" endtime="20170817 21:25:27.752"></status>
</kw>
<status starttime="20170817 21:25:27.749" status="PASS" endtime="20170817 21:25:27.752"></status>
</kw>
<status starttime="20170817 21:25:27.748" status="PASS" endtime="20170817 21:25:27.752"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:27.852">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:25:27.853">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:27.752" status="PASS" endtime="20170817 21:25:27.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:27.854">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:27.854" status="PASS" endtime="20170817 21:25:27.854"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:27.856">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:27.855" status="PASS" endtime="20170817 21:25:27.856"></status>
</kw>
<status starttime="20170817 21:25:27.855" status="PASS" endtime="20170817 21:25:27.856"></status>
</kw>
<status starttime="20170817 21:25:27.853" status="PASS" endtime="20170817 21:25:27.856"></status>
</kw>
<status starttime="20170817 21:25:27.853" status="PASS" endtime="20170817 21:25:27.856"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:25:27.857">Delete All Sessions</msg>
<status starttime="20170817 21:25:27.856" status="PASS" endtime="20170817 21:25:27.857"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:27.857">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:27.444" status="PASS" endtime="20170817 21:25:27.857"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:27.858">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:27.857" status="PASS" endtime="20170817 21:25:27.858"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:27.858">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:25:27.858">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:25:27.858">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:25:27.858" status="PASS" endtime="20170817 21:25:27.858"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:27.859">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:25:27.443" status="PASS" endtime="20170817 21:25:27.859"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:27.859">${host_state} = Quiesced</msg>
<status starttime="20170817 21:25:27.443" status="PASS" endtime="20170817 21:25:27.859"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:25:27.860">Running != Quiesced</msg>
<status starttime="20170817 21:25:27.859" status="FAIL" endtime="20170817 21:25:27.860"></status>
</kw>
<status starttime="20170817 21:25:27.117" status="FAIL" endtime="20170817 21:25:27.860"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:37.866">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:25:37.865" status="PASS" endtime="20170817 21:25:37.866"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:37.867">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:25:37.867" status="PASS" endtime="20170817 21:25:37.867"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:37.868">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:25:37.867" status="PASS" endtime="20170817 21:25:37.868"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:37.868">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:25:37.868" status="PASS" endtime="20170817 21:25:37.868"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:38.096">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:25:37.869" status="PASS" endtime="20170817 21:25:38.096"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:38.096">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:25:38.096">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:37.869" status="PASS" endtime="20170817 21:25:38.096"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:38.097">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:38.096" status="PASS" endtime="20170817 21:25:38.097"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:38.097">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:38.097" status="PASS" endtime="20170817 21:25:38.098"></status>
</kw>
<status starttime="20170817 21:25:37.865" status="PASS" endtime="20170817 21:25:38.098"></status>
</kw>
<status starttime="20170817 21:25:37.864" status="PASS" endtime="20170817 21:25:38.098"></status>
</kw>
<status starttime="20170817 21:25:37.864" status="PASS" endtime="20170817 21:25:38.098"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:38.098">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:25:38.098" status="PASS" endtime="20170817 21:25:38.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:38.101">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:38.100" status="PASS" endtime="20170817 21:25:38.101"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:38.101">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:38.101" status="PASS" endtime="20170817 21:25:38.102"></status>
</kw>
<status starttime="20170817 21:25:38.101" status="PASS" endtime="20170817 21:25:38.102"></status>
</kw>
<status starttime="20170817 21:25:38.099" status="PASS" endtime="20170817 21:25:38.102"></status>
</kw>
<status starttime="20170817 21:25:38.099" status="PASS" endtime="20170817 21:25:38.102"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:38.170">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:25:38.170">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:38.102" status="PASS" endtime="20170817 21:25:38.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:38.172">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:38.172" status="PASS" endtime="20170817 21:25:38.172"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:38.173">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:38.173" status="PASS" endtime="20170817 21:25:38.173"></status>
</kw>
<status starttime="20170817 21:25:38.173" status="PASS" endtime="20170817 21:25:38.174"></status>
</kw>
<status starttime="20170817 21:25:38.171" status="PASS" endtime="20170817 21:25:38.174"></status>
</kw>
<status starttime="20170817 21:25:38.171" status="PASS" endtime="20170817 21:25:38.174"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:25:38.174">Delete All Sessions</msg>
<status starttime="20170817 21:25:38.174" status="PASS" endtime="20170817 21:25:38.174"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:38.174">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:37.863" status="PASS" endtime="20170817 21:25:38.174"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:38.175">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:38.175" status="PASS" endtime="20170817 21:25:38.175"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:38.176">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:25:38.176">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:25:38.176">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:25:38.175" status="PASS" endtime="20170817 21:25:38.176"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:38.176">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:25:37.862" status="PASS" endtime="20170817 21:25:38.176"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:38.177">${power_state} = On</msg>
<status starttime="20170817 21:25:37.862" status="PASS" endtime="20170817 21:25:38.177"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:25:38.177" status="PASS" endtime="20170817 21:25:38.177"></status>
</kw>
<status starttime="20170817 21:25:37.861" status="PASS" endtime="20170817 21:25:38.177"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:38.181">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:25:38.181" status="PASS" endtime="20170817 21:25:38.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:38.182">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:25:38.182" status="PASS" endtime="20170817 21:25:38.182"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:38.183">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:25:38.183" status="PASS" endtime="20170817 21:25:38.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:38.184">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:25:38.183" status="PASS" endtime="20170817 21:25:38.184"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:38.469">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:25:38.184" status="PASS" endtime="20170817 21:25:38.469"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:38.469">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:25:38.469">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:38.184" status="PASS" endtime="20170817 21:25:38.469"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:38.470">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:38.470" status="PASS" endtime="20170817 21:25:38.470"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:38.471">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:38.471" status="PASS" endtime="20170817 21:25:38.471"></status>
</kw>
<status starttime="20170817 21:25:38.180" status="PASS" endtime="20170817 21:25:38.471"></status>
</kw>
<status starttime="20170817 21:25:38.180" status="PASS" endtime="20170817 21:25:38.471"></status>
</kw>
<status starttime="20170817 21:25:38.179" status="PASS" endtime="20170817 21:25:38.471"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:38.472">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:25:38.472" status="PASS" endtime="20170817 21:25:38.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:38.475">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:38.474" status="PASS" endtime="20170817 21:25:38.475"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:38.476">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:38.475" status="PASS" endtime="20170817 21:25:38.476"></status>
</kw>
<status starttime="20170817 21:25:38.475" status="PASS" endtime="20170817 21:25:38.476"></status>
</kw>
<status starttime="20170817 21:25:38.473" status="PASS" endtime="20170817 21:25:38.476"></status>
</kw>
<status starttime="20170817 21:25:38.472" status="PASS" endtime="20170817 21:25:38.476"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:38.570">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:25:38.570">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:38.476" status="PASS" endtime="20170817 21:25:38.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:38.572">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:38.572" status="PASS" endtime="20170817 21:25:38.572"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:38.573">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:38.573" status="PASS" endtime="20170817 21:25:38.573"></status>
</kw>
<status starttime="20170817 21:25:38.572" status="PASS" endtime="20170817 21:25:38.573"></status>
</kw>
<status starttime="20170817 21:25:38.571" status="PASS" endtime="20170817 21:25:38.574"></status>
</kw>
<status starttime="20170817 21:25:38.570" status="PASS" endtime="20170817 21:25:38.574"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:25:38.574">Delete All Sessions</msg>
<status starttime="20170817 21:25:38.574" status="PASS" endtime="20170817 21:25:38.574"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:38.574">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:38.179" status="PASS" endtime="20170817 21:25:38.574"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:38.575">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:38.575" status="PASS" endtime="20170817 21:25:38.575"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:38.576">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:25:38.576">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:25:38.576">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:25:38.576" status="PASS" endtime="20170817 21:25:38.576"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:38.576">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:25:38.178" status="PASS" endtime="20170817 21:25:38.577"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:38.577">${host_state} = Quiesced</msg>
<status starttime="20170817 21:25:38.178" status="PASS" endtime="20170817 21:25:38.577"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:25:38.578">Running != Quiesced</msg>
<status starttime="20170817 21:25:38.577" status="FAIL" endtime="20170817 21:25:38.578"></status>
</kw>
<status starttime="20170817 21:25:37.861" status="FAIL" endtime="20170817 21:25:38.578"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:48.584">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:25:48.583" status="PASS" endtime="20170817 21:25:48.584"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:48.585">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:25:48.584" status="PASS" endtime="20170817 21:25:48.585"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:48.585">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:25:48.585" status="PASS" endtime="20170817 21:25:48.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:48.586">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:25:48.586" status="PASS" endtime="20170817 21:25:48.586"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:48.774">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:25:48.587" status="PASS" endtime="20170817 21:25:48.774"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:48.774">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:25:48.774">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:48.587" status="PASS" endtime="20170817 21:25:48.774"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:48.775">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:48.775" status="PASS" endtime="20170817 21:25:48.775"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:48.776">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:48.775" status="PASS" endtime="20170817 21:25:48.776"></status>
</kw>
<status starttime="20170817 21:25:48.583" status="PASS" endtime="20170817 21:25:48.776"></status>
</kw>
<status starttime="20170817 21:25:48.582" status="PASS" endtime="20170817 21:25:48.776"></status>
</kw>
<status starttime="20170817 21:25:48.582" status="PASS" endtime="20170817 21:25:48.776"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:48.777">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:25:48.777" status="PASS" endtime="20170817 21:25:48.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:48.779">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:48.778" status="PASS" endtime="20170817 21:25:48.779"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:48.780">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:48.780" status="PASS" endtime="20170817 21:25:48.781"></status>
</kw>
<status starttime="20170817 21:25:48.779" status="PASS" endtime="20170817 21:25:48.781"></status>
</kw>
<status starttime="20170817 21:25:48.778" status="PASS" endtime="20170817 21:25:48.781"></status>
</kw>
<status starttime="20170817 21:25:48.777" status="PASS" endtime="20170817 21:25:48.781"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:48.857">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:25:48.857">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:48.781" status="PASS" endtime="20170817 21:25:48.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:48.860">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:48.859" status="PASS" endtime="20170817 21:25:48.860"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:48.861">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:48.861" status="PASS" endtime="20170817 21:25:48.862"></status>
</kw>
<status starttime="20170817 21:25:48.860" status="PASS" endtime="20170817 21:25:48.862"></status>
</kw>
<status starttime="20170817 21:25:48.858" status="PASS" endtime="20170817 21:25:48.862"></status>
</kw>
<status starttime="20170817 21:25:48.858" status="PASS" endtime="20170817 21:25:48.862"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:25:48.863">Delete All Sessions</msg>
<status starttime="20170817 21:25:48.862" status="PASS" endtime="20170817 21:25:48.863"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:48.863">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:48.581" status="PASS" endtime="20170817 21:25:48.863"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:48.864">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:48.863" status="PASS" endtime="20170817 21:25:48.864"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:48.864">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:25:48.864">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:25:48.864">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:25:48.864" status="PASS" endtime="20170817 21:25:48.864"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:48.865">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:25:48.580" status="PASS" endtime="20170817 21:25:48.865"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:48.865">${power_state} = On</msg>
<status starttime="20170817 21:25:48.579" status="PASS" endtime="20170817 21:25:48.865"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:25:48.865" status="PASS" endtime="20170817 21:25:48.866"></status>
</kw>
<status starttime="20170817 21:25:48.579" status="PASS" endtime="20170817 21:25:48.866"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:48.870">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:25:48.869" status="PASS" endtime="20170817 21:25:48.870"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:48.871">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:25:48.870" status="PASS" endtime="20170817 21:25:48.871"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:48.871">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:25:48.871" status="PASS" endtime="20170817 21:25:48.871"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:48.872">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:25:48.872" status="PASS" endtime="20170817 21:25:48.872"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:49.078">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:25:48.873" status="PASS" endtime="20170817 21:25:49.078"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:49.078">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:25:49.078">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:48.872" status="PASS" endtime="20170817 21:25:49.078"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:49.079">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:49.079" status="PASS" endtime="20170817 21:25:49.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:49.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:49.079" status="PASS" endtime="20170817 21:25:49.080"></status>
</kw>
<status starttime="20170817 21:25:48.869" status="PASS" endtime="20170817 21:25:49.080"></status>
</kw>
<status starttime="20170817 21:25:48.868" status="PASS" endtime="20170817 21:25:49.080"></status>
</kw>
<status starttime="20170817 21:25:48.868" status="PASS" endtime="20170817 21:25:49.080"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:49.081">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:25:49.080" status="PASS" endtime="20170817 21:25:49.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:49.083">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:49.082" status="PASS" endtime="20170817 21:25:49.083"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:49.084">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:49.084" status="PASS" endtime="20170817 21:25:49.084"></status>
</kw>
<status starttime="20170817 21:25:49.083" status="PASS" endtime="20170817 21:25:49.084"></status>
</kw>
<status starttime="20170817 21:25:49.082" status="PASS" endtime="20170817 21:25:49.084"></status>
</kw>
<status starttime="20170817 21:25:49.081" status="PASS" endtime="20170817 21:25:49.085"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:49.199">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:25:49.199">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:49.085" status="PASS" endtime="20170817 21:25:49.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:49.201">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:49.200" status="PASS" endtime="20170817 21:25:49.201"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:49.202">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:49.201" status="PASS" endtime="20170817 21:25:49.202"></status>
</kw>
<status starttime="20170817 21:25:49.201" status="PASS" endtime="20170817 21:25:49.202"></status>
</kw>
<status starttime="20170817 21:25:49.200" status="PASS" endtime="20170817 21:25:49.202"></status>
</kw>
<status starttime="20170817 21:25:49.199" status="PASS" endtime="20170817 21:25:49.202"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:25:49.202">Delete All Sessions</msg>
<status starttime="20170817 21:25:49.202" status="PASS" endtime="20170817 21:25:49.203"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:49.203">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:48.867" status="PASS" endtime="20170817 21:25:49.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:49.203">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:49.203" status="PASS" endtime="20170817 21:25:49.204"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:49.204">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:25:49.204">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:25:49.204">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:25:49.204" status="PASS" endtime="20170817 21:25:49.204"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:49.205">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:25:48.866" status="PASS" endtime="20170817 21:25:49.205"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:49.205">${host_state} = Quiesced</msg>
<status starttime="20170817 21:25:48.866" status="PASS" endtime="20170817 21:25:49.205"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:25:49.206">Running != Quiesced</msg>
<status starttime="20170817 21:25:49.205" status="FAIL" endtime="20170817 21:25:49.206"></status>
</kw>
<status starttime="20170817 21:25:48.578" status="FAIL" endtime="20170817 21:25:49.206"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:59.215">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:25:59.215" status="PASS" endtime="20170817 21:25:59.216"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:59.216">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:25:59.216" status="PASS" endtime="20170817 21:25:59.216"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:59.217">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:25:59.217" status="PASS" endtime="20170817 21:25:59.217"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:59.218">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:25:59.217" status="PASS" endtime="20170817 21:25:59.218"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:59.413">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:25:59.218" status="PASS" endtime="20170817 21:25:59.413"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:59.414">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:25:59.414">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:59.218" status="PASS" endtime="20170817 21:25:59.414"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:59.414">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:59.414" status="PASS" endtime="20170817 21:25:59.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:59.415">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:59.415" status="PASS" endtime="20170817 21:25:59.415"></status>
</kw>
<status starttime="20170817 21:25:59.214" status="PASS" endtime="20170817 21:25:59.415"></status>
</kw>
<status starttime="20170817 21:25:59.210" status="PASS" endtime="20170817 21:25:59.415"></status>
</kw>
<status starttime="20170817 21:25:59.209" status="PASS" endtime="20170817 21:25:59.415"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:59.416">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:25:59.416" status="PASS" endtime="20170817 21:25:59.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:59.418">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:59.417" status="PASS" endtime="20170817 21:25:59.418"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:59.419">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:59.419" status="PASS" endtime="20170817 21:25:59.419"></status>
</kw>
<status starttime="20170817 21:25:59.418" status="PASS" endtime="20170817 21:25:59.419"></status>
</kw>
<status starttime="20170817 21:25:59.417" status="PASS" endtime="20170817 21:25:59.419"></status>
</kw>
<status starttime="20170817 21:25:59.416" status="PASS" endtime="20170817 21:25:59.419"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:59.482">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:25:59.482">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:59.420" status="PASS" endtime="20170817 21:25:59.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:59.484">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:59.483" status="PASS" endtime="20170817 21:25:59.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:59.485">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:59.485" status="PASS" endtime="20170817 21:25:59.485"></status>
</kw>
<status starttime="20170817 21:25:59.484" status="PASS" endtime="20170817 21:25:59.485"></status>
</kw>
<status starttime="20170817 21:25:59.483" status="PASS" endtime="20170817 21:25:59.486"></status>
</kw>
<status starttime="20170817 21:25:59.482" status="PASS" endtime="20170817 21:25:59.486"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:25:59.486">Delete All Sessions</msg>
<status starttime="20170817 21:25:59.486" status="PASS" endtime="20170817 21:25:59.486"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:59.486">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:59.208" status="PASS" endtime="20170817 21:25:59.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:59.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:59.487" status="PASS" endtime="20170817 21:25:59.487"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:59.488">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:25:59.488">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:25:59.488">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:25:59.487" status="PASS" endtime="20170817 21:25:59.488"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:59.488">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:25:59.208" status="PASS" endtime="20170817 21:25:59.488"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:59.488">${power_state} = On</msg>
<status starttime="20170817 21:25:59.207" status="PASS" endtime="20170817 21:25:59.488"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:25:59.489" status="PASS" endtime="20170817 21:25:59.489"></status>
</kw>
<status starttime="20170817 21:25:59.207" status="PASS" endtime="20170817 21:25:59.489"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:59.494">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:25:59.494" status="PASS" endtime="20170817 21:25:59.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:59.495">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:25:59.494" status="PASS" endtime="20170817 21:25:59.495"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:59.495">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:25:59.495" status="PASS" endtime="20170817 21:25:59.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:59.496">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:25:59.496" status="PASS" endtime="20170817 21:25:59.496"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:59.715">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:25:59.497" status="PASS" endtime="20170817 21:25:59.715"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:59.715">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:25:59.715">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:59.496" status="PASS" endtime="20170817 21:25:59.715"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:59.716">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:59.716" status="PASS" endtime="20170817 21:25:59.716"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:59.717">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:59.716" status="PASS" endtime="20170817 21:25:59.717"></status>
</kw>
<status starttime="20170817 21:25:59.493" status="PASS" endtime="20170817 21:25:59.717"></status>
</kw>
<status starttime="20170817 21:25:59.493" status="PASS" endtime="20170817 21:25:59.717"></status>
</kw>
<status starttime="20170817 21:25:59.492" status="PASS" endtime="20170817 21:25:59.717"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:59.718">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:25:59.718" status="PASS" endtime="20170817 21:25:59.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:59.720">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:59.719" status="PASS" endtime="20170817 21:25:59.720"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:59.721">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:25:59.721" status="PASS" endtime="20170817 21:25:59.721"></status>
</kw>
<status starttime="20170817 21:25:59.721" status="PASS" endtime="20170817 21:25:59.722"></status>
</kw>
<status starttime="20170817 21:25:59.719" status="PASS" endtime="20170817 21:25:59.722"></status>
</kw>
<status starttime="20170817 21:25:59.718" status="PASS" endtime="20170817 21:25:59.722"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:59.820">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:25:59.820">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:59.722" status="PASS" endtime="20170817 21:25:59.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:59.822">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:59.821" status="PASS" endtime="20170817 21:25:59.822"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:59.822">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:25:59.822" status="PASS" endtime="20170817 21:25:59.823"></status>
</kw>
<status starttime="20170817 21:25:59.822" status="PASS" endtime="20170817 21:25:59.823"></status>
</kw>
<status starttime="20170817 21:25:59.821" status="PASS" endtime="20170817 21:25:59.823"></status>
</kw>
<status starttime="20170817 21:25:59.820" status="PASS" endtime="20170817 21:25:59.823"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:25:59.823">Delete All Sessions</msg>
<status starttime="20170817 21:25:59.823" status="PASS" endtime="20170817 21:25:59.823"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:59.824">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:25:59.490" status="PASS" endtime="20170817 21:25:59.824"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:25:59.824">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:25:59.824" status="PASS" endtime="20170817 21:25:59.824"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:25:59.825">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:25:59.825">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:25:59.825">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:25:59.824" status="PASS" endtime="20170817 21:25:59.825"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:59.825">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:25:59.490" status="PASS" endtime="20170817 21:25:59.825"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:25:59.826">${host_state} = Quiesced</msg>
<status starttime="20170817 21:25:59.489" status="PASS" endtime="20170817 21:25:59.826"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:25:59.826">Running != Quiesced</msg>
<status starttime="20170817 21:25:59.826" status="FAIL" endtime="20170817 21:25:59.826"></status>
</kw>
<status starttime="20170817 21:25:59.206" status="FAIL" endtime="20170817 21:25:59.826"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:09.831">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:26:09.831" status="PASS" endtime="20170817 21:26:09.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:09.832">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:26:09.832" status="PASS" endtime="20170817 21:26:09.832"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:09.833">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:26:09.833" status="PASS" endtime="20170817 21:26:09.833"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:09.834">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:26:09.833" status="PASS" endtime="20170817 21:26:09.834"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:10.050">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:26:09.835" status="PASS" endtime="20170817 21:26:10.050"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:10.050">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:26:10.051">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:09.834" status="PASS" endtime="20170817 21:26:10.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:10.051">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:10.051" status="PASS" endtime="20170817 21:26:10.051"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:10.052">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:10.052" status="PASS" endtime="20170817 21:26:10.052"></status>
</kw>
<status starttime="20170817 21:26:09.830" status="PASS" endtime="20170817 21:26:10.052"></status>
</kw>
<status starttime="20170817 21:26:09.830" status="PASS" endtime="20170817 21:26:10.052"></status>
</kw>
<status starttime="20170817 21:26:09.829" status="PASS" endtime="20170817 21:26:10.052"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:10.053">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:26:10.053" status="PASS" endtime="20170817 21:26:10.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:10.055">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:10.054" status="PASS" endtime="20170817 21:26:10.055"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:10.056">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:10.056" status="PASS" endtime="20170817 21:26:10.056"></status>
</kw>
<status starttime="20170817 21:26:10.055" status="PASS" endtime="20170817 21:26:10.056"></status>
</kw>
<status starttime="20170817 21:26:10.054" status="PASS" endtime="20170817 21:26:10.056"></status>
</kw>
<status starttime="20170817 21:26:10.053" status="PASS" endtime="20170817 21:26:10.056"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:10.129">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:26:10.130">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:10.057" status="PASS" endtime="20170817 21:26:10.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:10.131">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:10.131" status="PASS" endtime="20170817 21:26:10.132"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:10.132">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:10.132" status="PASS" endtime="20170817 21:26:10.133"></status>
</kw>
<status starttime="20170817 21:26:10.132" status="PASS" endtime="20170817 21:26:10.133"></status>
</kw>
<status starttime="20170817 21:26:10.131" status="PASS" endtime="20170817 21:26:10.133"></status>
</kw>
<status starttime="20170817 21:26:10.130" status="PASS" endtime="20170817 21:26:10.133"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:26:10.133">Delete All Sessions</msg>
<status starttime="20170817 21:26:10.133" status="PASS" endtime="20170817 21:26:10.133"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:10.133">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:09.829" status="PASS" endtime="20170817 21:26:10.134"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:10.134">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:10.134" status="PASS" endtime="20170817 21:26:10.134"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:10.135">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:26:10.135">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:26:10.135">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:26:10.134" status="PASS" endtime="20170817 21:26:10.135"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:10.135">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:26:09.828" status="PASS" endtime="20170817 21:26:10.135"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:10.135">${power_state} = On</msg>
<status starttime="20170817 21:26:09.828" status="PASS" endtime="20170817 21:26:10.136"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:26:10.136" status="PASS" endtime="20170817 21:26:10.136"></status>
</kw>
<status starttime="20170817 21:26:09.827" status="PASS" endtime="20170817 21:26:10.136"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:10.140">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:26:10.140" status="PASS" endtime="20170817 21:26:10.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:10.141">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:26:10.141" status="PASS" endtime="20170817 21:26:10.141"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:10.142">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:26:10.141" status="PASS" endtime="20170817 21:26:10.142"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:10.142">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:26:10.142" status="PASS" endtime="20170817 21:26:10.142"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:10.345">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:26:10.143" status="PASS" endtime="20170817 21:26:10.345"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:10.345">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:26:10.345">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:10.143" status="PASS" endtime="20170817 21:26:10.345"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:10.346">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:10.345" status="PASS" endtime="20170817 21:26:10.346"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:10.346">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:10.346" status="PASS" endtime="20170817 21:26:10.346"></status>
</kw>
<status starttime="20170817 21:26:10.139" status="PASS" endtime="20170817 21:26:10.347"></status>
</kw>
<status starttime="20170817 21:26:10.138" status="PASS" endtime="20170817 21:26:10.347"></status>
</kw>
<status starttime="20170817 21:26:10.138" status="PASS" endtime="20170817 21:26:10.347"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:10.347">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:26:10.347" status="PASS" endtime="20170817 21:26:10.347"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:10.349">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:10.349" status="PASS" endtime="20170817 21:26:10.350"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:10.350">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:10.350" status="PASS" endtime="20170817 21:26:10.351"></status>
</kw>
<status starttime="20170817 21:26:10.350" status="PASS" endtime="20170817 21:26:10.351"></status>
</kw>
<status starttime="20170817 21:26:10.348" status="PASS" endtime="20170817 21:26:10.351"></status>
</kw>
<status starttime="20170817 21:26:10.348" status="PASS" endtime="20170817 21:26:10.351"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:10.439">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:26:10.440">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:10.351" status="PASS" endtime="20170817 21:26:10.440"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:10.441">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:10.441" status="PASS" endtime="20170817 21:26:10.441"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:10.443">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:10.442" status="PASS" endtime="20170817 21:26:10.443"></status>
</kw>
<status starttime="20170817 21:26:10.442" status="PASS" endtime="20170817 21:26:10.443"></status>
</kw>
<status starttime="20170817 21:26:10.440" status="PASS" endtime="20170817 21:26:10.443"></status>
</kw>
<status starttime="20170817 21:26:10.440" status="PASS" endtime="20170817 21:26:10.443"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:26:10.443">Delete All Sessions</msg>
<status starttime="20170817 21:26:10.443" status="PASS" endtime="20170817 21:26:10.443"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:10.444">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:10.137" status="PASS" endtime="20170817 21:26:10.444"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:10.444">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:10.444" status="PASS" endtime="20170817 21:26:10.445"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:10.445">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:26:10.445">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:26:10.445">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:26:10.445" status="PASS" endtime="20170817 21:26:10.445"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:10.446">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:26:10.137" status="PASS" endtime="20170817 21:26:10.446"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:10.446">${host_state} = Quiesced</msg>
<status starttime="20170817 21:26:10.136" status="PASS" endtime="20170817 21:26:10.446"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:26:10.447">Running != Quiesced</msg>
<status starttime="20170817 21:26:10.446" status="FAIL" endtime="20170817 21:26:10.447"></status>
</kw>
<status starttime="20170817 21:26:09.827" status="FAIL" endtime="20170817 21:26:10.447"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:20.452">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:26:20.452" status="PASS" endtime="20170817 21:26:20.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:20.453">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:26:20.453" status="PASS" endtime="20170817 21:26:20.453"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:20.454">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:26:20.453" status="PASS" endtime="20170817 21:26:20.454"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:20.454">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:26:20.454" status="PASS" endtime="20170817 21:26:20.455"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:20.729">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:26:20.455" status="PASS" endtime="20170817 21:26:20.729"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:20.729">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:26:20.729">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:20.455" status="PASS" endtime="20170817 21:26:20.729"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:20.730">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:20.729" status="PASS" endtime="20170817 21:26:20.730"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:20.731">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:20.730" status="PASS" endtime="20170817 21:26:20.731"></status>
</kw>
<status starttime="20170817 21:26:20.451" status="PASS" endtime="20170817 21:26:20.731"></status>
</kw>
<status starttime="20170817 21:26:20.451" status="PASS" endtime="20170817 21:26:20.731"></status>
</kw>
<status starttime="20170817 21:26:20.450" status="PASS" endtime="20170817 21:26:20.731"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:20.732">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:26:20.731" status="PASS" endtime="20170817 21:26:20.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:20.734">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:20.733" status="PASS" endtime="20170817 21:26:20.734"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:20.735">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:20.735" status="PASS" endtime="20170817 21:26:20.735"></status>
</kw>
<status starttime="20170817 21:26:20.734" status="PASS" endtime="20170817 21:26:20.735"></status>
</kw>
<status starttime="20170817 21:26:20.732" status="PASS" endtime="20170817 21:26:20.735"></status>
</kw>
<status starttime="20170817 21:26:20.732" status="PASS" endtime="20170817 21:26:20.735"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:20.799">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:26:20.799">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:20.736" status="PASS" endtime="20170817 21:26:20.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:20.801">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:20.800" status="PASS" endtime="20170817 21:26:20.801"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:20.802">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:20.802" status="PASS" endtime="20170817 21:26:20.802"></status>
</kw>
<status starttime="20170817 21:26:20.801" status="PASS" endtime="20170817 21:26:20.802"></status>
</kw>
<status starttime="20170817 21:26:20.800" status="PASS" endtime="20170817 21:26:20.802"></status>
</kw>
<status starttime="20170817 21:26:20.799" status="PASS" endtime="20170817 21:26:20.802"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:26:20.803">Delete All Sessions</msg>
<status starttime="20170817 21:26:20.803" status="PASS" endtime="20170817 21:26:20.803"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:20.803">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:20.449" status="PASS" endtime="20170817 21:26:20.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:20.804">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:20.803" status="PASS" endtime="20170817 21:26:20.804"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:20.804">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:26:20.804">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:26:20.805">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:26:20.804" status="PASS" endtime="20170817 21:26:20.805"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:20.805">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:26:20.449" status="PASS" endtime="20170817 21:26:20.805"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:20.805">${power_state} = On</msg>
<status starttime="20170817 21:26:20.448" status="PASS" endtime="20170817 21:26:20.805"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:26:20.805" status="PASS" endtime="20170817 21:26:20.806"></status>
</kw>
<status starttime="20170817 21:26:20.448" status="PASS" endtime="20170817 21:26:20.806"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:20.810">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:26:20.809" status="PASS" endtime="20170817 21:26:20.810"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:20.811">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:26:20.811" status="PASS" endtime="20170817 21:26:20.811"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:20.812">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:26:20.811" status="PASS" endtime="20170817 21:26:20.812"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:20.812">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:26:20.812" status="PASS" endtime="20170817 21:26:20.812"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:20.993">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:26:20.813" status="PASS" endtime="20170817 21:26:20.993"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:20.993">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:26:20.993">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:20.813" status="PASS" endtime="20170817 21:26:20.993"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:20.994">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:20.994" status="PASS" endtime="20170817 21:26:20.994"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:20.995">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:20.994" status="PASS" endtime="20170817 21:26:20.995"></status>
</kw>
<status starttime="20170817 21:26:20.809" status="PASS" endtime="20170817 21:26:20.995"></status>
</kw>
<status starttime="20170817 21:26:20.808" status="PASS" endtime="20170817 21:26:20.995"></status>
</kw>
<status starttime="20170817 21:26:20.808" status="PASS" endtime="20170817 21:26:20.995"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:20.996">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:26:20.995" status="PASS" endtime="20170817 21:26:20.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:20.998">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:20.997" status="PASS" endtime="20170817 21:26:20.998"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:20.999">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:20.999" status="PASS" endtime="20170817 21:26:20.999"></status>
</kw>
<status starttime="20170817 21:26:20.998" status="PASS" endtime="20170817 21:26:20.999"></status>
</kw>
<status starttime="20170817 21:26:20.997" status="PASS" endtime="20170817 21:26:20.999"></status>
</kw>
<status starttime="20170817 21:26:20.996" status="PASS" endtime="20170817 21:26:20.999"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:21.089">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:26:21.089">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:20.999" status="PASS" endtime="20170817 21:26:21.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:21.091">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:21.091" status="PASS" endtime="20170817 21:26:21.091"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:21.092">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:21.092" status="PASS" endtime="20170817 21:26:21.092"></status>
</kw>
<status starttime="20170817 21:26:21.091" status="PASS" endtime="20170817 21:26:21.092"></status>
</kw>
<status starttime="20170817 21:26:21.090" status="PASS" endtime="20170817 21:26:21.092"></status>
</kw>
<status starttime="20170817 21:26:21.090" status="PASS" endtime="20170817 21:26:21.092"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:26:21.093">Delete All Sessions</msg>
<status starttime="20170817 21:26:21.093" status="PASS" endtime="20170817 21:26:21.093"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:21.093">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:20.807" status="PASS" endtime="20170817 21:26:21.094"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:21.094">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:21.094" status="PASS" endtime="20170817 21:26:21.094"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:21.095">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:26:21.095">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:26:21.095">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:26:21.095" status="PASS" endtime="20170817 21:26:21.095"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:21.096">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:26:20.806" status="PASS" endtime="20170817 21:26:21.096"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:21.096">${host_state} = Quiesced</msg>
<status starttime="20170817 21:26:20.806" status="PASS" endtime="20170817 21:26:21.096"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:26:21.097">Running != Quiesced</msg>
<status starttime="20170817 21:26:21.096" status="FAIL" endtime="20170817 21:26:21.097"></status>
</kw>
<status starttime="20170817 21:26:20.447" status="FAIL" endtime="20170817 21:26:21.097"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:31.102">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:26:31.102" status="PASS" endtime="20170817 21:26:31.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:31.103">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:26:31.103" status="PASS" endtime="20170817 21:26:31.104"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:31.104">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:26:31.104" status="PASS" endtime="20170817 21:26:31.104"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:31.105">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:26:31.104" status="PASS" endtime="20170817 21:26:31.105"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:31.283">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:26:31.105" status="PASS" endtime="20170817 21:26:31.283"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:31.283">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:26:31.283">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:31.105" status="PASS" endtime="20170817 21:26:31.283"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:31.284">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:31.284" status="PASS" endtime="20170817 21:26:31.284"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:31.285">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:31.284" status="PASS" endtime="20170817 21:26:31.285"></status>
</kw>
<status starttime="20170817 21:26:31.102" status="PASS" endtime="20170817 21:26:31.285"></status>
</kw>
<status starttime="20170817 21:26:31.101" status="PASS" endtime="20170817 21:26:31.285"></status>
</kw>
<status starttime="20170817 21:26:31.101" status="PASS" endtime="20170817 21:26:31.285"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:31.286">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:26:31.285" status="PASS" endtime="20170817 21:26:31.286"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:31.288">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:31.287" status="PASS" endtime="20170817 21:26:31.288"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:31.289">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:31.289" status="PASS" endtime="20170817 21:26:31.290"></status>
</kw>
<status starttime="20170817 21:26:31.288" status="PASS" endtime="20170817 21:26:31.290"></status>
</kw>
<status starttime="20170817 21:26:31.286" status="PASS" endtime="20170817 21:26:31.290"></status>
</kw>
<status starttime="20170817 21:26:31.286" status="PASS" endtime="20170817 21:26:31.290"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:31.365">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:26:31.365">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:31.290" status="PASS" endtime="20170817 21:26:31.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:31.367">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:31.366" status="PASS" endtime="20170817 21:26:31.367"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:31.368">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:31.367" status="PASS" endtime="20170817 21:26:31.368"></status>
</kw>
<status starttime="20170817 21:26:31.367" status="PASS" endtime="20170817 21:26:31.368"></status>
</kw>
<status starttime="20170817 21:26:31.366" status="PASS" endtime="20170817 21:26:31.368"></status>
</kw>
<status starttime="20170817 21:26:31.365" status="PASS" endtime="20170817 21:26:31.368"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:26:31.368">Delete All Sessions</msg>
<status starttime="20170817 21:26:31.368" status="PASS" endtime="20170817 21:26:31.369"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:31.369">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:31.100" status="PASS" endtime="20170817 21:26:31.369"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:31.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:31.369" status="PASS" endtime="20170817 21:26:31.369"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:31.370">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:26:31.370">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:26:31.370">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:26:31.370" status="PASS" endtime="20170817 21:26:31.370"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:31.370">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:26:31.099" status="PASS" endtime="20170817 21:26:31.370"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:31.371">${power_state} = On</msg>
<status starttime="20170817 21:26:31.098" status="PASS" endtime="20170817 21:26:31.371"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:26:31.371" status="PASS" endtime="20170817 21:26:31.371"></status>
</kw>
<status starttime="20170817 21:26:31.098" status="PASS" endtime="20170817 21:26:31.371"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:31.375">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:26:31.375" status="PASS" endtime="20170817 21:26:31.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:31.376">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:26:31.376" status="PASS" endtime="20170817 21:26:31.376"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:31.377">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:26:31.376" status="PASS" endtime="20170817 21:26:31.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:31.377">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:26:31.377" status="PASS" endtime="20170817 21:26:31.377"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:31.719">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:26:31.378" status="PASS" endtime="20170817 21:26:31.719"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:31.719">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:26:31.719">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:31.378" status="PASS" endtime="20170817 21:26:31.719"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:31.720">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:31.720" status="PASS" endtime="20170817 21:26:31.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:31.721">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:31.720" status="PASS" endtime="20170817 21:26:31.721"></status>
</kw>
<status starttime="20170817 21:26:31.374" status="PASS" endtime="20170817 21:26:31.721"></status>
</kw>
<status starttime="20170817 21:26:31.374" status="PASS" endtime="20170817 21:26:31.721"></status>
</kw>
<status starttime="20170817 21:26:31.373" status="PASS" endtime="20170817 21:26:31.721"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:31.722">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:26:31.721" status="PASS" endtime="20170817 21:26:31.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:31.724">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:31.723" status="PASS" endtime="20170817 21:26:31.724"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:31.725">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:31.725" status="PASS" endtime="20170817 21:26:31.725"></status>
</kw>
<status starttime="20170817 21:26:31.724" status="PASS" endtime="20170817 21:26:31.725"></status>
</kw>
<status starttime="20170817 21:26:31.723" status="PASS" endtime="20170817 21:26:31.725"></status>
</kw>
<status starttime="20170817 21:26:31.722" status="PASS" endtime="20170817 21:26:31.725"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:31.833">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:26:31.834">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:31.725" status="PASS" endtime="20170817 21:26:31.834"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:31.835">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:31.835" status="PASS" endtime="20170817 21:26:31.835"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:31.836">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:31.836" status="PASS" endtime="20170817 21:26:31.836"></status>
</kw>
<status starttime="20170817 21:26:31.836" status="PASS" endtime="20170817 21:26:31.837"></status>
</kw>
<status starttime="20170817 21:26:31.834" status="PASS" endtime="20170817 21:26:31.837"></status>
</kw>
<status starttime="20170817 21:26:31.834" status="PASS" endtime="20170817 21:26:31.837"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:26:31.837">Delete All Sessions</msg>
<status starttime="20170817 21:26:31.837" status="PASS" endtime="20170817 21:26:31.837"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:31.838">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:31.372" status="PASS" endtime="20170817 21:26:31.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:31.838">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:31.838" status="PASS" endtime="20170817 21:26:31.838"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:31.839">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:26:31.839">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:26:31.839">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:26:31.839" status="PASS" endtime="20170817 21:26:31.839"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:31.839">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:26:31.372" status="PASS" endtime="20170817 21:26:31.839"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:31.840">${host_state} = Quiesced</msg>
<status starttime="20170817 21:26:31.372" status="PASS" endtime="20170817 21:26:31.840"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:26:31.840">Running != Quiesced</msg>
<status starttime="20170817 21:26:31.840" status="FAIL" endtime="20170817 21:26:31.840"></status>
</kw>
<status starttime="20170817 21:26:31.097" status="FAIL" endtime="20170817 21:26:31.840"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:41.846">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:26:41.846" status="PASS" endtime="20170817 21:26:41.847"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:41.847">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:26:41.847" status="PASS" endtime="20170817 21:26:41.847"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:41.848">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:26:41.847" status="PASS" endtime="20170817 21:26:41.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:41.848">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:26:41.848" status="PASS" endtime="20170817 21:26:41.848"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:42.034">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:26:41.849" status="PASS" endtime="20170817 21:26:42.034"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:42.034">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:26:42.034">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:41.849" status="PASS" endtime="20170817 21:26:42.034"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:42.035">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:42.035" status="PASS" endtime="20170817 21:26:42.035"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:42.036">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:42.035" status="PASS" endtime="20170817 21:26:42.036"></status>
</kw>
<status starttime="20170817 21:26:41.845" status="PASS" endtime="20170817 21:26:42.036"></status>
</kw>
<status starttime="20170817 21:26:41.844" status="PASS" endtime="20170817 21:26:42.036"></status>
</kw>
<status starttime="20170817 21:26:41.844" status="PASS" endtime="20170817 21:26:42.036"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:42.037">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:26:42.036" status="PASS" endtime="20170817 21:26:42.037"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:42.039">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:42.038" status="PASS" endtime="20170817 21:26:42.039"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:42.040">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:42.040" status="PASS" endtime="20170817 21:26:42.040"></status>
</kw>
<status starttime="20170817 21:26:42.039" status="PASS" endtime="20170817 21:26:42.040"></status>
</kw>
<status starttime="20170817 21:26:42.038" status="PASS" endtime="20170817 21:26:42.040"></status>
</kw>
<status starttime="20170817 21:26:42.037" status="PASS" endtime="20170817 21:26:42.040"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:42.104">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:26:42.104">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:42.041" status="PASS" endtime="20170817 21:26:42.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:42.106">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:42.106" status="PASS" endtime="20170817 21:26:42.106"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:42.110">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:42.110" status="PASS" endtime="20170817 21:26:42.110"></status>
</kw>
<status starttime="20170817 21:26:42.106" status="PASS" endtime="20170817 21:26:42.110"></status>
</kw>
<status starttime="20170817 21:26:42.105" status="PASS" endtime="20170817 21:26:42.111"></status>
</kw>
<status starttime="20170817 21:26:42.105" status="PASS" endtime="20170817 21:26:42.111"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:26:42.111">Delete All Sessions</msg>
<status starttime="20170817 21:26:42.111" status="PASS" endtime="20170817 21:26:42.111"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:42.111">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:41.843" status="PASS" endtime="20170817 21:26:42.111"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:42.112">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:42.112" status="PASS" endtime="20170817 21:26:42.112"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:42.113">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:26:42.113">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:26:42.113">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:26:42.112" status="PASS" endtime="20170817 21:26:42.113"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:42.113">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:26:41.842" status="PASS" endtime="20170817 21:26:42.113"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:42.113">${power_state} = On</msg>
<status starttime="20170817 21:26:41.842" status="PASS" endtime="20170817 21:26:42.113"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:26:42.114" status="PASS" endtime="20170817 21:26:42.114"></status>
</kw>
<status starttime="20170817 21:26:41.842" status="PASS" endtime="20170817 21:26:42.114"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:42.118">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:26:42.118" status="PASS" endtime="20170817 21:26:42.119"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:42.119">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:26:42.119" status="PASS" endtime="20170817 21:26:42.119"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:42.120">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:26:42.119" status="PASS" endtime="20170817 21:26:42.120"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:42.121">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:26:42.120" status="PASS" endtime="20170817 21:26:42.121"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:42.420">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:26:42.121" status="PASS" endtime="20170817 21:26:42.420"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:42.420">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:26:42.420">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:42.121" status="PASS" endtime="20170817 21:26:42.420"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:42.421">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:42.420" status="PASS" endtime="20170817 21:26:42.421"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:42.422">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:42.421" status="PASS" endtime="20170817 21:26:42.422"></status>
</kw>
<status starttime="20170817 21:26:42.117" status="PASS" endtime="20170817 21:26:42.422"></status>
</kw>
<status starttime="20170817 21:26:42.117" status="PASS" endtime="20170817 21:26:42.422"></status>
</kw>
<status starttime="20170817 21:26:42.116" status="PASS" endtime="20170817 21:26:42.422"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:42.423">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:26:42.422" status="PASS" endtime="20170817 21:26:42.423"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:42.426">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:42.424" status="PASS" endtime="20170817 21:26:42.426"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:42.427">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:42.427" status="PASS" endtime="20170817 21:26:42.428"></status>
</kw>
<status starttime="20170817 21:26:42.426" status="PASS" endtime="20170817 21:26:42.428"></status>
</kw>
<status starttime="20170817 21:26:42.423" status="PASS" endtime="20170817 21:26:42.428"></status>
</kw>
<status starttime="20170817 21:26:42.423" status="PASS" endtime="20170817 21:26:42.428"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:42.527">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:26:42.528">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:42.428" status="PASS" endtime="20170817 21:26:42.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:42.530">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:42.530" status="PASS" endtime="20170817 21:26:42.531"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:42.531">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:42.531" status="PASS" endtime="20170817 21:26:42.532"></status>
</kw>
<status starttime="20170817 21:26:42.531" status="PASS" endtime="20170817 21:26:42.532"></status>
</kw>
<status starttime="20170817 21:26:42.529" status="PASS" endtime="20170817 21:26:42.532"></status>
</kw>
<status starttime="20170817 21:26:42.528" status="PASS" endtime="20170817 21:26:42.532"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:26:42.532">Delete All Sessions</msg>
<status starttime="20170817 21:26:42.532" status="PASS" endtime="20170817 21:26:42.532"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:42.533">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:42.115" status="PASS" endtime="20170817 21:26:42.533"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:42.534">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:42.533" status="PASS" endtime="20170817 21:26:42.534"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:42.534">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:26:42.534">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:26:42.535">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:26:42.534" status="PASS" endtime="20170817 21:26:42.535"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:42.535">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:26:42.115" status="PASS" endtime="20170817 21:26:42.535"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:42.536">${host_state} = Quiesced</msg>
<status starttime="20170817 21:26:42.115" status="PASS" endtime="20170817 21:26:42.536"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:26:42.537">Running != Quiesced</msg>
<status starttime="20170817 21:26:42.536" status="FAIL" endtime="20170817 21:26:42.537"></status>
</kw>
<status starttime="20170817 21:26:41.841" status="FAIL" endtime="20170817 21:26:42.537"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:52.544">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:26:52.543" status="PASS" endtime="20170817 21:26:52.544"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:52.545">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:26:52.545" status="PASS" endtime="20170817 21:26:52.545"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:52.546">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:26:52.546" status="PASS" endtime="20170817 21:26:52.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:52.548">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:26:52.547" status="PASS" endtime="20170817 21:26:52.548"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:52.761">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:26:52.549" status="PASS" endtime="20170817 21:26:52.761"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:52.762">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:26:52.762">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:52.548" status="PASS" endtime="20170817 21:26:52.762"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:52.762">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:52.762" status="PASS" endtime="20170817 21:26:52.762"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:52.763">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:52.763" status="PASS" endtime="20170817 21:26:52.763"></status>
</kw>
<status starttime="20170817 21:26:52.543" status="PASS" endtime="20170817 21:26:52.763"></status>
</kw>
<status starttime="20170817 21:26:52.542" status="PASS" endtime="20170817 21:26:52.763"></status>
</kw>
<status starttime="20170817 21:26:52.541" status="PASS" endtime="20170817 21:26:52.764"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:52.764">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:26:52.764" status="PASS" endtime="20170817 21:26:52.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:52.766">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:52.766" status="PASS" endtime="20170817 21:26:52.766"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:52.767">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:52.767" status="PASS" endtime="20170817 21:26:52.768"></status>
</kw>
<status starttime="20170817 21:26:52.766" status="PASS" endtime="20170817 21:26:52.768"></status>
</kw>
<status starttime="20170817 21:26:52.765" status="PASS" endtime="20170817 21:26:52.768"></status>
</kw>
<status starttime="20170817 21:26:52.764" status="PASS" endtime="20170817 21:26:52.768"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:52.831">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:26:52.831">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:52.768" status="PASS" endtime="20170817 21:26:52.831"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:52.833">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:52.833" status="PASS" endtime="20170817 21:26:52.833"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:52.834">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:52.834" status="PASS" endtime="20170817 21:26:52.834"></status>
</kw>
<status starttime="20170817 21:26:52.833" status="PASS" endtime="20170817 21:26:52.834"></status>
</kw>
<status starttime="20170817 21:26:52.832" status="PASS" endtime="20170817 21:26:52.834"></status>
</kw>
<status starttime="20170817 21:26:52.832" status="PASS" endtime="20170817 21:26:52.834"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:26:52.835">Delete All Sessions</msg>
<status starttime="20170817 21:26:52.835" status="PASS" endtime="20170817 21:26:52.835"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:52.835">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:52.540" status="PASS" endtime="20170817 21:26:52.835"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:52.836">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:52.835" status="PASS" endtime="20170817 21:26:52.836"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:52.836">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:26:52.836">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:26:52.836">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:26:52.836" status="PASS" endtime="20170817 21:26:52.836"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:52.837">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:26:52.539" status="PASS" endtime="20170817 21:26:52.837"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:52.837">${power_state} = On</msg>
<status starttime="20170817 21:26:52.539" status="PASS" endtime="20170817 21:26:52.837"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:26:52.837" status="PASS" endtime="20170817 21:26:52.838"></status>
</kw>
<status starttime="20170817 21:26:52.538" status="PASS" endtime="20170817 21:26:52.838"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:52.842">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:26:52.842" status="PASS" endtime="20170817 21:26:52.842"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:52.843">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:26:52.843" status="PASS" endtime="20170817 21:26:52.843"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:52.844">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:26:52.843" status="PASS" endtime="20170817 21:26:52.844"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:52.844">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:26:52.844" status="PASS" endtime="20170817 21:26:52.844"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:53.068">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:26:52.845" status="PASS" endtime="20170817 21:26:53.068"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:53.068">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:26:53.068">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:52.845" status="PASS" endtime="20170817 21:26:53.068"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:53.069">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:53.069" status="PASS" endtime="20170817 21:26:53.069"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:53.070">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:53.069" status="PASS" endtime="20170817 21:26:53.070"></status>
</kw>
<status starttime="20170817 21:26:52.841" status="PASS" endtime="20170817 21:26:53.070"></status>
</kw>
<status starttime="20170817 21:26:52.840" status="PASS" endtime="20170817 21:26:53.070"></status>
</kw>
<status starttime="20170817 21:26:52.840" status="PASS" endtime="20170817 21:26:53.070"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:53.071">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:26:53.070" status="PASS" endtime="20170817 21:26:53.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:53.073">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:53.072" status="PASS" endtime="20170817 21:26:53.073"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:53.074">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:26:53.073" status="PASS" endtime="20170817 21:26:53.074"></status>
</kw>
<status starttime="20170817 21:26:53.073" status="PASS" endtime="20170817 21:26:53.074"></status>
</kw>
<status starttime="20170817 21:26:53.071" status="PASS" endtime="20170817 21:26:53.074"></status>
</kw>
<status starttime="20170817 21:26:53.071" status="PASS" endtime="20170817 21:26:53.074"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:53.200">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:26:53.200">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:53.074" status="PASS" endtime="20170817 21:26:53.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:53.202">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:53.202" status="PASS" endtime="20170817 21:26:53.202"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:53.204">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:26:53.203" status="PASS" endtime="20170817 21:26:53.204"></status>
</kw>
<status starttime="20170817 21:26:53.202" status="PASS" endtime="20170817 21:26:53.204"></status>
</kw>
<status starttime="20170817 21:26:53.201" status="PASS" endtime="20170817 21:26:53.204"></status>
</kw>
<status starttime="20170817 21:26:53.201" status="PASS" endtime="20170817 21:26:53.204"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:26:53.204">Delete All Sessions</msg>
<status starttime="20170817 21:26:53.204" status="PASS" endtime="20170817 21:26:53.204"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:53.205">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:26:52.839" status="PASS" endtime="20170817 21:26:53.205"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:26:53.205">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:26:53.205" status="PASS" endtime="20170817 21:26:53.205"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:26:53.206">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:26:53.206">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:26:53.206">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:26:53.206" status="PASS" endtime="20170817 21:26:53.206"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:53.206">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:26:52.838" status="PASS" endtime="20170817 21:26:53.206"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:26:53.207">${host_state} = Quiesced</msg>
<status starttime="20170817 21:26:52.838" status="PASS" endtime="20170817 21:26:53.207"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:26:53.207">Running != Quiesced</msg>
<status starttime="20170817 21:26:53.207" status="FAIL" endtime="20170817 21:26:53.207"></status>
</kw>
<status starttime="20170817 21:26:52.537" status="FAIL" endtime="20170817 21:26:53.208"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:03.213">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:27:03.213" status="PASS" endtime="20170817 21:27:03.213"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:03.214">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:27:03.214" status="PASS" endtime="20170817 21:27:03.214"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:03.215">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:27:03.214" status="PASS" endtime="20170817 21:27:03.215"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:03.215">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:27:03.215" status="PASS" endtime="20170817 21:27:03.215"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:03.396">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:27:03.216" status="PASS" endtime="20170817 21:27:03.397"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:03.397">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:27:03.397">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:03.216" status="PASS" endtime="20170817 21:27:03.397"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:03.397">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:03.397" status="PASS" endtime="20170817 21:27:03.398"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:03.398">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:03.398" status="PASS" endtime="20170817 21:27:03.398"></status>
</kw>
<status starttime="20170817 21:27:03.212" status="PASS" endtime="20170817 21:27:03.398"></status>
</kw>
<status starttime="20170817 21:27:03.211" status="PASS" endtime="20170817 21:27:03.399"></status>
</kw>
<status starttime="20170817 21:27:03.211" status="PASS" endtime="20170817 21:27:03.399"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:03.399">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:27:03.399" status="PASS" endtime="20170817 21:27:03.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:03.401">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:03.401" status="PASS" endtime="20170817 21:27:03.401"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:03.402">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:03.402" status="PASS" endtime="20170817 21:27:03.402"></status>
</kw>
<status starttime="20170817 21:27:03.401" status="PASS" endtime="20170817 21:27:03.402"></status>
</kw>
<status starttime="20170817 21:27:03.400" status="PASS" endtime="20170817 21:27:03.403"></status>
</kw>
<status starttime="20170817 21:27:03.400" status="PASS" endtime="20170817 21:27:03.403"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:03.466">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:27:03.466">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:03.403" status="PASS" endtime="20170817 21:27:03.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:03.468">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:03.468" status="PASS" endtime="20170817 21:27:03.468"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:03.469">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:03.469" status="PASS" endtime="20170817 21:27:03.469"></status>
</kw>
<status starttime="20170817 21:27:03.468" status="PASS" endtime="20170817 21:27:03.469"></status>
</kw>
<status starttime="20170817 21:27:03.467" status="PASS" endtime="20170817 21:27:03.469"></status>
</kw>
<status starttime="20170817 21:27:03.467" status="PASS" endtime="20170817 21:27:03.469"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:27:03.470">Delete All Sessions</msg>
<status starttime="20170817 21:27:03.470" status="PASS" endtime="20170817 21:27:03.470"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:03.470">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:03.210" status="PASS" endtime="20170817 21:27:03.470"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:03.471">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:03.470" status="PASS" endtime="20170817 21:27:03.471"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:03.471">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:27:03.471">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:27:03.471">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:27:03.471" status="PASS" endtime="20170817 21:27:03.472"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:03.472">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:27:03.210" status="PASS" endtime="20170817 21:27:03.472"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:03.472">${power_state} = On</msg>
<status starttime="20170817 21:27:03.209" status="PASS" endtime="20170817 21:27:03.472"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:27:03.473" status="PASS" endtime="20170817 21:27:03.473"></status>
</kw>
<status starttime="20170817 21:27:03.209" status="PASS" endtime="20170817 21:27:03.473"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:03.476">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:27:03.476" status="PASS" endtime="20170817 21:27:03.477"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:03.478">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:27:03.477" status="PASS" endtime="20170817 21:27:03.478"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:03.478">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:27:03.478" status="PASS" endtime="20170817 21:27:03.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:03.479">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:27:03.479" status="PASS" endtime="20170817 21:27:03.479"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:03.660">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:27:03.480" status="PASS" endtime="20170817 21:27:03.660"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:03.660">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:27:03.660">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:03.479" status="PASS" endtime="20170817 21:27:03.660"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:03.661">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:03.660" status="PASS" endtime="20170817 21:27:03.661"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:03.661">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:03.661" status="PASS" endtime="20170817 21:27:03.661"></status>
</kw>
<status starttime="20170817 21:27:03.476" status="PASS" endtime="20170817 21:27:03.662"></status>
</kw>
<status starttime="20170817 21:27:03.475" status="PASS" endtime="20170817 21:27:03.662"></status>
</kw>
<status starttime="20170817 21:27:03.475" status="PASS" endtime="20170817 21:27:03.662"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:03.662">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:27:03.662" status="PASS" endtime="20170817 21:27:03.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:03.665">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:03.664" status="PASS" endtime="20170817 21:27:03.665"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:03.666">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:03.666" status="PASS" endtime="20170817 21:27:03.666"></status>
</kw>
<status starttime="20170817 21:27:03.665" status="PASS" endtime="20170817 21:27:03.666"></status>
</kw>
<status starttime="20170817 21:27:03.663" status="PASS" endtime="20170817 21:27:03.666"></status>
</kw>
<status starttime="20170817 21:27:03.663" status="PASS" endtime="20170817 21:27:03.667"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:03.767">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:27:03.768">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:03.667" status="PASS" endtime="20170817 21:27:03.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:03.769">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:03.769" status="PASS" endtime="20170817 21:27:03.769"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:03.770">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:03.770" status="PASS" endtime="20170817 21:27:03.770"></status>
</kw>
<status starttime="20170817 21:27:03.770" status="PASS" endtime="20170817 21:27:03.771"></status>
</kw>
<status starttime="20170817 21:27:03.768" status="PASS" endtime="20170817 21:27:03.771"></status>
</kw>
<status starttime="20170817 21:27:03.768" status="PASS" endtime="20170817 21:27:03.771"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:27:03.771">Delete All Sessions</msg>
<status starttime="20170817 21:27:03.771" status="PASS" endtime="20170817 21:27:03.771"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:03.771">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:03.474" status="PASS" endtime="20170817 21:27:03.771"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:03.772">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:03.772" status="PASS" endtime="20170817 21:27:03.772"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:03.773">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:27:03.773">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:27:03.773">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:27:03.772" status="PASS" endtime="20170817 21:27:03.773"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:03.773">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:27:03.473" status="PASS" endtime="20170817 21:27:03.773"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:03.773">${host_state} = Quiesced</msg>
<status starttime="20170817 21:27:03.473" status="PASS" endtime="20170817 21:27:03.773"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:27:03.774">Running != Quiesced</msg>
<status starttime="20170817 21:27:03.774" status="FAIL" endtime="20170817 21:27:03.774"></status>
</kw>
<status starttime="20170817 21:27:03.208" status="FAIL" endtime="20170817 21:27:03.774"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:13.780">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:27:13.780" status="PASS" endtime="20170817 21:27:13.780"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:13.781">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:27:13.781" status="PASS" endtime="20170817 21:27:13.781"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:13.782">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:27:13.782" status="PASS" endtime="20170817 21:27:13.782"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:13.783">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:27:13.783" status="PASS" endtime="20170817 21:27:13.783"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:13.995">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:27:13.784" status="PASS" endtime="20170817 21:27:13.995"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:13.995">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:27:13.995">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:13.784" status="PASS" endtime="20170817 21:27:13.995"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:13.996">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:13.995" status="PASS" endtime="20170817 21:27:13.996"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:13.996">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:13.996" status="PASS" endtime="20170817 21:27:13.996"></status>
</kw>
<status starttime="20170817 21:27:13.779" status="PASS" endtime="20170817 21:27:13.996"></status>
</kw>
<status starttime="20170817 21:27:13.779" status="PASS" endtime="20170817 21:27:13.997"></status>
</kw>
<status starttime="20170817 21:27:13.778" status="PASS" endtime="20170817 21:27:13.997"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:13.997">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:27:13.997" status="PASS" endtime="20170817 21:27:13.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:13.999">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:13.999" status="PASS" endtime="20170817 21:27:13.999"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:14.000">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:14.000" status="PASS" endtime="20170817 21:27:14.001"></status>
</kw>
<status starttime="20170817 21:27:14.000" status="PASS" endtime="20170817 21:27:14.001"></status>
</kw>
<status starttime="20170817 21:27:13.998" status="PASS" endtime="20170817 21:27:14.001"></status>
</kw>
<status starttime="20170817 21:27:13.998" status="PASS" endtime="20170817 21:27:14.001"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:14.065">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:27:14.065">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:14.001" status="PASS" endtime="20170817 21:27:14.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:14.067">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:14.066" status="PASS" endtime="20170817 21:27:14.067"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:14.068">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:14.068" status="PASS" endtime="20170817 21:27:14.068"></status>
</kw>
<status starttime="20170817 21:27:14.067" status="PASS" endtime="20170817 21:27:14.068"></status>
</kw>
<status starttime="20170817 21:27:14.066" status="PASS" endtime="20170817 21:27:14.068"></status>
</kw>
<status starttime="20170817 21:27:14.065" status="PASS" endtime="20170817 21:27:14.068"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:27:14.069">Delete All Sessions</msg>
<status starttime="20170817 21:27:14.069" status="PASS" endtime="20170817 21:27:14.069"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:14.069">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:13.777" status="PASS" endtime="20170817 21:27:14.069"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:14.070">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:14.069" status="PASS" endtime="20170817 21:27:14.070"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:14.070">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:27:14.070">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:27:14.070">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:27:14.070" status="PASS" endtime="20170817 21:27:14.070"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:14.071">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:27:13.776" status="PASS" endtime="20170817 21:27:14.071"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:14.071">${power_state} = On</msg>
<status starttime="20170817 21:27:13.776" status="PASS" endtime="20170817 21:27:14.071"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:27:14.071" status="PASS" endtime="20170817 21:27:14.072"></status>
</kw>
<status starttime="20170817 21:27:13.775" status="PASS" endtime="20170817 21:27:14.072"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:14.075">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:27:14.075" status="PASS" endtime="20170817 21:27:14.076"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:14.076">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:27:14.076" status="PASS" endtime="20170817 21:27:14.076"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:14.077">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:27:14.076" status="PASS" endtime="20170817 21:27:14.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:14.077">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:27:14.077" status="PASS" endtime="20170817 21:27:14.077"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:14.260">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:27:14.078" status="PASS" endtime="20170817 21:27:14.260"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:14.260">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:27:14.260">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:14.078" status="PASS" endtime="20170817 21:27:14.260"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:14.261">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:14.261" status="PASS" endtime="20170817 21:27:14.261"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:14.262">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:14.261" status="PASS" endtime="20170817 21:27:14.262"></status>
</kw>
<status starttime="20170817 21:27:14.074" status="PASS" endtime="20170817 21:27:14.262"></status>
</kw>
<status starttime="20170817 21:27:14.074" status="PASS" endtime="20170817 21:27:14.262"></status>
</kw>
<status starttime="20170817 21:27:14.073" status="PASS" endtime="20170817 21:27:14.262"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:14.263">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:27:14.262" status="PASS" endtime="20170817 21:27:14.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:14.265">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:14.264" status="PASS" endtime="20170817 21:27:14.265"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:14.266">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:14.265" status="PASS" endtime="20170817 21:27:14.266"></status>
</kw>
<status starttime="20170817 21:27:14.265" status="PASS" endtime="20170817 21:27:14.266"></status>
</kw>
<status starttime="20170817 21:27:14.263" status="PASS" endtime="20170817 21:27:14.266"></status>
</kw>
<status starttime="20170817 21:27:14.263" status="PASS" endtime="20170817 21:27:14.266"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:14.357">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:27:14.358">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:14.266" status="PASS" endtime="20170817 21:27:14.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:14.359">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:14.359" status="PASS" endtime="20170817 21:27:14.359"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:14.360">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:14.360" status="PASS" endtime="20170817 21:27:14.360"></status>
</kw>
<status starttime="20170817 21:27:14.360" status="PASS" endtime="20170817 21:27:14.361"></status>
</kw>
<status starttime="20170817 21:27:14.358" status="PASS" endtime="20170817 21:27:14.361"></status>
</kw>
<status starttime="20170817 21:27:14.358" status="PASS" endtime="20170817 21:27:14.361"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:27:14.361">Delete All Sessions</msg>
<status starttime="20170817 21:27:14.361" status="PASS" endtime="20170817 21:27:14.361"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:14.361">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:14.073" status="PASS" endtime="20170817 21:27:14.361"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:14.362">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:14.362" status="PASS" endtime="20170817 21:27:14.362"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:14.363">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:27:14.363">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:27:14.363">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:27:14.362" status="PASS" endtime="20170817 21:27:14.363"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:14.363">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:27:14.072" status="PASS" endtime="20170817 21:27:14.363"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:14.363">${host_state} = Quiesced</msg>
<status starttime="20170817 21:27:14.072" status="PASS" endtime="20170817 21:27:14.363"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:27:14.364">Running != Quiesced</msg>
<status starttime="20170817 21:27:14.364" status="FAIL" endtime="20170817 21:27:14.364"></status>
</kw>
<status starttime="20170817 21:27:13.775" status="FAIL" endtime="20170817 21:27:14.364"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:24.370">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:27:24.370" status="PASS" endtime="20170817 21:27:24.371"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:24.371">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:27:24.371" status="PASS" endtime="20170817 21:27:24.372"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:24.372">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:27:24.372" status="PASS" endtime="20170817 21:27:24.372"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:24.373">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:27:24.372" status="PASS" endtime="20170817 21:27:24.373"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:24.567">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:27:24.374" status="PASS" endtime="20170817 21:27:24.567"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:24.568">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:27:24.568">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:24.373" status="PASS" endtime="20170817 21:27:24.568"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:24.569">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:24.568" status="PASS" endtime="20170817 21:27:24.569"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:24.570">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:24.569" status="PASS" endtime="20170817 21:27:24.570"></status>
</kw>
<status starttime="20170817 21:27:24.369" status="PASS" endtime="20170817 21:27:24.570"></status>
</kw>
<status starttime="20170817 21:27:24.369" status="PASS" endtime="20170817 21:27:24.570"></status>
</kw>
<status starttime="20170817 21:27:24.368" status="PASS" endtime="20170817 21:27:24.570"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:24.571">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:27:24.570" status="PASS" endtime="20170817 21:27:24.571"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:24.573">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:24.572" status="PASS" endtime="20170817 21:27:24.573"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:24.574">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:24.573" status="PASS" endtime="20170817 21:27:24.574"></status>
</kw>
<status starttime="20170817 21:27:24.573" status="PASS" endtime="20170817 21:27:24.574"></status>
</kw>
<status starttime="20170817 21:27:24.571" status="PASS" endtime="20170817 21:27:24.574"></status>
</kw>
<status starttime="20170817 21:27:24.571" status="PASS" endtime="20170817 21:27:24.574"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:24.689">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:27:24.689">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:24.574" status="PASS" endtime="20170817 21:27:24.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:24.691">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:24.690" status="PASS" endtime="20170817 21:27:24.691"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:24.692">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:24.692" status="PASS" endtime="20170817 21:27:24.692"></status>
</kw>
<status starttime="20170817 21:27:24.691" status="PASS" endtime="20170817 21:27:24.692"></status>
</kw>
<status starttime="20170817 21:27:24.690" status="PASS" endtime="20170817 21:27:24.693"></status>
</kw>
<status starttime="20170817 21:27:24.689" status="PASS" endtime="20170817 21:27:24.693"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:27:24.693">Delete All Sessions</msg>
<status starttime="20170817 21:27:24.693" status="PASS" endtime="20170817 21:27:24.693"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:24.693">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:24.367" status="PASS" endtime="20170817 21:27:24.693"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:24.694">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:24.694" status="PASS" endtime="20170817 21:27:24.694"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:24.695">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:27:24.695">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:27:24.695">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:27:24.694" status="PASS" endtime="20170817 21:27:24.695"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:24.695">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:27:24.366" status="PASS" endtime="20170817 21:27:24.695"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:24.695">${power_state} = On</msg>
<status starttime="20170817 21:27:24.366" status="PASS" endtime="20170817 21:27:24.695"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:27:24.696" status="PASS" endtime="20170817 21:27:24.696"></status>
</kw>
<status starttime="20170817 21:27:24.365" status="PASS" endtime="20170817 21:27:24.696"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:24.700">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:27:24.699" status="PASS" endtime="20170817 21:27:24.700"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:24.701">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:27:24.701" status="PASS" endtime="20170817 21:27:24.701"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:24.702">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:27:24.701" status="PASS" endtime="20170817 21:27:24.702"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:24.703">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:27:24.702" status="PASS" endtime="20170817 21:27:24.703"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:24.949">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:27:24.704" status="PASS" endtime="20170817 21:27:24.949"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:24.949">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:27:24.949">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:24.703" status="PASS" endtime="20170817 21:27:24.949"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:24.950">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:24.949" status="PASS" endtime="20170817 21:27:24.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:24.951">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:24.950" status="PASS" endtime="20170817 21:27:24.951"></status>
</kw>
<status starttime="20170817 21:27:24.699" status="PASS" endtime="20170817 21:27:24.951"></status>
</kw>
<status starttime="20170817 21:27:24.698" status="PASS" endtime="20170817 21:27:24.951"></status>
</kw>
<status starttime="20170817 21:27:24.698" status="PASS" endtime="20170817 21:27:24.951"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:24.952">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:27:24.951" status="PASS" endtime="20170817 21:27:24.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:24.957">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:24.953" status="PASS" endtime="20170817 21:27:24.957"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:24.958">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:24.958" status="PASS" endtime="20170817 21:27:24.958"></status>
</kw>
<status starttime="20170817 21:27:24.957" status="PASS" endtime="20170817 21:27:24.958"></status>
</kw>
<status starttime="20170817 21:27:24.952" status="PASS" endtime="20170817 21:27:24.958"></status>
</kw>
<status starttime="20170817 21:27:24.952" status="PASS" endtime="20170817 21:27:24.958"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:25.125">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:27:25.125">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:24.959" status="PASS" endtime="20170817 21:27:25.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:25.127">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:25.126" status="PASS" endtime="20170817 21:27:25.127"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:25.128">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:25.128" status="PASS" endtime="20170817 21:27:25.128"></status>
</kw>
<status starttime="20170817 21:27:25.127" status="PASS" endtime="20170817 21:27:25.128"></status>
</kw>
<status starttime="20170817 21:27:25.126" status="PASS" endtime="20170817 21:27:25.128"></status>
</kw>
<status starttime="20170817 21:27:25.125" status="PASS" endtime="20170817 21:27:25.128"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:27:25.129">Delete All Sessions</msg>
<status starttime="20170817 21:27:25.128" status="PASS" endtime="20170817 21:27:25.129"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:25.129">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:24.697" status="PASS" endtime="20170817 21:27:25.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:25.129">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:25.129" status="PASS" endtime="20170817 21:27:25.130"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:25.130">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:27:25.130">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:27:25.130">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:27:25.130" status="PASS" endtime="20170817 21:27:25.130"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:25.131">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:27:24.697" status="PASS" endtime="20170817 21:27:25.131"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:25.131">${host_state} = Quiesced</msg>
<status starttime="20170817 21:27:24.696" status="PASS" endtime="20170817 21:27:25.131"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:27:25.132">Running != Quiesced</msg>
<status starttime="20170817 21:27:25.131" status="FAIL" endtime="20170817 21:27:25.132"></status>
</kw>
<status starttime="20170817 21:27:24.365" status="FAIL" endtime="20170817 21:27:25.132"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:35.137">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:27:35.137" status="PASS" endtime="20170817 21:27:35.137"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:35.138">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:27:35.138" status="PASS" endtime="20170817 21:27:35.138"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:35.139">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:27:35.138" status="PASS" endtime="20170817 21:27:35.139"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:35.140">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:27:35.139" status="PASS" endtime="20170817 21:27:35.140"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:35.320">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:27:35.141" status="PASS" endtime="20170817 21:27:35.320"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:35.320">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:27:35.320">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:35.140" status="PASS" endtime="20170817 21:27:35.320"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:35.321">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:35.321" status="PASS" endtime="20170817 21:27:35.321"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:35.322">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:35.321" status="PASS" endtime="20170817 21:27:35.322"></status>
</kw>
<status starttime="20170817 21:27:35.136" status="PASS" endtime="20170817 21:27:35.322"></status>
</kw>
<status starttime="20170817 21:27:35.136" status="PASS" endtime="20170817 21:27:35.322"></status>
</kw>
<status starttime="20170817 21:27:35.135" status="PASS" endtime="20170817 21:27:35.322"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:35.323">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:27:35.323" status="PASS" endtime="20170817 21:27:35.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:35.326">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:35.325" status="PASS" endtime="20170817 21:27:35.326"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:35.328">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:35.327" status="PASS" endtime="20170817 21:27:35.328"></status>
</kw>
<status starttime="20170817 21:27:35.327" status="PASS" endtime="20170817 21:27:35.328"></status>
</kw>
<status starttime="20170817 21:27:35.324" status="PASS" endtime="20170817 21:27:35.328"></status>
</kw>
<status starttime="20170817 21:27:35.324" status="PASS" endtime="20170817 21:27:35.328"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:35.391">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:27:35.391">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:35.328" status="PASS" endtime="20170817 21:27:35.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:35.393">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:35.393" status="PASS" endtime="20170817 21:27:35.393"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:35.394">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:35.394" status="PASS" endtime="20170817 21:27:35.394"></status>
</kw>
<status starttime="20170817 21:27:35.393" status="PASS" endtime="20170817 21:27:35.394"></status>
</kw>
<status starttime="20170817 21:27:35.392" status="PASS" endtime="20170817 21:27:35.395"></status>
</kw>
<status starttime="20170817 21:27:35.392" status="PASS" endtime="20170817 21:27:35.395"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:27:35.395">Delete All Sessions</msg>
<status starttime="20170817 21:27:35.395" status="PASS" endtime="20170817 21:27:35.395"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:35.395">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:35.134" status="PASS" endtime="20170817 21:27:35.395"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:35.396">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:35.396" status="PASS" endtime="20170817 21:27:35.396"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:35.397">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:27:35.397">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:27:35.397">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:27:35.396" status="PASS" endtime="20170817 21:27:35.397"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:35.397">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:27:35.134" status="PASS" endtime="20170817 21:27:35.397"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:35.397">${power_state} = On</msg>
<status starttime="20170817 21:27:35.133" status="PASS" endtime="20170817 21:27:35.397"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:27:35.398" status="PASS" endtime="20170817 21:27:35.398"></status>
</kw>
<status starttime="20170817 21:27:35.133" status="PASS" endtime="20170817 21:27:35.398"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:35.402">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:27:35.402" status="PASS" endtime="20170817 21:27:35.402"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:35.403">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:27:35.403" status="PASS" endtime="20170817 21:27:35.403"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:35.404">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:27:35.403" status="PASS" endtime="20170817 21:27:35.404"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:35.404">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:27:35.404" status="PASS" endtime="20170817 21:27:35.404"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:35.588">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:27:35.405" status="PASS" endtime="20170817 21:27:35.588"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:35.588">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:27:35.588">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:35.405" status="PASS" endtime="20170817 21:27:35.588"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:35.589">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:35.589" status="PASS" endtime="20170817 21:27:35.589"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:35.590">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:35.589" status="PASS" endtime="20170817 21:27:35.590"></status>
</kw>
<status starttime="20170817 21:27:35.401" status="PASS" endtime="20170817 21:27:35.590"></status>
</kw>
<status starttime="20170817 21:27:35.400" status="PASS" endtime="20170817 21:27:35.590"></status>
</kw>
<status starttime="20170817 21:27:35.400" status="PASS" endtime="20170817 21:27:35.590"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:35.591">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:27:35.590" status="PASS" endtime="20170817 21:27:35.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:35.593">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:35.592" status="PASS" endtime="20170817 21:27:35.593"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:35.594">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:35.593" status="PASS" endtime="20170817 21:27:35.594"></status>
</kw>
<status starttime="20170817 21:27:35.593" status="PASS" endtime="20170817 21:27:35.594"></status>
</kw>
<status starttime="20170817 21:27:35.591" status="PASS" endtime="20170817 21:27:35.594"></status>
</kw>
<status starttime="20170817 21:27:35.591" status="PASS" endtime="20170817 21:27:35.594"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:35.693">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:27:35.693">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:35.594" status="PASS" endtime="20170817 21:27:35.693"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:35.695">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:35.694" status="PASS" endtime="20170817 21:27:35.695"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:35.696">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:35.696" status="PASS" endtime="20170817 21:27:35.696"></status>
</kw>
<status starttime="20170817 21:27:35.695" status="PASS" endtime="20170817 21:27:35.696"></status>
</kw>
<status starttime="20170817 21:27:35.694" status="PASS" endtime="20170817 21:27:35.696"></status>
</kw>
<status starttime="20170817 21:27:35.693" status="PASS" endtime="20170817 21:27:35.696"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:27:35.697">Delete All Sessions</msg>
<status starttime="20170817 21:27:35.696" status="PASS" endtime="20170817 21:27:35.697"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:35.697">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:35.399" status="PASS" endtime="20170817 21:27:35.697"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:35.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:35.697" status="PASS" endtime="20170817 21:27:35.698"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:35.698">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:27:35.698">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:27:35.698">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:27:35.698" status="PASS" endtime="20170817 21:27:35.698"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:35.699">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:27:35.399" status="PASS" endtime="20170817 21:27:35.699"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:35.699">${host_state} = Quiesced</msg>
<status starttime="20170817 21:27:35.398" status="PASS" endtime="20170817 21:27:35.699"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:27:35.700">Running != Quiesced</msg>
<status starttime="20170817 21:27:35.699" status="FAIL" endtime="20170817 21:27:35.700"></status>
</kw>
<status starttime="20170817 21:27:35.132" status="FAIL" endtime="20170817 21:27:35.700"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:45.705">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:27:45.705" status="PASS" endtime="20170817 21:27:45.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:45.706">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:27:45.706" status="PASS" endtime="20170817 21:27:45.706"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:45.707">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:27:45.706" status="PASS" endtime="20170817 21:27:45.707"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:45.707">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:27:45.707" status="PASS" endtime="20170817 21:27:45.707"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:45.893">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:27:45.708" status="PASS" endtime="20170817 21:27:45.893"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:45.893">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:27:45.893">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:45.708" status="PASS" endtime="20170817 21:27:45.893"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:45.894">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:45.894" status="PASS" endtime="20170817 21:27:45.894"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:45.895">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:45.894" status="PASS" endtime="20170817 21:27:45.895"></status>
</kw>
<status starttime="20170817 21:27:45.704" status="PASS" endtime="20170817 21:27:45.895"></status>
</kw>
<status starttime="20170817 21:27:45.704" status="PASS" endtime="20170817 21:27:45.895"></status>
</kw>
<status starttime="20170817 21:27:45.703" status="PASS" endtime="20170817 21:27:45.895"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:45.896">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:27:45.895" status="PASS" endtime="20170817 21:27:45.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:45.898">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:45.897" status="PASS" endtime="20170817 21:27:45.898"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:45.899">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:45.898" status="PASS" endtime="20170817 21:27:45.899"></status>
</kw>
<status starttime="20170817 21:27:45.898" status="PASS" endtime="20170817 21:27:45.899"></status>
</kw>
<status starttime="20170817 21:27:45.896" status="PASS" endtime="20170817 21:27:45.899"></status>
</kw>
<status starttime="20170817 21:27:45.896" status="PASS" endtime="20170817 21:27:45.899"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:45.962">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:27:45.962">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:45.899" status="PASS" endtime="20170817 21:27:45.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:45.964">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:45.964" status="PASS" endtime="20170817 21:27:45.964"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:45.965">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:45.965" status="PASS" endtime="20170817 21:27:45.965"></status>
</kw>
<status starttime="20170817 21:27:45.964" status="PASS" endtime="20170817 21:27:45.965"></status>
</kw>
<status starttime="20170817 21:27:45.963" status="PASS" endtime="20170817 21:27:45.966"></status>
</kw>
<status starttime="20170817 21:27:45.963" status="PASS" endtime="20170817 21:27:45.966"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:27:45.966">Delete All Sessions</msg>
<status starttime="20170817 21:27:45.966" status="PASS" endtime="20170817 21:27:45.966"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:45.966">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:45.702" status="PASS" endtime="20170817 21:27:45.966"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:45.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:45.967" status="PASS" endtime="20170817 21:27:45.967"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:45.967">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:27:45.968">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:27:45.968">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:27:45.967" status="PASS" endtime="20170817 21:27:45.968"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:45.968">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:27:45.702" status="PASS" endtime="20170817 21:27:45.968"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:45.969">${power_state} = On</msg>
<status starttime="20170817 21:27:45.701" status="PASS" endtime="20170817 21:27:45.969"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:27:45.969" status="PASS" endtime="20170817 21:27:45.969"></status>
</kw>
<status starttime="20170817 21:27:45.701" status="PASS" endtime="20170817 21:27:45.969"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:45.973">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:27:45.973" status="PASS" endtime="20170817 21:27:45.974"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:45.974">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:27:45.974" status="PASS" endtime="20170817 21:27:45.974"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:45.975">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:27:45.975" status="PASS" endtime="20170817 21:27:45.975"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:45.976">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:27:45.975" status="PASS" endtime="20170817 21:27:45.976"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:46.154">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:27:45.976" status="PASS" endtime="20170817 21:27:46.154"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:46.155">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:27:46.155">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:45.976" status="PASS" endtime="20170817 21:27:46.155"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:46.155">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:46.155" status="PASS" endtime="20170817 21:27:46.155"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:46.156">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:46.156" status="PASS" endtime="20170817 21:27:46.156"></status>
</kw>
<status starttime="20170817 21:27:45.972" status="PASS" endtime="20170817 21:27:46.156"></status>
</kw>
<status starttime="20170817 21:27:45.972" status="PASS" endtime="20170817 21:27:46.156"></status>
</kw>
<status starttime="20170817 21:27:45.971" status="PASS" endtime="20170817 21:27:46.156"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:46.157">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:27:46.157" status="PASS" endtime="20170817 21:27:46.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:46.159">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:46.158" status="PASS" endtime="20170817 21:27:46.159"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:46.160">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:46.160" status="PASS" endtime="20170817 21:27:46.160"></status>
</kw>
<status starttime="20170817 21:27:46.159" status="PASS" endtime="20170817 21:27:46.160"></status>
</kw>
<status starttime="20170817 21:27:46.158" status="PASS" endtime="20170817 21:27:46.160"></status>
</kw>
<status starttime="20170817 21:27:46.157" status="PASS" endtime="20170817 21:27:46.160"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:46.270">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:27:46.270">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:46.161" status="PASS" endtime="20170817 21:27:46.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:46.272">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:46.271" status="PASS" endtime="20170817 21:27:46.272"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:46.273">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:46.272" status="PASS" endtime="20170817 21:27:46.273"></status>
</kw>
<status starttime="20170817 21:27:46.272" status="PASS" endtime="20170817 21:27:46.273"></status>
</kw>
<status starttime="20170817 21:27:46.271" status="PASS" endtime="20170817 21:27:46.273"></status>
</kw>
<status starttime="20170817 21:27:46.270" status="PASS" endtime="20170817 21:27:46.273"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:27:46.273">Delete All Sessions</msg>
<status starttime="20170817 21:27:46.273" status="PASS" endtime="20170817 21:27:46.274"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:46.274">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:45.970" status="PASS" endtime="20170817 21:27:46.274"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:46.274">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:46.274" status="PASS" endtime="20170817 21:27:46.274"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:46.275">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:27:46.275">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:27:46.275">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:27:46.275" status="PASS" endtime="20170817 21:27:46.275"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:46.276">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:27:45.970" status="PASS" endtime="20170817 21:27:46.276"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:46.276">${host_state} = Quiesced</msg>
<status starttime="20170817 21:27:45.970" status="PASS" endtime="20170817 21:27:46.276"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:27:46.277">Running != Quiesced</msg>
<status starttime="20170817 21:27:46.276" status="FAIL" endtime="20170817 21:27:46.277"></status>
</kw>
<status starttime="20170817 21:27:45.700" status="FAIL" endtime="20170817 21:27:46.277"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:56.282">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:27:56.282" status="PASS" endtime="20170817 21:27:56.283"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:56.283">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:27:56.283" status="PASS" endtime="20170817 21:27:56.283"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:56.284">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:27:56.284" status="PASS" endtime="20170817 21:27:56.284"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:56.285">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:27:56.284" status="PASS" endtime="20170817 21:27:56.285"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:56.536">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:27:56.285" status="PASS" endtime="20170817 21:27:56.536"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:56.536">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:27:56.536">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:56.285" status="PASS" endtime="20170817 21:27:56.536"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:56.537">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:56.536" status="PASS" endtime="20170817 21:27:56.537"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:56.537">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:56.537" status="PASS" endtime="20170817 21:27:56.537"></status>
</kw>
<status starttime="20170817 21:27:56.282" status="PASS" endtime="20170817 21:27:56.537"></status>
</kw>
<status starttime="20170817 21:27:56.281" status="PASS" endtime="20170817 21:27:56.538"></status>
</kw>
<status starttime="20170817 21:27:56.280" status="PASS" endtime="20170817 21:27:56.538"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:56.538">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:27:56.538" status="PASS" endtime="20170817 21:27:56.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:56.541">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:56.540" status="PASS" endtime="20170817 21:27:56.541"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:56.542">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:56.541" status="PASS" endtime="20170817 21:27:56.542"></status>
</kw>
<status starttime="20170817 21:27:56.541" status="PASS" endtime="20170817 21:27:56.542"></status>
</kw>
<status starttime="20170817 21:27:56.539" status="PASS" endtime="20170817 21:27:56.542"></status>
</kw>
<status starttime="20170817 21:27:56.539" status="PASS" endtime="20170817 21:27:56.542"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:56.605">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:27:56.605">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:56.543" status="PASS" endtime="20170817 21:27:56.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:56.607">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:56.606" status="PASS" endtime="20170817 21:27:56.607"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:56.608">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:56.607" status="PASS" endtime="20170817 21:27:56.608"></status>
</kw>
<status starttime="20170817 21:27:56.607" status="PASS" endtime="20170817 21:27:56.608"></status>
</kw>
<status starttime="20170817 21:27:56.606" status="PASS" endtime="20170817 21:27:56.608"></status>
</kw>
<status starttime="20170817 21:27:56.605" status="PASS" endtime="20170817 21:27:56.608"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:27:56.608">Delete All Sessions</msg>
<status starttime="20170817 21:27:56.608" status="PASS" endtime="20170817 21:27:56.608"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:56.609">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:56.280" status="PASS" endtime="20170817 21:27:56.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:56.609">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:56.609" status="PASS" endtime="20170817 21:27:56.610"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:56.610">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:27:56.610">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:27:56.610">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:27:56.610" status="PASS" endtime="20170817 21:27:56.610"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:56.611">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:27:56.279" status="PASS" endtime="20170817 21:27:56.611"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:56.611">${power_state} = On</msg>
<status starttime="20170817 21:27:56.278" status="PASS" endtime="20170817 21:27:56.611"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:27:56.611" status="PASS" endtime="20170817 21:27:56.611"></status>
</kw>
<status starttime="20170817 21:27:56.278" status="PASS" endtime="20170817 21:27:56.612"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:56.615">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:27:56.615" status="PASS" endtime="20170817 21:27:56.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:56.616">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:27:56.616" status="PASS" endtime="20170817 21:27:56.616"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:56.617">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:27:56.616" status="PASS" endtime="20170817 21:27:56.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:56.617">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:27:56.617" status="PASS" endtime="20170817 21:27:56.617"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:56.800">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:27:56.618" status="PASS" endtime="20170817 21:27:56.800"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:56.800">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:27:56.800">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:56.618" status="PASS" endtime="20170817 21:27:56.800"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:56.801">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:56.800" status="PASS" endtime="20170817 21:27:56.801"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:56.802">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:56.801" status="PASS" endtime="20170817 21:27:56.802"></status>
</kw>
<status starttime="20170817 21:27:56.614" status="PASS" endtime="20170817 21:27:56.802"></status>
</kw>
<status starttime="20170817 21:27:56.614" status="PASS" endtime="20170817 21:27:56.802"></status>
</kw>
<status starttime="20170817 21:27:56.613" status="PASS" endtime="20170817 21:27:56.802"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:56.802">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:27:56.802" status="PASS" endtime="20170817 21:27:56.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:56.805">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:56.804" status="PASS" endtime="20170817 21:27:56.805"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:56.805">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:27:56.805" status="PASS" endtime="20170817 21:27:56.806"></status>
</kw>
<status starttime="20170817 21:27:56.805" status="PASS" endtime="20170817 21:27:56.806"></status>
</kw>
<status starttime="20170817 21:27:56.803" status="PASS" endtime="20170817 21:27:56.806"></status>
</kw>
<status starttime="20170817 21:27:56.803" status="PASS" endtime="20170817 21:27:56.806"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:56.904">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:27:56.904">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:56.806" status="PASS" endtime="20170817 21:27:56.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:56.906">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:56.905" status="PASS" endtime="20170817 21:27:56.906"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:56.907">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:27:56.906" status="PASS" endtime="20170817 21:27:56.907"></status>
</kw>
<status starttime="20170817 21:27:56.906" status="PASS" endtime="20170817 21:27:56.907"></status>
</kw>
<status starttime="20170817 21:27:56.905" status="PASS" endtime="20170817 21:27:56.907"></status>
</kw>
<status starttime="20170817 21:27:56.904" status="PASS" endtime="20170817 21:27:56.907"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:27:56.907">Delete All Sessions</msg>
<status starttime="20170817 21:27:56.907" status="PASS" endtime="20170817 21:27:56.908"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:56.908">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:27:56.613" status="PASS" endtime="20170817 21:27:56.908"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:27:56.909">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:27:56.908" status="PASS" endtime="20170817 21:27:56.909"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:27:56.909">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:27:56.909">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:27:56.909">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:27:56.909" status="PASS" endtime="20170817 21:27:56.909"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:56.910">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:27:56.612" status="PASS" endtime="20170817 21:27:56.910"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:27:56.910">${host_state} = Quiesced</msg>
<status starttime="20170817 21:27:56.612" status="PASS" endtime="20170817 21:27:56.910"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:27:56.911">Running != Quiesced</msg>
<status starttime="20170817 21:27:56.910" status="FAIL" endtime="20170817 21:27:56.911"></status>
</kw>
<status starttime="20170817 21:27:56.277" status="FAIL" endtime="20170817 21:27:56.911"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:06.916">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:28:06.916" status="PASS" endtime="20170817 21:28:06.917"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:06.917">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:28:06.917" status="PASS" endtime="20170817 21:28:06.917"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:06.918">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:28:06.918" status="PASS" endtime="20170817 21:28:06.918"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:06.919">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:28:06.918" status="PASS" endtime="20170817 21:28:06.919"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:07.163">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:28:06.919" status="PASS" endtime="20170817 21:28:07.163"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:07.163">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:28:07.163">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:06.919" status="PASS" endtime="20170817 21:28:07.163"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:07.164">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:07.164" status="PASS" endtime="20170817 21:28:07.164"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:07.165">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:07.164" status="PASS" endtime="20170817 21:28:07.165"></status>
</kw>
<status starttime="20170817 21:28:06.915" status="PASS" endtime="20170817 21:28:07.165"></status>
</kw>
<status starttime="20170817 21:28:06.915" status="PASS" endtime="20170817 21:28:07.165"></status>
</kw>
<status starttime="20170817 21:28:06.914" status="PASS" endtime="20170817 21:28:07.165"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:07.166">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:28:07.165" status="PASS" endtime="20170817 21:28:07.166"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:07.168">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:07.167" status="PASS" endtime="20170817 21:28:07.168"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:07.170">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:07.169" status="PASS" endtime="20170817 21:28:07.170"></status>
</kw>
<status starttime="20170817 21:28:07.168" status="PASS" endtime="20170817 21:28:07.170"></status>
</kw>
<status starttime="20170817 21:28:07.167" status="PASS" endtime="20170817 21:28:07.170"></status>
</kw>
<status starttime="20170817 21:28:07.166" status="PASS" endtime="20170817 21:28:07.170"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:07.236">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:28:07.236">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:07.170" status="PASS" endtime="20170817 21:28:07.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:07.238">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:07.238" status="PASS" endtime="20170817 21:28:07.238"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:07.240">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:07.239" status="PASS" endtime="20170817 21:28:07.240"></status>
</kw>
<status starttime="20170817 21:28:07.238" status="PASS" endtime="20170817 21:28:07.240"></status>
</kw>
<status starttime="20170817 21:28:07.237" status="PASS" endtime="20170817 21:28:07.240"></status>
</kw>
<status starttime="20170817 21:28:07.237" status="PASS" endtime="20170817 21:28:07.240"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:28:07.240">Delete All Sessions</msg>
<status starttime="20170817 21:28:07.240" status="PASS" endtime="20170817 21:28:07.240"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:07.241">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:06.913" status="PASS" endtime="20170817 21:28:07.241"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:07.241">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:07.241" status="PASS" endtime="20170817 21:28:07.241"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:07.242">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:28:07.242">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:28:07.242">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:28:07.242" status="PASS" endtime="20170817 21:28:07.242"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:07.242">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:28:06.913" status="PASS" endtime="20170817 21:28:07.242"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:07.243">${power_state} = On</msg>
<status starttime="20170817 21:28:06.912" status="PASS" endtime="20170817 21:28:07.243"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:28:07.243" status="PASS" endtime="20170817 21:28:07.243"></status>
</kw>
<status starttime="20170817 21:28:06.912" status="PASS" endtime="20170817 21:28:07.243"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:07.247">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:28:07.246" status="PASS" endtime="20170817 21:28:07.247"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:07.248">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:28:07.247" status="PASS" endtime="20170817 21:28:07.248"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:07.248">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:28:07.248" status="PASS" endtime="20170817 21:28:07.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:07.249">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:28:07.249" status="PASS" endtime="20170817 21:28:07.249"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:07.450">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:28:07.250" status="PASS" endtime="20170817 21:28:07.450"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:07.450">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:28:07.450">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:07.249" status="PASS" endtime="20170817 21:28:07.450"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:07.451">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:07.450" status="PASS" endtime="20170817 21:28:07.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:07.451">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:07.451" status="PASS" endtime="20170817 21:28:07.451"></status>
</kw>
<status starttime="20170817 21:28:07.246" status="PASS" endtime="20170817 21:28:07.451"></status>
</kw>
<status starttime="20170817 21:28:07.246" status="PASS" endtime="20170817 21:28:07.452"></status>
</kw>
<status starttime="20170817 21:28:07.245" status="PASS" endtime="20170817 21:28:07.452"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:07.452">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:28:07.452" status="PASS" endtime="20170817 21:28:07.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:07.455">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:07.454" status="PASS" endtime="20170817 21:28:07.455"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:07.456">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:07.456" status="PASS" endtime="20170817 21:28:07.456"></status>
</kw>
<status starttime="20170817 21:28:07.455" status="PASS" endtime="20170817 21:28:07.456"></status>
</kw>
<status starttime="20170817 21:28:07.453" status="PASS" endtime="20170817 21:28:07.457"></status>
</kw>
<status starttime="20170817 21:28:07.453" status="PASS" endtime="20170817 21:28:07.457"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:07.545">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:28:07.545">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:07.457" status="PASS" endtime="20170817 21:28:07.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:07.547">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:07.547" status="PASS" endtime="20170817 21:28:07.547"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:07.548">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:07.548" status="PASS" endtime="20170817 21:28:07.548"></status>
</kw>
<status starttime="20170817 21:28:07.547" status="PASS" endtime="20170817 21:28:07.548"></status>
</kw>
<status starttime="20170817 21:28:07.546" status="PASS" endtime="20170817 21:28:07.549"></status>
</kw>
<status starttime="20170817 21:28:07.546" status="PASS" endtime="20170817 21:28:07.549"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:28:07.549">Delete All Sessions</msg>
<status starttime="20170817 21:28:07.549" status="PASS" endtime="20170817 21:28:07.549"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:07.549">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:07.244" status="PASS" endtime="20170817 21:28:07.549"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:07.550">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:07.550" status="PASS" endtime="20170817 21:28:07.550"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:07.551">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:28:07.551">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:28:07.551">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:28:07.550" status="PASS" endtime="20170817 21:28:07.551"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:07.551">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:28:07.244" status="PASS" endtime="20170817 21:28:07.551"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:07.551">${host_state} = Quiesced</msg>
<status starttime="20170817 21:28:07.243" status="PASS" endtime="20170817 21:28:07.551"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:28:07.552">Running != Quiesced</msg>
<status starttime="20170817 21:28:07.552" status="FAIL" endtime="20170817 21:28:07.552"></status>
</kw>
<status starttime="20170817 21:28:06.911" status="FAIL" endtime="20170817 21:28:07.552"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:17.557">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:28:17.557" status="PASS" endtime="20170817 21:28:17.558"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:17.561">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:28:17.558" status="PASS" endtime="20170817 21:28:17.561"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:17.562">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:28:17.562" status="PASS" endtime="20170817 21:28:17.562"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:17.563">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:28:17.562" status="PASS" endtime="20170817 21:28:17.563"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:17.880">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:28:17.564" status="PASS" endtime="20170817 21:28:17.880"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:17.881">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:28:17.881">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:17.563" status="PASS" endtime="20170817 21:28:17.881"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:17.881">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:17.881" status="PASS" endtime="20170817 21:28:17.882"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:17.882">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:17.882" status="PASS" endtime="20170817 21:28:17.882"></status>
</kw>
<status starttime="20170817 21:28:17.556" status="PASS" endtime="20170817 21:28:17.882"></status>
</kw>
<status starttime="20170817 21:28:17.556" status="PASS" endtime="20170817 21:28:17.883"></status>
</kw>
<status starttime="20170817 21:28:17.555" status="PASS" endtime="20170817 21:28:17.883"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:17.883">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:28:17.883" status="PASS" endtime="20170817 21:28:17.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:17.886">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:17.885" status="PASS" endtime="20170817 21:28:17.886"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:17.888">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:17.887" status="PASS" endtime="20170817 21:28:17.888"></status>
</kw>
<status starttime="20170817 21:28:17.887" status="PASS" endtime="20170817 21:28:17.888"></status>
</kw>
<status starttime="20170817 21:28:17.884" status="PASS" endtime="20170817 21:28:17.888"></status>
</kw>
<status starttime="20170817 21:28:17.884" status="PASS" endtime="20170817 21:28:17.888"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:17.952">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:28:17.952">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:17.888" status="PASS" endtime="20170817 21:28:17.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:17.954">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:17.953" status="PASS" endtime="20170817 21:28:17.954"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:17.955">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:17.954" status="PASS" endtime="20170817 21:28:17.955"></status>
</kw>
<status starttime="20170817 21:28:17.954" status="PASS" endtime="20170817 21:28:17.955"></status>
</kw>
<status starttime="20170817 21:28:17.953" status="PASS" endtime="20170817 21:28:17.955"></status>
</kw>
<status starttime="20170817 21:28:17.952" status="PASS" endtime="20170817 21:28:17.955"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:28:17.955">Delete All Sessions</msg>
<status starttime="20170817 21:28:17.955" status="PASS" endtime="20170817 21:28:17.955"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:17.956">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:17.555" status="PASS" endtime="20170817 21:28:17.956"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:17.956">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:17.956" status="PASS" endtime="20170817 21:28:17.956"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:17.957">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:28:17.957">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:28:17.957">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:28:17.957" status="PASS" endtime="20170817 21:28:17.957"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:17.957">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:28:17.554" status="PASS" endtime="20170817 21:28:17.957"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:17.958">${power_state} = On</msg>
<status starttime="20170817 21:28:17.554" status="PASS" endtime="20170817 21:28:17.958"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:28:17.958" status="PASS" endtime="20170817 21:28:17.958"></status>
</kw>
<status starttime="20170817 21:28:17.553" status="PASS" endtime="20170817 21:28:17.958"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:17.962">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:28:17.962" status="PASS" endtime="20170817 21:28:17.963"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:17.963">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:28:17.963" status="PASS" endtime="20170817 21:28:17.963"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:17.964">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:28:17.964" status="PASS" endtime="20170817 21:28:17.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:17.965">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:28:17.964" status="PASS" endtime="20170817 21:28:17.965"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:18.145">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:28:17.965" status="PASS" endtime="20170817 21:28:18.145"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:18.145">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:28:18.145">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:17.965" status="PASS" endtime="20170817 21:28:18.145"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:18.146">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:18.146" status="PASS" endtime="20170817 21:28:18.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:18.147">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:18.146" status="PASS" endtime="20170817 21:28:18.147"></status>
</kw>
<status starttime="20170817 21:28:17.962" status="PASS" endtime="20170817 21:28:18.147"></status>
</kw>
<status starttime="20170817 21:28:17.961" status="PASS" endtime="20170817 21:28:18.147"></status>
</kw>
<status starttime="20170817 21:28:17.960" status="PASS" endtime="20170817 21:28:18.147"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:18.148">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:28:18.147" status="PASS" endtime="20170817 21:28:18.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:18.150">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:18.149" status="PASS" endtime="20170817 21:28:18.150"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:18.151">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:18.151" status="PASS" endtime="20170817 21:28:18.151"></status>
</kw>
<status starttime="20170817 21:28:18.150" status="PASS" endtime="20170817 21:28:18.151"></status>
</kw>
<status starttime="20170817 21:28:18.148" status="PASS" endtime="20170817 21:28:18.151"></status>
</kw>
<status starttime="20170817 21:28:18.148" status="PASS" endtime="20170817 21:28:18.151"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:18.261">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:28:18.261">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:18.151" status="PASS" endtime="20170817 21:28:18.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:18.264">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:18.263" status="PASS" endtime="20170817 21:28:18.264"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:18.265">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:18.265" status="PASS" endtime="20170817 21:28:18.265"></status>
</kw>
<status starttime="20170817 21:28:18.264" status="PASS" endtime="20170817 21:28:18.265"></status>
</kw>
<status starttime="20170817 21:28:18.262" status="PASS" endtime="20170817 21:28:18.265"></status>
</kw>
<status starttime="20170817 21:28:18.262" status="PASS" endtime="20170817 21:28:18.265"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:28:18.266">Delete All Sessions</msg>
<status starttime="20170817 21:28:18.265" status="PASS" endtime="20170817 21:28:18.266"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:18.266">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:17.959" status="PASS" endtime="20170817 21:28:18.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:18.266">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:18.266" status="PASS" endtime="20170817 21:28:18.267"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:18.267">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:28:18.267">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:28:18.267">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:28:18.267" status="PASS" endtime="20170817 21:28:18.267"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:18.267">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:28:17.959" status="PASS" endtime="20170817 21:28:18.268"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:18.268">${host_state} = Quiesced</msg>
<status starttime="20170817 21:28:17.958" status="PASS" endtime="20170817 21:28:18.268"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:28:18.269">Running != Quiesced</msg>
<status starttime="20170817 21:28:18.268" status="FAIL" endtime="20170817 21:28:18.269"></status>
</kw>
<status starttime="20170817 21:28:17.553" status="FAIL" endtime="20170817 21:28:18.269"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:28.274">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:28:28.274" status="PASS" endtime="20170817 21:28:28.274"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:28.275">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:28:28.275" status="PASS" endtime="20170817 21:28:28.275"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:28.276">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:28:28.275" status="PASS" endtime="20170817 21:28:28.276"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:28.276">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:28:28.276" status="PASS" endtime="20170817 21:28:28.276"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:28.471">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:28:28.277" status="PASS" endtime="20170817 21:28:28.471"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:28.471">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:28:28.471">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:28.277" status="PASS" endtime="20170817 21:28:28.471"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:28.472">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:28.472" status="PASS" endtime="20170817 21:28:28.472"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:28.473">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:28.473" status="PASS" endtime="20170817 21:28:28.473"></status>
</kw>
<status starttime="20170817 21:28:28.273" status="PASS" endtime="20170817 21:28:28.473"></status>
</kw>
<status starttime="20170817 21:28:28.273" status="PASS" endtime="20170817 21:28:28.473"></status>
</kw>
<status starttime="20170817 21:28:28.272" status="PASS" endtime="20170817 21:28:28.473"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:28.474">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:28:28.474" status="PASS" endtime="20170817 21:28:28.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:28.476">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:28.475" status="PASS" endtime="20170817 21:28:28.476"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:28.477">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:28.477" status="PASS" endtime="20170817 21:28:28.477"></status>
</kw>
<status starttime="20170817 21:28:28.476" status="PASS" endtime="20170817 21:28:28.477"></status>
</kw>
<status starttime="20170817 21:28:28.475" status="PASS" endtime="20170817 21:28:28.477"></status>
</kw>
<status starttime="20170817 21:28:28.474" status="PASS" endtime="20170817 21:28:28.477"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:28.559">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:28:28.559">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:28.478" status="PASS" endtime="20170817 21:28:28.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:28.561">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:28.560" status="PASS" endtime="20170817 21:28:28.561"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:28.561">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:28.561" status="PASS" endtime="20170817 21:28:28.562"></status>
</kw>
<status starttime="20170817 21:28:28.561" status="PASS" endtime="20170817 21:28:28.562"></status>
</kw>
<status starttime="20170817 21:28:28.560" status="PASS" endtime="20170817 21:28:28.562"></status>
</kw>
<status starttime="20170817 21:28:28.559" status="PASS" endtime="20170817 21:28:28.562"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:28:28.562">Delete All Sessions</msg>
<status starttime="20170817 21:28:28.562" status="PASS" endtime="20170817 21:28:28.562"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:28.563">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:28.271" status="PASS" endtime="20170817 21:28:28.563"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:28.563">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:28.563" status="PASS" endtime="20170817 21:28:28.563"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:28.564">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:28:28.564">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:28:28.564">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:28:28.563" status="PASS" endtime="20170817 21:28:28.564"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:28.564">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:28:28.271" status="PASS" endtime="20170817 21:28:28.564"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:28.565">${power_state} = On</msg>
<status starttime="20170817 21:28:28.270" status="PASS" endtime="20170817 21:28:28.565"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:28:28.565" status="PASS" endtime="20170817 21:28:28.565"></status>
</kw>
<status starttime="20170817 21:28:28.270" status="PASS" endtime="20170817 21:28:28.565"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:28.569">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:28:28.569" status="PASS" endtime="20170817 21:28:28.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:28.570">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:28:28.570" status="PASS" endtime="20170817 21:28:28.570"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:28.571">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:28:28.571" status="PASS" endtime="20170817 21:28:28.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:28.572">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:28:28.571" status="PASS" endtime="20170817 21:28:28.572"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:28.866">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:28:28.573" status="PASS" endtime="20170817 21:28:28.866"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:28.866">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:28:28.866">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:28.572" status="PASS" endtime="20170817 21:28:28.867"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:28.867">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:28.867" status="PASS" endtime="20170817 21:28:28.867"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:28.868">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:28.868" status="PASS" endtime="20170817 21:28:28.868"></status>
</kw>
<status starttime="20170817 21:28:28.568" status="PASS" endtime="20170817 21:28:28.868"></status>
</kw>
<status starttime="20170817 21:28:28.568" status="PASS" endtime="20170817 21:28:28.868"></status>
</kw>
<status starttime="20170817 21:28:28.567" status="PASS" endtime="20170817 21:28:28.868"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:28.869">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:28:28.869" status="PASS" endtime="20170817 21:28:28.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:28.871">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:28.870" status="PASS" endtime="20170817 21:28:28.871"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:28.872">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:28.872" status="PASS" endtime="20170817 21:28:28.872"></status>
</kw>
<status starttime="20170817 21:28:28.871" status="PASS" endtime="20170817 21:28:28.872"></status>
</kw>
<status starttime="20170817 21:28:28.870" status="PASS" endtime="20170817 21:28:28.872"></status>
</kw>
<status starttime="20170817 21:28:28.869" status="PASS" endtime="20170817 21:28:28.872"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:28.962">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:28:28.962">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:28.873" status="PASS" endtime="20170817 21:28:28.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:28.964">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:28.963" status="PASS" endtime="20170817 21:28:28.964"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:28.965">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:28.964" status="PASS" endtime="20170817 21:28:28.965"></status>
</kw>
<status starttime="20170817 21:28:28.964" status="PASS" endtime="20170817 21:28:28.965"></status>
</kw>
<status starttime="20170817 21:28:28.963" status="PASS" endtime="20170817 21:28:28.965"></status>
</kw>
<status starttime="20170817 21:28:28.962" status="PASS" endtime="20170817 21:28:28.965"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:28:28.965">Delete All Sessions</msg>
<status starttime="20170817 21:28:28.965" status="PASS" endtime="20170817 21:28:28.966"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:28.966">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:28.566" status="PASS" endtime="20170817 21:28:28.966"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:28.966">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:28.966" status="PASS" endtime="20170817 21:28:28.966"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:28.967">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:28:28.967">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:28:28.967">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:28:28.967" status="PASS" endtime="20170817 21:28:28.967"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:28.967">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:28:28.566" status="PASS" endtime="20170817 21:28:28.968"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:28.968">${host_state} = Quiesced</msg>
<status starttime="20170817 21:28:28.565" status="PASS" endtime="20170817 21:28:28.968"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:28:28.968">Running != Quiesced</msg>
<status starttime="20170817 21:28:28.968" status="FAIL" endtime="20170817 21:28:28.969"></status>
</kw>
<status starttime="20170817 21:28:28.269" status="FAIL" endtime="20170817 21:28:28.969"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:38.975">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:28:38.974" status="PASS" endtime="20170817 21:28:38.975"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:38.976">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:28:38.975" status="PASS" endtime="20170817 21:28:38.976"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:38.976">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:28:38.976" status="PASS" endtime="20170817 21:28:38.976"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:38.977">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:28:38.977" status="PASS" endtime="20170817 21:28:38.977"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:39.318">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:28:38.978" status="PASS" endtime="20170817 21:28:39.318"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:39.318">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:28:39.318">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:38.977" status="PASS" endtime="20170817 21:28:39.318"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:39.319">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:39.319" status="PASS" endtime="20170817 21:28:39.319"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:39.320">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:39.319" status="PASS" endtime="20170817 21:28:39.320"></status>
</kw>
<status starttime="20170817 21:28:38.974" status="PASS" endtime="20170817 21:28:39.320"></status>
</kw>
<status starttime="20170817 21:28:38.973" status="PASS" endtime="20170817 21:28:39.320"></status>
</kw>
<status starttime="20170817 21:28:38.973" status="PASS" endtime="20170817 21:28:39.320"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:39.321">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:28:39.320" status="PASS" endtime="20170817 21:28:39.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:39.323">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:39.322" status="PASS" endtime="20170817 21:28:39.323"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:39.324">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:39.324" status="PASS" endtime="20170817 21:28:39.324"></status>
</kw>
<status starttime="20170817 21:28:39.323" status="PASS" endtime="20170817 21:28:39.324"></status>
</kw>
<status starttime="20170817 21:28:39.321" status="PASS" endtime="20170817 21:28:39.325"></status>
</kw>
<status starttime="20170817 21:28:39.321" status="PASS" endtime="20170817 21:28:39.325"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:39.453">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:28:39.454">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:39.325" status="PASS" endtime="20170817 21:28:39.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:39.455">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:39.455" status="PASS" endtime="20170817 21:28:39.456"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:39.456">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:39.456" status="PASS" endtime="20170817 21:28:39.457"></status>
</kw>
<status starttime="20170817 21:28:39.456" status="PASS" endtime="20170817 21:28:39.457"></status>
</kw>
<status starttime="20170817 21:28:39.454" status="PASS" endtime="20170817 21:28:39.457"></status>
</kw>
<status starttime="20170817 21:28:39.454" status="PASS" endtime="20170817 21:28:39.457"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:28:39.457">Delete All Sessions</msg>
<status starttime="20170817 21:28:39.457" status="PASS" endtime="20170817 21:28:39.457"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:39.457">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:38.972" status="PASS" endtime="20170817 21:28:39.458"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:39.458">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:39.458" status="PASS" endtime="20170817 21:28:39.458"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:39.459">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:28:39.459">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:28:39.459">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:28:39.458" status="PASS" endtime="20170817 21:28:39.459"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:39.459">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:28:38.971" status="PASS" endtime="20170817 21:28:39.459"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:39.460">${power_state} = On</msg>
<status starttime="20170817 21:28:38.970" status="PASS" endtime="20170817 21:28:39.460"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:28:39.460" status="PASS" endtime="20170817 21:28:39.460"></status>
</kw>
<status starttime="20170817 21:28:38.970" status="PASS" endtime="20170817 21:28:39.460"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:39.464">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:28:39.464" status="PASS" endtime="20170817 21:28:39.464"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:39.465">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:28:39.465" status="PASS" endtime="20170817 21:28:39.465"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:39.465">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:28:39.465" status="PASS" endtime="20170817 21:28:39.466"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:39.466">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:28:39.466" status="PASS" endtime="20170817 21:28:39.466"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:39.679">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:28:39.467" status="PASS" endtime="20170817 21:28:39.679"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:39.679">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:28:39.679">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:39.466" status="PASS" endtime="20170817 21:28:39.679"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:39.680">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:39.680" status="PASS" endtime="20170817 21:28:39.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:39.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:39.680" status="PASS" endtime="20170817 21:28:39.681"></status>
</kw>
<status starttime="20170817 21:28:39.463" status="PASS" endtime="20170817 21:28:39.681"></status>
</kw>
<status starttime="20170817 21:28:39.463" status="PASS" endtime="20170817 21:28:39.681"></status>
</kw>
<status starttime="20170817 21:28:39.462" status="PASS" endtime="20170817 21:28:39.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:39.682">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:28:39.681" status="PASS" endtime="20170817 21:28:39.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:39.684">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:39.683" status="PASS" endtime="20170817 21:28:39.684"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:39.685">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:39.684" status="PASS" endtime="20170817 21:28:39.685"></status>
</kw>
<status starttime="20170817 21:28:39.684" status="PASS" endtime="20170817 21:28:39.685"></status>
</kw>
<status starttime="20170817 21:28:39.682" status="PASS" endtime="20170817 21:28:39.685"></status>
</kw>
<status starttime="20170817 21:28:39.682" status="PASS" endtime="20170817 21:28:39.685"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:39.794">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:28:39.794">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:39.685" status="PASS" endtime="20170817 21:28:39.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:39.796">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:39.795" status="PASS" endtime="20170817 21:28:39.796"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:39.797">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:39.797" status="PASS" endtime="20170817 21:28:39.797"></status>
</kw>
<status starttime="20170817 21:28:39.796" status="PASS" endtime="20170817 21:28:39.797"></status>
</kw>
<status starttime="20170817 21:28:39.795" status="PASS" endtime="20170817 21:28:39.797"></status>
</kw>
<status starttime="20170817 21:28:39.795" status="PASS" endtime="20170817 21:28:39.797"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:28:39.798">Delete All Sessions</msg>
<status starttime="20170817 21:28:39.798" status="PASS" endtime="20170817 21:28:39.798"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:39.798">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:39.461" status="PASS" endtime="20170817 21:28:39.798"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:39.799">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:39.798" status="PASS" endtime="20170817 21:28:39.799"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:39.799">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:28:39.799">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:28:39.799">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:28:39.799" status="PASS" endtime="20170817 21:28:39.799"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:39.800">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:28:39.461" status="PASS" endtime="20170817 21:28:39.800"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:39.800">${host_state} = Quiesced</msg>
<status starttime="20170817 21:28:39.461" status="PASS" endtime="20170817 21:28:39.800"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:28:39.801">Running != Quiesced</msg>
<status starttime="20170817 21:28:39.800" status="FAIL" endtime="20170817 21:28:39.801"></status>
</kw>
<status starttime="20170817 21:28:38.969" status="FAIL" endtime="20170817 21:28:39.801"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:49.807">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:28:49.806" status="PASS" endtime="20170817 21:28:49.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:49.808">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:28:49.808" status="PASS" endtime="20170817 21:28:49.808"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:49.809">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:28:49.808" status="PASS" endtime="20170817 21:28:49.809"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:49.809">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:28:49.809" status="PASS" endtime="20170817 21:28:49.809"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:50.014">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:28:49.810" status="PASS" endtime="20170817 21:28:50.014"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:50.014">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:28:50.014">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:49.810" status="PASS" endtime="20170817 21:28:50.014"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:50.015">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:50.015" status="PASS" endtime="20170817 21:28:50.015"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:50.016">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:50.015" status="PASS" endtime="20170817 21:28:50.016"></status>
</kw>
<status starttime="20170817 21:28:49.805" status="PASS" endtime="20170817 21:28:50.016"></status>
</kw>
<status starttime="20170817 21:28:49.805" status="PASS" endtime="20170817 21:28:50.016"></status>
</kw>
<status starttime="20170817 21:28:49.804" status="PASS" endtime="20170817 21:28:50.016"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:50.017">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:28:50.016" status="PASS" endtime="20170817 21:28:50.017"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:50.019">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:50.018" status="PASS" endtime="20170817 21:28:50.019"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:50.021">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:50.020" status="PASS" endtime="20170817 21:28:50.021"></status>
</kw>
<status starttime="20170817 21:28:50.020" status="PASS" endtime="20170817 21:28:50.021"></status>
</kw>
<status starttime="20170817 21:28:50.017" status="PASS" endtime="20170817 21:28:50.021"></status>
</kw>
<status starttime="20170817 21:28:50.017" status="PASS" endtime="20170817 21:28:50.021"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:50.111">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:28:50.111">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:50.021" status="PASS" endtime="20170817 21:28:50.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:50.113">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:50.113" status="PASS" endtime="20170817 21:28:50.113"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:50.114">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:50.114" status="PASS" endtime="20170817 21:28:50.115"></status>
</kw>
<status starttime="20170817 21:28:50.113" status="PASS" endtime="20170817 21:28:50.115"></status>
</kw>
<status starttime="20170817 21:28:50.112" status="PASS" endtime="20170817 21:28:50.115"></status>
</kw>
<status starttime="20170817 21:28:50.112" status="PASS" endtime="20170817 21:28:50.115"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:28:50.115">Delete All Sessions</msg>
<status starttime="20170817 21:28:50.115" status="PASS" endtime="20170817 21:28:50.115"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:50.116">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:49.804" status="PASS" endtime="20170817 21:28:50.116"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:50.116">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:50.116" status="PASS" endtime="20170817 21:28:50.116"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:50.117">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:28:50.117">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:28:50.117">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:28:50.117" status="PASS" endtime="20170817 21:28:50.117"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:50.117">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:28:49.803" status="PASS" endtime="20170817 21:28:50.117"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:50.118">${power_state} = On</msg>
<status starttime="20170817 21:28:49.803" status="PASS" endtime="20170817 21:28:50.118"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:28:50.118" status="PASS" endtime="20170817 21:28:50.118"></status>
</kw>
<status starttime="20170817 21:28:49.802" status="PASS" endtime="20170817 21:28:50.118"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:50.122">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:28:50.122" status="PASS" endtime="20170817 21:28:50.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:50.124">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:28:50.123" status="PASS" endtime="20170817 21:28:50.124"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:50.125">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:28:50.124" status="PASS" endtime="20170817 21:28:50.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:50.126">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:28:50.125" status="PASS" endtime="20170817 21:28:50.126"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:50.389">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:28:50.127" status="PASS" endtime="20170817 21:28:50.389"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:50.389">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:28:50.389">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:50.126" status="PASS" endtime="20170817 21:28:50.389"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:50.390">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:50.390" status="PASS" endtime="20170817 21:28:50.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:50.391">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:50.390" status="PASS" endtime="20170817 21:28:50.391"></status>
</kw>
<status starttime="20170817 21:28:50.121" status="PASS" endtime="20170817 21:28:50.391"></status>
</kw>
<status starttime="20170817 21:28:50.121" status="PASS" endtime="20170817 21:28:50.391"></status>
</kw>
<status starttime="20170817 21:28:50.120" status="PASS" endtime="20170817 21:28:50.391"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:50.392">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:28:50.391" status="PASS" endtime="20170817 21:28:50.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:50.394">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:50.393" status="PASS" endtime="20170817 21:28:50.394"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:50.395">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:28:50.395" status="PASS" endtime="20170817 21:28:50.395"></status>
</kw>
<status starttime="20170817 21:28:50.394" status="PASS" endtime="20170817 21:28:50.395"></status>
</kw>
<status starttime="20170817 21:28:50.392" status="PASS" endtime="20170817 21:28:50.395"></status>
</kw>
<status starttime="20170817 21:28:50.392" status="PASS" endtime="20170817 21:28:50.396"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:50.484">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:28:50.484">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:50.396" status="PASS" endtime="20170817 21:28:50.484"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:50.486">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:50.486" status="PASS" endtime="20170817 21:28:50.486"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:50.487">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:28:50.487" status="PASS" endtime="20170817 21:28:50.487"></status>
</kw>
<status starttime="20170817 21:28:50.486" status="PASS" endtime="20170817 21:28:50.487"></status>
</kw>
<status starttime="20170817 21:28:50.485" status="PASS" endtime="20170817 21:28:50.487"></status>
</kw>
<status starttime="20170817 21:28:50.485" status="PASS" endtime="20170817 21:28:50.488"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:28:50.488">Delete All Sessions</msg>
<status starttime="20170817 21:28:50.488" status="PASS" endtime="20170817 21:28:50.488"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:50.488">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:28:50.119" status="PASS" endtime="20170817 21:28:50.488"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:28:50.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:28:50.488" status="PASS" endtime="20170817 21:28:50.489"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:28:50.489">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:28:50.489">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:28:50.490">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:28:50.489" status="PASS" endtime="20170817 21:28:50.490"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:50.490">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:28:50.119" status="PASS" endtime="20170817 21:28:50.490"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:28:50.490">${host_state} = Quiesced</msg>
<status starttime="20170817 21:28:50.118" status="PASS" endtime="20170817 21:28:50.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:28:50.491">Running != Quiesced</msg>
<status starttime="20170817 21:28:50.491" status="FAIL" endtime="20170817 21:28:50.491"></status>
</kw>
<status starttime="20170817 21:28:49.802" status="FAIL" endtime="20170817 21:28:50.491"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:00.496">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:29:00.496" status="PASS" endtime="20170817 21:29:00.497"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:00.497">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:29:00.497" status="PASS" endtime="20170817 21:29:00.497"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:00.498">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:29:00.498" status="PASS" endtime="20170817 21:29:00.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:00.499">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:29:00.498" status="PASS" endtime="20170817 21:29:00.499"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:00.714">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:29:00.500" status="PASS" endtime="20170817 21:29:00.714"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:00.714">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:29:00.714">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:00.499" status="PASS" endtime="20170817 21:29:00.714"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:00.715">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:00.714" status="PASS" endtime="20170817 21:29:00.715"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:00.715">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:00.715" status="PASS" endtime="20170817 21:29:00.715"></status>
</kw>
<status starttime="20170817 21:29:00.495" status="PASS" endtime="20170817 21:29:00.715"></status>
</kw>
<status starttime="20170817 21:29:00.495" status="PASS" endtime="20170817 21:29:00.716"></status>
</kw>
<status starttime="20170817 21:29:00.494" status="PASS" endtime="20170817 21:29:00.716"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:00.716">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:29:00.716" status="PASS" endtime="20170817 21:29:00.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:00.718">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:00.718" status="PASS" endtime="20170817 21:29:00.718"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:00.719">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:00.719" status="PASS" endtime="20170817 21:29:00.719"></status>
</kw>
<status starttime="20170817 21:29:00.719" status="PASS" endtime="20170817 21:29:00.719"></status>
</kw>
<status starttime="20170817 21:29:00.717" status="PASS" endtime="20170817 21:29:00.720"></status>
</kw>
<status starttime="20170817 21:29:00.717" status="PASS" endtime="20170817 21:29:00.720"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:00.782">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:29:00.783">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:00.720" status="PASS" endtime="20170817 21:29:00.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:00.784">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:00.784" status="PASS" endtime="20170817 21:29:00.784"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:00.785">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:00.785" status="PASS" endtime="20170817 21:29:00.785"></status>
</kw>
<status starttime="20170817 21:29:00.785" status="PASS" endtime="20170817 21:29:00.786"></status>
</kw>
<status starttime="20170817 21:29:00.783" status="PASS" endtime="20170817 21:29:00.786"></status>
</kw>
<status starttime="20170817 21:29:00.783" status="PASS" endtime="20170817 21:29:00.786"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:29:00.786">Delete All Sessions</msg>
<status starttime="20170817 21:29:00.786" status="PASS" endtime="20170817 21:29:00.786"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:00.786">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:00.494" status="PASS" endtime="20170817 21:29:00.786"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:00.787">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:00.787" status="PASS" endtime="20170817 21:29:00.787"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:00.788">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:29:00.788">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:29:00.788">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:29:00.787" status="PASS" endtime="20170817 21:29:00.788"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:00.788">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:29:00.493" status="PASS" endtime="20170817 21:29:00.788"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:00.788">${power_state} = On</msg>
<status starttime="20170817 21:29:00.493" status="PASS" endtime="20170817 21:29:00.789"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:29:00.789" status="PASS" endtime="20170817 21:29:00.789"></status>
</kw>
<status starttime="20170817 21:29:00.492" status="PASS" endtime="20170817 21:29:00.789"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:00.796">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:29:00.796" status="PASS" endtime="20170817 21:29:00.797"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:00.797">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:29:00.797" status="PASS" endtime="20170817 21:29:00.797"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:00.798">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:29:00.797" status="PASS" endtime="20170817 21:29:00.798"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:00.798">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:29:00.798" status="PASS" endtime="20170817 21:29:00.798"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:00.992">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:29:00.799" status="PASS" endtime="20170817 21:29:00.993"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:00.993">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:29:00.993">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:00.799" status="PASS" endtime="20170817 21:29:00.993"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:00.993">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:00.993" status="PASS" endtime="20170817 21:29:00.994"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:00.994">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:00.994" status="PASS" endtime="20170817 21:29:00.994"></status>
</kw>
<status starttime="20170817 21:29:00.795" status="PASS" endtime="20170817 21:29:00.994"></status>
</kw>
<status starttime="20170817 21:29:00.791" status="PASS" endtime="20170817 21:29:00.995"></status>
</kw>
<status starttime="20170817 21:29:00.791" status="PASS" endtime="20170817 21:29:00.995"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:00.995">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:29:00.995" status="PASS" endtime="20170817 21:29:00.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:00.998">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:00.997" status="PASS" endtime="20170817 21:29:00.998"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:00.998">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:00.998" status="PASS" endtime="20170817 21:29:00.999"></status>
</kw>
<status starttime="20170817 21:29:00.998" status="PASS" endtime="20170817 21:29:00.999"></status>
</kw>
<status starttime="20170817 21:29:00.996" status="PASS" endtime="20170817 21:29:00.999"></status>
</kw>
<status starttime="20170817 21:29:00.996" status="PASS" endtime="20170817 21:29:00.999"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:01.091">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:29:01.091">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:00.999" status="PASS" endtime="20170817 21:29:01.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:01.094">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:01.093" status="PASS" endtime="20170817 21:29:01.094"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:01.095">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:01.094" status="PASS" endtime="20170817 21:29:01.095"></status>
</kw>
<status starttime="20170817 21:29:01.094" status="PASS" endtime="20170817 21:29:01.095"></status>
</kw>
<status starttime="20170817 21:29:01.092" status="PASS" endtime="20170817 21:29:01.095"></status>
</kw>
<status starttime="20170817 21:29:01.092" status="PASS" endtime="20170817 21:29:01.095"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:29:01.095">Delete All Sessions</msg>
<status starttime="20170817 21:29:01.095" status="PASS" endtime="20170817 21:29:01.095"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:01.096">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:00.790" status="PASS" endtime="20170817 21:29:01.096"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:01.096">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:01.096" status="PASS" endtime="20170817 21:29:01.096"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:01.097">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:29:01.097">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:29:01.097">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:29:01.097" status="PASS" endtime="20170817 21:29:01.097"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:01.097">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:29:00.790" status="PASS" endtime="20170817 21:29:01.097"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:01.098">${host_state} = Quiesced</msg>
<status starttime="20170817 21:29:00.789" status="PASS" endtime="20170817 21:29:01.098"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:29:01.098">Running != Quiesced</msg>
<status starttime="20170817 21:29:01.098" status="FAIL" endtime="20170817 21:29:01.098"></status>
</kw>
<status starttime="20170817 21:29:00.492" status="FAIL" endtime="20170817 21:29:01.099"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:11.104">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:29:11.104" status="PASS" endtime="20170817 21:29:11.104"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:11.105">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:29:11.105" status="PASS" endtime="20170817 21:29:11.105"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:11.106">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:29:11.105" status="PASS" endtime="20170817 21:29:11.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:11.106">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:29:11.106" status="PASS" endtime="20170817 21:29:11.106"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:11.286">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:29:11.107" status="PASS" endtime="20170817 21:29:11.286"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:11.286">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:29:11.286">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:11.107" status="PASS" endtime="20170817 21:29:11.286"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:11.287">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:11.287" status="PASS" endtime="20170817 21:29:11.287"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:11.288">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:11.287" status="PASS" endtime="20170817 21:29:11.288"></status>
</kw>
<status starttime="20170817 21:29:11.103" status="PASS" endtime="20170817 21:29:11.288"></status>
</kw>
<status starttime="20170817 21:29:11.103" status="PASS" endtime="20170817 21:29:11.288"></status>
</kw>
<status starttime="20170817 21:29:11.102" status="PASS" endtime="20170817 21:29:11.288"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:11.289">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:29:11.288" status="PASS" endtime="20170817 21:29:11.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:11.291">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:11.290" status="PASS" endtime="20170817 21:29:11.291"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:11.292">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:11.291" status="PASS" endtime="20170817 21:29:11.292"></status>
</kw>
<status starttime="20170817 21:29:11.291" status="PASS" endtime="20170817 21:29:11.292"></status>
</kw>
<status starttime="20170817 21:29:11.289" status="PASS" endtime="20170817 21:29:11.292"></status>
</kw>
<status starttime="20170817 21:29:11.289" status="PASS" endtime="20170817 21:29:11.292"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:11.367">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:29:11.367">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:11.292" status="PASS" endtime="20170817 21:29:11.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:11.369">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:11.368" status="PASS" endtime="20170817 21:29:11.369"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:11.371">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:11.370" status="PASS" endtime="20170817 21:29:11.371"></status>
</kw>
<status starttime="20170817 21:29:11.369" status="PASS" endtime="20170817 21:29:11.371"></status>
</kw>
<status starttime="20170817 21:29:11.368" status="PASS" endtime="20170817 21:29:11.371"></status>
</kw>
<status starttime="20170817 21:29:11.367" status="PASS" endtime="20170817 21:29:11.371"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:29:11.371">Delete All Sessions</msg>
<status starttime="20170817 21:29:11.371" status="PASS" endtime="20170817 21:29:11.372"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:11.372">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:11.101" status="PASS" endtime="20170817 21:29:11.372"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:11.372">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:11.372" status="PASS" endtime="20170817 21:29:11.372"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:11.373">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:29:11.373">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:29:11.373">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:29:11.373" status="PASS" endtime="20170817 21:29:11.373"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:11.373">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:29:11.101" status="PASS" endtime="20170817 21:29:11.373"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:11.374">${power_state} = On</msg>
<status starttime="20170817 21:29:11.100" status="PASS" endtime="20170817 21:29:11.374"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:29:11.374" status="PASS" endtime="20170817 21:29:11.374"></status>
</kw>
<status starttime="20170817 21:29:11.100" status="PASS" endtime="20170817 21:29:11.374"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:11.378">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:29:11.378" status="PASS" endtime="20170817 21:29:11.379"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:11.379">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:29:11.379" status="PASS" endtime="20170817 21:29:11.379"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:11.380">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:29:11.380" status="PASS" endtime="20170817 21:29:11.380"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:11.381">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:29:11.380" status="PASS" endtime="20170817 21:29:11.381"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:11.578">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:29:11.381" status="PASS" endtime="20170817 21:29:11.578"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:11.578">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:29:11.578">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:11.381" status="PASS" endtime="20170817 21:29:11.578"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:11.579">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:11.578" status="PASS" endtime="20170817 21:29:11.579"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:11.579">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:11.579" status="PASS" endtime="20170817 21:29:11.579"></status>
</kw>
<status starttime="20170817 21:29:11.377" status="PASS" endtime="20170817 21:29:11.580"></status>
</kw>
<status starttime="20170817 21:29:11.377" status="PASS" endtime="20170817 21:29:11.580"></status>
</kw>
<status starttime="20170817 21:29:11.376" status="PASS" endtime="20170817 21:29:11.580"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:11.580">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:29:11.580" status="PASS" endtime="20170817 21:29:11.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:11.583">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:11.582" status="PASS" endtime="20170817 21:29:11.583"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:11.583">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:11.583" status="PASS" endtime="20170817 21:29:11.584"></status>
</kw>
<status starttime="20170817 21:29:11.583" status="PASS" endtime="20170817 21:29:11.584"></status>
</kw>
<status starttime="20170817 21:29:11.581" status="PASS" endtime="20170817 21:29:11.584"></status>
</kw>
<status starttime="20170817 21:29:11.581" status="PASS" endtime="20170817 21:29:11.584"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:11.672">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:29:11.672">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:11.584" status="PASS" endtime="20170817 21:29:11.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:11.674">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:11.674" status="PASS" endtime="20170817 21:29:11.674"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:11.675">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:11.675" status="PASS" endtime="20170817 21:29:11.675"></status>
</kw>
<status starttime="20170817 21:29:11.674" status="PASS" endtime="20170817 21:29:11.675"></status>
</kw>
<status starttime="20170817 21:29:11.673" status="PASS" endtime="20170817 21:29:11.675"></status>
</kw>
<status starttime="20170817 21:29:11.673" status="PASS" endtime="20170817 21:29:11.675"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:29:11.676">Delete All Sessions</msg>
<status starttime="20170817 21:29:11.676" status="PASS" endtime="20170817 21:29:11.676"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:11.676">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:11.375" status="PASS" endtime="20170817 21:29:11.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:11.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:11.676" status="PASS" endtime="20170817 21:29:11.677"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:11.677">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:29:11.677">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:29:11.677">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:29:11.677" status="PASS" endtime="20170817 21:29:11.677"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:11.678">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:29:11.375" status="PASS" endtime="20170817 21:29:11.678"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:11.678">${host_state} = Quiesced</msg>
<status starttime="20170817 21:29:11.375" status="PASS" endtime="20170817 21:29:11.678"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:29:11.679">Running != Quiesced</msg>
<status starttime="20170817 21:29:11.678" status="FAIL" endtime="20170817 21:29:11.679"></status>
</kw>
<status starttime="20170817 21:29:11.099" status="FAIL" endtime="20170817 21:29:11.679"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:21.685">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:29:21.684" status="PASS" endtime="20170817 21:29:21.685"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:21.686">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:29:21.686" status="PASS" endtime="20170817 21:29:21.686"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:21.687">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:29:21.687" status="PASS" endtime="20170817 21:29:21.687"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:21.688">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:29:21.688" status="PASS" endtime="20170817 21:29:21.688"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:21.879">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:29:21.689" status="PASS" endtime="20170817 21:29:21.879"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:21.879">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:29:21.879">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:21.689" status="PASS" endtime="20170817 21:29:21.879"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:21.880">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:21.879" status="PASS" endtime="20170817 21:29:21.880"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:21.880">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:21.880" status="PASS" endtime="20170817 21:29:21.881"></status>
</kw>
<status starttime="20170817 21:29:21.684" status="PASS" endtime="20170817 21:29:21.881"></status>
</kw>
<status starttime="20170817 21:29:21.683" status="PASS" endtime="20170817 21:29:21.881"></status>
</kw>
<status starttime="20170817 21:29:21.683" status="PASS" endtime="20170817 21:29:21.881"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:21.881">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:29:21.881" status="PASS" endtime="20170817 21:29:21.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:21.884">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:21.883" status="PASS" endtime="20170817 21:29:21.884"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:21.884">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:21.884" status="PASS" endtime="20170817 21:29:21.885"></status>
</kw>
<status starttime="20170817 21:29:21.884" status="PASS" endtime="20170817 21:29:21.885"></status>
</kw>
<status starttime="20170817 21:29:21.882" status="PASS" endtime="20170817 21:29:21.885"></status>
</kw>
<status starttime="20170817 21:29:21.882" status="PASS" endtime="20170817 21:29:21.885"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:21.948">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:29:21.948">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:21.886" status="PASS" endtime="20170817 21:29:21.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:21.950">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:21.950" status="PASS" endtime="20170817 21:29:21.950"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:21.951">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:21.951" status="PASS" endtime="20170817 21:29:21.951"></status>
</kw>
<status starttime="20170817 21:29:21.951" status="PASS" endtime="20170817 21:29:21.952"></status>
</kw>
<status starttime="20170817 21:29:21.949" status="PASS" endtime="20170817 21:29:21.952"></status>
</kw>
<status starttime="20170817 21:29:21.949" status="PASS" endtime="20170817 21:29:21.952"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:29:21.952">Delete All Sessions</msg>
<status starttime="20170817 21:29:21.952" status="PASS" endtime="20170817 21:29:21.952"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:21.952">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:21.682" status="PASS" endtime="20170817 21:29:21.952"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:21.953">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:21.953" status="PASS" endtime="20170817 21:29:21.953"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:21.954">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:29:21.954">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:29:21.954">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:29:21.953" status="PASS" endtime="20170817 21:29:21.954"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:21.954">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:29:21.681" status="PASS" endtime="20170817 21:29:21.954"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:21.954">${power_state} = On</msg>
<status starttime="20170817 21:29:21.681" status="PASS" endtime="20170817 21:29:21.954"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:29:21.955" status="PASS" endtime="20170817 21:29:21.955"></status>
</kw>
<status starttime="20170817 21:29:21.680" status="PASS" endtime="20170817 21:29:21.955"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:21.959">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:29:21.958" status="PASS" endtime="20170817 21:29:21.959"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:21.959">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:29:21.959" status="PASS" endtime="20170817 21:29:21.960"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:21.960">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:29:21.960" status="PASS" endtime="20170817 21:29:21.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:21.961">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:29:21.960" status="PASS" endtime="20170817 21:29:21.961"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:22.153">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:29:21.962" status="PASS" endtime="20170817 21:29:22.153"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:22.153">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:29:22.153">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:21.961" status="PASS" endtime="20170817 21:29:22.154"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:22.154">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:22.154" status="PASS" endtime="20170817 21:29:22.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:22.155">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:22.154" status="PASS" endtime="20170817 21:29:22.155"></status>
</kw>
<status starttime="20170817 21:29:21.958" status="PASS" endtime="20170817 21:29:22.155"></status>
</kw>
<status starttime="20170817 21:29:21.957" status="PASS" endtime="20170817 21:29:22.155"></status>
</kw>
<status starttime="20170817 21:29:21.957" status="PASS" endtime="20170817 21:29:22.155"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:22.156">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:29:22.155" status="PASS" endtime="20170817 21:29:22.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:22.158">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:22.157" status="PASS" endtime="20170817 21:29:22.158"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:22.159">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:22.159" status="PASS" endtime="20170817 21:29:22.159"></status>
</kw>
<status starttime="20170817 21:29:22.158" status="PASS" endtime="20170817 21:29:22.159"></status>
</kw>
<status starttime="20170817 21:29:22.157" status="PASS" endtime="20170817 21:29:22.159"></status>
</kw>
<status starttime="20170817 21:29:22.156" status="PASS" endtime="20170817 21:29:22.159"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:22.263">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:29:22.263">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:22.159" status="PASS" endtime="20170817 21:29:22.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:22.265">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:22.264" status="PASS" endtime="20170817 21:29:22.265"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:22.266">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:22.265" status="PASS" endtime="20170817 21:29:22.266"></status>
</kw>
<status starttime="20170817 21:29:22.265" status="PASS" endtime="20170817 21:29:22.266"></status>
</kw>
<status starttime="20170817 21:29:22.264" status="PASS" endtime="20170817 21:29:22.266"></status>
</kw>
<status starttime="20170817 21:29:22.263" status="PASS" endtime="20170817 21:29:22.266"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:29:22.266">Delete All Sessions</msg>
<status starttime="20170817 21:29:22.266" status="PASS" endtime="20170817 21:29:22.266"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:22.267">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:21.956" status="PASS" endtime="20170817 21:29:22.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:22.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:22.267" status="PASS" endtime="20170817 21:29:22.267"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:22.268">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:29:22.268">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:29:22.268">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:29:22.268" status="PASS" endtime="20170817 21:29:22.268"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:22.268">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:29:21.956" status="PASS" endtime="20170817 21:29:22.268"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:22.269">${host_state} = Quiesced</msg>
<status starttime="20170817 21:29:21.955" status="PASS" endtime="20170817 21:29:22.269"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:29:22.269">Running != Quiesced</msg>
<status starttime="20170817 21:29:22.269" status="FAIL" endtime="20170817 21:29:22.269"></status>
</kw>
<status starttime="20170817 21:29:21.680" status="FAIL" endtime="20170817 21:29:22.270"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:32.275">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:29:32.275" status="PASS" endtime="20170817 21:29:32.276"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:32.276">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:29:32.276" status="PASS" endtime="20170817 21:29:32.276"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:32.277">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:29:32.277" status="PASS" endtime="20170817 21:29:32.277"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:32.278">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:29:32.277" status="PASS" endtime="20170817 21:29:32.278"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:32.484">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:29:32.278" status="PASS" endtime="20170817 21:29:32.484"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:32.484">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:29:32.484">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:32.278" status="PASS" endtime="20170817 21:29:32.484"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:32.485">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:32.484" status="PASS" endtime="20170817 21:29:32.485"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:32.485">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:32.485" status="PASS" endtime="20170817 21:29:32.486"></status>
</kw>
<status starttime="20170817 21:29:32.274" status="PASS" endtime="20170817 21:29:32.486"></status>
</kw>
<status starttime="20170817 21:29:32.273" status="PASS" endtime="20170817 21:29:32.486"></status>
</kw>
<status starttime="20170817 21:29:32.273" status="PASS" endtime="20170817 21:29:32.486"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:32.486">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:29:32.486" status="PASS" endtime="20170817 21:29:32.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:32.489">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:32.488" status="PASS" endtime="20170817 21:29:32.489"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:32.490">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:32.489" status="PASS" endtime="20170817 21:29:32.490"></status>
</kw>
<status starttime="20170817 21:29:32.489" status="PASS" endtime="20170817 21:29:32.490"></status>
</kw>
<status starttime="20170817 21:29:32.487" status="PASS" endtime="20170817 21:29:32.490"></status>
</kw>
<status starttime="20170817 21:29:32.487" status="PASS" endtime="20170817 21:29:32.490"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:32.553">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:29:32.553">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:32.490" status="PASS" endtime="20170817 21:29:32.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:32.555">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:32.554" status="PASS" endtime="20170817 21:29:32.555"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:32.556">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:32.556" status="PASS" endtime="20170817 21:29:32.556"></status>
</kw>
<status starttime="20170817 21:29:32.555" status="PASS" endtime="20170817 21:29:32.556"></status>
</kw>
<status starttime="20170817 21:29:32.554" status="PASS" endtime="20170817 21:29:32.557"></status>
</kw>
<status starttime="20170817 21:29:32.554" status="PASS" endtime="20170817 21:29:32.557"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:29:32.557">Delete All Sessions</msg>
<status starttime="20170817 21:29:32.557" status="PASS" endtime="20170817 21:29:32.557"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:32.557">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:32.272" status="PASS" endtime="20170817 21:29:32.557"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:32.558">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:32.558" status="PASS" endtime="20170817 21:29:32.558"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:32.559">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:29:32.559">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:29:32.559">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:29:32.558" status="PASS" endtime="20170817 21:29:32.559"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:32.559">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:29:32.272" status="PASS" endtime="20170817 21:29:32.559"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:32.559">${power_state} = On</msg>
<status starttime="20170817 21:29:32.271" status="PASS" endtime="20170817 21:29:32.559"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:29:32.560" status="PASS" endtime="20170817 21:29:32.560"></status>
</kw>
<status starttime="20170817 21:29:32.271" status="PASS" endtime="20170817 21:29:32.560"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:32.564">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:29:32.563" status="PASS" endtime="20170817 21:29:32.564"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:32.565">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:29:32.564" status="PASS" endtime="20170817 21:29:32.565"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:32.565">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:29:32.565" status="PASS" endtime="20170817 21:29:32.565"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:32.566">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:29:32.566" status="PASS" endtime="20170817 21:29:32.566"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:32.785">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:29:32.567" status="PASS" endtime="20170817 21:29:32.785"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:32.785">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:29:32.785">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:32.566" status="PASS" endtime="20170817 21:29:32.785"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:32.786">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:32.786" status="PASS" endtime="20170817 21:29:32.786"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:32.787">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:32.786" status="PASS" endtime="20170817 21:29:32.787"></status>
</kw>
<status starttime="20170817 21:29:32.563" status="PASS" endtime="20170817 21:29:32.787"></status>
</kw>
<status starttime="20170817 21:29:32.562" status="PASS" endtime="20170817 21:29:32.787"></status>
</kw>
<status starttime="20170817 21:29:32.562" status="PASS" endtime="20170817 21:29:32.787"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:32.788">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:29:32.787" status="PASS" endtime="20170817 21:29:32.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:32.790">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:32.789" status="PASS" endtime="20170817 21:29:32.790"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:32.792">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:32.791" status="PASS" endtime="20170817 21:29:32.792"></status>
</kw>
<status starttime="20170817 21:29:32.791" status="PASS" endtime="20170817 21:29:32.792"></status>
</kw>
<status starttime="20170817 21:29:32.788" status="PASS" endtime="20170817 21:29:32.792"></status>
</kw>
<status starttime="20170817 21:29:32.788" status="PASS" endtime="20170817 21:29:32.792"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:32.955">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:29:32.955">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:32.792" status="PASS" endtime="20170817 21:29:32.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:32.957">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:32.957" status="PASS" endtime="20170817 21:29:32.957"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:32.958">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:32.958" status="PASS" endtime="20170817 21:29:32.958"></status>
</kw>
<status starttime="20170817 21:29:32.957" status="PASS" endtime="20170817 21:29:32.958"></status>
</kw>
<status starttime="20170817 21:29:32.956" status="PASS" endtime="20170817 21:29:32.958"></status>
</kw>
<status starttime="20170817 21:29:32.956" status="PASS" endtime="20170817 21:29:32.958"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:29:32.959">Delete All Sessions</msg>
<status starttime="20170817 21:29:32.959" status="PASS" endtime="20170817 21:29:32.959"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:32.959">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:32.561" status="PASS" endtime="20170817 21:29:32.959"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:32.960">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:32.959" status="PASS" endtime="20170817 21:29:32.960"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:32.960">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:29:32.961">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:29:32.961">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:29:32.960" status="PASS" endtime="20170817 21:29:32.961"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:32.961">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:29:32.561" status="PASS" endtime="20170817 21:29:32.961"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:32.961">${host_state} = Quiesced</msg>
<status starttime="20170817 21:29:32.560" status="PASS" endtime="20170817 21:29:32.961"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:29:32.962">Running != Quiesced</msg>
<status starttime="20170817 21:29:32.962" status="FAIL" endtime="20170817 21:29:32.962"></status>
</kw>
<status starttime="20170817 21:29:32.270" status="FAIL" endtime="20170817 21:29:32.962"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:42.967">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:29:42.967" status="PASS" endtime="20170817 21:29:42.968"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:42.968">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:29:42.968" status="PASS" endtime="20170817 21:29:42.968"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:42.969">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:29:42.968" status="PASS" endtime="20170817 21:29:42.969"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:42.970">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:29:42.969" status="PASS" endtime="20170817 21:29:42.970"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:43.158">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:29:42.971" status="PASS" endtime="20170817 21:29:43.158"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:43.159">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:29:43.159">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:42.970" status="PASS" endtime="20170817 21:29:43.159"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:43.159">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:43.159" status="PASS" endtime="20170817 21:29:43.160"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:43.160">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:43.160" status="PASS" endtime="20170817 21:29:43.160"></status>
</kw>
<status starttime="20170817 21:29:42.966" status="PASS" endtime="20170817 21:29:43.160"></status>
</kw>
<status starttime="20170817 21:29:42.966" status="PASS" endtime="20170817 21:29:43.160"></status>
</kw>
<status starttime="20170817 21:29:42.965" status="PASS" endtime="20170817 21:29:43.161"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:43.161">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:29:43.161" status="PASS" endtime="20170817 21:29:43.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:43.163">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:43.163" status="PASS" endtime="20170817 21:29:43.163"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:43.164">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:43.164" status="PASS" endtime="20170817 21:29:43.164"></status>
</kw>
<status starttime="20170817 21:29:43.164" status="PASS" endtime="20170817 21:29:43.165"></status>
</kw>
<status starttime="20170817 21:29:43.162" status="PASS" endtime="20170817 21:29:43.165"></status>
</kw>
<status starttime="20170817 21:29:43.162" status="PASS" endtime="20170817 21:29:43.165"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:43.241">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:29:43.241">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:43.165" status="PASS" endtime="20170817 21:29:43.241"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:43.243">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:43.243" status="PASS" endtime="20170817 21:29:43.243"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:43.244">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:43.244" status="PASS" endtime="20170817 21:29:43.244"></status>
</kw>
<status starttime="20170817 21:29:43.243" status="PASS" endtime="20170817 21:29:43.244"></status>
</kw>
<status starttime="20170817 21:29:43.242" status="PASS" endtime="20170817 21:29:43.244"></status>
</kw>
<status starttime="20170817 21:29:43.242" status="PASS" endtime="20170817 21:29:43.244"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:29:43.245">Delete All Sessions</msg>
<status starttime="20170817 21:29:43.245" status="PASS" endtime="20170817 21:29:43.245"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:43.245">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:42.965" status="PASS" endtime="20170817 21:29:43.245"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:43.246">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:43.245" status="PASS" endtime="20170817 21:29:43.246"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:43.246">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:29:43.246">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:29:43.247">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:29:43.246" status="PASS" endtime="20170817 21:29:43.247"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:43.247">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:29:42.964" status="PASS" endtime="20170817 21:29:43.247"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:43.247">${power_state} = On</msg>
<status starttime="20170817 21:29:42.964" status="PASS" endtime="20170817 21:29:43.247"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:29:43.247" status="PASS" endtime="20170817 21:29:43.248"></status>
</kw>
<status starttime="20170817 21:29:42.963" status="PASS" endtime="20170817 21:29:43.248"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:43.252">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:29:43.252" status="PASS" endtime="20170817 21:29:43.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:43.253">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:29:43.253" status="PASS" endtime="20170817 21:29:43.253"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:43.253">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:29:43.253" status="PASS" endtime="20170817 21:29:43.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:43.254">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:29:43.254" status="PASS" endtime="20170817 21:29:43.254"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:43.445">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:29:43.255" status="PASS" endtime="20170817 21:29:43.445"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:43.445">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:29:43.445">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:43.254" status="PASS" endtime="20170817 21:29:43.445"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:43.446">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:43.446" status="PASS" endtime="20170817 21:29:43.446"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:43.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:43.446" status="PASS" endtime="20170817 21:29:43.447"></status>
</kw>
<status starttime="20170817 21:29:43.251" status="PASS" endtime="20170817 21:29:43.447"></status>
</kw>
<status starttime="20170817 21:29:43.250" status="PASS" endtime="20170817 21:29:43.447"></status>
</kw>
<status starttime="20170817 21:29:43.250" status="PASS" endtime="20170817 21:29:43.447"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:43.448">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:29:43.447" status="PASS" endtime="20170817 21:29:43.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:43.450">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:43.449" status="PASS" endtime="20170817 21:29:43.450"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:43.451">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:43.450" status="PASS" endtime="20170817 21:29:43.451"></status>
</kw>
<status starttime="20170817 21:29:43.450" status="PASS" endtime="20170817 21:29:43.451"></status>
</kw>
<status starttime="20170817 21:29:43.448" status="PASS" endtime="20170817 21:29:43.451"></status>
</kw>
<status starttime="20170817 21:29:43.448" status="PASS" endtime="20170817 21:29:43.451"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:43.540">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:29:43.540">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:43.451" status="PASS" endtime="20170817 21:29:43.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:43.545">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:43.542" status="PASS" endtime="20170817 21:29:43.545"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:43.546">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:43.546" status="PASS" endtime="20170817 21:29:43.547"></status>
</kw>
<status starttime="20170817 21:29:43.546" status="PASS" endtime="20170817 21:29:43.547"></status>
</kw>
<status starttime="20170817 21:29:43.541" status="PASS" endtime="20170817 21:29:43.547"></status>
</kw>
<status starttime="20170817 21:29:43.541" status="PASS" endtime="20170817 21:29:43.547"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:29:43.547">Delete All Sessions</msg>
<status starttime="20170817 21:29:43.547" status="PASS" endtime="20170817 21:29:43.547"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:43.547">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:43.249" status="PASS" endtime="20170817 21:29:43.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:43.548">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:43.548" status="PASS" endtime="20170817 21:29:43.548"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:43.549">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:29:43.549">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:29:43.549">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:29:43.548" status="PASS" endtime="20170817 21:29:43.549"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:43.549">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:29:43.248" status="PASS" endtime="20170817 21:29:43.549"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:43.550">${host_state} = Quiesced</msg>
<status starttime="20170817 21:29:43.248" status="PASS" endtime="20170817 21:29:43.550"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:29:43.550">Running != Quiesced</msg>
<status starttime="20170817 21:29:43.550" status="FAIL" endtime="20170817 21:29:43.550"></status>
</kw>
<status starttime="20170817 21:29:42.963" status="FAIL" endtime="20170817 21:29:43.550"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:53.556">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:29:53.555" status="PASS" endtime="20170817 21:29:53.556"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:53.557">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:29:53.556" status="PASS" endtime="20170817 21:29:53.557"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:53.557">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:29:53.557" status="PASS" endtime="20170817 21:29:53.557"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:53.558">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:29:53.558" status="PASS" endtime="20170817 21:29:53.558"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:53.750">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:29:53.559" status="PASS" endtime="20170817 21:29:53.750"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:53.750">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:29:53.750">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:53.558" status="PASS" endtime="20170817 21:29:53.750"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:53.751">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:53.750" status="PASS" endtime="20170817 21:29:53.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:53.752">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:53.751" status="PASS" endtime="20170817 21:29:53.752"></status>
</kw>
<status starttime="20170817 21:29:53.555" status="PASS" endtime="20170817 21:29:53.752"></status>
</kw>
<status starttime="20170817 21:29:53.554" status="PASS" endtime="20170817 21:29:53.752"></status>
</kw>
<status starttime="20170817 21:29:53.554" status="PASS" endtime="20170817 21:29:53.752"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:53.753">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:29:53.752" status="PASS" endtime="20170817 21:29:53.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:53.755">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:53.754" status="PASS" endtime="20170817 21:29:53.755"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:53.756">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:53.755" status="PASS" endtime="20170817 21:29:53.756"></status>
</kw>
<status starttime="20170817 21:29:53.755" status="PASS" endtime="20170817 21:29:53.756"></status>
</kw>
<status starttime="20170817 21:29:53.753" status="PASS" endtime="20170817 21:29:53.756"></status>
</kw>
<status starttime="20170817 21:29:53.753" status="PASS" endtime="20170817 21:29:53.756"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:53.828">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:29:53.828">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:53.756" status="PASS" endtime="20170817 21:29:53.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:53.830">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:53.829" status="PASS" endtime="20170817 21:29:53.830"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:53.831">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:53.830" status="PASS" endtime="20170817 21:29:53.831"></status>
</kw>
<status starttime="20170817 21:29:53.830" status="PASS" endtime="20170817 21:29:53.831"></status>
</kw>
<status starttime="20170817 21:29:53.829" status="PASS" endtime="20170817 21:29:53.831"></status>
</kw>
<status starttime="20170817 21:29:53.828" status="PASS" endtime="20170817 21:29:53.831"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:29:53.831">Delete All Sessions</msg>
<status starttime="20170817 21:29:53.831" status="PASS" endtime="20170817 21:29:53.831"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:53.832">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:53.553" status="PASS" endtime="20170817 21:29:53.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:53.832">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:53.832" status="PASS" endtime="20170817 21:29:53.833"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:53.833">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:29:53.833">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:29:53.834">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:29:53.833" status="PASS" endtime="20170817 21:29:53.834"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:53.834">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:29:53.552" status="PASS" endtime="20170817 21:29:53.834"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:53.834">${power_state} = On</msg>
<status starttime="20170817 21:29:53.552" status="PASS" endtime="20170817 21:29:53.834"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:29:53.835" status="PASS" endtime="20170817 21:29:53.835"></status>
</kw>
<status starttime="20170817 21:29:53.552" status="PASS" endtime="20170817 21:29:53.835"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:53.839">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:29:53.839" status="PASS" endtime="20170817 21:29:53.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:53.840">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:29:53.840" status="PASS" endtime="20170817 21:29:53.840"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:53.841">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:29:53.841" status="PASS" endtime="20170817 21:29:53.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:53.842">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:29:53.841" status="PASS" endtime="20170817 21:29:53.842"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:54.045">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:29:53.843" status="PASS" endtime="20170817 21:29:54.045"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:54.045">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:29:54.045">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:53.842" status="PASS" endtime="20170817 21:29:54.045"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:54.046">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:54.046" status="PASS" endtime="20170817 21:29:54.046"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:54.047">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:54.046" status="PASS" endtime="20170817 21:29:54.047"></status>
</kw>
<status starttime="20170817 21:29:53.838" status="PASS" endtime="20170817 21:29:54.047"></status>
</kw>
<status starttime="20170817 21:29:53.838" status="PASS" endtime="20170817 21:29:54.047"></status>
</kw>
<status starttime="20170817 21:29:53.837" status="PASS" endtime="20170817 21:29:54.047"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:54.048">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:29:54.047" status="PASS" endtime="20170817 21:29:54.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:54.050">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:54.049" status="PASS" endtime="20170817 21:29:54.050"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:54.051">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:29:54.050" status="PASS" endtime="20170817 21:29:54.051"></status>
</kw>
<status starttime="20170817 21:29:54.050" status="PASS" endtime="20170817 21:29:54.051"></status>
</kw>
<status starttime="20170817 21:29:54.048" status="PASS" endtime="20170817 21:29:54.051"></status>
</kw>
<status starttime="20170817 21:29:54.048" status="PASS" endtime="20170817 21:29:54.051"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:54.153">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:29:54.153">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:54.051" status="PASS" endtime="20170817 21:29:54.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:54.155">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:54.154" status="PASS" endtime="20170817 21:29:54.155"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:54.156">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:29:54.155" status="PASS" endtime="20170817 21:29:54.156"></status>
</kw>
<status starttime="20170817 21:29:54.155" status="PASS" endtime="20170817 21:29:54.156"></status>
</kw>
<status starttime="20170817 21:29:54.154" status="PASS" endtime="20170817 21:29:54.156"></status>
</kw>
<status starttime="20170817 21:29:54.153" status="PASS" endtime="20170817 21:29:54.156"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:29:54.156">Delete All Sessions</msg>
<status starttime="20170817 21:29:54.156" status="PASS" endtime="20170817 21:29:54.156"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:54.157">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:29:53.837" status="PASS" endtime="20170817 21:29:54.157"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:29:54.157">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:29:54.157" status="PASS" endtime="20170817 21:29:54.157"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:29:54.158">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:29:54.158">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:29:54.158">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:29:54.158" status="PASS" endtime="20170817 21:29:54.158"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:54.158">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:29:53.836" status="PASS" endtime="20170817 21:29:54.158"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:29:54.159">${host_state} = Quiesced</msg>
<status starttime="20170817 21:29:53.836" status="PASS" endtime="20170817 21:29:54.159"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:29:54.159">Running != Quiesced</msg>
<status starttime="20170817 21:29:54.159" status="FAIL" endtime="20170817 21:29:54.159"></status>
</kw>
<status starttime="20170817 21:29:53.551" status="FAIL" endtime="20170817 21:29:54.160"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:04.165">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:04.165" status="PASS" endtime="20170817 21:30:04.166"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.166">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:04.166" status="PASS" endtime="20170817 21:30:04.166"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.167">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:04.166" status="PASS" endtime="20170817 21:30:04.167"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.167">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:04.167" status="PASS" endtime="20170817 21:30:04.167"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:04.434">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:04.168" status="PASS" endtime="20170817 21:30:04.434"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:04.434">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:04.434">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:04.168" status="PASS" endtime="20170817 21:30:04.434"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:04.435">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:04.435" status="PASS" endtime="20170817 21:30:04.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:04.436">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:04.436" status="PASS" endtime="20170817 21:30:04.437"></status>
</kw>
<status starttime="20170817 21:30:04.164" status="PASS" endtime="20170817 21:30:04.437"></status>
</kw>
<status starttime="20170817 21:30:04.164" status="PASS" endtime="20170817 21:30:04.437"></status>
</kw>
<status starttime="20170817 21:30:04.163" status="PASS" endtime="20170817 21:30:04.437"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.438">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:30:04.437" status="PASS" endtime="20170817 21:30:04.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.441">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:30:04.440" status="PASS" endtime="20170817 21:30:04.441"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:04.442">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:30:04.442" status="PASS" endtime="20170817 21:30:04.443"></status>
</kw>
<status starttime="20170817 21:30:04.441" status="PASS" endtime="20170817 21:30:04.443"></status>
</kw>
<status starttime="20170817 21:30:04.439" status="PASS" endtime="20170817 21:30:04.443"></status>
</kw>
<status starttime="20170817 21:30:04.438" status="PASS" endtime="20170817 21:30:04.443"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.507">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:04.507">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:04.443" status="PASS" endtime="20170817 21:30:04.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.509">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:04.508" status="PASS" endtime="20170817 21:30:04.509"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:04.510">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:04.510" status="PASS" endtime="20170817 21:30:04.510"></status>
</kw>
<status starttime="20170817 21:30:04.509" status="PASS" endtime="20170817 21:30:04.510"></status>
</kw>
<status starttime="20170817 21:30:04.508" status="PASS" endtime="20170817 21:30:04.510"></status>
</kw>
<status starttime="20170817 21:30:04.507" status="PASS" endtime="20170817 21:30:04.510"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:04.511">Delete All Sessions</msg>
<status starttime="20170817 21:30:04.510" status="PASS" endtime="20170817 21:30:04.511"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:04.511">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:04.163" status="PASS" endtime="20170817 21:30:04.511"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:04.512">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:04.511" status="PASS" endtime="20170817 21:30:04.512"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.512">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:04.512">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:30:04.512">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:30:04.512" status="PASS" endtime="20170817 21:30:04.512"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:04.513">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:30:04.161" status="PASS" endtime="20170817 21:30:04.513"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:04.513">${power_state} = On</msg>
<status starttime="20170817 21:30:04.161" status="PASS" endtime="20170817 21:30:04.513"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:30:04.513" status="PASS" endtime="20170817 21:30:04.514"></status>
</kw>
<status starttime="20170817 21:30:04.161" status="PASS" endtime="20170817 21:30:04.514"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:04.517">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:04.517" status="PASS" endtime="20170817 21:30:04.518"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.518">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:04.518" status="PASS" endtime="20170817 21:30:04.518"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.519">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:04.518" status="PASS" endtime="20170817 21:30:04.519"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.519">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:04.519" status="PASS" endtime="20170817 21:30:04.519"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:04.703">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:04.520" status="PASS" endtime="20170817 21:30:04.703"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:04.703">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:04.703">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:04.520" status="PASS" endtime="20170817 21:30:04.703"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:04.704">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:04.703" status="PASS" endtime="20170817 21:30:04.704"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:04.705">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:04.704" status="PASS" endtime="20170817 21:30:04.705"></status>
</kw>
<status starttime="20170817 21:30:04.516" status="PASS" endtime="20170817 21:30:04.705"></status>
</kw>
<status starttime="20170817 21:30:04.516" status="PASS" endtime="20170817 21:30:04.705"></status>
</kw>
<status starttime="20170817 21:30:04.515" status="PASS" endtime="20170817 21:30:04.705"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.706">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:30:04.705" status="PASS" endtime="20170817 21:30:04.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.708">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:30:04.707" status="PASS" endtime="20170817 21:30:04.708"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:04.709">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:30:04.708" status="PASS" endtime="20170817 21:30:04.709"></status>
</kw>
<status starttime="20170817 21:30:04.708" status="PASS" endtime="20170817 21:30:04.709"></status>
</kw>
<status starttime="20170817 21:30:04.706" status="PASS" endtime="20170817 21:30:04.709"></status>
</kw>
<status starttime="20170817 21:30:04.706" status="PASS" endtime="20170817 21:30:04.709"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.817">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:04.818">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:04.709" status="PASS" endtime="20170817 21:30:04.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.819">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:04.819" status="PASS" endtime="20170817 21:30:04.819"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:04.820">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:04.820" status="PASS" endtime="20170817 21:30:04.820"></status>
</kw>
<status starttime="20170817 21:30:04.820" status="PASS" endtime="20170817 21:30:04.821"></status>
</kw>
<status starttime="20170817 21:30:04.818" status="PASS" endtime="20170817 21:30:04.821"></status>
</kw>
<status starttime="20170817 21:30:04.818" status="PASS" endtime="20170817 21:30:04.821"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:04.821">Delete All Sessions</msg>
<status starttime="20170817 21:30:04.821" status="PASS" endtime="20170817 21:30:04.821"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:04.821">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:04.515" status="PASS" endtime="20170817 21:30:04.821"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:04.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:04.822" status="PASS" endtime="20170817 21:30:04.822"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.823">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:04.823">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:30:04.823">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:30:04.822" status="PASS" endtime="20170817 21:30:04.823"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:04.823">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:30:04.514" status="PASS" endtime="20170817 21:30:04.823"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:04.823">${host_state} = Quiesced</msg>
<status starttime="20170817 21:30:04.514" status="PASS" endtime="20170817 21:30:04.823"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:30:04.824">Running != Quiesced</msg>
<status starttime="20170817 21:30:04.824" status="FAIL" endtime="20170817 21:30:04.824"></status>
</kw>
<status starttime="20170817 21:30:04.160" status="FAIL" endtime="20170817 21:30:04.824"></status>
</kw>
<msg level="FAIL" timestamp="20170817 21:30:04.824">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</msg>
<status starttime="20170817 21:19:57.817" status="FAIL" endtime="20170817 21:30:04.825"></status>
</kw>
<status starttime="20170817 21:19:57.265" status="FAIL" endtime="20170817 21:30:04.825"></status>
</kw>
<status starttime="20170817 21:19:49.200" status="FAIL" endtime="20170817 21:30:04.825"></status>
</kw>
<status starttime="20170817 21:19:49.199" status="FAIL" endtime="20170817 21:30:04.825"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:04.830">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:04.829" status="PASS" endtime="20170817 21:30:04.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.831">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:04.831" status="PASS" endtime="20170817 21:30:04.831"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.832">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:04.832" status="PASS" endtime="20170817 21:30:04.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:04.833">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:04.832" status="PASS" endtime="20170817 21:30:04.833"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:05.022">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:04.833" status="PASS" endtime="20170817 21:30:05.022"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:05.023">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:05.023">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:04.833" status="PASS" endtime="20170817 21:30:05.023"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:05.023">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:05.023" status="PASS" endtime="20170817 21:30:05.023"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:05.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:05.024" status="PASS" endtime="20170817 21:30:05.024"></status>
</kw>
<status starttime="20170817 21:30:04.829" status="PASS" endtime="20170817 21:30:05.024"></status>
</kw>
<status starttime="20170817 21:30:04.829" status="PASS" endtime="20170817 21:30:05.024"></status>
</kw>
<status starttime="20170817 21:30:04.828" status="PASS" endtime="20170817 21:30:05.024"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:05.025">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:30:05.025" status="PASS" endtime="20170817 21:30:05.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:05.027">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:30:05.026" status="PASS" endtime="20170817 21:30:05.027"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:05.028">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:30:05.028" status="PASS" endtime="20170817 21:30:05.028"></status>
</kw>
<status starttime="20170817 21:30:05.027" status="PASS" endtime="20170817 21:30:05.028"></status>
</kw>
<status starttime="20170817 21:30:05.026" status="PASS" endtime="20170817 21:30:05.029"></status>
</kw>
<status starttime="20170817 21:30:05.025" status="PASS" endtime="20170817 21:30:05.029"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:05.118">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:05.118">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:05.029" status="PASS" endtime="20170817 21:30:05.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:05.120">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:05.119" status="PASS" endtime="20170817 21:30:05.120"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:05.121">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:05.120" status="PASS" endtime="20170817 21:30:05.121"></status>
</kw>
<status starttime="20170817 21:30:05.120" status="PASS" endtime="20170817 21:30:05.121"></status>
</kw>
<status starttime="20170817 21:30:05.119" status="PASS" endtime="20170817 21:30:05.121"></status>
</kw>
<status starttime="20170817 21:30:05.118" status="PASS" endtime="20170817 21:30:05.121"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:05.122">Delete All Sessions</msg>
<status starttime="20170817 21:30:05.122" status="PASS" endtime="20170817 21:30:05.122"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:05.122">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:04.827" status="PASS" endtime="20170817 21:30:05.122"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:05.123">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:05.122" status="PASS" endtime="20170817 21:30:05.123"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:05.123">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:05.123">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:30:05.123">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:30:05.123" status="PASS" endtime="20170817 21:30:05.123"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:05.124">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:30:04.827" status="PASS" endtime="20170817 21:30:05.124"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:05.124">${host_state} = Quiesced</msg>
<status starttime="20170817 21:30:04.826" status="PASS" endtime="20170817 21:30:05.124"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status starttime="20170817 21:30:05.125" status="PASS" endtime="20170817 21:30:05.125"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:05.125">${status} = True</msg>
<status starttime="20170817 21:30:05.124" status="PASS" endtime="20170817 21:30:05.125"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:05.125">${status} = True</msg>
<status starttime="20170817 21:30:04.826" status="PASS" endtime="20170817 21:30:05.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:05.168">Length is 12</msg>
<status starttime="20170817 21:30:05.168" status="PASS" endtime="20170817 21:30:05.170"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:05.182">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170817 21:30:08.195">${RC} = 0</msg>
<msg level="INFO" timestamp="20170817 21:30:08.196">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.782 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.622 ms
64 bytes from 9.41.166.16...</msg>
<status starttime="20170817 21:30:05.170" status="PASS" endtime="20170817 21:30:08.196"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.198">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.782 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.622 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.579 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.647 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.579/0.657/0.782/0.080 ms</msg>
<status starttime="20170817 21:30:08.198" status="PASS" endtime="20170817 21:30:08.199"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170817 21:30:08.199" status="PASS" endtime="20170817 21:30:08.199"></status>
</kw>
<status starttime="20170817 21:30:05.167" status="PASS" endtime="20170817 21:30:08.200"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.218">${cur_time} = 2017-08-17 21:30:08:217366</msg>
<status starttime="20170817 21:30:08.217" status="PASS" endtime="20170817 21:30:08.218"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.218">${cur_time} = 20170817213008217366</msg>
<status starttime="20170817 21:30:08.218" status="PASS" endtime="20170817 21:30:08.218"></status>
</kw>
<status starttime="20170817 21:30:08.216" status="PASS" endtime="20170817 21:30:08.219"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:08.219">${FFDC_TIME} = 20170817213008217366</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.230">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170817 21:30:08.230" status="PASS" endtime="20170817 21:30:08.230"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.231">${suite_name} = 20170817213008217366_TestsTestBasicPoweron</msg>
<status starttime="20170817 21:30:08.230" status="PASS" endtime="20170817 21:30:08.231"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.231">${test_name} = PowerOnTest</msg>
<status starttime="20170817 21:30:08.231" status="PASS" endtime="20170817 21:30:08.231"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.232">${test_name} = 20170817213008217366_PowerOnTest</msg>
<status starttime="20170817 21:30:08.231" status="PASS" endtime="20170817 21:30:08.232"></status>
</kw>
<status starttime="20170817 21:30:08.229" status="PASS" endtime="20170817 21:30:08.234"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:08.234">${FFDC_DIR_PATH} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170817 21:30:08.235">${FFDC_PREFIX} = 20170817213008217366_</msg>
<msg level="INFO" timestamp="20170817 21:30:08.265">${LOG_PREFIX} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.267" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.266" status="PASS" endtime="20170817 21:30:08.267"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:08.272">${FFDC_FILE_PATH} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.303" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.302" status="PASS" endtime="20170817 21:30:08.303"></status>
</kw>
<status starttime="20170817 21:30:08.301" status="PASS" endtime="20170817 21:30:08.303"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.304" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.304" status="PASS" endtime="20170817 21:30:08.304"></status>
</kw>
<status starttime="20170817 21:30:08.303" status="PASS" endtime="20170817 21:30:08.304"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.305" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.305" status="PASS" endtime="20170817 21:30:08.306"></status>
</kw>
<status starttime="20170817 21:30:08.304" status="PASS" endtime="20170817 21:30:08.306"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.307" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.306" status="PASS" endtime="20170817 21:30:08.307"></status>
</kw>
<status starttime="20170817 21:30:08.306" status="PASS" endtime="20170817 21:30:08.307"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.312" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.308" status="PASS" endtime="20170817 21:30:08.313"></status>
</kw>
<status starttime="20170817 21:30:08.307" status="PASS" endtime="20170817 21:30:08.313"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.314" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.314" status="PASS" endtime="20170817 21:30:08.314"></status>
</kw>
<status starttime="20170817 21:30:08.313" status="PASS" endtime="20170817 21:30:08.314"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.316" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.315" status="PASS" endtime="20170817 21:30:08.316"></status>
</kw>
<status starttime="20170817 21:30:08.315" status="PASS" endtime="20170817 21:30:08.316"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.317" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.317" status="PASS" endtime="20170817 21:30:08.317"></status>
</kw>
<status starttime="20170817 21:30:08.316" status="PASS" endtime="20170817 21:30:08.317"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.318" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.318" status="PASS" endtime="20170817 21:30:08.318"></status>
</kw>
<status starttime="20170817 21:30:08.317" status="PASS" endtime="20170817 21:30:08.319"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.320" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.320" status="PASS" endtime="20170817 21:30:08.321"></status>
</kw>
<status starttime="20170817 21:30:08.319" status="PASS" endtime="20170817 21:30:08.321"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.322" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.321" status="PASS" endtime="20170817 21:30:08.322"></status>
</kw>
<status starttime="20170817 21:30:08.321" status="PASS" endtime="20170817 21:30:08.322"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.323" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.323" status="PASS" endtime="20170817 21:30:08.323"></status>
</kw>
<status starttime="20170817 21:30:08.322" status="PASS" endtime="20170817 21:30:08.323"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.324" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.324" status="PASS" endtime="20170817 21:30:08.325"></status>
</kw>
<status starttime="20170817 21:30:08.323" status="PASS" endtime="20170817 21:30:08.325"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.369">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170817 21:30:08.370">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170817 21:30:08.448">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170817 21:30:08.463">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170817 21:30:08.463">${stderr} = </msg>
<msg level="INFO" timestamp="20170817 21:30:08.464">${rc} = 0</msg>
<status starttime="20170817 21:30:08.325" status="PASS" endtime="20170817 21:30:08.464"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.464">Length is 0</msg>
<status starttime="20170817 21:30:08.464" status="PASS" endtime="20170817 21:30:08.464"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.465">Length is 11</msg>
<status starttime="20170817 21:30:08.465" status="PASS" endtime="20170817 21:30:08.465"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:08.465">${model_name} = Witherspoon</msg>
<status starttime="20170817 21:30:08.325" status="PASS" endtime="20170817 21:30:08.465"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.467" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.466" status="PASS" endtime="20170817 21:30:08.467"></status>
</kw>
<status starttime="20170817 21:30:08.465" status="PASS" endtime="20170817 21:30:08.467"></status>
</kw>
<status starttime="20170817 21:30:08.319" status="PASS" endtime="20170817 21:30:08.467"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.468" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.468" status="PASS" endtime="20170817 21:30:08.468"></status>
</kw>
<status starttime="20170817 21:30:08.467" status="PASS" endtime="20170817 21:30:08.468"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.469">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20170817 21:30:08.469" status="PASS" endtime="20170817 21:30:08.469"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.470" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.470" status="PASS" endtime="20170817 21:30:08.470"></status>
</kw>
<status starttime="20170817 21:30:08.469" status="PASS" endtime="20170817 21:30:08.470"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.472" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.471" status="PASS" endtime="20170817 21:30:08.472"></status>
</kw>
<status starttime="20170817 21:30:08.471" status="PASS" endtime="20170817 21:30:08.472"></status>
</kw>
<status starttime="20170817 21:30:08.469" status="PASS" endtime="20170817 21:30:08.472"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.476" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.475" status="PASS" endtime="20170817 21:30:08.477"></status>
</kw>
<status starttime="20170817 21:30:08.474" status="PASS" endtime="20170817 21:30:08.477"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.478" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.477" status="PASS" endtime="20170817 21:30:08.478"></status>
</kw>
<status starttime="20170817 21:30:08.477" status="PASS" endtime="20170817 21:30:08.478"></status>
</kw>
<status starttime="20170817 21:30:08.472" status="PASS" endtime="20170817 21:30:08.478"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.479" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.479" status="PASS" endtime="20170817 21:30:08.479"></status>
</kw>
<status starttime="20170817 21:30:08.478" status="PASS" endtime="20170817 21:30:08.480"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.482" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.481" status="PASS" endtime="20170817 21:30:08.482"></status>
</kw>
<status starttime="20170817 21:30:08.480" status="PASS" endtime="20170817 21:30:08.482"></status>
</kw>
<status starttime="20170817 21:30:08.478" status="PASS" endtime="20170817 21:30:08.482"></status>
</kw>
<status starttime="20170817 21:30:08.469" status="PASS" endtime="20170817 21:30:08.482"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.483" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.483" status="PASS" endtime="20170817 21:30:08.483"></status>
</kw>
<status starttime="20170817 21:30:08.482" status="PASS" endtime="20170817 21:30:08.483"></status>
</kw>
<status starttime="20170817 21:30:08.301" status="PASS" endtime="20170817 21:30:08.483"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.494">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170817 21:30:08.494" status="PASS" endtime="20170817 21:30:08.494"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.496">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('OS FFDC', 'OS FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('Core Files', 'SCP Coredump Files') |...</msg>
<status starttime="20170817 21:30:08.495" status="PASS" endtime="20170817 21:30:08.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170817 21:30:08.497" status="PASS" endtime="20170817 21:30:08.497"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:08.497">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | OS FFDC | SEL Log | Core Files | BMC Specific Files ]</msg>
<status starttime="20170817 21:30:08.496" status="PASS" endtime="20170817 21:30:08.497"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170817 21:30:08.499" status="PASS" endtime="20170817 21:30:08.499"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:08.499">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:08.499">${ret_values} = None</msg>
<status starttime="20170817 21:30:08.498" status="PASS" endtime="20170817 21:30:08.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170817 21:30:08.500" status="PASS" endtime="20170817 21:30:08.500"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.557">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20170817 21:30:08.557" status="PASS" endtime="20170817 21:30:08.557"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.558">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20170817 21:30:08.558" status="PASS" endtime="20170817 21:30:08.558"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.564">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170817 21:30:08.559" status="PASS" endtime="20170817 21:30:08.564"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.567" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.567" status="PASS" endtime="20170817 21:30:08.567"></status>
</kw>
<status starttime="20170817 21:30:08.566" status="PASS" endtime="20170817 21:30:08.567"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.569" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.568" status="PASS" endtime="20170817 21:30:08.569"></status>
</kw>
<status starttime="20170817 21:30:08.567" status="PASS" endtime="20170817 21:30:08.569"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.570" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.569" status="PASS" endtime="20170817 21:30:08.570"></status>
</kw>
<status starttime="20170817 21:30:08.569" status="PASS" endtime="20170817 21:30:08.570"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.571" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.571" status="PASS" endtime="20170817 21:30:08.571"></status>
</kw>
<status starttime="20170817 21:30:08.570" status="PASS" endtime="20170817 21:30:08.572"></status>
</kw>
<status starttime="20170817 21:30:08.566" status="PASS" endtime="20170817 21:30:08.572"></status>
</kw>
<status starttime="20170817 21:30:08.565" status="PASS" endtime="20170817 21:30:08.572"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.573">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status starttime="20170817 21:30:08.572" status="PASS" endtime="20170817 21:30:08.573"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.707">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170817 21:30:08.708">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170817 21:30:08.754">Command exited with return code 0.</msg>
<status starttime="20170817 21:30:08.625" status="PASS" endtime="20170817 21:30:08.755"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:08.755">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:08.755">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-267"\nVERSION_ID="v1.99.8-267-g6c0b2cb"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status starttime="20170817 21:30:08.573" status="PASS" endtime="20170817 21:30:08.755"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.756">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-267"
VERSION_ID="v1.99.8-267-g6c0b2cb"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status starttime="20170817 21:30:08.755" status="PASS" endtime="20170817 21:30:08.756"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.756">${stderr} = </msg>
<status starttime="20170817 21:30:08.756" status="PASS" endtime="20170817 21:30:08.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.763" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.763" status="PASS" endtime="20170817 21:30:08.763"></status>
</kw>
<status starttime="20170817 21:30:08.762" status="PASS" endtime="20170817 21:30:08.763"></status>
</kw>
<status starttime="20170817 21:30:08.756" status="PASS" endtime="20170817 21:30:08.763"></status>
</kw>
<status starttime="20170817 21:30:08.564" status="PASS" endtime="20170817 21:30:08.763"></status>
</kw>
<status starttime="20170817 21:30:08.564" status="PASS" endtime="20170817 21:30:08.763"></status>
</kw>
<status starttime="20170817 21:30:08.564" status="PASS" endtime="20170817 21:30:08.764"></status>
</kw>
<status starttime="20170817 21:30:08.558" status="PASS" endtime="20170817 21:30:08.764"></status>
</kw>
<status starttime="20170817 21:30:08.557" status="PASS" endtime="20170817 21:30:08.764"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.765">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170817 21:30:08.764" status="PASS" endtime="20170817 21:30:08.765"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.765">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170817 21:30:08.765" status="PASS" endtime="20170817 21:30:08.766"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.769" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.768" status="PASS" endtime="20170817 21:30:08.769"></status>
</kw>
<status starttime="20170817 21:30:08.768" status="PASS" endtime="20170817 21:30:08.769"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.770" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.770" status="PASS" endtime="20170817 21:30:08.770"></status>
</kw>
<status starttime="20170817 21:30:08.769" status="PASS" endtime="20170817 21:30:08.770"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.772" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.771" status="PASS" endtime="20170817 21:30:08.772"></status>
</kw>
<status starttime="20170817 21:30:08.770" status="PASS" endtime="20170817 21:30:08.772"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.773" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.773" status="PASS" endtime="20170817 21:30:08.773"></status>
</kw>
<status starttime="20170817 21:30:08.772" status="PASS" endtime="20170817 21:30:08.773"></status>
</kw>
<status starttime="20170817 21:30:08.767" status="PASS" endtime="20170817 21:30:08.773"></status>
</kw>
<status starttime="20170817 21:30:08.767" status="PASS" endtime="20170817 21:30:08.773"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.774">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status starttime="20170817 21:30:08.774" status="PASS" endtime="20170817 21:30:08.774"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.896">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170817 21:30:08.896">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170817 21:30:08.963">Command exited with return code 0.</msg>
<status starttime="20170817 21:30:08.834" status="PASS" endtime="20170817 21:30:08.963"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:08.963">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:08.963">${ret_values} = (u' 15:56:38 up 13 min,  load average: 0.34, 0.80, 0.81', u'', 0)</msg>
<status starttime="20170817 21:30:08.774" status="PASS" endtime="20170817 21:30:08.964"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.964">${stdout} =  15:56:38 up 13 min,  load average: 0.34, 0.80, 0.81</msg>
<status starttime="20170817 21:30:08.964" status="PASS" endtime="20170817 21:30:08.964"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.965">${stderr} = </msg>
<status starttime="20170817 21:30:08.965" status="PASS" endtime="20170817 21:30:08.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.972" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.971" status="PASS" endtime="20170817 21:30:08.972"></status>
</kw>
<status starttime="20170817 21:30:08.971" status="PASS" endtime="20170817 21:30:08.972"></status>
</kw>
<status starttime="20170817 21:30:08.965" status="PASS" endtime="20170817 21:30:08.972"></status>
</kw>
<status starttime="20170817 21:30:08.766" status="PASS" endtime="20170817 21:30:08.972"></status>
</kw>
<status starttime="20170817 21:30:08.766" status="PASS" endtime="20170817 21:30:08.972"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.975" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.975" status="PASS" endtime="20170817 21:30:08.975"></status>
</kw>
<status starttime="20170817 21:30:08.974" status="PASS" endtime="20170817 21:30:08.976"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.977" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.976" status="PASS" endtime="20170817 21:30:08.977"></status>
</kw>
<status starttime="20170817 21:30:08.976" status="PASS" endtime="20170817 21:30:08.977"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.978" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.978" status="PASS" endtime="20170817 21:30:08.979"></status>
</kw>
<status starttime="20170817 21:30:08.977" status="PASS" endtime="20170817 21:30:08.979"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:08.980" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:08.979" status="PASS" endtime="20170817 21:30:08.980"></status>
</kw>
<status starttime="20170817 21:30:08.979" status="PASS" endtime="20170817 21:30:08.980"></status>
</kw>
<status starttime="20170817 21:30:08.974" status="PASS" endtime="20170817 21:30:08.980"></status>
</kw>
<status starttime="20170817 21:30:08.973" status="PASS" endtime="20170817 21:30:08.980"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:08.981">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status starttime="20170817 21:30:08.980" status="PASS" endtime="20170817 21:30:08.981"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:09.099">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170817 21:30:09.100">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170817 21:30:09.205">Command exited with return code 0.</msg>
<status starttime="20170817 21:30:09.036" status="PASS" endtime="20170817 21:30:09.205"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:09.205">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:09.205">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status starttime="20170817 21:30:08.981" status="PASS" endtime="20170817 21:30:09.205"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:09.206">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status starttime="20170817 21:30:09.206" status="PASS" endtime="20170817 21:30:09.206"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:09.207">${stderr} = </msg>
<status starttime="20170817 21:30:09.206" status="PASS" endtime="20170817 21:30:09.207"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:09.214" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:09.213" status="PASS" endtime="20170817 21:30:09.214"></status>
</kw>
<status starttime="20170817 21:30:09.212" status="PASS" endtime="20170817 21:30:09.214"></status>
</kw>
<status starttime="20170817 21:30:09.207" status="PASS" endtime="20170817 21:30:09.214"></status>
</kw>
<status starttime="20170817 21:30:08.973" status="PASS" endtime="20170817 21:30:09.214"></status>
</kw>
<status starttime="20170817 21:30:08.972" status="PASS" endtime="20170817 21:30:09.214"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:09.217" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:09.217" status="PASS" endtime="20170817 21:30:09.217"></status>
</kw>
<status starttime="20170817 21:30:09.216" status="PASS" endtime="20170817 21:30:09.217"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:09.218" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:09.218" status="PASS" endtime="20170817 21:30:09.218"></status>
</kw>
<status starttime="20170817 21:30:09.217" status="PASS" endtime="20170817 21:30:09.219"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:09.220" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:09.219" status="PASS" endtime="20170817 21:30:09.220"></status>
</kw>
<status starttime="20170817 21:30:09.219" status="PASS" endtime="20170817 21:30:09.220"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:09.221" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:09.221" status="PASS" endtime="20170817 21:30:09.221"></status>
</kw>
<status starttime="20170817 21:30:09.220" status="PASS" endtime="20170817 21:30:09.221"></status>
</kw>
<status starttime="20170817 21:30:09.215" status="PASS" endtime="20170817 21:30:09.221"></status>
</kw>
<status starttime="20170817 21:30:09.215" status="PASS" endtime="20170817 21:30:09.221"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:09.222">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status starttime="20170817 21:30:09.222" status="PASS" endtime="20170817 21:30:09.222"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:09.345">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170817 21:30:09.345">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170817 21:30:09.393">Command exited with return code 0.</msg>
<status starttime="20170817 21:30:09.280" status="PASS" endtime="20170817 21:30:09.393"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:09.394">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:09.394">${ret_values} = (u'Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Thu Aug 17 19:57:05 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status starttime="20170817 21:30:09.222" status="PASS" endtime="20170817 21:30:09.394"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:09.394">${stdout} = Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Thu Aug 17 19:57:05 UTC 2017 armv6l GNU/Linux</msg>
<status starttime="20170817 21:30:09.394" status="PASS" endtime="20170817 21:30:09.394"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:09.395">${stderr} = </msg>
<status starttime="20170817 21:30:09.395" status="PASS" endtime="20170817 21:30:09.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:09.402" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:09.401" status="PASS" endtime="20170817 21:30:09.402"></status>
</kw>
<status starttime="20170817 21:30:09.401" status="PASS" endtime="20170817 21:30:09.402"></status>
</kw>
<status starttime="20170817 21:30:09.395" status="PASS" endtime="20170817 21:30:09.402"></status>
</kw>
<status starttime="20170817 21:30:09.214" status="PASS" endtime="20170817 21:30:09.402"></status>
</kw>
<status starttime="20170817 21:30:09.214" status="PASS" endtime="20170817 21:30:09.402"></status>
</kw>
<status starttime="20170817 21:30:08.766" status="PASS" endtime="20170817 21:30:09.402"></status>
</kw>
<status starttime="20170817 21:30:08.764" status="PASS" endtime="20170817 21:30:09.402"></status>
</kw>
<status starttime="20170817 21:30:08.764" status="PASS" endtime="20170817 21:30:09.402"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:09.403">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status starttime="20170817 21:30:09.403" status="PASS" endtime="20170817 21:30:09.404"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:09.404">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170817 21:30:09.404" status="PASS" endtime="20170817 21:30:09.404"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:09.407" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:09.407" status="PASS" endtime="20170817 21:30:09.408"></status>
</kw>
<status starttime="20170817 21:30:09.406" status="PASS" endtime="20170817 21:30:09.408"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:09.409" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:09.409" status="PASS" endtime="20170817 21:30:09.409"></status>
</kw>
<status starttime="20170817 21:30:09.408" status="PASS" endtime="20170817 21:30:09.409"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:09.410" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:09.410" status="PASS" endtime="20170817 21:30:09.410"></status>
</kw>
<status starttime="20170817 21:30:09.409" status="PASS" endtime="20170817 21:30:09.410"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:09.412" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:09.411" status="PASS" endtime="20170817 21:30:09.412"></status>
</kw>
<status starttime="20170817 21:30:09.411" status="PASS" endtime="20170817 21:30:09.412"></status>
</kw>
<status starttime="20170817 21:30:09.406" status="PASS" endtime="20170817 21:30:09.412"></status>
</kw>
<status starttime="20170817 21:30:09.406" status="PASS" endtime="20170817 21:30:09.412"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:09.413">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status starttime="20170817 21:30:09.412" status="PASS" endtime="20170817 21:30:09.413"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:09.537">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170817 21:30:09.538">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170817 21:30:10.965">Command exited with return code 0.</msg>
<status starttime="20170817 21:30:09.470" status="PASS" endtime="20170817 21:30:10.965"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:10.965">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:10.965">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status starttime="20170817 21:30:09.413" status="PASS" endtime="20170817 21:30:10.965"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:10.966">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status starttime="20170817 21:30:10.966" status="PASS" endtime="20170817 21:30:10.966"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:10.967">${stderr} = </msg>
<status starttime="20170817 21:30:10.966" status="PASS" endtime="20170817 21:30:10.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:10.974" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:10.973" status="PASS" endtime="20170817 21:30:10.974"></status>
</kw>
<status starttime="20170817 21:30:10.973" status="PASS" endtime="20170817 21:30:10.974"></status>
</kw>
<status starttime="20170817 21:30:10.967" status="PASS" endtime="20170817 21:30:10.974"></status>
</kw>
<status starttime="20170817 21:30:09.405" status="PASS" endtime="20170817 21:30:10.974"></status>
</kw>
<status starttime="20170817 21:30:09.405" status="PASS" endtime="20170817 21:30:10.974"></status>
</kw>
<status starttime="20170817 21:30:09.404" status="PASS" endtime="20170817 21:30:10.974"></status>
</kw>
<status starttime="20170817 21:30:09.403" status="PASS" endtime="20170817 21:30:10.975"></status>
</kw>
<status starttime="20170817 21:30:09.403" status="PASS" endtime="20170817 21:30:10.975"></status>
</kw>
<status starttime="20170817 21:30:08.557" status="PASS" endtime="20170817 21:30:10.975"></status>
</kw>
<status starttime="20170817 21:30:08.556" status="PASS" endtime="20170817 21:30:10.975"></status>
</kw>
<status starttime="20170817 21:30:08.500" status="PASS" endtime="20170817 21:30:10.975"></status>
</kw>
<status starttime="20170817 21:30:08.498" status="PASS" endtime="20170817 21:30:10.975"></status>
</kw>
<status starttime="20170817 21:30:08.497" status="PASS" endtime="20170817 21:30:10.975"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170817 21:30:10.977" status="PASS" endtime="20170817 21:30:10.977"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:10.977">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:10.977">${ret_values} = None</msg>
<status starttime="20170817 21:30:10.976" status="PASS" endtime="20170817 21:30:10.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170817 21:30:10.977" status="PASS" endtime="20170817 21:30:10.978"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.019">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170817 21:30:11.019" status="PASS" endtime="20170817 21:30:11.019"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.020">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_led', '/org/...</msg>
<status starttime="20170817 21:30:11.020" status="PASS" endtime="20170817 21:30:11.020"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.021">${logpath} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_record_log.txt</msg>
<status starttime="20170817 21:30:11.021" status="PASS" endtime="20170817 21:30:11.021"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:11.024">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:11.024" status="PASS" endtime="20170817 21:30:11.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.025">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:11.025" status="PASS" endtime="20170817 21:30:11.025"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.026">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:11.026" status="PASS" endtime="20170817 21:30:11.026"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.027">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:11.026" status="PASS" endtime="20170817 21:30:11.027"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:11.240">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:11.027" status="PASS" endtime="20170817 21:30:11.240"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:11.240">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:11.240">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:11.027" status="PASS" endtime="20170817 21:30:11.240"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:11.241">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:11.241" status="PASS" endtime="20170817 21:30:11.241"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:11.242">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:11.242" status="PASS" endtime="20170817 21:30:11.242"></status>
</kw>
<status starttime="20170817 21:30:11.023" status="PASS" endtime="20170817 21:30:11.242"></status>
</kw>
<status starttime="20170817 21:30:11.023" status="PASS" endtime="20170817 21:30:11.242"></status>
</kw>
<status starttime="20170817 21:30:11.022" status="PASS" endtime="20170817 21:30:11.242"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.243">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170817 21:30:11.243" status="PASS" endtime="20170817 21:30:11.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 21:30:11.243" status="PASS" endtime="20170817 21:30:11.244"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.286">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:11.287">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170817 21:30:11.244" status="PASS" endtime="20170817 21:30:11.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 21:30:11.287" status="PASS" endtime="20170817 21:30:11.287"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:11.288">Delete All Sessions</msg>
<status starttime="20170817 21:30:11.288" status="PASS" endtime="20170817 21:30:11.288"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:11.288">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170817 21:30:11.021" status="PASS" endtime="20170817 21:30:11.288"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:11.289">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:30:11.289">404 != 200</msg>
<status starttime="20170817 21:30:11.289" status="FAIL" endtime="20170817 21:30:11.289"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:11.289">${status} = False</msg>
<status starttime="20170817 21:30:11.288" status="PASS" endtime="20170817 21:30:11.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170817 21:30:11.290">Continuing for loop from the next iteration.</msg>
<status starttime="20170817 21:30:11.290" status="PASS" endtime="20170817 21:30:11.290"></status>
</kw>
<status starttime="20170817 21:30:11.290" status="PASS" endtime="20170817 21:30:11.291"></status>
</kw>
<status starttime="20170817 21:30:11.020" status="PASS" endtime="20170817 21:30:11.291"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.291">${logpath} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_control_list.txt</msg>
<status starttime="20170817 21:30:11.291" status="PASS" endtime="20170817 21:30:11.291"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:11.294">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:11.294" status="PASS" endtime="20170817 21:30:11.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.296">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:11.295" status="PASS" endtime="20170817 21:30:11.296"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.296">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:11.296" status="PASS" endtime="20170817 21:30:11.296"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.297">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:11.297" status="PASS" endtime="20170817 21:30:11.297"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:11.527">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:11.298" status="PASS" endtime="20170817 21:30:11.527"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:11.527">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:11.527">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:11.297" status="PASS" endtime="20170817 21:30:11.527"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:11.528">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:11.528" status="PASS" endtime="20170817 21:30:11.528"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:11.529">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:11.528" status="PASS" endtime="20170817 21:30:11.529"></status>
</kw>
<status starttime="20170817 21:30:11.293" status="PASS" endtime="20170817 21:30:11.529"></status>
</kw>
<status starttime="20170817 21:30:11.293" status="PASS" endtime="20170817 21:30:11.529"></status>
</kw>
<status starttime="20170817 21:30:11.292" status="PASS" endtime="20170817 21:30:11.529"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.530">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status starttime="20170817 21:30:11.529" status="PASS" endtime="20170817 21:30:11.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 21:30:11.530" status="PASS" endtime="20170817 21:30:11.530"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.865">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:11.865">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:11.531" status="PASS" endtime="20170817 21:30:11.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 21:30:11.865" status="PASS" endtime="20170817 21:30:11.866"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:11.866">Delete All Sessions</msg>
<status starttime="20170817 21:30:11.866" status="PASS" endtime="20170817 21:30:11.866"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:11.866">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:11.292" status="PASS" endtime="20170817 21:30:11.866"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:11.867">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:11.867" status="PASS" endtime="20170817 21:30:11.867"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:11.867">${status} = True</msg>
<status starttime="20170817 21:30:11.867" status="PASS" endtime="20170817 21:30:11.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170817 21:30:11.868" status="PASS" endtime="20170817 21:30:11.868"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.869">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot_mode": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"
    }, 
    "/xyz/openbmc_project/control/host0/boot_source": {
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:11.869">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170817 21:30:11.869">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status starttime="20170817 21:30:11.868" status="PASS" endtime="20170817 21:30:11.869"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:11.871" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_control_list.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:11.870" status="PASS" endtime="20170817 21:30:11.871"></status>
</kw>
<status starttime="20170817 21:30:11.869" status="PASS" endtime="20170817 21:30:11.871"></status>
</kw>
<status starttime="20170817 21:30:11.291" status="PASS" endtime="20170817 21:30:11.871"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.872">${logpath} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_sensor_list.txt</msg>
<status starttime="20170817 21:30:11.871" status="PASS" endtime="20170817 21:30:11.872"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:11.875">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:11.874" status="PASS" endtime="20170817 21:30:11.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.878">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:11.877" status="PASS" endtime="20170817 21:30:11.878"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.878">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:11.878" status="PASS" endtime="20170817 21:30:11.878"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:11.879">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:11.878" status="PASS" endtime="20170817 21:30:11.879"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:12.073">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:11.880" status="PASS" endtime="20170817 21:30:12.073"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:12.073">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:12.073">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:11.879" status="PASS" endtime="20170817 21:30:12.073"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:12.074">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:12.073" status="PASS" endtime="20170817 21:30:12.074"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:12.074">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:12.074" status="PASS" endtime="20170817 21:30:12.074"></status>
</kw>
<status starttime="20170817 21:30:11.874" status="PASS" endtime="20170817 21:30:12.075"></status>
</kw>
<status starttime="20170817 21:30:11.873" status="PASS" endtime="20170817 21:30:12.075"></status>
</kw>
<status starttime="20170817 21:30:11.873" status="PASS" endtime="20170817 21:30:12.075"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:12.075">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170817 21:30:12.075" status="PASS" endtime="20170817 21:30:12.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 21:30:12.076" status="PASS" endtime="20170817 21:30:12.076"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:12.296">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:12.296">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:12.076" status="PASS" endtime="20170817 21:30:12.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 21:30:12.297" status="PASS" endtime="20170817 21:30:12.297"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:12.298">Delete All Sessions</msg>
<status starttime="20170817 21:30:12.298" status="PASS" endtime="20170817 21:30:12.298"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:12.298">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:11.872" status="PASS" endtime="20170817 21:30:12.298"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:12.299">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:12.299" status="PASS" endtime="20170817 21:30:12.299"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:12.299">${status} = True</msg>
<status starttime="20170817 21:30:12.298" status="PASS" endtime="20170817 21:30:12.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170817 21:30:12.300" status="PASS" endtime="20170817 21:30:12.300"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:12.301">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:12.301">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170817 21:30:12.301">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170817 21:30:12.300" status="PASS" endtime="20170817 21:30:12.301"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:12.302" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_sensor_list.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:12.302" status="PASS" endtime="20170817 21:30:12.303"></status>
</kw>
<status starttime="20170817 21:30:12.301" status="PASS" endtime="20170817 21:30:12.303"></status>
</kw>
<status starttime="20170817 21:30:11.871" status="PASS" endtime="20170817 21:30:12.303"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:12.303">${logpath} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_led.txt</msg>
<status starttime="20170817 21:30:12.303" status="PASS" endtime="20170817 21:30:12.304"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:12.307">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:12.306" status="PASS" endtime="20170817 21:30:12.307"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:12.308">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:12.307" status="PASS" endtime="20170817 21:30:12.308"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:12.308">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:12.308" status="PASS" endtime="20170817 21:30:12.308"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:12.309">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:12.308" status="PASS" endtime="20170817 21:30:12.309"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:12.515">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:12.310" status="PASS" endtime="20170817 21:30:12.515"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:12.515">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:12.515">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:12.309" status="PASS" endtime="20170817 21:30:12.515"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:12.516">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:12.515" status="PASS" endtime="20170817 21:30:12.516"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:12.517">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:12.516" status="PASS" endtime="20170817 21:30:12.517"></status>
</kw>
<status starttime="20170817 21:30:12.305" status="PASS" endtime="20170817 21:30:12.517"></status>
</kw>
<status starttime="20170817 21:30:12.305" status="PASS" endtime="20170817 21:30:12.517"></status>
</kw>
<status starttime="20170817 21:30:12.304" status="PASS" endtime="20170817 21:30:12.517"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:12.518">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170817 21:30:12.517" status="PASS" endtime="20170817 21:30:12.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 21:30:12.518" status="PASS" endtime="20170817 21:30:12.518"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:12.572">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:12.572">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170817 21:30:12.518" status="PASS" endtime="20170817 21:30:12.572"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 21:30:12.573" status="PASS" endtime="20170817 21:30:12.574"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:12.574">Delete All Sessions</msg>
<status starttime="20170817 21:30:12.574" status="PASS" endtime="20170817 21:30:12.574"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:12.574">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170817 21:30:12.304" status="PASS" endtime="20170817 21:30:12.575"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:12.576">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170817 21:30:12.576">404 != 200</msg>
<status starttime="20170817 21:30:12.575" status="FAIL" endtime="20170817 21:30:12.576"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:12.576">${status} = False</msg>
<status starttime="20170817 21:30:12.575" status="PASS" endtime="20170817 21:30:12.576"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170817 21:30:12.577">Continuing for loop from the next iteration.</msg>
<status starttime="20170817 21:30:12.577" status="PASS" endtime="20170817 21:30:12.577"></status>
</kw>
<status starttime="20170817 21:30:12.576" status="PASS" endtime="20170817 21:30:12.577"></status>
</kw>
<status starttime="20170817 21:30:12.303" status="PASS" endtime="20170817 21:30:12.577"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:12.578">${logpath} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_elog.txt</msg>
<status starttime="20170817 21:30:12.577" status="PASS" endtime="20170817 21:30:12.578"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:12.581">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:12.580" status="PASS" endtime="20170817 21:30:12.582"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:12.582">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:12.582" status="PASS" endtime="20170817 21:30:12.582"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:12.583">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:12.582" status="PASS" endtime="20170817 21:30:12.583"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:12.583">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:12.583" status="PASS" endtime="20170817 21:30:12.583"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:12.792">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:12.584" status="PASS" endtime="20170817 21:30:12.792"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:12.792">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:12.792">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:12.584" status="PASS" endtime="20170817 21:30:12.793"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:12.793">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:12.793" status="PASS" endtime="20170817 21:30:12.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:12.794">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:12.794" status="PASS" endtime="20170817 21:30:12.794"></status>
</kw>
<status starttime="20170817 21:30:12.580" status="PASS" endtime="20170817 21:30:12.794"></status>
</kw>
<status starttime="20170817 21:30:12.579" status="PASS" endtime="20170817 21:30:12.794"></status>
</kw>
<status starttime="20170817 21:30:12.579" status="PASS" endtime="20170817 21:30:12.794"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:12.795">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170817 21:30:12.794" status="PASS" endtime="20170817 21:30:12.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 21:30:12.795" status="PASS" endtime="20170817 21:30:12.795"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:13.078">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:13.078">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:12.796" status="PASS" endtime="20170817 21:30:13.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 21:30:13.078" status="PASS" endtime="20170817 21:30:13.079"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:13.079">Delete All Sessions</msg>
<status starttime="20170817 21:30:13.079" status="PASS" endtime="20170817 21:30:13.079"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:13.079">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:12.578" status="PASS" endtime="20170817 21:30:13.079"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:13.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:13.080" status="PASS" endtime="20170817 21:30:13.081"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:13.081">${status} = True</msg>
<status starttime="20170817 21:30:13.080" status="PASS" endtime="20170817 21:30:13.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170817 21:30:13.081" status="PASS" endtime="20170817 21:30:13.081"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:13.082">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775110909, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775236141, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775305560, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775372425, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775437820, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:13.082">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170817 21:30:13.082">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFile...</msg>
<status starttime="20170817 21:30:13.082" status="PASS" endtime="20170817 21:30:13.083"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:13.084" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_elog.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_elog.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:13.083" status="PASS" endtime="20170817 21:30:13.084"></status>
</kw>
<status starttime="20170817 21:30:13.083" status="PASS" endtime="20170817 21:30:13.084"></status>
</kw>
<status starttime="20170817 21:30:12.577" status="PASS" endtime="20170817 21:30:13.084"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:13.085">${logpath} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_inventory.txt</msg>
<status starttime="20170817 21:30:13.085" status="PASS" endtime="20170817 21:30:13.085"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:13.089">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:13.088" status="PASS" endtime="20170817 21:30:13.089"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:13.090">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:13.090" status="PASS" endtime="20170817 21:30:13.090"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:13.091">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:13.090" status="PASS" endtime="20170817 21:30:13.091"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:13.091">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:13.091" status="PASS" endtime="20170817 21:30:13.091"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:13.280">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:13.092" status="PASS" endtime="20170817 21:30:13.280"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:13.280">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:13.280">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:13.092" status="PASS" endtime="20170817 21:30:13.280"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:13.281">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:13.280" status="PASS" endtime="20170817 21:30:13.281"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:13.281">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:13.281" status="PASS" endtime="20170817 21:30:13.281"></status>
</kw>
<status starttime="20170817 21:30:13.088" status="PASS" endtime="20170817 21:30:13.282"></status>
</kw>
<status starttime="20170817 21:30:13.087" status="PASS" endtime="20170817 21:30:13.282"></status>
</kw>
<status starttime="20170817 21:30:13.086" status="PASS" endtime="20170817 21:30:13.282"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:13.282">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170817 21:30:13.282" status="PASS" endtime="20170817 21:30:13.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 21:30:13.283" status="PASS" endtime="20170817 21:30:13.283"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:13.527">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:13.527">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:13.283" status="PASS" endtime="20170817 21:30:13.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 21:30:13.528" status="PASS" endtime="20170817 21:30:13.528"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:13.529">Delete All Sessions</msg>
<status starttime="20170817 21:30:13.528" status="PASS" endtime="20170817 21:30:13.529"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:13.529">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:13.085" status="PASS" endtime="20170817 21:30:13.529"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:13.530">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:13.530" status="PASS" endtime="20170817 21:30:13.530"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:13.530">${status} = True</msg>
<status starttime="20170817 21:30:13.529" status="PASS" endtime="20170817 21:30:13.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170817 21:30:13.530" status="PASS" endtime="20170817 21:30:13.531"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:13.532">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:13.532">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170817 21:30:13.532">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status starttime="20170817 21:30:13.531" status="PASS" endtime="20170817 21:30:13.532"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:13.533" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_inventory.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:13.533" status="PASS" endtime="20170817 21:30:13.534"></status>
</kw>
<status starttime="20170817 21:30:13.532" status="PASS" endtime="20170817 21:30:13.534"></status>
</kw>
<status starttime="20170817 21:30:13.084" status="PASS" endtime="20170817 21:30:13.534"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_xyz_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:13.534">${logpath} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_sensor_xyz_list.txt</msg>
<status starttime="20170817 21:30:13.534" status="PASS" endtime="20170817 21:30:13.535"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:13.540">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:13.537" status="PASS" endtime="20170817 21:30:13.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:13.541">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:13.540" status="PASS" endtime="20170817 21:30:13.541"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:13.541">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:13.541" status="PASS" endtime="20170817 21:30:13.542"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:13.542">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:13.542" status="PASS" endtime="20170817 21:30:13.542"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:13.744">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:13.543" status="PASS" endtime="20170817 21:30:13.744"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:13.745">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:13.745">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:13.543" status="PASS" endtime="20170817 21:30:13.745"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:13.745">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:13.745" status="PASS" endtime="20170817 21:30:13.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:13.746">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:13.746" status="PASS" endtime="20170817 21:30:13.746"></status>
</kw>
<status starttime="20170817 21:30:13.536" status="PASS" endtime="20170817 21:30:13.746"></status>
</kw>
<status starttime="20170817 21:30:13.536" status="PASS" endtime="20170817 21:30:13.746"></status>
</kw>
<status starttime="20170817 21:30:13.535" status="PASS" endtime="20170817 21:30:13.746"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:13.747">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status starttime="20170817 21:30:13.747" status="PASS" endtime="20170817 21:30:13.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 21:30:13.747" status="PASS" endtime="20170817 21:30:13.748"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:14.360">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:14.360">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:13.748" status="PASS" endtime="20170817 21:30:14.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 21:30:14.361" status="PASS" endtime="20170817 21:30:14.361"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:14.362">Delete All Sessions</msg>
<status starttime="20170817 21:30:14.362" status="PASS" endtime="20170817 21:30:14.362"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:14.363">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:13.535" status="PASS" endtime="20170817 21:30:14.363"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:14.364">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:14.364" status="PASS" endtime="20170817 21:30:14.364"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:14.364">${status} = True</msg>
<status starttime="20170817 21:30:14.363" status="PASS" endtime="20170817 21:30:14.364"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170817 21:30:14.365" status="PASS" endtime="20170817 21:30:14.365"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:14.367">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9765
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10273
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10683
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 11467
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9566
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10107
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9791
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10302
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30240
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:14.367">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170817 21:30:14.367">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
            "Scale": 0,
            "Target": 10500,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS",
       ...</msg>
<status starttime="20170817 21:30:14.366" status="PASS" endtime="20170817 21:30:14.367"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:14.369" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_sensor_xyz_list.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_sensor_xyz_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:14.368" status="PASS" endtime="20170817 21:30:14.369"></status>
</kw>
<status starttime="20170817 21:30:14.367" status="PASS" endtime="20170817 21:30:14.369"></status>
</kw>
<status starttime="20170817 21:30:13.534" status="PASS" endtime="20170817 21:30:14.369"></status>
</kw>
<status starttime="20170817 21:30:11.020" status="PASS" endtime="20170817 21:30:14.369"></status>
</kw>
<status starttime="20170817 21:30:11.019" status="PASS" endtime="20170817 21:30:14.370"></status>
</kw>
<status starttime="20170817 21:30:11.019" status="PASS" endtime="20170817 21:30:14.370"></status>
</kw>
<status starttime="20170817 21:30:11.019" status="PASS" endtime="20170817 21:30:14.370"></status>
</kw>
<status starttime="20170817 21:30:11.018" status="PASS" endtime="20170817 21:30:14.370"></status>
</kw>
<status starttime="20170817 21:30:10.978" status="PASS" endtime="20170817 21:30:14.370"></status>
</kw>
<status starttime="20170817 21:30:10.975" status="PASS" endtime="20170817 21:30:14.370"></status>
</kw>
<status starttime="20170817 21:30:10.975" status="PASS" endtime="20170817 21:30:14.370"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170817 21:30:14.372" status="PASS" endtime="20170817 21:30:14.372"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:14.372">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:14.372">${ret_values} = None</msg>
<status starttime="20170817 21:30:14.371" status="PASS" endtime="20170817 21:30:14.372"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170817 21:30:14.373" status="PASS" endtime="20170817 21:30:14.373"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:14.412">Returning from the enclosing user keyword.</msg>
<status starttime="20170817 21:30:14.411" status="PASS" endtime="20170817 21:30:14.412"></status>
</kw>
<status starttime="20170817 21:30:14.411" status="PASS" endtime="20170817 21:30:14.412"></status>
</kw>
<status starttime="20170817 21:30:14.373" status="PASS" endtime="20170817 21:30:14.412"></status>
</kw>
<status starttime="20170817 21:30:14.370" status="PASS" endtime="20170817 21:30:14.412"></status>
</kw>
<status starttime="20170817 21:30:14.370" status="PASS" endtime="20170817 21:30:14.412"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170817 21:30:14.414" status="PASS" endtime="20170817 21:30:14.414"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:14.414">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:14.414">${ret_values} = None</msg>
<status starttime="20170817 21:30:14.413" status="PASS" endtime="20170817 21:30:14.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170817 21:30:14.415" status="PASS" endtime="20170817 21:30:14.415"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:14.465">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:14.465" status="PASS" endtime="20170817 21:30:14.466"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:14.466">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:14.466" status="PASS" endtime="20170817 21:30:14.466"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:14.467">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:14.467" status="PASS" endtime="20170817 21:30:14.467"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:14.468">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:14.468" status="PASS" endtime="20170817 21:30:14.468"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:14.659">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:14.469" status="PASS" endtime="20170817 21:30:14.659"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:14.659">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:14.659">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:14.468" status="PASS" endtime="20170817 21:30:14.659"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:14.660">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:14.659" status="PASS" endtime="20170817 21:30:14.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:14.660">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:14.660" status="PASS" endtime="20170817 21:30:14.661"></status>
</kw>
<status starttime="20170817 21:30:14.464" status="PASS" endtime="20170817 21:30:14.661"></status>
</kw>
<status starttime="20170817 21:30:14.464" status="PASS" endtime="20170817 21:30:14.661"></status>
</kw>
<status starttime="20170817 21:30:14.463" status="PASS" endtime="20170817 21:30:14.661"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:14.661">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170817 21:30:14.661" status="PASS" endtime="20170817 21:30:14.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 21:30:14.662" status="PASS" endtime="20170817 21:30:14.662"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:14.843">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:14.844">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:14.662" status="PASS" endtime="20170817 21:30:14.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 21:30:14.845" status="PASS" endtime="20170817 21:30:14.845"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:14.846">Delete All Sessions</msg>
<status starttime="20170817 21:30:14.846" status="PASS" endtime="20170817 21:30:14.846"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:14.846">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:14.463" status="PASS" endtime="20170817 21:30:14.846"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:14.847">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:14.847" status="PASS" endtime="20170817 21:30:14.847"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:14.847">${status} = True</msg>
<status starttime="20170817 21:30:14.846" status="PASS" endtime="20170817 21:30:14.847"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status starttime="20170817 21:30:14.848" status="PASS" endtime="20170817 21:30:14.848"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:14.849">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775110909, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775236141, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775305560, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775372425, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775437820, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:14.849">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:30:14.849">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/5': {u'associations': [], u'AdditionalData': [], u'Timestamp': 1501775437820, u'Message': u'org.open_power.Host.Error.WatchdogTimedOut', u'Severity': u'...</msg>
<status starttime="20170817 21:30:14.848" status="PASS" endtime="20170817 21:30:14.849"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:14.850">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/entr...</msg>
<status starttime="20170817 21:30:14.849" status="PASS" endtime="20170817 21:30:14.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:14.850">${logpath} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_esel</msg>
<status starttime="20170817 21:30:14.850" status="PASS" endtime="20170817 21:30:14.850"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:14.851" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_esel"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_esel&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:14.851" status="PASS" endtime="20170817 21:30:14.851"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170817 21:30:14.852" status="PASS" endtime="20170817 21:30:14.852"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:14.856">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:14.855" status="PASS" endtime="20170817 21:30:14.856"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:14.857">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:14.856" status="PASS" endtime="20170817 21:30:14.857"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:14.857">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:14.857" status="PASS" endtime="20170817 21:30:14.857"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:14.858">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:14.858" status="PASS" endtime="20170817 21:30:14.858"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.078">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:14.859" status="PASS" endtime="20170817 21:30:15.078"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:15.078">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:15.078">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:14.858" status="PASS" endtime="20170817 21:30:15.078"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.079">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:15.079" status="PASS" endtime="20170817 21:30:15.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:15.079" status="PASS" endtime="20170817 21:30:15.080"></status>
</kw>
<status starttime="20170817 21:30:14.855" status="PASS" endtime="20170817 21:30:15.080"></status>
</kw>
<status starttime="20170817 21:30:14.854" status="PASS" endtime="20170817 21:30:15.080"></status>
</kw>
<status starttime="20170817 21:30:14.854" status="PASS" endtime="20170817 21:30:15.081"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.081">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status starttime="20170817 21:30:15.081" status="PASS" endtime="20170817 21:30:15.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 21:30:15.082" status="PASS" endtime="20170817 21:30:15.082"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.165">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:15.165">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:15.082" status="PASS" endtime="20170817 21:30:15.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 21:30:15.165" status="PASS" endtime="20170817 21:30:15.166"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:15.166">Delete All Sessions</msg>
<status starttime="20170817 21:30:15.166" status="PASS" endtime="20170817 21:30:15.166"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:15.166">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:14.853" status="PASS" endtime="20170817 21:30:15.166"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.167">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:15.167" status="PASS" endtime="20170817 21:30:15.167"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.167">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:15.168">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:30:15.168">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:30:15.167" status="PASS" endtime="20170817 21:30:15.168"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:15.168">${esel_data} = []</msg>
<status starttime="20170817 21:30:14.853" status="PASS" endtime="20170817 21:30:15.168"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.169">Length is 0</msg>
<msg level="INFO" timestamp="20170817 21:30:15.169">${length} = 0</msg>
<status starttime="20170817 21:30:15.168" status="PASS" endtime="20170817 21:30:15.169"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.170">Continuing for loop from the next iteration.</msg>
<status starttime="20170817 21:30:15.169" status="PASS" endtime="20170817 21:30:15.170"></status>
</kw>
<status starttime="20170817 21:30:14.852" status="PASS" endtime="20170817 21:30:15.170"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170817 21:30:15.170" status="PASS" endtime="20170817 21:30:15.171"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.176">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:15.176" status="PASS" endtime="20170817 21:30:15.177"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.178">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:15.177" status="PASS" endtime="20170817 21:30:15.178"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.178">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:15.178" status="PASS" endtime="20170817 21:30:15.179"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.179">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:15.179" status="PASS" endtime="20170817 21:30:15.179"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.555">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:15.181" status="PASS" endtime="20170817 21:30:15.555"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:15.555">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:15.555">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:15.180" status="PASS" endtime="20170817 21:30:15.555"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.556">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:15.555" status="PASS" endtime="20170817 21:30:15.556"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.556">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:15.556" status="PASS" endtime="20170817 21:30:15.557"></status>
</kw>
<status starttime="20170817 21:30:15.175" status="PASS" endtime="20170817 21:30:15.557"></status>
</kw>
<status starttime="20170817 21:30:15.174" status="PASS" endtime="20170817 21:30:15.557"></status>
</kw>
<status starttime="20170817 21:30:15.173" status="PASS" endtime="20170817 21:30:15.557"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.557">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status starttime="20170817 21:30:15.557" status="PASS" endtime="20170817 21:30:15.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 21:30:15.558" status="PASS" endtime="20170817 21:30:15.558"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.639">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:15.639">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:15.558" status="PASS" endtime="20170817 21:30:15.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 21:30:15.640" status="PASS" endtime="20170817 21:30:15.640"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:15.640">Delete All Sessions</msg>
<status starttime="20170817 21:30:15.640" status="PASS" endtime="20170817 21:30:15.640"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:15.641">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:15.172" status="PASS" endtime="20170817 21:30:15.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:15.641" status="PASS" endtime="20170817 21:30:15.641"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.642">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:15.642">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:30:15.642">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:30:15.642" status="PASS" endtime="20170817 21:30:15.642"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:15.642">${esel_data} = []</msg>
<status starttime="20170817 21:30:15.172" status="PASS" endtime="20170817 21:30:15.642"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.643">Length is 0</msg>
<msg level="INFO" timestamp="20170817 21:30:15.643">${length} = 0</msg>
<status starttime="20170817 21:30:15.643" status="PASS" endtime="20170817 21:30:15.643"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.644">Continuing for loop from the next iteration.</msg>
<status starttime="20170817 21:30:15.643" status="PASS" endtime="20170817 21:30:15.644"></status>
</kw>
<status starttime="20170817 21:30:15.170" status="PASS" endtime="20170817 21:30:15.644"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170817 21:30:15.644" status="PASS" endtime="20170817 21:30:15.645"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.648">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:15.648" status="PASS" endtime="20170817 21:30:15.648"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.649">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:15.649" status="PASS" endtime="20170817 21:30:15.649"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.650">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:15.649" status="PASS" endtime="20170817 21:30:15.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.650">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:15.650" status="PASS" endtime="20170817 21:30:15.650"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.841">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:15.651" status="PASS" endtime="20170817 21:30:15.841"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:15.841">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:15.841">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:15.650" status="PASS" endtime="20170817 21:30:15.841"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.842">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:15.841" status="PASS" endtime="20170817 21:30:15.842"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.843">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:15.842" status="PASS" endtime="20170817 21:30:15.843"></status>
</kw>
<status starttime="20170817 21:30:15.647" status="PASS" endtime="20170817 21:30:15.843"></status>
</kw>
<status starttime="20170817 21:30:15.647" status="PASS" endtime="20170817 21:30:15.843"></status>
</kw>
<status starttime="20170817 21:30:15.646" status="PASS" endtime="20170817 21:30:15.843"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.843">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status starttime="20170817 21:30:15.843" status="PASS" endtime="20170817 21:30:15.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 21:30:15.844" status="PASS" endtime="20170817 21:30:15.844"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.928">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:15.929">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:15.844" status="PASS" endtime="20170817 21:30:15.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 21:30:15.929" status="PASS" endtime="20170817 21:30:15.929"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:15.930">Delete All Sessions</msg>
<status starttime="20170817 21:30:15.929" status="PASS" endtime="20170817 21:30:15.930"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:15.930">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:15.645" status="PASS" endtime="20170817 21:30:15.930"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.931">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:15.930" status="PASS" endtime="20170817 21:30:15.931"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.931">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:15.931">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:30:15.931">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:30:15.931" status="PASS" endtime="20170817 21:30:15.931"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:15.932">${esel_data} = []</msg>
<status starttime="20170817 21:30:15.645" status="PASS" endtime="20170817 21:30:15.932"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.932">Length is 0</msg>
<msg level="INFO" timestamp="20170817 21:30:15.932">${length} = 0</msg>
<status starttime="20170817 21:30:15.932" status="PASS" endtime="20170817 21:30:15.932"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.933">Continuing for loop from the next iteration.</msg>
<status starttime="20170817 21:30:15.933" status="PASS" endtime="20170817 21:30:15.933"></status>
</kw>
<status starttime="20170817 21:30:15.644" status="PASS" endtime="20170817 21:30:15.933"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170817 21:30:15.933" status="PASS" endtime="20170817 21:30:15.934"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:15.937">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:15.937" status="PASS" endtime="20170817 21:30:15.938"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.938">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:15.938" status="PASS" endtime="20170817 21:30:15.938"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.939">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:15.939" status="PASS" endtime="20170817 21:30:15.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:15.940">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:15.939" status="PASS" endtime="20170817 21:30:15.940"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:16.172">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:15.940" status="PASS" endtime="20170817 21:30:16.172"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:16.172">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:16.173">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:15.940" status="PASS" endtime="20170817 21:30:16.173"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:16.173">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:16.173" status="PASS" endtime="20170817 21:30:16.173"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:16.174">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:16.174" status="PASS" endtime="20170817 21:30:16.174"></status>
</kw>
<status starttime="20170817 21:30:15.936" status="PASS" endtime="20170817 21:30:16.174"></status>
</kw>
<status starttime="20170817 21:30:15.936" status="PASS" endtime="20170817 21:30:16.174"></status>
</kw>
<status starttime="20170817 21:30:15.935" status="PASS" endtime="20170817 21:30:16.174"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:16.175">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status starttime="20170817 21:30:16.175" status="PASS" endtime="20170817 21:30:16.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 21:30:16.175" status="PASS" endtime="20170817 21:30:16.176"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:16.260">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:16.260">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:16.176" status="PASS" endtime="20170817 21:30:16.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 21:30:16.260" status="PASS" endtime="20170817 21:30:16.260"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:16.261">Delete All Sessions</msg>
<status starttime="20170817 21:30:16.261" status="PASS" endtime="20170817 21:30:16.261"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:16.261">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:15.935" status="PASS" endtime="20170817 21:30:16.261"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:16.262">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:16.261" status="PASS" endtime="20170817 21:30:16.262"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:16.263">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:16.263">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:30:16.263">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:30:16.262" status="PASS" endtime="20170817 21:30:16.263"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:16.263">${esel_data} = []</msg>
<status starttime="20170817 21:30:15.934" status="PASS" endtime="20170817 21:30:16.263"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:16.264">Length is 0</msg>
<msg level="INFO" timestamp="20170817 21:30:16.264">${length} = 0</msg>
<status starttime="20170817 21:30:16.263" status="PASS" endtime="20170817 21:30:16.264"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:16.264">Continuing for loop from the next iteration.</msg>
<status starttime="20170817 21:30:16.264" status="PASS" endtime="20170817 21:30:16.264"></status>
</kw>
<status starttime="20170817 21:30:15.933" status="PASS" endtime="20170817 21:30:16.264"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20170817 21:30:16.265" status="PASS" endtime="20170817 21:30:16.265"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:16.269">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:16.268" status="PASS" endtime="20170817 21:30:16.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:16.270">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:16.269" status="PASS" endtime="20170817 21:30:16.270"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:16.270">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:16.270" status="PASS" endtime="20170817 21:30:16.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:16.271">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:16.271" status="PASS" endtime="20170817 21:30:16.271"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:16.474">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:16.272" status="PASS" endtime="20170817 21:30:16.474"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:16.475">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:16.475">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:16.271" status="PASS" endtime="20170817 21:30:16.475"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:16.475">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:16.475" status="PASS" endtime="20170817 21:30:16.475"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:16.476">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:16.476" status="PASS" endtime="20170817 21:30:16.476"></status>
</kw>
<status starttime="20170817 21:30:16.268" status="PASS" endtime="20170817 21:30:16.476"></status>
</kw>
<status starttime="20170817 21:30:16.267" status="PASS" endtime="20170817 21:30:16.476"></status>
</kw>
<status starttime="20170817 21:30:16.267" status="PASS" endtime="20170817 21:30:16.476"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:16.477">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status starttime="20170817 21:30:16.477" status="PASS" endtime="20170817 21:30:16.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170817 21:30:16.477" status="PASS" endtime="20170817 21:30:16.478"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:16.593">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:16.593">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:16.478" status="PASS" endtime="20170817 21:30:16.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170817 21:30:16.594" status="PASS" endtime="20170817 21:30:16.594"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:16.595">Delete All Sessions</msg>
<status starttime="20170817 21:30:16.595" status="PASS" endtime="20170817 21:30:16.595"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:16.595">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:16.266" status="PASS" endtime="20170817 21:30:16.595"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:16.596">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:16.596" status="PASS" endtime="20170817 21:30:16.596"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:16.597">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:16.597">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:30:16.597">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:30:16.597" status="PASS" endtime="20170817 21:30:16.597"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:16.597">${esel_data} = []</msg>
<status starttime="20170817 21:30:16.265" status="PASS" endtime="20170817 21:30:16.597"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:16.598">Length is 0</msg>
<msg level="INFO" timestamp="20170817 21:30:16.598">${length} = 0</msg>
<status starttime="20170817 21:30:16.598" status="PASS" endtime="20170817 21:30:16.598"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:16.599">Continuing for loop from the next iteration.</msg>
<status starttime="20170817 21:30:16.598" status="PASS" endtime="20170817 21:30:16.599"></status>
</kw>
<status starttime="20170817 21:30:16.265" status="PASS" endtime="20170817 21:30:16.599"></status>
</kw>
<status starttime="20170817 21:30:14.851" status="PASS" endtime="20170817 21:30:16.599"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:16.603">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170817 21:30:16.608">${out} = </msg>
<status starttime="20170817 21:30:16.599" status="PASS" endtime="20170817 21:30:16.608"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:30:16.612">'' does not contain 'eSEL.pl'</msg>
<status starttime="20170817 21:30:16.611" status="FAIL" endtime="20170817 21:30:16.612"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:16.612">${status} = False</msg>
<status starttime="20170817 21:30:16.610" status="PASS" endtime="20170817 21:30:16.612"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:16.613">Returning from the enclosing user keyword.</msg>
<status starttime="20170817 21:30:16.613" status="PASS" endtime="20170817 21:30:16.613"></status>
</kw>
<status starttime="20170817 21:30:14.460" status="PASS" endtime="20170817 21:30:16.614"></status>
</kw>
<status starttime="20170817 21:30:14.415" status="PASS" endtime="20170817 21:30:16.614"></status>
</kw>
<status starttime="20170817 21:30:14.413" status="PASS" endtime="20170817 21:30:16.614"></status>
</kw>
<status starttime="20170817 21:30:14.412" status="PASS" endtime="20170817 21:30:16.614"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170817 21:30:16.616" status="PASS" endtime="20170817 21:30:16.617"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:16.617">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:16.617">${ret_values} = None</msg>
<status starttime="20170817 21:30:16.616" status="PASS" endtime="20170817 21:30:16.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170817 21:30:16.617" status="PASS" endtime="20170817 21:30:16.617"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:16.713">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170817 21:30:16.714">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170817 21:30:16.764">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170817 21:30:16.783">${core_files} = /tmp/core_phosphor-hwmon-.1775
/tmp/core_phosphor-hwmon-.2234</msg>
<msg level="INFO" timestamp="20170817 21:30:16.783">${stderr} = </msg>
<msg level="INFO" timestamp="20170817 21:30:16.783">${rc} = 0</msg>
<status starttime="20170817 21:30:16.663" status="PASS" endtime="20170817 21:30:16.783"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:16.784">@{core_list} = [ /tmp/core_phosphor-hwmon-.1775 | /tmp/core_phosphor-hwmon-.2234 ]</msg>
<status starttime="20170817 21:30:16.783" status="PASS" endtime="20170817 21:30:16.784"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170817 21:30:16.807" status="PASS" endtime="20170817 21:30:16.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170817 21:30:16.824" status="PASS" endtime="20170817 21:30:17.512"></status>
</kw>
<status starttime="20170817 21:30:16.823" status="PASS" endtime="20170817 21:30:17.513"></status>
</kw>
<status starttime="20170817 21:30:16.823" status="PASS" endtime="20170817 21:30:17.513"></status>
</kw>
<status starttime="20170817 21:30:16.807" status="PASS" endtime="20170817 21:30:17.513"></status>
</kw>
<status starttime="20170817 21:30:16.785" status="PASS" endtime="20170817 21:30:17.513"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.1775">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170817 21:30:17.513" status="PASS" endtime="20170817 21:30:17.777"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:17.834">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170817 21:30:17.834">Executing command 'rm /tmp/core_phosphor-hwmon-.1775'.</msg>
<msg level="INFO" timestamp="20170817 21:30:17.941">Command exited with return code 0.</msg>
<status starttime="20170817 21:30:17.778" status="PASS" endtime="20170817 21:30:17.961"></status>
</kw>
<status starttime="20170817 21:30:17.513" status="PASS" endtime="20170817 21:30:17.961"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.2234">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170817 21:30:17.962" status="PASS" endtime="20170817 21:30:18.267"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:18.325">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170817 21:30:18.326">Executing command 'rm /tmp/core_phosphor-hwmon-.2234'.</msg>
<msg level="INFO" timestamp="20170817 21:30:18.372">Command exited with return code 0.</msg>
<status starttime="20170817 21:30:18.268" status="PASS" endtime="20170817 21:30:18.393"></status>
</kw>
<status starttime="20170817 21:30:17.961" status="PASS" endtime="20170817 21:30:18.394"></status>
</kw>
<status starttime="20170817 21:30:17.513" status="PASS" endtime="20170817 21:30:18.394"></status>
</kw>
<status starttime="20170817 21:30:16.662" status="PASS" endtime="20170817 21:30:18.394"></status>
</kw>
<status starttime="20170817 21:30:16.618" status="PASS" endtime="20170817 21:30:18.394"></status>
</kw>
<status starttime="20170817 21:30:16.615" status="PASS" endtime="20170817 21:30:18.394"></status>
</kw>
<status starttime="20170817 21:30:16.614" status="PASS" endtime="20170817 21:30:18.394"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170817 21:30:18.397" status="PASS" endtime="20170817 21:30:18.397"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:18.397">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:18.397">${ret_values} = None</msg>
<status starttime="20170817 21:30:18.396" status="PASS" endtime="20170817 21:30:18.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170817 21:30:18.398" status="PASS" endtime="20170817 21:30:18.398"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:18.446">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170817 21:30:18.446" status="PASS" endtime="20170817 21:30:18.446"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:18.448">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_proc_fd_active_list', 'ls -Al /p...</msg>
<status starttime="20170817 21:30:18.447" status="PASS" endtime="20170817 21:30:18.448"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:18.450">${logpath} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_meminfo.txt</msg>
<status starttime="20170817 21:30:18.449" status="PASS" endtime="20170817 21:30:18.450"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170817 21:30:18.451" status="PASS" endtime="20170817 21:30:18.451"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:18.452">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status starttime="20170817 21:30:18.451" status="PASS" endtime="20170817 21:30:18.452"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:18.584">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170817 21:30:18.585">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170817 21:30:18.632">Command exited with return code 0.</msg>
<status starttime="20170817 21:30:18.511" status="PASS" endtime="20170817 21:30:18.633"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:18.633">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:18.633">${ret_values} = (u'MemTotal:         432248 kB\nMemFree:          270276 kB\nMemAvailable:     318380 kB\nBuffers:           11572 kB\nCached:            53016 kB\nSwapCached:            0 kB\nActive:           10484...</msg>
<status starttime="20170817 21:30:18.452" status="PASS" endtime="20170817 21:30:18.633"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:18.634">${stdout} = MemTotal:         432248 kB
MemFree:          270276 kB
MemAvailable:     318380 kB
Buffers:           11572 kB
Cached:            53016 kB
SwapCached:            0 kB
Active:           104848 kB
Inac...</msg>
<status starttime="20170817 21:30:18.633" status="PASS" endtime="20170817 21:30:18.634"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:18.634">${stderr} = </msg>
<status starttime="20170817 21:30:18.634" status="PASS" endtime="20170817 21:30:18.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:18.641" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_meminfo.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:18.640" status="PASS" endtime="20170817 21:30:18.641"></status>
</kw>
<status starttime="20170817 21:30:18.640" status="PASS" endtime="20170817 21:30:18.642"></status>
</kw>
<status starttime="20170817 21:30:18.634" status="PASS" endtime="20170817 21:30:18.642"></status>
</kw>
<status starttime="20170817 21:30:18.450" status="PASS" endtime="20170817 21:30:18.642"></status>
</kw>
<status starttime="20170817 21:30:18.448" status="PASS" endtime="20170817 21:30:18.642"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:18.643">${logpath} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_procinfo.txt</msg>
<status starttime="20170817 21:30:18.642" status="PASS" endtime="20170817 21:30:18.643"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170817 21:30:18.644" status="PASS" endtime="20170817 21:30:18.644"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:18.645">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status starttime="20170817 21:30:18.644" status="PASS" endtime="20170817 21:30:18.645"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:18.771">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170817 21:30:18.772">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170817 21:30:18.821">Command exited with return code 0.</msg>
<status starttime="20170817 21:30:18.697" status="PASS" endtime="20170817 21:30:18.821"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:18.822">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:18.822">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status starttime="20170817 21:30:18.645" status="PASS" endtime="20170817 21:30:18.822"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:18.822">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status starttime="20170817 21:30:18.822" status="PASS" endtime="20170817 21:30:18.822"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:18.823">${stderr} = </msg>
<status starttime="20170817 21:30:18.823" status="PASS" endtime="20170817 21:30:18.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:18.830" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_procinfo.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:18.829" status="PASS" endtime="20170817 21:30:18.830"></status>
</kw>
<status starttime="20170817 21:30:18.829" status="PASS" endtime="20170817 21:30:18.830"></status>
</kw>
<status starttime="20170817 21:30:18.823" status="PASS" endtime="20170817 21:30:18.830"></status>
</kw>
<status starttime="20170817 21:30:18.643" status="PASS" endtime="20170817 21:30:18.830"></status>
</kw>
<status starttime="20170817 21:30:18.642" status="PASS" endtime="20170817 21:30:18.830"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:18.831">${logpath} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_journalctl.txt</msg>
<status starttime="20170817 21:30:18.831" status="PASS" endtime="20170817 21:30:18.831"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170817 21:30:18.832" status="PASS" endtime="20170817 21:30:18.833"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:18.833">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status starttime="20170817 21:30:18.833" status="PASS" endtime="20170817 21:30:18.833"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:18.958">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170817 21:30:18.959">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170817 21:30:21.663">Command exited with return code 0.</msg>
<status starttime="20170817 21:30:18.891" status="PASS" endtime="20170817 21:30:21.663"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:21.664">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:21.668">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:56:47 UTC. --\nAug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 15:42:59 witherspoon kernel: Linu...</msg>
<status starttime="20170817 21:30:18.834" status="PASS" endtime="20170817 21:30:21.668"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:21.669">${stdout} = -- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:56:47 UTC. --
Aug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 15:42:59 witherspoon kernel: Linux ver...</msg>
<status starttime="20170817 21:30:21.668" status="PASS" endtime="20170817 21:30:21.670"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:21.670">${stderr} = </msg>
<status starttime="20170817 21:30:21.670" status="PASS" endtime="20170817 21:30:21.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:21.679" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_journalctl.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:21.677" status="PASS" endtime="20170817 21:30:21.679"></status>
</kw>
<status starttime="20170817 21:30:21.676" status="PASS" endtime="20170817 21:30:21.679"></status>
</kw>
<status starttime="20170817 21:30:21.670" status="PASS" endtime="20170817 21:30:21.679"></status>
</kw>
<status starttime="20170817 21:30:18.831" status="PASS" endtime="20170817 21:30:21.679"></status>
</kw>
<status starttime="20170817 21:30:18.830" status="PASS" endtime="20170817 21:30:21.679"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:21.680">${logpath} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_proc_list.txt</msg>
<status starttime="20170817 21:30:21.680" status="PASS" endtime="20170817 21:30:21.680"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170817 21:30:21.681" status="PASS" endtime="20170817 21:30:21.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:21.682">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status starttime="20170817 21:30:21.682" status="PASS" endtime="20170817 21:30:21.682"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:21.815">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170817 21:30:21.815">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170817 21:30:22.316">Command exited with return code 0.</msg>
<status starttime="20170817 21:30:21.746" status="PASS" endtime="20170817 21:30:22.316"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:22.316">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:22.316">${ret_values} = (u'Mem: 161848K used, 270400K free, 14716K shrd, 11572K buff, 53020K cached\nCPU:  15% usr  23% sys   0% nic  61% idle   0% io   0% irq   0% sirq\nLoad average: 0.52 0.83 0.82 1/159 3107\n  PID  PPID ...</msg>
<status starttime="20170817 21:30:21.682" status="PASS" endtime="20170817 21:30:22.316"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:22.317">${stdout} = Mem: 161848K used, 270400K free, 14716K shrd, 11572K buff, 53020K cached
CPU:  15% usr  23% sys   0% nic  61% idle   0% io   0% irq   0% sirq
Load average: 0.52 0.83 0.82 1/159 3107
  PID  PPID USER  ...</msg>
<status starttime="20170817 21:30:22.317" status="PASS" endtime="20170817 21:30:22.317"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:22.318">${stderr} = </msg>
<status starttime="20170817 21:30:22.317" status="PASS" endtime="20170817 21:30:22.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:22.325" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_proc_list.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:22.324" status="PASS" endtime="20170817 21:30:22.325"></status>
</kw>
<status starttime="20170817 21:30:22.323" status="PASS" endtime="20170817 21:30:22.325"></status>
</kw>
<status starttime="20170817 21:30:22.318" status="PASS" endtime="20170817 21:30:22.325"></status>
</kw>
<status starttime="20170817 21:30:21.680" status="PASS" endtime="20170817 21:30:22.325"></status>
</kw>
<status starttime="20170817 21:30:21.679" status="PASS" endtime="20170817 21:30:22.325"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:22.326">${logpath} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_proc_fd_active_list.txt</msg>
<status starttime="20170817 21:30:22.325" status="PASS" endtime="20170817 21:30:22.326"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170817 21:30:22.327" status="PASS" endtime="20170817 21:30:22.327"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:22.328">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status starttime="20170817 21:30:22.327" status="PASS" endtime="20170817 21:30:22.328"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:22.460">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170817 21:30:22.461">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170817 21:30:23.042">Command exited with return code 0.</msg>
<status starttime="20170817 21:30:22.386" status="PASS" endtime="20170817 21:30:23.043"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:23.043">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:23.044">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 15:56 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 15:56 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status starttime="20170817 21:30:22.328" status="PASS" endtime="20170817 21:30:23.044"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.045">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 15:56 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 15:56 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status starttime="20170817 21:30:23.044" status="PASS" endtime="20170817 21:30:23.045"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.045">${stderr} = ls: /proc/3108/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status starttime="20170817 21:30:23.045" status="PASS" endtime="20170817 21:30:23.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:23.053" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:23.052" status="PASS" endtime="20170817 21:30:23.053"></status>
</kw>
<status starttime="20170817 21:30:23.051" status="PASS" endtime="20170817 21:30:23.053"></status>
</kw>
<status starttime="20170817 21:30:23.046" status="PASS" endtime="20170817 21:30:23.053"></status>
</kw>
<status starttime="20170817 21:30:22.326" status="PASS" endtime="20170817 21:30:23.053"></status>
</kw>
<status starttime="20170817 21:30:22.325" status="PASS" endtime="20170817 21:30:23.053"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.054">${logpath} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_dmesg.txt</msg>
<status starttime="20170817 21:30:23.054" status="PASS" endtime="20170817 21:30:23.054"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170817 21:30:23.055" status="PASS" endtime="20170817 21:30:23.056"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.056">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status starttime="20170817 21:30:23.056" status="PASS" endtime="20170817 21:30:23.056"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:23.180">prompt=# 
index=1
width=80
height=24
newline=

timeout=25 seconds
encoding=UTF-8
host=9.41.166.169
term_type=vt100
port=22
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20170817 21:30:23.181">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170817 21:30:23.258">Command exited with return code 0.</msg>
<status starttime="20170817 21:30:23.109" status="PASS" endtime="20170817 21:30:23.258"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:23.258">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:23.258">${ret_values} = (u'[    0.090000] pid_max: default: 32768 minimum: 301\n[    0.090000] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)\n[    0.090000] Mountpoint-cache hash table entries: 1024 (order: 0, ...</msg>
<status starttime="20170817 21:30:23.057" status="PASS" endtime="20170817 21:30:23.259"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.259">${stdout} = [    0.090000] pid_max: default: 32768 minimum: 301
[    0.090000] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)
[    0.090000] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 ...</msg>
<status starttime="20170817 21:30:23.259" status="PASS" endtime="20170817 21:30:23.259"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.260">${stderr} = </msg>
<status starttime="20170817 21:30:23.260" status="PASS" endtime="20170817 21:30:23.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:23.269" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_dmesg.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/20170817213008217366_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:23.268" status="PASS" endtime="20170817 21:30:23.269"></status>
</kw>
<status starttime="20170817 21:30:23.267" status="PASS" endtime="20170817 21:30:23.269"></status>
</kw>
<status starttime="20170817 21:30:23.260" status="PASS" endtime="20170817 21:30:23.269"></status>
</kw>
<status starttime="20170817 21:30:23.054" status="PASS" endtime="20170817 21:30:23.269"></status>
</kw>
<status starttime="20170817 21:30:23.054" status="PASS" endtime="20170817 21:30:23.270"></status>
</kw>
<status starttime="20170817 21:30:18.448" status="PASS" endtime="20170817 21:30:23.270"></status>
</kw>
<status starttime="20170817 21:30:18.447" status="PASS" endtime="20170817 21:30:23.270"></status>
</kw>
<status starttime="20170817 21:30:18.447" status="PASS" endtime="20170817 21:30:23.270"></status>
</kw>
<status starttime="20170817 21:30:18.446" status="PASS" endtime="20170817 21:30:23.270"></status>
</kw>
<status starttime="20170817 21:30:18.445" status="PASS" endtime="20170817 21:30:23.270"></status>
</kw>
<status starttime="20170817 21:30:18.399" status="PASS" endtime="20170817 21:30:23.270"></status>
</kw>
<status starttime="20170817 21:30:18.395" status="PASS" endtime="20170817 21:30:23.270"></status>
</kw>
<status starttime="20170817 21:30:18.394" status="PASS" endtime="20170817 21:30:23.270"></status>
</kw>
<status starttime="20170817 21:30:08.497" status="PASS" endtime="20170817 21:30:23.270"></status>
</kw>
<status starttime="20170817 21:30:08.495" status="PASS" endtime="20170817 21:30:23.270"></status>
</kw>
<status starttime="20170817 21:30:08.495" status="PASS" endtime="20170817 21:30:23.270"></status>
</kw>
<status starttime="20170817 21:30:08.495" status="PASS" endtime="20170817 21:30:23.270"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status starttime="20170817 21:30:23.282" status="PASS" endtime="20170817 21:30:23.282"></status>
</kw>
<status starttime="20170817 21:30:23.271" status="PASS" endtime="20170817 21:30:23.282"></status>
</kw>
<status starttime="20170817 21:30:08.493" status="PASS" endtime="20170817 21:30:23.282"></status>
</kw>
<status starttime="20170817 21:30:05.126" status="PASS" endtime="20170817 21:30:23.283"></status>
</kw>
<status starttime="20170817 21:30:05.126" status="PASS" endtime="20170817 21:30:23.283"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw name="Recover Quiesced Host" library="state_manager">
<doc>Recover host from quisced state.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:23.289">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:23.289" status="PASS" endtime="20170817 21:30:23.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.290">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:23.290" status="PASS" endtime="20170817 21:30:23.290"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.291">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:23.290" status="PASS" endtime="20170817 21:30:23.291"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.291">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:23.291" status="PASS" endtime="20170817 21:30:23.291"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:23.568">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:23.294" status="PASS" endtime="20170817 21:30:23.568"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:23.568">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:23.568">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:23.292" status="PASS" endtime="20170817 21:30:23.569"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:23.569">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:23.569" status="PASS" endtime="20170817 21:30:23.569"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:23.570">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:23.570" status="PASS" endtime="20170817 21:30:23.570"></status>
</kw>
<status starttime="20170817 21:30:23.288" status="PASS" endtime="20170817 21:30:23.571"></status>
</kw>
<status starttime="20170817 21:30:23.287" status="PASS" endtime="20170817 21:30:23.571"></status>
</kw>
<status starttime="20170817 21:30:23.286" status="PASS" endtime="20170817 21:30:23.571"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.572">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:30:23.571" status="PASS" endtime="20170817 21:30:23.572"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.575">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:30:23.574" status="PASS" endtime="20170817 21:30:23.575"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:23.577">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:30:23.576" status="PASS" endtime="20170817 21:30:23.577"></status>
</kw>
<status starttime="20170817 21:30:23.575" status="PASS" endtime="20170817 21:30:23.577"></status>
</kw>
<status starttime="20170817 21:30:23.573" status="PASS" endtime="20170817 21:30:23.577"></status>
</kw>
<status starttime="20170817 21:30:23.572" status="PASS" endtime="20170817 21:30:23.577"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.685">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:23.685">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:23.577" status="PASS" endtime="20170817 21:30:23.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.687">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:23.687" status="PASS" endtime="20170817 21:30:23.687"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:23.689">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:23.688" status="PASS" endtime="20170817 21:30:23.689"></status>
</kw>
<status starttime="20170817 21:30:23.687" status="PASS" endtime="20170817 21:30:23.689"></status>
</kw>
<status starttime="20170817 21:30:23.686" status="PASS" endtime="20170817 21:30:23.689"></status>
</kw>
<status starttime="20170817 21:30:23.686" status="PASS" endtime="20170817 21:30:23.689"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:23.689">Delete All Sessions</msg>
<status starttime="20170817 21:30:23.689" status="PASS" endtime="20170817 21:30:23.690"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:23.690">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:23.286" status="PASS" endtime="20170817 21:30:23.690"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:23.690">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:23.690" status="PASS" endtime="20170817 21:30:23.690"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.691">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:23.691">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:30:23.691">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:30:23.691" status="PASS" endtime="20170817 21:30:23.691"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:23.692">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:30:23.285" status="PASS" endtime="20170817 21:30:23.692"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:23.692">${host_state} = Quiesced</msg>
<status starttime="20170817 21:30:23.285" status="PASS" endtime="20170817 21:30:23.692"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status starttime="20170817 21:30:23.693" status="PASS" endtime="20170817 21:30:23.693"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:23.693">${status} = True</msg>
<status starttime="20170817 21:30:23.692" status="PASS" endtime="20170817 21:30:23.693"></status>
</kw>
<status starttime="20170817 21:30:23.285" status="PASS" endtime="20170817 21:30:23.693"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:23.693">${resp} = True</msg>
<status starttime="20170817 21:30:23.284" status="PASS" endtime="20170817 21:30:23.693"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.695">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170817 21:30:23.695" status="PASS" endtime="20170817 21:30:23.695"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.697">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170817 21:30:23.696" status="PASS" endtime="20170817 21:30:23.697"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:23.699">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:23.699" status="PASS" endtime="20170817 21:30:23.700"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.700">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:23.700" status="PASS" endtime="20170817 21:30:23.700"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.701">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:23.701" status="PASS" endtime="20170817 21:30:23.701"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.702">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:23.701" status="PASS" endtime="20170817 21:30:23.702"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:23.901">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:23.703" status="PASS" endtime="20170817 21:30:23.901"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:23.901">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:23.901">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:23.702" status="PASS" endtime="20170817 21:30:23.901"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:23.902">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:23.902" status="PASS" endtime="20170817 21:30:23.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:23.903">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:23.902" status="PASS" endtime="20170817 21:30:23.903"></status>
</kw>
<status starttime="20170817 21:30:23.698" status="PASS" endtime="20170817 21:30:23.903"></status>
</kw>
<status starttime="20170817 21:30:23.698" status="PASS" endtime="20170817 21:30:23.903"></status>
</kw>
<status starttime="20170817 21:30:23.698" status="PASS" endtime="20170817 21:30:23.903"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.904">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170817 21:30:23.903" status="PASS" endtime="20170817 21:30:23.904"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.904">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:23.904" status="PASS" endtime="20170817 21:30:23.904"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170817 21:30:23.905" status="PASS" endtime="20170817 21:30:23.905"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:23.906">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170817 21:30:23.906" status="PASS" endtime="20170817 21:30:23.906"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:23.907">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170817 21:30:23.907" status="PASS" endtime="20170817 21:30:23.908"></status>
</kw>
<status starttime="20170817 21:30:23.907" status="PASS" endtime="20170817 21:30:23.908"></status>
</kw>
<status starttime="20170817 21:30:23.905" status="PASS" endtime="20170817 21:30:23.908"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:24.187">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170817 21:30:24.187">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:23.908" status="PASS" endtime="20170817 21:30:24.187"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:24.189">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:24.188" status="PASS" endtime="20170817 21:30:24.189"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:24.189">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:24.189" status="PASS" endtime="20170817 21:30:24.190"></status>
</kw>
<status starttime="20170817 21:30:24.189" status="PASS" endtime="20170817 21:30:24.190"></status>
</kw>
<status starttime="20170817 21:30:24.187" status="PASS" endtime="20170817 21:30:24.190"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:24.190">Delete All Sessions</msg>
<status starttime="20170817 21:30:24.190" status="PASS" endtime="20170817 21:30:24.190"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:24.190">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:23.697" status="PASS" endtime="20170817 21:30:24.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:24.191">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:24.191" status="PASS" endtime="20170817 21:30:24.191"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:24.192">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:24.192">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:30:24.192">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:30:24.192" status="PASS" endtime="20170817 21:30:24.192"></status>
</kw>
<status starttime="20170817 21:30:23.696" status="PASS" endtime="20170817 21:30:24.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170817 21:30:24.193" status="PASS" endtime="20170817 21:30:24.193"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:24.198">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:24.198" status="PASS" endtime="20170817 21:30:24.198"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:24.199">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:24.199" status="PASS" endtime="20170817 21:30:24.199"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:24.200">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:24.200" status="PASS" endtime="20170817 21:30:24.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:24.201">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:24.200" status="PASS" endtime="20170817 21:30:24.201"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:26.026">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:24.201" status="PASS" endtime="20170817 21:30:26.027"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:26.027">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:26.027">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:24.201" status="PASS" endtime="20170817 21:30:26.027"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:26.028">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:26.027" status="PASS" endtime="20170817 21:30:26.028"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:26.028">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:26.028" status="PASS" endtime="20170817 21:30:26.028"></status>
</kw>
<status starttime="20170817 21:30:24.197" status="PASS" endtime="20170817 21:30:26.029"></status>
</kw>
<status starttime="20170817 21:30:24.197" status="PASS" endtime="20170817 21:30:26.029"></status>
</kw>
<status starttime="20170817 21:30:24.196" status="PASS" endtime="20170817 21:30:26.029"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:26.029">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:30:26.029" status="PASS" endtime="20170817 21:30:26.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:26.032">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:30:26.031" status="PASS" endtime="20170817 21:30:26.032"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:26.033">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:30:26.032" status="PASS" endtime="20170817 21:30:26.033"></status>
</kw>
<status starttime="20170817 21:30:26.032" status="PASS" endtime="20170817 21:30:26.033"></status>
</kw>
<status starttime="20170817 21:30:26.030" status="PASS" endtime="20170817 21:30:26.033"></status>
</kw>
<status starttime="20170817 21:30:26.030" status="PASS" endtime="20170817 21:30:26.033"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:30.289">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:30.289">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:26.033" status="PASS" endtime="20170817 21:30:30.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:30.292">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:30.291" status="PASS" endtime="20170817 21:30:30.292"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:30.293">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:30.293" status="PASS" endtime="20170817 21:30:30.293"></status>
</kw>
<status starttime="20170817 21:30:30.292" status="PASS" endtime="20170817 21:30:30.293"></status>
</kw>
<status starttime="20170817 21:30:30.290" status="PASS" endtime="20170817 21:30:30.293"></status>
</kw>
<status starttime="20170817 21:30:30.290" status="PASS" endtime="20170817 21:30:30.293"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:30.294">Delete All Sessions</msg>
<status starttime="20170817 21:30:30.294" status="PASS" endtime="20170817 21:30:30.294"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:30.294">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:24.195" status="PASS" endtime="20170817 21:30:30.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:30.295">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:30.294" status="PASS" endtime="20170817 21:30:30.295"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:30.295">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:30.295">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:30:30.295">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:30:30.295" status="PASS" endtime="20170817 21:30:30.295"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:30.296">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20170817 21:30:24.195" status="PASS" endtime="20170817 21:30:30.296"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:30.296">${power_state} = On</msg>
<status starttime="20170817 21:30:24.194" status="PASS" endtime="20170817 21:30:30.296"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:30:30.297">Off != On</msg>
<status starttime="20170817 21:30:30.296" status="FAIL" endtime="20170817 21:30:30.297"></status>
</kw>
<status starttime="20170817 21:30:24.194" status="FAIL" endtime="20170817 21:30:30.297"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:30.301">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:30.300" status="PASS" endtime="20170817 21:30:30.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:30.302">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:30.301" status="PASS" endtime="20170817 21:30:30.302"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:30.302">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:30.302" status="PASS" endtime="20170817 21:30:30.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:30.303">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:30.303" status="PASS" endtime="20170817 21:30:30.303"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:30.500">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:30.304" status="PASS" endtime="20170817 21:30:30.500"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:30.500">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:30.501">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:30.303" status="PASS" endtime="20170817 21:30:30.501"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:30.501">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:30.501" status="PASS" endtime="20170817 21:30:30.501"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:30.502">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:30.502" status="PASS" endtime="20170817 21:30:30.502"></status>
</kw>
<status starttime="20170817 21:30:30.300" status="PASS" endtime="20170817 21:30:30.502"></status>
</kw>
<status starttime="20170817 21:30:30.299" status="PASS" endtime="20170817 21:30:30.502"></status>
</kw>
<status starttime="20170817 21:30:30.299" status="PASS" endtime="20170817 21:30:30.503"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:30.503">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:30:30.503" status="PASS" endtime="20170817 21:30:30.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:30.506">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:30:30.505" status="PASS" endtime="20170817 21:30:30.506"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:30.507">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:30:30.506" status="PASS" endtime="20170817 21:30:30.507"></status>
</kw>
<status starttime="20170817 21:30:30.506" status="PASS" endtime="20170817 21:30:30.507"></status>
</kw>
<status starttime="20170817 21:30:30.504" status="PASS" endtime="20170817 21:30:30.507"></status>
</kw>
<status starttime="20170817 21:30:30.504" status="PASS" endtime="20170817 21:30:30.507"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:31.186">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:31.187">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:30.507" status="PASS" endtime="20170817 21:30:31.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:31.189">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:31.189" status="PASS" endtime="20170817 21:30:31.189"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:31.191">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:31.190" status="PASS" endtime="20170817 21:30:31.191"></status>
</kw>
<status starttime="20170817 21:30:31.190" status="PASS" endtime="20170817 21:30:31.191"></status>
</kw>
<status starttime="20170817 21:30:31.188" status="PASS" endtime="20170817 21:30:31.191"></status>
</kw>
<status starttime="20170817 21:30:31.187" status="PASS" endtime="20170817 21:30:31.191"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:31.192">Delete All Sessions</msg>
<status starttime="20170817 21:30:31.191" status="PASS" endtime="20170817 21:30:31.192"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:31.192">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:30.298" status="PASS" endtime="20170817 21:30:31.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:31.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:31.192" status="PASS" endtime="20170817 21:30:31.193"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:31.193">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:31.193">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:30:31.193">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:30:31.193" status="PASS" endtime="20170817 21:30:31.194"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:31.194">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status starttime="20170817 21:30:30.298" status="PASS" endtime="20170817 21:30:31.194"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:31.194">${host_state} = Quiesced</msg>
<status starttime="20170817 21:30:30.297" status="PASS" endtime="20170817 21:30:31.194"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170817 21:30:31.195">Off != Quiesced</msg>
<status starttime="20170817 21:30:31.194" status="FAIL" endtime="20170817 21:30:31.195"></status>
</kw>
<status starttime="20170817 21:30:24.193" status="FAIL" endtime="20170817 21:30:31.195"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.200">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:41.200" status="PASS" endtime="20170817 21:30:41.201"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.201">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:41.201" status="PASS" endtime="20170817 21:30:41.202"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.203">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:41.202" status="PASS" endtime="20170817 21:30:41.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.203">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:41.203" status="PASS" endtime="20170817 21:30:41.203"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.394">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:41.204" status="PASS" endtime="20170817 21:30:41.394"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:41.394">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:41.394">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:41.204" status="PASS" endtime="20170817 21:30:41.394"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.395">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:41.394" status="PASS" endtime="20170817 21:30:41.395"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.395">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:41.395" status="PASS" endtime="20170817 21:30:41.396"></status>
</kw>
<status starttime="20170817 21:30:41.199" status="PASS" endtime="20170817 21:30:41.396"></status>
</kw>
<status starttime="20170817 21:30:41.199" status="PASS" endtime="20170817 21:30:41.396"></status>
</kw>
<status starttime="20170817 21:30:41.198" status="PASS" endtime="20170817 21:30:41.396"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.396">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20170817 21:30:41.396" status="PASS" endtime="20170817 21:30:41.396"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.399">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:30:41.398" status="PASS" endtime="20170817 21:30:41.399"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.400">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20170817 21:30:41.399" status="PASS" endtime="20170817 21:30:41.400"></status>
</kw>
<status starttime="20170817 21:30:41.399" status="PASS" endtime="20170817 21:30:41.400"></status>
</kw>
<status starttime="20170817 21:30:41.397" status="PASS" endtime="20170817 21:30:41.400"></status>
</kw>
<status starttime="20170817 21:30:41.397" status="PASS" endtime="20170817 21:30:41.400"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.466">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:41.466">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:41.400" status="PASS" endtime="20170817 21:30:41.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.468">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:41.467" status="PASS" endtime="20170817 21:30:41.468"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.469">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:41.468" status="PASS" endtime="20170817 21:30:41.469"></status>
</kw>
<status starttime="20170817 21:30:41.468" status="PASS" endtime="20170817 21:30:41.469"></status>
</kw>
<status starttime="20170817 21:30:41.467" status="PASS" endtime="20170817 21:30:41.469"></status>
</kw>
<status starttime="20170817 21:30:41.466" status="PASS" endtime="20170817 21:30:41.469"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:41.469">Delete All Sessions</msg>
<status starttime="20170817 21:30:41.469" status="PASS" endtime="20170817 21:30:41.469"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:41.470">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:41.198" status="PASS" endtime="20170817 21:30:41.470"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.470">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:41.470" status="PASS" endtime="20170817 21:30:41.470"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.471">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:41.471">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:30:41.471">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:30:41.471" status="PASS" endtime="20170817 21:30:41.471"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:41.471">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20170817 21:30:41.197" status="PASS" endtime="20170817 21:30:41.471"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:41.472">${power_state} = Off</msg>
<status starttime="20170817 21:30:41.197" status="PASS" endtime="20170817 21:30:41.472"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20170817 21:30:41.472" status="PASS" endtime="20170817 21:30:41.472"></status>
</kw>
<status starttime="20170817 21:30:41.196" status="PASS" endtime="20170817 21:30:41.472"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.477">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170817 21:30:41.477" status="PASS" endtime="20170817 21:30:41.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.478">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170817 21:30:41.478" status="PASS" endtime="20170817 21:30:41.478"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.479">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170817 21:30:41.479" status="PASS" endtime="20170817 21:30:41.479"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.480">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170817 21:30:41.479" status="PASS" endtime="20170817 21:30:41.480"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.686">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170817 21:30:41.480" status="PASS" endtime="20170817 21:30:41.686"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:41.686">${status} = PASS</msg>
<msg level="INFO" timestamp="20170817 21:30:41.686">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:41.480" status="PASS" endtime="20170817 21:30:41.686"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.687">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:41.686" status="PASS" endtime="20170817 21:30:41.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:41.687" status="PASS" endtime="20170817 21:30:41.687"></status>
</kw>
<status starttime="20170817 21:30:41.476" status="PASS" endtime="20170817 21:30:41.688"></status>
</kw>
<status starttime="20170817 21:30:41.475" status="PASS" endtime="20170817 21:30:41.688"></status>
</kw>
<status starttime="20170817 21:30:41.474" status="PASS" endtime="20170817 21:30:41.688"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.688">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170817 21:30:41.688" status="PASS" endtime="20170817 21:30:41.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.690">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:30:41.690" status="PASS" endtime="20170817 21:30:41.690"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.691">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170817 21:30:41.691" status="PASS" endtime="20170817 21:30:41.691"></status>
</kw>
<status starttime="20170817 21:30:41.691" status="PASS" endtime="20170817 21:30:41.692"></status>
</kw>
<status starttime="20170817 21:30:41.689" status="PASS" endtime="20170817 21:30:41.692"></status>
</kw>
<status starttime="20170817 21:30:41.689" status="PASS" endtime="20170817 21:30:41.692"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.801">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170817 21:30:41.801">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:41.692" status="PASS" endtime="20170817 21:30:41.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.803">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:41.802" status="PASS" endtime="20170817 21:30:41.803"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.804">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170817 21:30:41.804" status="PASS" endtime="20170817 21:30:41.805"></status>
</kw>
<status starttime="20170817 21:30:41.803" status="PASS" endtime="20170817 21:30:41.805"></status>
</kw>
<status starttime="20170817 21:30:41.802" status="PASS" endtime="20170817 21:30:41.805"></status>
</kw>
<status starttime="20170817 21:30:41.801" status="PASS" endtime="20170817 21:30:41.805"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170817 21:30:41.805">Delete All Sessions</msg>
<status starttime="20170817 21:30:41.805" status="PASS" endtime="20170817 21:30:41.806"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:41.806">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170817 21:30:41.474" status="PASS" endtime="20170817 21:30:41.806"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170817 21:30:41.806" status="PASS" endtime="20170817 21:30:41.807"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.808">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170817 21:30:41.808">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170817 21:30:41.808">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170817 21:30:41.807" status="PASS" endtime="20170817 21:30:41.808"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:41.808">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170817 21:30:41.473" status="PASS" endtime="20170817 21:30:41.808"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:41.809">${host_state} = Off</msg>
<status starttime="20170817 21:30:41.473" status="PASS" endtime="20170817 21:30:41.809"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170817 21:30:41.809" status="PASS" endtime="20170817 21:30:41.810"></status>
</kw>
<status starttime="20170817 21:30:41.196" status="PASS" endtime="20170817 21:30:41.810"></status>
</kw>
<status starttime="20170817 21:30:24.193" status="PASS" endtime="20170817 21:30:41.810"></status>
</kw>
<status starttime="20170817 21:30:23.694" status="PASS" endtime="20170817 21:30:41.810"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.811">HOST is recovered from quiesced state</msg>
<status starttime="20170817 21:30:41.811" status="PASS" endtime="20170817 21:30:41.811"></status>
</kw>
<status starttime="20170817 21:30:23.694" status="PASS" endtime="20170817 21:30:41.811"></status>
</kw>
<status starttime="20170817 21:30:23.694" status="PASS" endtime="20170817 21:30:41.811"></status>
</kw>
<status starttime="20170817 21:30:23.283" status="PASS" endtime="20170817 21:30:41.811"></status>
</kw>
<status starttime="20170817 21:30:23.283" status="PASS" endtime="20170817 21:30:41.811"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.825">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170817 21:30:41.812" status="PASS" endtime="20170817 21:30:41.825"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.826">${FFDC_DIR_PATH} = /tmp/fspcibld/6080/obmc-robot/logs/20170817213008217366_TestsTestBasicPoweron/20170817213008217366_PowerOnTest/</msg>
<status starttime="20170817 21:30:41.825" status="PASS" endtime="20170817 21:30:41.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170817 21:30:41.826" status="PASS" endtime="20170817 21:30:41.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170817 21:30:41.827" status="PASS" endtime="20170817 21:30:41.827"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.828" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs"&gt;/tmp/fspcibld/6080/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170817 21:30:41.827" status="PASS" endtime="20170817 21:30:41.828"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.829" html="yes">File '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170817 21:30:41.828" status="PASS" endtime="20170817 21:30:41.829"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:41.829">${exist} = True</msg>
<status starttime="20170817 21:30:41.828" status="PASS" endtime="20170817 21:30:41.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170817 21:30:41.829" status="PASS" endtime="20170817 21:30:41.829"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170817 21:30:41.830" status="PASS" endtime="20170817 21:30:41.830"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.831">${cur_time} = 2017-08-17 21:30:41:830886</msg>
<status starttime="20170817 21:30:41.831" status="PASS" endtime="20170817 21:30:41.831"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.832">${cur_time} = 20170817213041830886</msg>
<status starttime="20170817 21:30:41.831" status="PASS" endtime="20170817 21:30:41.832"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:41.832">${cur_time} = 20170817213041830886</msg>
<status starttime="20170817 21:30:41.830" status="PASS" endtime="20170817 21:30:41.832"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.833" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/6080/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:41.832" status="PASS" endtime="20170817 21:30:41.833"></status>
</kw>
<status starttime="20170817 21:30:41.812" status="PASS" endtime="20170817 21:30:41.833"></status>
</kw>
<status starttime="20170817 21:30:04.826" status="PASS" endtime="20170817 21:30:41.833"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.835">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 21:30:41.835" status="PASS" endtime="20170817 21:30:41.835"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.836">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 21:30:41.835" status="PASS" endtime="20170817 21:30:41.836"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:41.836">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170817 21:30:41.834" status="PASS" endtime="20170817 21:30:41.836"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.837">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170817 21:30:41.837" status="PASS" endtime="20170817 21:30:41.837"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170817 21:30:41.837" status="PASS" endtime="20170817 21:30:41.837"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.843">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170817 21:30:41.846">${rc} = 0</msg>
<msg level="INFO" timestamp="20170817 21:30:41.846">${output} = /tmp/fspcibld/6080/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170817 21:30:41.838" status="PASS" endtime="20170817 21:30:41.847"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170817 21:30:41.849" status="PASS" endtime="20170817 21:30:41.850"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170817 21:30:41.850" status="PASS" endtime="20170817 21:30:41.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.851">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170817 21:30:41.851" status="PASS" endtime="20170817 21:30:41.851"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:41.852">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status starttime="20170817 21:30:41.836" status="PASS" endtime="20170817 21:30:41.852"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.852">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170817 21:30:41.852" status="PASS" endtime="20170817 21:30:41.852"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170817 21:30:41.853" status="PASS" endtime="20170817 21:30:41.853"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.857">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170817 21:30:41.872">${rc} = 0</msg>
<msg level="INFO" timestamp="20170817 21:30:41.872">${os_con_pid} = </msg>
<status starttime="20170817 21:30:41.853" status="PASS" endtime="20170817 21:30:41.873"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170817 21:30:41.875" status="PASS" endtime="20170817 21:30:41.875"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.876">${cmd_buf} = kill -9 </msg>
<status starttime="20170817 21:30:41.876" status="PASS" endtime="20170817 21:30:41.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170817 21:30:41.877" status="PASS" endtime="20170817 21:30:41.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.881">${rc} = None</msg>
<msg level="INFO" timestamp="20170817 21:30:41.881">${output} = None</msg>
<status starttime="20170817 21:30:41.878" status="PASS" endtime="20170817 21:30:41.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170817 21:30:41.881" status="PASS" endtime="20170817 21:30:41.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.886" html="yes">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/6080/obmc-robot/logs/9.41.166.169_os_console"&gt;/tmp/fspcibld/6080/obmc-robot/logs/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status starttime="20170817 21:30:41.883" status="PASS" endtime="20170817 21:30:41.886"></status>
</kw>
<status starttime="20170817 21:30:41.882" status="PASS" endtime="20170817 21:30:41.886"></status>
</kw>
<status starttime="20170817 21:30:41.882" status="PASS" endtime="20170817 21:30:41.886"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.887">${output} = </msg>
<status starttime="20170817 21:30:41.887" status="PASS" endtime="20170817 21:30:41.887"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170817 21:30:41.888">${loc_quiet} = 1</msg>
<status starttime="20170817 21:30:41.887" status="PASS" endtime="20170817 21:30:41.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170817 21:30:41.889" status="PASS" endtime="20170817 21:30:41.937"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:41.938">${rc} = 0</msg>
<msg level="INFO" timestamp="20170817 21:30:41.939">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
</msg>
<status starttime="20170817 21:30:41.888" status="PASS" endtime="20170817 21:30:41.939"></status>
</kw>
<msg level="INFO" timestamp="20170817 21:30:41.940">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
</msg>
<status starttime="20170817 21:30:41.833" status="PASS" endtime="20170817 21:30:41.940"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170817 21:30:41.942">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
</msg>
<status starttime="20170817 21:30:41.941" status="PASS" endtime="20170817 21:30:41.942"></status>
</kw>
<status starttime="20170817 21:30:04.825" status="PASS" endtime="20170817 21:30:41.942"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170817 21:19:49.075" critical="yes" status="FAIL" endtime="20170817 21:30:41.942">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170817 21:19:49.039" status="FAIL" endtime="20170817 21:30:41.944"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170817 21:19:42.594" status="FAIL" endtime="20170817 21:30:41.948"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" pass="1" fail="1" name="Tests">Tests</stat>
<stat id="s1-s1" pass="1" fail="0" name="Security">Tests.Security</stat>
<stat id="s1-s1-s1" pass="1" fail="0" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" pass="0" fail="1" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
