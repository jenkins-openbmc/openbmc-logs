<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170518 02:09:40.537" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite id="s1" source="/tmp/fspcibld/23477/obmc-robot/tests" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170518 02:09:41.509" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170518 02:09:41.509" endtime="20170518 02:09:41.509"></status>
</kw>
<msg timestamp="20170518 02:09:41.509" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170518 02:09:41.508" endtime="20170518 02:09:41.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:41.510" endtime="20170518 02:09:41.510"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:41.510" endtime="20170518 02:09:41.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170518 02:09:41.512" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170518 02:09:41.511" endtime="20170518 02:09:41.512"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170518 02:09:41.512" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170518 02:09:41.512" endtime="20170518 02:09:41.512"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170518 02:09:41.513" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170518 02:09:41.512" endtime="20170518 02:09:41.513"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170518 02:09:41.513" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170518 02:09:41.513" endtime="20170518 02:09:41.513"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:41.511" endtime="20170518 02:09:41.514"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:41.511" endtime="20170518 02:09:41.514"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170518 02:09:41.514" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170518 02:09:41.514" endtime="20170518 02:09:41.515"></status>
</kw>
<msg timestamp="20170518 02:09:41.515" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170518 02:09:41.514" endtime="20170518 02:09:41.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:41.516" endtime="20170518 02:09:41.516"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:41.517" endtime="20170518 02:09:41.517"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:41.516" endtime="20170518 02:09:41.517"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:41.515" endtime="20170518 02:09:41.517"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170518 02:09:41.517" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170518 02:09:43.457" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170518 02:09:41.517" endtime="20170518 02:09:43.457"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:41.508" endtime="20170518 02:09:43.457"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:09:43.459" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170518 02:09:43.527" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:09:43.527" level="INFO">${output} = VERSION_ID="v1.99.5-45-g4c26a5f"</msg>
<msg timestamp="20170518 02:09:43.527" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:09:43.458" endtime="20170518 02:09:43.527"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170518 02:09:43.527" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170518 02:09:43.527" endtime="20170518 02:09:43.527"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170518 02:09:43.528" level="INFO">VERSION_ID="v1.99.5-45-g4c26a5f"</msg>
<status status="PASS" starttime="20170518 02:09:43.528" endtime="20170518 02:09:43.528"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:43.458" endtime="20170518 02:09:43.528"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:43.458" endtime="20170518 02:09:43.528"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:09:43.530" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170518 02:09:43.810" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:09:43.810" level="INFO">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg timestamp="20170518 02:09:43.810" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:09:43.529" endtime="20170518 02:09:43.810"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170518 02:09:43.810" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170518 02:09:43.810" endtime="20170518 02:09:43.811"></status>
</kw>
<msg timestamp="20170518 02:09:43.811" level="INFO">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status status="PASS" starttime="20170518 02:09:43.529" endtime="20170518 02:09:43.811"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg timestamp="20170518 02:09:43.812" level="INFO">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status status="PASS" starttime="20170518 02:09:43.811" endtime="20170518 02:09:43.813"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:43.529" endtime="20170518 02:09:43.813"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:43.528" endtime="20170518 02:09:43.813"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170518 02:09:43.816" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170518 02:09:43.816" endtime="20170518 02:09:43.816"></status>
</kw>
<msg timestamp="20170518 02:09:43.816" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170518 02:09:43.815" endtime="20170518 02:09:43.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:43.817" endtime="20170518 02:09:43.818"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:43.817" endtime="20170518 02:09:43.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170518 02:09:43.820" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170518 02:09:43.819" endtime="20170518 02:09:43.820"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170518 02:09:43.820" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170518 02:09:43.820" endtime="20170518 02:09:43.820"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170518 02:09:43.821" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170518 02:09:43.821" endtime="20170518 02:09:43.821"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170518 02:09:43.822" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170518 02:09:43.821" endtime="20170518 02:09:43.822"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:43.819" endtime="20170518 02:09:43.823"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:43.818" endtime="20170518 02:09:43.823"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170518 02:09:43.824" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170518 02:09:43.824" endtime="20170518 02:09:43.824"></status>
</kw>
<msg timestamp="20170518 02:09:43.824" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170518 02:09:43.823" endtime="20170518 02:09:43.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:43.826" endtime="20170518 02:09:43.826"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:43.827" endtime="20170518 02:09:43.827"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:43.825" endtime="20170518 02:09:43.827"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:43.825" endtime="20170518 02:09:43.827"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170518 02:09:43.828" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170518 02:09:45.572" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170518 02:09:43.828" endtime="20170518 02:09:45.572"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:43.814" endtime="20170518 02:09:45.572"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:09:45.573" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170518 02:09:45.639" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:09:45.639" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170518 02:09:45.640" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:09:45.572" endtime="20170518 02:09:45.640"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170518 02:09:45.640" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170518 02:09:45.640" endtime="20170518 02:09:45.640"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170518 02:09:45.640" level="INFO">Length is 11</msg>
<status status="PASS" starttime="20170518 02:09:45.640" endtime="20170518 02:09:45.641"></status>
</kw>
<msg timestamp="20170518 02:09:45.641" level="INFO">${bmc_model} = Witherspoon</msg>
<status status="PASS" starttime="20170518 02:09:43.814" endtime="20170518 02:09:45.641"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170518 02:09:45.641" level="INFO">BMC Model=Witherspoon</msg>
<status status="PASS" starttime="20170518 02:09:45.641" endtime="20170518 02:09:45.641"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:43.813" endtime="20170518 02:09:45.641"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:43.813" endtime="20170518 02:09:45.641"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170518 02:09:45.643" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170518 02:09:45.643" endtime="20170518 02:09:45.643"></status>
</kw>
<msg timestamp="20170518 02:09:45.643" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170518 02:09:45.643" endtime="20170518 02:09:45.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:45.644" endtime="20170518 02:09:45.645"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:45.644" endtime="20170518 02:09:45.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170518 02:09:45.646" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170518 02:09:45.646" endtime="20170518 02:09:45.646"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170518 02:09:45.646" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170518 02:09:45.646" endtime="20170518 02:09:45.647"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170518 02:09:45.647" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170518 02:09:45.647" endtime="20170518 02:09:45.647"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170518 02:09:45.648" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170518 02:09:45.647" endtime="20170518 02:09:45.648"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:45.645" endtime="20170518 02:09:45.648"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:45.645" endtime="20170518 02:09:45.648"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170518 02:09:45.649" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170518 02:09:45.649" endtime="20170518 02:09:45.649"></status>
</kw>
<msg timestamp="20170518 02:09:45.649" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170518 02:09:45.648" endtime="20170518 02:09:45.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:45.650" endtime="20170518 02:09:45.651"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:45.651" endtime="20170518 02:09:45.651"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:45.650" endtime="20170518 02:09:45.651"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:45.649" endtime="20170518 02:09:45.651"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170518 02:09:45.652" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170518 02:09:47.431" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170518 02:09:45.651" endtime="20170518 02:09:47.432"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:45.642" endtime="20170518 02:09:47.432"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:09:47.433" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170518 02:09:47.509" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:09:47.510" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170518 02:09:47.510" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:09:47.432" endtime="20170518 02:09:47.510"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170518 02:09:47.510" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170518 02:09:47.510" endtime="20170518 02:09:47.510"></status>
</kw>
<msg timestamp="20170518 02:09:47.510" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" starttime="20170518 02:09:47.432" endtime="20170518 02:09:47.510"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:47.511" endtime="20170518 02:09:47.511"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:45.642" endtime="20170518 02:09:47.511"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:45.642" endtime="20170518 02:09:47.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:47.511" endtime="20170518 02:09:47.512"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:41.507" endtime="20170518 02:09:47.512"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/23477/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/23477/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:09:47.589" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:09:47.589" endtime="20170518 02:09:47.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:09:47.590" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:09:47.590" endtime="20170518 02:09:47.590"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:09:47.591" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:09:47.591" endtime="20170518 02:09:47.591"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:09:47.592" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:09:47.591" endtime="20170518 02:09:47.592"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:09:47.828" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:09:47.592" endtime="20170518 02:09:47.829"></status>
</kw>
<msg timestamp="20170518 02:09:47.829" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:09:47.829" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:09:47.592" endtime="20170518 02:09:47.829"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:09:47.829" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:09:47.829" endtime="20170518 02:09:47.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:09:47.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:09:47.830" endtime="20170518 02:09:47.830"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:47.588" endtime="20170518 02:09:47.830"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:47.588" endtime="20170518 02:09:47.830"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:47.588" endtime="20170518 02:09:47.830"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:09:47.835" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:09:47.834" endtime="20170518 02:09:47.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:09:47.836" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:09:47.836" endtime="20170518 02:09:47.836"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:09:47.836" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:09:47.836" endtime="20170518 02:09:47.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:09:47.837" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:09:47.837" endtime="20170518 02:09:47.837"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:09:48.034" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:09:47.838" endtime="20170518 02:09:48.034"></status>
</kw>
<msg timestamp="20170518 02:09:48.034" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:09:48.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:09:47.837" endtime="20170518 02:09:48.034"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:09:48.035" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:09:48.034" endtime="20170518 02:09:48.035"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:09:48.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:09:48.035" endtime="20170518 02:09:48.035"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:47.834" endtime="20170518 02:09:48.036"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:47.833" endtime="20170518 02:09:48.036"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:47.833" endtime="20170518 02:09:48.036"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:09:48.036" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170518 02:09:48.036" endtime="20170518 02:09:48.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:09:48.038" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:09:48.038" endtime="20170518 02:09:48.038"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:09:48.039" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:09:48.039" endtime="20170518 02:09:48.039"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.039" endtime="20170518 02:09:48.039"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.037" endtime="20170518 02:09:48.040"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.037" endtime="20170518 02:09:48.040"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:09:48.110" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170518 02:09:48.110" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:09:48.040" endtime="20170518 02:09:48.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:09:48.112" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:09:48.111" endtime="20170518 02:09:48.112"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:09:48.113" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:09:48.112" endtime="20170518 02:09:48.113"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.112" endtime="20170518 02:09:48.113"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.111" endtime="20170518 02:09:48.113"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.110" endtime="20170518 02:09:48.113"></status>
</kw>
<msg timestamp="20170518 02:09:48.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:09:47.832" endtime="20170518 02:09:48.113"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:09:48.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:09:48.114" endtime="20170518 02:09:48.114"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:09:48.114" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:09:48.115" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:09:48.115" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:09:48.114" endtime="20170518 02:09:48.115"></status>
</kw>
<msg timestamp="20170518 02:09:48.115" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170518 02:09:47.832" endtime="20170518 02:09:48.115"></status>
</kw>
<msg timestamp="20170518 02:09:48.115" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170518 02:09:47.831" endtime="20170518 02:09:48.115"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170518 02:09:48.116" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170518 02:09:48.116" endtime="20170518 02:09:48.116"></status>
</kw>
<msg timestamp="20170518 02:09:48.117" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170518 02:09:48.116" endtime="20170518 02:09:48.117"></status>
</kw>
<msg timestamp="20170518 02:09:48.117" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170518 02:09:47.831" endtime="20170518 02:09:48.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.117" endtime="20170518 02:09:48.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.118" endtime="20170518 02:09:48.118"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170518 02:09:48.126" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170518 02:09:48.119" endtime="20170518 02:09:48.126"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170518 02:09:48.134" level="INFO">${FFDC_DIR_PATH} = </msg>
<status status="PASS" starttime="20170518 02:09:48.126" endtime="20170518 02:09:48.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170518 02:09:48.142" level="INFO">${cur_time} = 2017-05-18 02:09:48:141959</msg>
<status status="PASS" starttime="20170518 02:09:48.142" endtime="20170518 02:09:48.142"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170518 02:09:48.143" level="INFO">${cur_time} = 20170518020948141959</msg>
<status status="PASS" starttime="20170518 02:09:48.143" endtime="20170518 02:09:48.143"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.141" endtime="20170518 02:09:48.143"></status>
</kw>
<msg timestamp="20170518 02:09:48.149" level="INFO">${FFDC_TIME} = 20170518020948141959</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170518 02:09:48.150" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20170518 02:09:48.150" endtime="20170518 02:09:48.150"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170518 02:09:48.151" level="INFO">${suite_name} = 20170518020948141959_TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20170518 02:09:48.150" endtime="20170518 02:09:48.151"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170518 02:09:48.151" level="INFO">${test_name} = TestSSLConnection</msg>
<status status="PASS" starttime="20170518 02:09:48.151" endtime="20170518 02:09:48.151"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170518 02:09:48.152" level="INFO">${test_name} = 20170518020948141959_TestSSLConnection</msg>
<status status="PASS" starttime="20170518 02:09:48.152" endtime="20170518 02:09:48.152"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.149" endtime="20170518 02:09:48.152"></status>
</kw>
<msg timestamp="20170518 02:09:48.152" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/23477/obmc-robot/logs/20170518020948141959_TestsSecurityTestSsl/20170518020948141959_TestSSLConnection/</msg>
<msg timestamp="20170518 02:09:48.156" level="INFO">${FFDC_PREFIX} = 20170518020948141959_</msg>
<status status="PASS" starttime="20170518 02:09:48.134" endtime="20170518 02:09:48.157"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.134" endtime="20170518 02:09:48.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.157" endtime="20170518 02:09:48.157"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170518 02:09:48.158" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs"&gt;/tmp/fspcibld/23477/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:09:48.157" endtime="20170518 02:09:48.158"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170518 02:09:48.159" level="FAIL">File '/tmp/fspcibld/23477/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" starttime="20170518 02:09:48.159" endtime="20170518 02:09:48.159"></status>
</kw>
<msg timestamp="20170518 02:09:48.159" level="INFO">${exist} = False</msg>
<status status="PASS" starttime="20170518 02:09:48.158" endtime="20170518 02:09:48.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170518 02:09:48.160" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:09:48.160" endtime="20170518 02:09:48.160"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.159" endtime="20170518 02:09:48.160"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.161" endtime="20170518 02:09:48.161"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170518 02:09:48.162" level="INFO">${cur_time} = 2017-05-18 02:09:48:161618</msg>
<status status="PASS" starttime="20170518 02:09:48.161" endtime="20170518 02:09:48.162"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170518 02:09:48.162" level="INFO">${cur_time} = 20170518020948161618</msg>
<status status="PASS" starttime="20170518 02:09:48.162" endtime="20170518 02:09:48.162"></status>
</kw>
<msg timestamp="20170518 02:09:48.162" level="INFO">${cur_time} = 20170518020948161618</msg>
<status status="PASS" starttime="20170518 02:09:48.161" endtime="20170518 02:09:48.163"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170518 02:09:48.163" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:09:48.163" endtime="20170518 02:09:48.164"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.118" endtime="20170518 02:09:48.164"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:47.831" endtime="20170518 02:09:48.164"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" status="PASS" starttime="20170518 02:09:47.587" endtime="20170518 02:09:48.164"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170518 02:09:48.165" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170518 02:09:48.165" endtime="20170518 02:09:48.165"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" starttime="20170518 02:09:47.514" endtime="20170518 02:09:48.165"></status>
</suite>
<status status="PASS" starttime="20170518 02:09:47.512" endtime="20170518 02:09:48.167"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/23477/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170518 02:09:48.200" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:09:48.200" endtime="20170518 02:09:48.200"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170518 02:09:48.201" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:09:48.200" endtime="20170518 02:09:48.201"></status>
</kw>
<msg timestamp="20170518 02:09:48.201" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:09:48.199" endtime="20170518 02:09:48.201"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170518 02:09:48.202" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:09:48.202" endtime="20170518 02:09:48.202"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170518 02:09:48.203" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:09:48.202" endtime="20170518 02:09:48.203"></status>
</kw>
<msg timestamp="20170518 02:09:48.203" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:09:48.201" endtime="20170518 02:09:48.203"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:09:48.204" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170518 02:09:48.204" endtime="20170518 02:09:48.204"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.204" endtime="20170518 02:09:48.215"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170518 02:09:48.219" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170518 02:09:48.221" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:09:48.222" level="INFO">${output} = /tmp/fspcibld/23477/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170518 02:09:48.215" endtime="20170518 02:09:48.222"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.224" endtime="20170518 02:09:48.233"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.233" endtime="20170518 02:09:48.234"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:09:48.235" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170518 02:09:48.234" endtime="20170518 02:09:48.235"></status>
</kw>
<msg timestamp="20170518 02:09:48.235" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170518 02:09:48.203" endtime="20170518 02:09:48.235"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:09:48.236" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170518 02:09:48.235" endtime="20170518 02:09:48.236"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.236" endtime="20170518 02:09:48.243"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170518 02:09:48.246" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170518 02:09:48.253" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:09:48.253" level="INFO">${os_con_pid} = </msg>
<status status="PASS" starttime="20170518 02:09:48.243" endtime="20170518 02:09:48.254"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.255" endtime="20170518 02:09:48.265"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:09:48.265" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20170518 02:09:48.265" endtime="20170518 02:09:48.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.266" endtime="20170518 02:09:48.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170518 02:09:48.267" level="INFO">${rc} = None</msg>
<msg timestamp="20170518 02:09:48.267" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20170518 02:09:48.267" endtime="20170518 02:09:48.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.268" endtime="20170518 02:09:48.268"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:09:48.268" level="INFO">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170518 02:09:48.268" endtime="20170518 02:09:48.268"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.269" endtime="20170518 02:09:48.276"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170518 02:09:48.279" level="INFO">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg timestamp="20170518 02:09:48.284" level="INFO">${rc} = 1</msg>
<msg timestamp="20170518 02:09:48.284" level="INFO">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status status="PASS" starttime="20170518 02:09:48.276" endtime="20170518 02:09:48.284"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.286" endtime="20170518 02:09:48.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.294" endtime="20170518 02:09:48.295"></status>
</kw>
<msg timestamp="20170518 02:09:48.295" level="INFO">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status status="PASS" starttime="20170518 02:09:48.201" endtime="20170518 02:09:48.295"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170518 02:09:48.296" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:09:48.295" endtime="20170518 02:09:48.296"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:09:48.297" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170518 02:09:48.297" endtime="20170518 02:09:48.297"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.297" endtime="20170518 02:09:48.304"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170518 02:09:48.308" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170518 02:09:48.312" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:09:48.313" level="INFO">${output} = /tmp/fspcibld/23477/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170518 02:09:48.305" endtime="20170518 02:09:48.313"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.314" endtime="20170518 02:09:48.324"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.324" endtime="20170518 02:09:48.325"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:09:48.326" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170518 02:09:48.325" endtime="20170518 02:09:48.326"></status>
</kw>
<msg timestamp="20170518 02:09:48.326" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170518 02:09:48.296" endtime="20170518 02:09:48.326"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:09:48.327" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" starttime="20170518 02:09:48.326" endtime="20170518 02:09:48.327"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.327" endtime="20170518 02:09:48.334"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170518 02:09:48.341" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170518 02:09:48.367" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:09:48.367" level="INFO">${output} = </msg>
<status status="PASS" starttime="20170518 02:09:48.335" endtime="20170518 02:09:48.368"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.377" endtime="20170518 02:09:48.378"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.199" endtime="20170518 02:09:48.379"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170518 02:09:48.380" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170518 02:09:48.383" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20170518 02:09:48.383" endtime="20170518 02:09:48.383"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:09:48.386" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170518 02:09:48.385" endtime="20170518 02:09:48.386"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:09:48.389" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:09:48.388" endtime="20170518 02:09:48.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:09:48.390" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:09:48.390" endtime="20170518 02:09:48.390"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:09:48.391" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:09:48.390" endtime="20170518 02:09:48.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:09:48.391" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:09:48.391" endtime="20170518 02:09:48.391"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:09:48.882" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:09:48.392" endtime="20170518 02:09:48.882"></status>
</kw>
<msg timestamp="20170518 02:09:48.882" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:09:48.882" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:09:48.392" endtime="20170518 02:09:48.882"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:09:48.883" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:09:48.882" endtime="20170518 02:09:48.883"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:09:48.883" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:09:48.883" endtime="20170518 02:09:48.883"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.388" endtime="20170518 02:09:48.883"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.387" endtime="20170518 02:09:48.883"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.387" endtime="20170518 02:09:48.884"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:09:48.884" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170518 02:09:48.884" endtime="20170518 02:09:48.884"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:09:48.885" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:09:48.884" endtime="20170518 02:09:48.885"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:48.885" endtime="20170518 02:09:48.885"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:09:48.887" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status status="PASS" starttime="20170518 02:09:48.886" endtime="20170518 02:09:48.887"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:09:48.888" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170518 02:09:48.888" endtime="20170518 02:09:48.888"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.887" endtime="20170518 02:09:48.888"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.885" endtime="20170518 02:09:48.888"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:09:49.326" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170518 02:09:49.326" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:09:48.888" endtime="20170518 02:09:49.326"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:09:49.327" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:09:49.326" endtime="20170518 02:09:49.327"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:09:49.328" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:09:49.328" endtime="20170518 02:09:49.328"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:49.327" endtime="20170518 02:09:49.328"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:49.326" endtime="20170518 02:09:49.328"></status>
</kw>
<msg timestamp="20170518 02:09:49.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:09:48.386" endtime="20170518 02:09:49.329"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:09:49.329" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:09:49.329" endtime="20170518 02:09:49.329"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170518 02:09:49.330" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:09:49.330" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:09:49.330" level="INFO">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:09:49.329" endtime="20170518 02:09:49.330"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.384" endtime="20170518 02:09:49.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170518 02:09:49.330" endtime="20170518 02:09:49.331"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:09:49.335" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:09:49.335" endtime="20170518 02:09:49.335"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:09:49.336" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:09:49.336" endtime="20170518 02:09:49.336"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:09:49.337" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:09:49.336" endtime="20170518 02:09:49.337"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:09:49.337" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:09:49.337" endtime="20170518 02:09:49.337"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:09:50.930" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:09:49.338" endtime="20170518 02:09:50.930"></status>
</kw>
<msg timestamp="20170518 02:09:50.931" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:09:50.931" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:09:49.338" endtime="20170518 02:09:50.931"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:09:50.931" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:09:50.931" endtime="20170518 02:09:50.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:09:50.932" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:09:50.932" endtime="20170518 02:09:50.932"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:49.334" endtime="20170518 02:09:50.932"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:49.334" endtime="20170518 02:09:50.932"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:49.333" endtime="20170518 02:09:50.932"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:09:50.933" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170518 02:09:50.933" endtime="20170518 02:09:50.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:09:50.935" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:09:50.934" endtime="20170518 02:09:50.935"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:09:50.936" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:09:50.936" endtime="20170518 02:09:50.936"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:50.935" endtime="20170518 02:09:50.936"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:50.934" endtime="20170518 02:09:50.936"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:50.933" endtime="20170518 02:09:50.936"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:09:52.037" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170518 02:09:52.037" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:09:50.937" endtime="20170518 02:09:52.037"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:09:52.040" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:09:52.039" endtime="20170518 02:09:52.040"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:09:52.041" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:09:52.041" endtime="20170518 02:09:52.041"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:52.040" endtime="20170518 02:09:52.041"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:52.038" endtime="20170518 02:09:52.041"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:52.038" endtime="20170518 02:09:52.041"></status>
</kw>
<msg timestamp="20170518 02:09:52.042" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:09:49.332" endtime="20170518 02:09:52.042"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:09:52.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:09:52.042" endtime="20170518 02:09:52.043"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:09:52.043" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:09:52.043" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:09:52.043" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:09:52.043" endtime="20170518 02:09:52.043"></status>
</kw>
<msg timestamp="20170518 02:09:52.044" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170518 02:09:49.332" endtime="20170518 02:09:52.044"></status>
</kw>
<msg timestamp="20170518 02:09:52.044" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170518 02:09:49.332" endtime="20170518 02:09:52.044"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170518 02:09:52.045" level="FAIL">Off != Running</msg>
<status status="FAIL" starttime="20170518 02:09:52.044" endtime="20170518 02:09:52.045"></status>
</kw>
<status status="FAIL" starttime="20170518 02:09:49.331" endtime="20170518 02:09:52.045"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:10:02.050" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:10:02.049" endtime="20170518 02:10:02.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:10:02.051" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:10:02.050" endtime="20170518 02:10:02.051"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:10:02.051" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:10:02.051" endtime="20170518 02:10:02.051"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:10:02.052" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:10:02.052" endtime="20170518 02:10:02.052"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:10:02.240" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:10:02.053" endtime="20170518 02:10:02.241"></status>
</kw>
<msg timestamp="20170518 02:10:02.241" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:10:02.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.052" endtime="20170518 02:10:02.241"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:10:02.241" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.241" endtime="20170518 02:10:02.241"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:02.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.242" endtime="20170518 02:10:02.242"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.049" endtime="20170518 02:10:02.242"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.048" endtime="20170518 02:10:02.242"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.048" endtime="20170518 02:10:02.242"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:10:02.243" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170518 02:10:02.243" endtime="20170518 02:10:02.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:02.245" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:02.244" endtime="20170518 02:10:02.245"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:02.246" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:02.246" endtime="20170518 02:10:02.246"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.245" endtime="20170518 02:10:02.246"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.244" endtime="20170518 02:10:02.246"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.243" endtime="20170518 02:10:02.246"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:10:02.310" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170518 02:10:02.310" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.247" endtime="20170518 02:10:02.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:02.311" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:02.311" endtime="20170518 02:10:02.312"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:02.312" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:02.312" endtime="20170518 02:10:02.312"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.312" endtime="20170518 02:10:02.313"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.311" endtime="20170518 02:10:02.313"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.310" endtime="20170518 02:10:02.313"></status>
</kw>
<msg timestamp="20170518 02:10:02.313" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.047" endtime="20170518 02:10:02.313"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:02.314" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.313" endtime="20170518 02:10:02.314"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:10:02.314" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:10:02.314" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:10:02.315" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:10:02.314" endtime="20170518 02:10:02.315"></status>
</kw>
<msg timestamp="20170518 02:10:02.315" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170518 02:10:02.046" endtime="20170518 02:10:02.315"></status>
</kw>
<msg timestamp="20170518 02:10:02.315" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20170518 02:10:02.046" endtime="20170518 02:10:02.315"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:10:02.315" endtime="20170518 02:10:02.316"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.045" endtime="20170518 02:10:02.316"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:49.331" endtime="20170518 02:10:02.316"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.382" endtime="20170518 02:10:02.316"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw name="Is OS Off" library="utils">
<doc>Check if boot progress is "Off".</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:10:02.321" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:10:02.320" endtime="20170518 02:10:02.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:10:02.322" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:10:02.321" endtime="20170518 02:10:02.322"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:10:02.322" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:10:02.322" endtime="20170518 02:10:02.322"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:10:02.323" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:10:02.322" endtime="20170518 02:10:02.323"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:10:02.572" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:10:02.324" endtime="20170518 02:10:02.572"></status>
</kw>
<msg timestamp="20170518 02:10:02.572" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:10:02.572" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.323" endtime="20170518 02:10:02.572"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:10:02.573" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.573" endtime="20170518 02:10:02.573"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:02.574" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.573" endtime="20170518 02:10:02.574"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.320" endtime="20170518 02:10:02.574"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.319" endtime="20170518 02:10:02.574"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.319" endtime="20170518 02:10:02.574"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:10:02.575" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:10:02.575" endtime="20170518 02:10:02.575"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:02.578" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:02.577" endtime="20170518 02:10:02.578"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:02.579" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:02.579" endtime="20170518 02:10:02.579"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.578" endtime="20170518 02:10:02.579"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.576" endtime="20170518 02:10:02.580"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.575" endtime="20170518 02:10:02.580"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:10:02.647" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:10:02.647" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.580" endtime="20170518 02:10:02.648"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:02.649" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:02.649" endtime="20170518 02:10:02.649"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:02.650" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:02.650" endtime="20170518 02:10:02.650"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.649" endtime="20170518 02:10:02.650"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.648" endtime="20170518 02:10:02.651"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.648" endtime="20170518 02:10:02.651"></status>
</kw>
<msg timestamp="20170518 02:10:02.651" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.318" endtime="20170518 02:10:02.651"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:02.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.651" endtime="20170518 02:10:02.651"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:10:02.652" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:10:02.652" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:10:02.652" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:10:02.652" endtime="20170518 02:10:02.652"></status>
</kw>
<msg timestamp="20170518 02:10:02.652" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170518 02:10:02.317" endtime="20170518 02:10:02.652"></status>
</kw>
<msg timestamp="20170518 02:10:02.653" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170518 02:10:02.317" endtime="20170518 02:10:02.653"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status status="PASS" starttime="20170518 02:10:02.653" endtime="20170518 02:10:02.653"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.317" endtime="20170518 02:10:02.653"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.316" endtime="20170518 02:10:02.653"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170518 02:10:02.654" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" starttime="20170518 02:10:02.654" endtime="20170518 02:10:02.654"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:10:02.656" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170518 02:10:02.655" endtime="20170518 02:10:02.656"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:10:02.658" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:10:02.658" endtime="20170518 02:10:02.659"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:10:02.659" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:10:02.659" endtime="20170518 02:10:02.659"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:10:02.660" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:10:02.660" endtime="20170518 02:10:02.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:10:02.661" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:10:02.660" endtime="20170518 02:10:02.661"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:10:02.846" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:10:02.661" endtime="20170518 02:10:02.846"></status>
</kw>
<msg timestamp="20170518 02:10:02.847" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:10:02.847" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.661" endtime="20170518 02:10:02.847"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:10:02.847" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.847" endtime="20170518 02:10:02.847"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:02.848" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.848" endtime="20170518 02:10:02.848"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.658" endtime="20170518 02:10:02.848"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.657" endtime="20170518 02:10:02.848"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.657" endtime="20170518 02:10:02.848"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:10:02.849" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170518 02:10:02.849" endtime="20170518 02:10:02.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:10:02.850" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:10:02.849" endtime="20170518 02:10:02.850"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:10:02.850" endtime="20170518 02:10:02.850"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:02.852" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status status="PASS" starttime="20170518 02:10:02.851" endtime="20170518 02:10:02.852"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:02.853" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170518 02:10:02.853" endtime="20170518 02:10:02.853"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.852" endtime="20170518 02:10:02.853"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.850" endtime="20170518 02:10:02.853"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:10:03.374" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170518 02:10:03.375" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.853" endtime="20170518 02:10:03.375"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:03.376" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:03.375" endtime="20170518 02:10:03.376"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:03.377" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:03.376" endtime="20170518 02:10:03.377"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:03.376" endtime="20170518 02:10:03.377"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:03.375" endtime="20170518 02:10:03.377"></status>
</kw>
<msg timestamp="20170518 02:10:03.377" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:02.656" endtime="20170518 02:10:03.377"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:03.378" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:03.378" endtime="20170518 02:10:03.378"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170518 02:10:03.379" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:10:03.379" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:10:03.379" level="INFO">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:10:03.378" endtime="20170518 02:10:03.379"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.655" endtime="20170518 02:10:03.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170518 02:10:03.379" endtime="20170518 02:10:03.380"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:10:03.385" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:10:03.385" endtime="20170518 02:10:03.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:10:03.387" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:10:03.386" endtime="20170518 02:10:03.387"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:10:03.389" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:10:03.387" endtime="20170518 02:10:03.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:10:03.390" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:10:03.390" endtime="20170518 02:10:03.390"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:10:04.015" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:10:03.391" endtime="20170518 02:10:04.015"></status>
</kw>
<msg timestamp="20170518 02:10:04.015" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:10:04.015" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:03.390" endtime="20170518 02:10:04.015"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:10:04.016" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:04.016" endtime="20170518 02:10:04.016"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:04.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:04.016" endtime="20170518 02:10:04.017"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:03.384" endtime="20170518 02:10:04.017"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:03.384" endtime="20170518 02:10:04.017"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:03.383" endtime="20170518 02:10:04.017"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:10:04.017" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170518 02:10:04.017" endtime="20170518 02:10:04.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:04.020" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:04.019" endtime="20170518 02:10:04.020"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:04.021" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:04.020" endtime="20170518 02:10:04.021"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:04.020" endtime="20170518 02:10:04.021"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:04.018" endtime="20170518 02:10:04.021"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:04.018" endtime="20170518 02:10:04.021"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:10:07.275" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170518 02:10:07.276" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:04.021" endtime="20170518 02:10:07.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:07.277" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:07.277" endtime="20170518 02:10:07.278"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:07.279" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:07.278" endtime="20170518 02:10:07.279"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:07.278" endtime="20170518 02:10:07.279"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:07.277" endtime="20170518 02:10:07.279"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:07.276" endtime="20170518 02:10:07.279"></status>
</kw>
<msg timestamp="20170518 02:10:07.279" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:03.382" endtime="20170518 02:10:07.279"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:07.280" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:07.280" endtime="20170518 02:10:07.280"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:10:07.281" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:10:07.281" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:10:07.281" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:10:07.280" endtime="20170518 02:10:07.281"></status>
</kw>
<msg timestamp="20170518 02:10:07.281" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170518 02:10:03.381" endtime="20170518 02:10:07.281"></status>
</kw>
<msg timestamp="20170518 02:10:07.281" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20170518 02:10:03.381" endtime="20170518 02:10:07.281"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170518 02:10:07.282" level="FAIL">Running != Off</msg>
<status status="FAIL" starttime="20170518 02:10:07.282" endtime="20170518 02:10:07.282"></status>
</kw>
<status status="FAIL" starttime="20170518 02:10:03.380" endtime="20170518 02:10:07.282"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:10:17.287" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:10:17.287" endtime="20170518 02:10:17.288"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:10:17.288" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:10:17.288" endtime="20170518 02:10:17.288"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:10:17.289" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:10:17.289" endtime="20170518 02:10:17.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:10:17.290" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:10:17.289" endtime="20170518 02:10:17.290"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:10:17.482" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:10:17.290" endtime="20170518 02:10:17.482"></status>
</kw>
<msg timestamp="20170518 02:10:17.483" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:10:17.483" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:17.290" endtime="20170518 02:10:17.483"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:10:17.483" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:17.483" endtime="20170518 02:10:17.483"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:17.484" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:17.484" endtime="20170518 02:10:17.484"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.286" endtime="20170518 02:10:17.484"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.286" endtime="20170518 02:10:17.484"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.285" endtime="20170518 02:10:17.484"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:10:17.485" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170518 02:10:17.485" endtime="20170518 02:10:17.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:17.487" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:17.486" endtime="20170518 02:10:17.487"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:17.488" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:17.488" endtime="20170518 02:10:17.488"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.487" endtime="20170518 02:10:17.488"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.486" endtime="20170518 02:10:17.488"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.485" endtime="20170518 02:10:17.488"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:10:17.551" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170518 02:10:17.551" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:17.489" endtime="20170518 02:10:17.551"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:17.553" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:17.552" endtime="20170518 02:10:17.553"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:17.554" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:17.553" endtime="20170518 02:10:17.554"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.553" endtime="20170518 02:10:17.554"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.552" endtime="20170518 02:10:17.554"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.551" endtime="20170518 02:10:17.554"></status>
</kw>
<msg timestamp="20170518 02:10:17.554" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:17.284" endtime="20170518 02:10:17.554"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:17.555" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:17.555" endtime="20170518 02:10:17.555"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:10:17.556" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:10:17.556" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:10:17.556" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:10:17.555" endtime="20170518 02:10:17.556"></status>
</kw>
<msg timestamp="20170518 02:10:17.556" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170518 02:10:17.284" endtime="20170518 02:10:17.556"></status>
</kw>
<msg timestamp="20170518 02:10:17.556" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170518 02:10:17.283" endtime="20170518 02:10:17.556"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:10:17.557" endtime="20170518 02:10:17.557"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.283" endtime="20170518 02:10:17.557"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:03.380" endtime="20170518 02:10:17.557"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:02.654" endtime="20170518 02:10:17.557"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:10:17.563" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:10:17.562" endtime="20170518 02:10:17.563"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:10:17.564" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:10:17.563" endtime="20170518 02:10:17.564"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:10:17.564" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:10:17.564" endtime="20170518 02:10:17.564"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:10:17.565" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:10:17.565" endtime="20170518 02:10:17.565"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:10:17.856" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:10:17.566" endtime="20170518 02:10:17.856"></status>
</kw>
<msg timestamp="20170518 02:10:17.857" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:10:17.857" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:17.565" endtime="20170518 02:10:17.857"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:10:17.857" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:17.857" endtime="20170518 02:10:17.857"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:17.858" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:17.858" endtime="20170518 02:10:17.858"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.562" endtime="20170518 02:10:17.858"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.562" endtime="20170518 02:10:17.858"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.561" endtime="20170518 02:10:17.858"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:10:17.859" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:10:17.859" endtime="20170518 02:10:17.859"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:17.861" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:17.860" endtime="20170518 02:10:17.861"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:17.862" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:17.862" endtime="20170518 02:10:17.862"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.861" endtime="20170518 02:10:17.862"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.860" endtime="20170518 02:10:17.862"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.859" endtime="20170518 02:10:17.862"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:10:17.928" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:10:17.928" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:17.863" endtime="20170518 02:10:17.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:17.930" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:17.930" endtime="20170518 02:10:17.930"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:17.931" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:17.931" endtime="20170518 02:10:17.931"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.930" endtime="20170518 02:10:17.931"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.929" endtime="20170518 02:10:17.931"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.929" endtime="20170518 02:10:17.931"></status>
</kw>
<msg timestamp="20170518 02:10:17.932" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:17.560" endtime="20170518 02:10:17.932"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:17.932" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:17.932" endtime="20170518 02:10:17.932"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:10:17.933" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:10:17.933" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:10:17.933" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:10:17.933" endtime="20170518 02:10:17.933"></status>
</kw>
<msg timestamp="20170518 02:10:17.933" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170518 02:10:17.559" endtime="20170518 02:10:17.933"></status>
</kw>
<msg timestamp="20170518 02:10:17.934" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170518 02:10:17.559" endtime="20170518 02:10:17.934"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:10:17.934" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:10:17.934" endtime="20170518 02:10:17.934"></status>
</kw>
<status status="FAIL" starttime="20170518 02:10:17.558" endtime="20170518 02:10:17.934"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:10:27.939" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:10:27.939" endtime="20170518 02:10:27.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:10:27.940" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:10:27.940" endtime="20170518 02:10:27.940"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:10:27.941" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:10:27.941" endtime="20170518 02:10:27.941"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:10:27.942" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:10:27.941" endtime="20170518 02:10:27.942"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:10:28.168" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:10:27.942" endtime="20170518 02:10:28.168"></status>
</kw>
<msg timestamp="20170518 02:10:28.168" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:10:28.168" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:27.942" endtime="20170518 02:10:28.168"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:10:28.169" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:28.169" endtime="20170518 02:10:28.169"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:28.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:28.169" endtime="20170518 02:10:28.170"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:27.938" endtime="20170518 02:10:28.170"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:27.938" endtime="20170518 02:10:28.170"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:27.937" endtime="20170518 02:10:28.170"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:10:28.171" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:10:28.170" endtime="20170518 02:10:28.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:28.173" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:28.172" endtime="20170518 02:10:28.173"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:28.173" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:28.173" endtime="20170518 02:10:28.174"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:28.173" endtime="20170518 02:10:28.174"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:28.171" endtime="20170518 02:10:28.174"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:28.171" endtime="20170518 02:10:28.174"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:10:28.240" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:10:28.240" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:28.174" endtime="20170518 02:10:28.241"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:28.242" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:28.242" endtime="20170518 02:10:28.242"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:28.243" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:28.243" endtime="20170518 02:10:28.244"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:28.242" endtime="20170518 02:10:28.244"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:28.241" endtime="20170518 02:10:28.244"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:28.241" endtime="20170518 02:10:28.244"></status>
</kw>
<msg timestamp="20170518 02:10:28.244" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:27.936" endtime="20170518 02:10:28.244"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:28.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:28.244" endtime="20170518 02:10:28.245"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:10:28.245" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:10:28.245" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:10:28.245" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:10:28.245" endtime="20170518 02:10:28.245"></status>
</kw>
<msg timestamp="20170518 02:10:28.246" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170518 02:10:27.936" endtime="20170518 02:10:28.246"></status>
</kw>
<msg timestamp="20170518 02:10:28.246" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170518 02:10:27.936" endtime="20170518 02:10:28.246"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:10:28.247" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:10:28.246" endtime="20170518 02:10:28.247"></status>
</kw>
<status status="FAIL" starttime="20170518 02:10:27.935" endtime="20170518 02:10:28.247"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:10:38.251" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:10:38.251" endtime="20170518 02:10:38.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:10:38.252" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:10:38.252" endtime="20170518 02:10:38.252"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:10:38.253" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:10:38.253" endtime="20170518 02:10:38.253"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:10:38.254" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:10:38.253" endtime="20170518 02:10:38.254"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:10:38.434" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:10:38.254" endtime="20170518 02:10:38.434"></status>
</kw>
<msg timestamp="20170518 02:10:38.434" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:10:38.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:38.254" endtime="20170518 02:10:38.434"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:10:38.435" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:38.434" endtime="20170518 02:10:38.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:38.436" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:38.435" endtime="20170518 02:10:38.436"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:38.251" endtime="20170518 02:10:38.436"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:38.250" endtime="20170518 02:10:38.436"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:38.249" endtime="20170518 02:10:38.436"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:10:38.437" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:10:38.436" endtime="20170518 02:10:38.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:38.439" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:38.438" endtime="20170518 02:10:38.439"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:38.440" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:38.440" endtime="20170518 02:10:38.440"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:38.439" endtime="20170518 02:10:38.440"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:38.437" endtime="20170518 02:10:38.441"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:38.437" endtime="20170518 02:10:38.441"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:10:38.530" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:10:38.530" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:38.441" endtime="20170518 02:10:38.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:38.531" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:38.531" endtime="20170518 02:10:38.532"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:38.532" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:38.532" endtime="20170518 02:10:38.532"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:38.532" endtime="20170518 02:10:38.533"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:38.531" endtime="20170518 02:10:38.533"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:38.530" endtime="20170518 02:10:38.533"></status>
</kw>
<msg timestamp="20170518 02:10:38.533" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:38.249" endtime="20170518 02:10:38.533"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:38.534" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:38.533" endtime="20170518 02:10:38.534"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:10:38.534" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:10:38.534" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:10:38.534" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:10:38.534" endtime="20170518 02:10:38.534"></status>
</kw>
<msg timestamp="20170518 02:10:38.535" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170518 02:10:38.248" endtime="20170518 02:10:38.535"></status>
</kw>
<msg timestamp="20170518 02:10:38.535" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170518 02:10:38.248" endtime="20170518 02:10:38.535"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:10:38.535" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:10:38.535" endtime="20170518 02:10:38.536"></status>
</kw>
<status status="FAIL" starttime="20170518 02:10:38.247" endtime="20170518 02:10:38.536"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:10:48.541" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:10:48.540" endtime="20170518 02:10:48.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:10:48.542" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:10:48.541" endtime="20170518 02:10:48.542"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:10:48.542" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:10:48.542" endtime="20170518 02:10:48.542"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:10:48.543" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:10:48.543" endtime="20170518 02:10:48.543"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:10:48.887" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:10:48.544" endtime="20170518 02:10:48.888"></status>
</kw>
<msg timestamp="20170518 02:10:48.888" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:10:48.888" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:48.543" endtime="20170518 02:10:48.888"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:10:48.888" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:48.888" endtime="20170518 02:10:48.888"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:48.889" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:48.889" endtime="20170518 02:10:48.889"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:48.540" endtime="20170518 02:10:48.889"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:48.539" endtime="20170518 02:10:48.889"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:48.538" endtime="20170518 02:10:48.890"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:10:48.890" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:10:48.890" endtime="20170518 02:10:48.890"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:48.892" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:48.892" endtime="20170518 02:10:48.892"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:48.893" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:48.893" endtime="20170518 02:10:48.893"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:48.892" endtime="20170518 02:10:48.893"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:48.891" endtime="20170518 02:10:48.894"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:48.890" endtime="20170518 02:10:48.894"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:10:48.965" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:10:48.965" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:48.894" endtime="20170518 02:10:48.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:48.967" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:48.966" endtime="20170518 02:10:48.967"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:48.968" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:48.968" endtime="20170518 02:10:48.968"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:48.967" endtime="20170518 02:10:48.968"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:48.966" endtime="20170518 02:10:48.968"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:48.965" endtime="20170518 02:10:48.968"></status>
</kw>
<msg timestamp="20170518 02:10:48.969" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:48.538" endtime="20170518 02:10:48.969"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:48.969" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:48.969" endtime="20170518 02:10:48.969"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:10:48.970" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:10:48.970" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:10:48.970" level="INFO">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:10:48.970" endtime="20170518 02:10:48.970"></status>
</kw>
<msg timestamp="20170518 02:10:48.970" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:10:48.537" endtime="20170518 02:10:48.970"></status>
</kw>
<msg timestamp="20170518 02:10:48.971" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:10:48.537" endtime="20170518 02:10:48.971"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:10:48.971" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:10:48.971" endtime="20170518 02:10:48.971"></status>
</kw>
<status status="FAIL" starttime="20170518 02:10:48.536" endtime="20170518 02:10:48.971"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:10:58.976" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:10:58.976" endtime="20170518 02:10:58.976"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:10:58.977" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:10:58.977" endtime="20170518 02:10:58.977"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:10:58.978" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:10:58.977" endtime="20170518 02:10:58.978"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:10:58.978" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:10:58.978" endtime="20170518 02:10:58.978"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:10:59.244" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:10:58.979" endtime="20170518 02:10:59.244"></status>
</kw>
<msg timestamp="20170518 02:10:59.244" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:10:59.244" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:58.979" endtime="20170518 02:10:59.244"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:10:59.245" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:59.245" endtime="20170518 02:10:59.245"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:59.246" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:59.245" endtime="20170518 02:10:59.246"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:58.975" endtime="20170518 02:10:59.246"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:58.975" endtime="20170518 02:10:59.246"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:58.974" endtime="20170518 02:10:59.246"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:10:59.247" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:10:59.247" endtime="20170518 02:10:59.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:59.250" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:59.249" endtime="20170518 02:10:59.250"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:59.251" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:10:59.251" endtime="20170518 02:10:59.251"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:59.250" endtime="20170518 02:10:59.251"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:59.248" endtime="20170518 02:10:59.251"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:59.247" endtime="20170518 02:10:59.252"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:10:59.318" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:10:59.319" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:59.252" endtime="20170518 02:10:59.319"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:10:59.320" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:59.320" endtime="20170518 02:10:59.320"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:10:59.321" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:10:59.321" endtime="20170518 02:10:59.321"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:59.321" endtime="20170518 02:10:59.321"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:59.319" endtime="20170518 02:10:59.322"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:59.319" endtime="20170518 02:10:59.322"></status>
</kw>
<msg timestamp="20170518 02:10:59.322" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:10:58.974" endtime="20170518 02:10:59.322"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:10:59.322" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:10:59.322" endtime="20170518 02:10:59.323"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:10:59.323" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:10:59.323" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:10:59.323" level="INFO">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:10:59.323" endtime="20170518 02:10:59.323"></status>
</kw>
<msg timestamp="20170518 02:10:59.323" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:10:58.973" endtime="20170518 02:10:59.324"></status>
</kw>
<msg timestamp="20170518 02:10:59.324" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:10:58.973" endtime="20170518 02:10:59.324"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:10:59.324" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:10:59.324" endtime="20170518 02:10:59.324"></status>
</kw>
<status status="FAIL" starttime="20170518 02:10:58.972" endtime="20170518 02:10:59.325"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:11:09.330" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:11:09.329" endtime="20170518 02:11:09.330"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:11:09.331" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:11:09.331" endtime="20170518 02:11:09.331"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:11:09.332" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:11:09.331" endtime="20170518 02:11:09.332"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:11:09.333" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:11:09.332" endtime="20170518 02:11:09.333"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:11:09.512" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:11:09.334" endtime="20170518 02:11:09.512"></status>
</kw>
<msg timestamp="20170518 02:11:09.513" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:11:09.513" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:11:09.333" endtime="20170518 02:11:09.513"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:11:09.513" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:11:09.513" endtime="20170518 02:11:09.513"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:11:09.514" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:11:09.514" endtime="20170518 02:11:09.514"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:09.329" endtime="20170518 02:11:09.514"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:09.328" endtime="20170518 02:11:09.514"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:09.327" endtime="20170518 02:11:09.514"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:11:09.515" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:11:09.515" endtime="20170518 02:11:09.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:11:09.517" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:11:09.516" endtime="20170518 02:11:09.517"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:11:09.518" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:11:09.518" endtime="20170518 02:11:09.518"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:09.517" endtime="20170518 02:11:09.518"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:09.516" endtime="20170518 02:11:09.518"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:09.515" endtime="20170518 02:11:09.518"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:11:09.596" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:11:09.596" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:11:09.518" endtime="20170518 02:11:09.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:11:09.598" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:11:09.598" endtime="20170518 02:11:09.598"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:11:09.599" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:11:09.599" endtime="20170518 02:11:09.599"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:09.598" endtime="20170518 02:11:09.600"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:09.597" endtime="20170518 02:11:09.600"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:09.597" endtime="20170518 02:11:09.600"></status>
</kw>
<msg timestamp="20170518 02:11:09.600" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:11:09.327" endtime="20170518 02:11:09.600"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:11:09.601" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:11:09.600" endtime="20170518 02:11:09.601"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:11:09.601" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:11:09.601" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:11:09.601" level="INFO">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:11:09.601" endtime="20170518 02:11:09.602"></status>
</kw>
<msg timestamp="20170518 02:11:09.602" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:11:09.326" endtime="20170518 02:11:09.602"></status>
</kw>
<msg timestamp="20170518 02:11:09.602" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:11:09.326" endtime="20170518 02:11:09.602"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:11:09.603" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:11:09.602" endtime="20170518 02:11:09.603"></status>
</kw>
<status status="FAIL" starttime="20170518 02:11:09.325" endtime="20170518 02:11:09.603"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:11:19.607" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:11:19.607" endtime="20170518 02:11:19.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:11:19.608" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:11:19.608" endtime="20170518 02:11:19.608"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:11:19.609" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:11:19.609" endtime="20170518 02:11:19.609"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:11:19.610" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:11:19.609" endtime="20170518 02:11:19.610"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:11:19.789" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:11:19.610" endtime="20170518 02:11:19.789"></status>
</kw>
<msg timestamp="20170518 02:11:19.789" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:11:19.789" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:11:19.610" endtime="20170518 02:11:19.789"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:11:19.790" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:11:19.790" endtime="20170518 02:11:19.790"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:11:19.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:11:19.790" endtime="20170518 02:11:19.793"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:19.607" endtime="20170518 02:11:19.793"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:19.606" endtime="20170518 02:11:19.793"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:19.606" endtime="20170518 02:11:19.793"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:11:19.793" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:11:19.793" endtime="20170518 02:11:19.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:11:19.796" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:11:19.795" endtime="20170518 02:11:19.796"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:11:19.797" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:11:19.797" endtime="20170518 02:11:19.798"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:19.796" endtime="20170518 02:11:19.798"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:19.794" endtime="20170518 02:11:19.798"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:19.794" endtime="20170518 02:11:19.798"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:11:19.864" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:11:19.864" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:11:19.798" endtime="20170518 02:11:19.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:11:19.865" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:11:19.865" endtime="20170518 02:11:19.865"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:11:19.866" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:11:19.866" endtime="20170518 02:11:19.866"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:19.866" endtime="20170518 02:11:19.866"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:19.864" endtime="20170518 02:11:19.867"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:19.864" endtime="20170518 02:11:19.867"></status>
</kw>
<msg timestamp="20170518 02:11:19.867" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:11:19.605" endtime="20170518 02:11:19.867"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:11:19.867" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:11:19.867" endtime="20170518 02:11:19.867"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:11:19.868" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:11:19.868" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:11:19.868" level="INFO">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:11:19.868" endtime="20170518 02:11:19.868"></status>
</kw>
<msg timestamp="20170518 02:11:19.868" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:11:19.604" endtime="20170518 02:11:19.868"></status>
</kw>
<msg timestamp="20170518 02:11:19.869" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:11:19.604" endtime="20170518 02:11:19.869"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:11:19.869" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:11:19.869" endtime="20170518 02:11:19.869"></status>
</kw>
<status status="FAIL" starttime="20170518 02:11:19.603" endtime="20170518 02:11:19.870"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:11:29.875" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:11:29.875" endtime="20170518 02:11:29.875"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:11:29.876" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:11:29.876" endtime="20170518 02:11:29.876"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:11:29.876" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:11:29.876" endtime="20170518 02:11:29.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:11:29.877" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:11:29.877" endtime="20170518 02:11:29.877"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:11:30.053" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:11:29.878" endtime="20170518 02:11:30.053"></status>
</kw>
<msg timestamp="20170518 02:11:30.053" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:11:30.053" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:11:29.877" endtime="20170518 02:11:30.053"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:11:30.054" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:11:30.054" endtime="20170518 02:11:30.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:11:30.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:11:30.054" endtime="20170518 02:11:30.055"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:29.874" endtime="20170518 02:11:30.055"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:29.873" endtime="20170518 02:11:30.055"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:29.872" endtime="20170518 02:11:30.055"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:11:30.056" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:11:30.055" endtime="20170518 02:11:30.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:11:30.058" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:11:30.057" endtime="20170518 02:11:30.058"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:11:30.058" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:11:30.058" endtime="20170518 02:11:30.059"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:30.058" endtime="20170518 02:11:30.059"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:30.056" endtime="20170518 02:11:30.059"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:30.056" endtime="20170518 02:11:30.059"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:11:30.124" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:11:30.125" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:11:30.059" endtime="20170518 02:11:30.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:11:30.126" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:11:30.126" endtime="20170518 02:11:30.126"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:11:30.127" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:11:30.127" endtime="20170518 02:11:30.128"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:30.127" endtime="20170518 02:11:30.128"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:30.125" endtime="20170518 02:11:30.128"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:30.125" endtime="20170518 02:11:30.128"></status>
</kw>
<msg timestamp="20170518 02:11:30.128" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:11:29.872" endtime="20170518 02:11:30.128"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:11:30.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:11:30.128" endtime="20170518 02:11:30.129"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:11:30.129" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:11:30.129" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:11:30.130" level="INFO">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:11:30.129" endtime="20170518 02:11:30.130"></status>
</kw>
<msg timestamp="20170518 02:11:30.130" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:11:29.871" endtime="20170518 02:11:30.130"></status>
</kw>
<msg timestamp="20170518 02:11:30.130" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:11:29.871" endtime="20170518 02:11:30.130"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:11:30.131" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:11:30.130" endtime="20170518 02:11:30.131"></status>
</kw>
<status status="FAIL" starttime="20170518 02:11:29.870" endtime="20170518 02:11:30.131"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:11:40.136" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:11:40.135" endtime="20170518 02:11:40.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:11:40.137" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:11:40.136" endtime="20170518 02:11:40.137"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:11:40.137" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:11:40.137" endtime="20170518 02:11:40.137"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:11:40.138" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:11:40.138" endtime="20170518 02:11:40.138"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:11:40.318" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:11:40.139" endtime="20170518 02:11:40.319"></status>
</kw>
<msg timestamp="20170518 02:11:40.319" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:11:40.319" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:11:40.138" endtime="20170518 02:11:40.319"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:11:40.319" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:11:40.319" endtime="20170518 02:11:40.319"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:11:40.321" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:11:40.320" endtime="20170518 02:11:40.321"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:40.135" endtime="20170518 02:11:40.321"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:40.134" endtime="20170518 02:11:40.321"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:40.134" endtime="20170518 02:11:40.321"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:11:40.322" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:11:40.321" endtime="20170518 02:11:40.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:11:40.324" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:11:40.323" endtime="20170518 02:11:40.324"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:11:40.324" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:11:40.324" endtime="20170518 02:11:40.325"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:40.324" endtime="20170518 02:11:40.325"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:40.322" endtime="20170518 02:11:40.325"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:40.322" endtime="20170518 02:11:40.325"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:11:40.391" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:11:40.391" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:11:40.325" endtime="20170518 02:11:40.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:11:40.393" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:11:40.392" endtime="20170518 02:11:40.393"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:11:40.393" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:11:40.393" endtime="20170518 02:11:40.394"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:40.393" endtime="20170518 02:11:40.394"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:40.392" endtime="20170518 02:11:40.394"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:40.391" endtime="20170518 02:11:40.394"></status>
</kw>
<msg timestamp="20170518 02:11:40.394" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:11:40.133" endtime="20170518 02:11:40.394"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:11:40.395" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:11:40.394" endtime="20170518 02:11:40.395"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:11:40.395" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:11:40.395" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:11:40.395" level="INFO">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:11:40.395" endtime="20170518 02:11:40.395"></status>
</kw>
<msg timestamp="20170518 02:11:40.396" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:11:40.133" endtime="20170518 02:11:40.396"></status>
</kw>
<msg timestamp="20170518 02:11:40.396" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:11:40.132" endtime="20170518 02:11:40.396"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:11:40.397" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:11:40.396" endtime="20170518 02:11:40.397"></status>
</kw>
<status status="FAIL" starttime="20170518 02:11:40.132" endtime="20170518 02:11:40.397"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:11:50.402" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:11:50.402" endtime="20170518 02:11:50.403"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:11:50.403" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:11:50.403" endtime="20170518 02:11:50.403"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:11:50.404" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:11:50.404" endtime="20170518 02:11:50.404"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:11:50.405" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:11:50.404" endtime="20170518 02:11:50.405"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:11:50.597" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:11:50.405" endtime="20170518 02:11:50.597"></status>
</kw>
<msg timestamp="20170518 02:11:50.597" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:11:50.597" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:11:50.405" endtime="20170518 02:11:50.598"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:11:50.598" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:11:50.598" endtime="20170518 02:11:50.598"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:11:50.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:11:50.598" endtime="20170518 02:11:50.599"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:50.401" endtime="20170518 02:11:50.599"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:50.401" endtime="20170518 02:11:50.599"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:50.400" endtime="20170518 02:11:50.599"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:11:50.600" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:11:50.599" endtime="20170518 02:11:50.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:11:50.602" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:11:50.601" endtime="20170518 02:11:50.602"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:11:50.603" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:11:50.603" endtime="20170518 02:11:50.603"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:50.602" endtime="20170518 02:11:50.603"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:50.601" endtime="20170518 02:11:50.603"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:50.600" endtime="20170518 02:11:50.603"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:11:50.668" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:11:50.668" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:11:50.603" endtime="20170518 02:11:50.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:11:50.670" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:11:50.670" endtime="20170518 02:11:50.670"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:11:50.671" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:11:50.671" endtime="20170518 02:11:50.672"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:50.671" endtime="20170518 02:11:50.672"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:50.669" endtime="20170518 02:11:50.672"></status>
</kw>
<status status="PASS" starttime="20170518 02:11:50.669" endtime="20170518 02:11:50.672"></status>
</kw>
<msg timestamp="20170518 02:11:50.672" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:11:50.399" endtime="20170518 02:11:50.672"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:11:50.673" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:11:50.672" endtime="20170518 02:11:50.673"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:11:50.673" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:11:50.673" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:11:50.674" level="INFO">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:11:50.673" endtime="20170518 02:11:50.674"></status>
</kw>
<msg timestamp="20170518 02:11:50.674" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:11:50.398" endtime="20170518 02:11:50.674"></status>
</kw>
<msg timestamp="20170518 02:11:50.674" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:11:50.398" endtime="20170518 02:11:50.674"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:11:50.675" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:11:50.674" endtime="20170518 02:11:50.675"></status>
</kw>
<status status="FAIL" starttime="20170518 02:11:50.397" endtime="20170518 02:11:50.675"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:12:00.679" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:12:00.679" endtime="20170518 02:12:00.680"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:12:00.680" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:12:00.680" endtime="20170518 02:12:00.680"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:12:00.681" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:12:00.681" endtime="20170518 02:12:00.681"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:12:00.682" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:12:00.681" endtime="20170518 02:12:00.682"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:12:00.928" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:12:00.683" endtime="20170518 02:12:00.928"></status>
</kw>
<msg timestamp="20170518 02:12:00.928" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:12:00.928" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:00.682" endtime="20170518 02:12:00.928"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:12:00.929" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:00.928" endtime="20170518 02:12:00.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:00.930" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:00.929" endtime="20170518 02:12:00.930"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:00.679" endtime="20170518 02:12:00.930"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:00.678" endtime="20170518 02:12:00.930"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:00.678" endtime="20170518 02:12:00.930"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:12:00.931" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:12:00.930" endtime="20170518 02:12:00.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:00.933" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:00.932" endtime="20170518 02:12:00.933"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:00.935" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:00.934" endtime="20170518 02:12:00.935"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:00.934" endtime="20170518 02:12:00.935"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:00.932" endtime="20170518 02:12:00.935"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:00.931" endtime="20170518 02:12:00.935"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:12:01.027" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:12:01.027" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:00.935" endtime="20170518 02:12:01.027"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:01.028" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:01.028" endtime="20170518 02:12:01.028"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:01.029" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:01.029" endtime="20170518 02:12:01.029"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.029" endtime="20170518 02:12:01.030"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.027" endtime="20170518 02:12:01.030"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.027" endtime="20170518 02:12:01.030"></status>
</kw>
<msg timestamp="20170518 02:12:01.030" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:00.677" endtime="20170518 02:12:01.030"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:01.031" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:01.030" endtime="20170518 02:12:01.031"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:12:01.031" level="INFO">To JSON using : content={
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:12:01.031" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:12:01.031" level="INFO">${content} = {u'status': u'ok', u'data': u'FW Progress, Starting OS', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:12:01.031" endtime="20170518 02:12:01.031"></status>
</kw>
<msg timestamp="20170518 02:12:01.032" level="INFO">${state} = FW Progress, Starting OS</msg>
<status status="PASS" starttime="20170518 02:12:00.676" endtime="20170518 02:12:01.032"></status>
</kw>
<msg timestamp="20170518 02:12:01.032" level="INFO">${boot_progress} = FW Progress, Starting OS</msg>
<status status="PASS" starttime="20170518 02:12:00.676" endtime="20170518 02:12:01.032"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<status status="PASS" starttime="20170518 02:12:01.032" endtime="20170518 02:12:01.033"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:00.675" endtime="20170518 02:12:01.033"></status>
</kw>
<status status="PASS" starttime="20170518 02:10:17.557" endtime="20170518 02:12:01.033"></status>
</kw>
<kw name="Flush REST Sessions" library="utils">
<doc>Removes all the active session objects</doc>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170518 02:12:01.033" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170518 02:12:01.033" endtime="20170518 02:12:01.035"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.033" endtime="20170518 02:12:01.035"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.381" endtime="20170518 02:12:01.036"></status>
</kw>
<msg timestamp="20170518 02:12:01.036" level="INFO">Repeating keyword, round 2/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170518 02:12:01.037" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20170518 02:12:01.037" endtime="20170518 02:12:01.038"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:12:01.039" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170518 02:12:01.039" endtime="20170518 02:12:01.039"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:12:01.043" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:12:01.043" endtime="20170518 02:12:01.044"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:12:01.044" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:12:01.044" endtime="20170518 02:12:01.044"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:12:01.045" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:12:01.045" endtime="20170518 02:12:01.045"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:12:01.046" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:12:01.046" endtime="20170518 02:12:01.046"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:12:01.312" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:12:01.047" endtime="20170518 02:12:01.312"></status>
</kw>
<msg timestamp="20170518 02:12:01.312" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:12:01.312" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:01.047" endtime="20170518 02:12:01.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:12:01.313" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:01.313" endtime="20170518 02:12:01.313"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:01.314" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:01.313" endtime="20170518 02:12:01.314"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.042" endtime="20170518 02:12:01.314"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.041" endtime="20170518 02:12:01.314"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.040" endtime="20170518 02:12:01.314"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:12:01.315" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170518 02:12:01.314" endtime="20170518 02:12:01.315"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:12:01.315" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:12:01.315" endtime="20170518 02:12:01.315"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:12:01.315" endtime="20170518 02:12:01.316"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:01.317" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status status="PASS" starttime="20170518 02:12:01.316" endtime="20170518 02:12:01.317"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:01.318" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170518 02:12:01.318" endtime="20170518 02:12:01.318"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.317" endtime="20170518 02:12:01.318"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.316" endtime="20170518 02:12:01.319"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:12:01.504" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170518 02:12:01.504" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:01.319" endtime="20170518 02:12:01.504"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:01.505" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:01.505" endtime="20170518 02:12:01.506"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:01.506" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:01.506" endtime="20170518 02:12:01.506"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.506" endtime="20170518 02:12:01.507"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.504" endtime="20170518 02:12:01.507"></status>
</kw>
<msg timestamp="20170518 02:12:01.507" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:01.040" endtime="20170518 02:12:01.507"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:01.508" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:01.507" endtime="20170518 02:12:01.508"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170518 02:12:01.508" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:12:01.508" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:12:01.508" level="INFO">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:12:01.508" endtime="20170518 02:12:01.508"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.038" endtime="20170518 02:12:01.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170518 02:12:01.509" endtime="20170518 02:12:01.509"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:12:01.514" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:12:01.513" endtime="20170518 02:12:01.514"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:12:01.515" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:12:01.514" endtime="20170518 02:12:01.515"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:12:01.515" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:12:01.515" endtime="20170518 02:12:01.515"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:12:01.516" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:12:01.515" endtime="20170518 02:12:01.516"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:12:02.557" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:12:01.517" endtime="20170518 02:12:02.557"></status>
</kw>
<msg timestamp="20170518 02:12:02.557" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:12:02.557" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:01.516" endtime="20170518 02:12:02.557"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:12:02.558" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:02.558" endtime="20170518 02:12:02.558"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:02.559" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:02.558" endtime="20170518 02:12:02.559"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.513" endtime="20170518 02:12:02.559"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.512" endtime="20170518 02:12:02.559"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.512" endtime="20170518 02:12:02.559"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:12:02.560" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170518 02:12:02.559" endtime="20170518 02:12:02.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:02.562" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:02.561" endtime="20170518 02:12:02.562"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:02.563" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:02.562" endtime="20170518 02:12:02.563"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:02.562" endtime="20170518 02:12:02.563"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:02.560" endtime="20170518 02:12:02.563"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:02.560" endtime="20170518 02:12:02.563"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:12:03.453" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170518 02:12:03.454" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:02.563" endtime="20170518 02:12:03.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:03.457" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:03.456" endtime="20170518 02:12:03.457"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:03.458" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:03.458" endtime="20170518 02:12:03.458"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:03.457" endtime="20170518 02:12:03.459"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:03.455" endtime="20170518 02:12:03.459"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:03.455" endtime="20170518 02:12:03.459"></status>
</kw>
<msg timestamp="20170518 02:12:03.459" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:01.511" endtime="20170518 02:12:03.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:03.460" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:03.459" endtime="20170518 02:12:03.460"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:12:03.460" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:12:03.460" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:12:03.460" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:12:03.460" endtime="20170518 02:12:03.460"></status>
</kw>
<msg timestamp="20170518 02:12:03.461" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170518 02:12:01.510" endtime="20170518 02:12:03.461"></status>
</kw>
<msg timestamp="20170518 02:12:03.461" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170518 02:12:01.510" endtime="20170518 02:12:03.461"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170518 02:12:03.462" level="FAIL">Off != Running</msg>
<status status="FAIL" starttime="20170518 02:12:03.461" endtime="20170518 02:12:03.462"></status>
</kw>
<status status="FAIL" starttime="20170518 02:12:01.510" endtime="20170518 02:12:03.462"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:12:13.467" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:12:13.466" endtime="20170518 02:12:13.467"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:12:13.467" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:12:13.467" endtime="20170518 02:12:13.468"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:12:13.468" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:12:13.468" endtime="20170518 02:12:13.468"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:12:13.469" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:12:13.468" endtime="20170518 02:12:13.469"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:12:13.651" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:12:13.469" endtime="20170518 02:12:13.651"></status>
</kw>
<msg timestamp="20170518 02:12:13.651" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:12:13.651" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:13.469" endtime="20170518 02:12:13.651"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:12:13.652" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:13.651" endtime="20170518 02:12:13.652"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:13.652" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:13.652" endtime="20170518 02:12:13.652"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:13.466" endtime="20170518 02:12:13.653"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:13.465" endtime="20170518 02:12:13.653"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:13.465" endtime="20170518 02:12:13.653"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:12:13.653" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170518 02:12:13.653" endtime="20170518 02:12:13.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:13.655" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:13.655" endtime="20170518 02:12:13.655"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:13.656" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:13.656" endtime="20170518 02:12:13.656"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:13.656" endtime="20170518 02:12:13.657"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:13.654" endtime="20170518 02:12:13.657"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:13.654" endtime="20170518 02:12:13.657"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:12:13.728" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170518 02:12:13.728" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:13.657" endtime="20170518 02:12:13.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:13.730" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:13.729" endtime="20170518 02:12:13.730"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:13.731" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:13.731" endtime="20170518 02:12:13.731"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:13.730" endtime="20170518 02:12:13.731"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:13.729" endtime="20170518 02:12:13.731"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:13.729" endtime="20170518 02:12:13.731"></status>
</kw>
<msg timestamp="20170518 02:12:13.732" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:13.464" endtime="20170518 02:12:13.732"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:13.732" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:13.732" endtime="20170518 02:12:13.732"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:12:13.733" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:12:13.733" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:12:13.733" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:12:13.732" endtime="20170518 02:12:13.733"></status>
</kw>
<msg timestamp="20170518 02:12:13.733" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170518 02:12:13.463" endtime="20170518 02:12:13.733"></status>
</kw>
<msg timestamp="20170518 02:12:13.733" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20170518 02:12:13.463" endtime="20170518 02:12:13.734"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:12:13.734" endtime="20170518 02:12:13.734"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:13.462" endtime="20170518 02:12:13.734"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.509" endtime="20170518 02:12:13.734"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.036" endtime="20170518 02:12:13.734"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw name="Is OS Off" library="utils">
<doc>Check if boot progress is "Off".</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:12:13.739" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:12:13.738" endtime="20170518 02:12:13.739"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:12:13.740" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:12:13.740" endtime="20170518 02:12:13.740"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:12:13.741" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:12:13.740" endtime="20170518 02:12:13.741"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:12:13.741" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:12:13.741" endtime="20170518 02:12:13.741"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:12:14.009" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:12:13.742" endtime="20170518 02:12:14.009"></status>
</kw>
<msg timestamp="20170518 02:12:14.009" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:12:14.009" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:13.741" endtime="20170518 02:12:14.009"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:12:14.010" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:14.009" endtime="20170518 02:12:14.010"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:14.010" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:14.010" endtime="20170518 02:12:14.010"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:13.738" endtime="20170518 02:12:14.010"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:13.737" endtime="20170518 02:12:14.011"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:13.737" endtime="20170518 02:12:14.011"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:12:14.011" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:12:14.011" endtime="20170518 02:12:14.011"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:14.013" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:14.013" endtime="20170518 02:12:14.013"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:14.014" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:14.014" endtime="20170518 02:12:14.014"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.013" endtime="20170518 02:12:14.014"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.012" endtime="20170518 02:12:14.015"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.012" endtime="20170518 02:12:14.015"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:12:14.082" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:12:14.082" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:14.015" endtime="20170518 02:12:14.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:14.084" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:14.083" endtime="20170518 02:12:14.084"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:14.085" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:14.084" endtime="20170518 02:12:14.085"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.084" endtime="20170518 02:12:14.085"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.083" endtime="20170518 02:12:14.085"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.082" endtime="20170518 02:12:14.085"></status>
</kw>
<msg timestamp="20170518 02:12:14.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:13.736" endtime="20170518 02:12:14.085"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:14.086" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:14.086" endtime="20170518 02:12:14.086"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:12:14.087" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:12:14.087" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:12:14.087" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:12:14.086" endtime="20170518 02:12:14.087"></status>
</kw>
<msg timestamp="20170518 02:12:14.087" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170518 02:12:13.736" endtime="20170518 02:12:14.087"></status>
</kw>
<msg timestamp="20170518 02:12:14.087" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170518 02:12:13.735" endtime="20170518 02:12:14.087"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status status="PASS" starttime="20170518 02:12:14.088" endtime="20170518 02:12:14.088"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:13.735" endtime="20170518 02:12:14.088"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:13.735" endtime="20170518 02:12:14.088"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170518 02:12:14.089" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" starttime="20170518 02:12:14.089" endtime="20170518 02:12:14.089"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:12:14.092" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170518 02:12:14.092" endtime="20170518 02:12:14.093"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:12:14.095" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:12:14.095" endtime="20170518 02:12:14.096"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:12:14.096" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:12:14.096" endtime="20170518 02:12:14.096"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:12:14.097" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:12:14.097" endtime="20170518 02:12:14.097"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:12:14.098" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:12:14.098" endtime="20170518 02:12:14.098"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:12:14.281" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:12:14.099" endtime="20170518 02:12:14.281"></status>
</kw>
<msg timestamp="20170518 02:12:14.281" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:12:14.281" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:14.098" endtime="20170518 02:12:14.281"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:12:14.282" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:14.282" endtime="20170518 02:12:14.282"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:14.283" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:14.282" endtime="20170518 02:12:14.283"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.095" endtime="20170518 02:12:14.283"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.094" endtime="20170518 02:12:14.283"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.094" endtime="20170518 02:12:14.283"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:12:14.284" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170518 02:12:14.283" endtime="20170518 02:12:14.284"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:12:14.284" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:12:14.284" endtime="20170518 02:12:14.284"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:12:14.285" endtime="20170518 02:12:14.285"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:14.286" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status status="PASS" starttime="20170518 02:12:14.286" endtime="20170518 02:12:14.286"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:14.313" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170518 02:12:14.313" endtime="20170518 02:12:14.313"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.286" endtime="20170518 02:12:14.314"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.285" endtime="20170518 02:12:14.314"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:12:14.773" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170518 02:12:14.774" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:14.314" endtime="20170518 02:12:14.774"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:14.775" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:14.774" endtime="20170518 02:12:14.775"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:14.776" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:14.776" endtime="20170518 02:12:14.776"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.775" endtime="20170518 02:12:14.776"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.774" endtime="20170518 02:12:14.776"></status>
</kw>
<msg timestamp="20170518 02:12:14.776" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:14.093" endtime="20170518 02:12:14.776"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:14.777" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:14.777" endtime="20170518 02:12:14.777"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170518 02:12:14.777" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:12:14.778" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:12:14.778" level="INFO">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:12:14.777" endtime="20170518 02:12:14.778"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.089" endtime="20170518 02:12:14.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170518 02:12:14.778" endtime="20170518 02:12:14.778"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:12:14.783" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:12:14.782" endtime="20170518 02:12:14.784"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:12:14.784" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:12:14.784" endtime="20170518 02:12:14.784"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:12:14.785" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:12:14.784" endtime="20170518 02:12:14.785"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:12:14.785" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:12:14.785" endtime="20170518 02:12:14.785"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:12:15.427" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:12:14.786" endtime="20170518 02:12:15.427"></status>
</kw>
<msg timestamp="20170518 02:12:15.428" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:12:15.428" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:14.786" endtime="20170518 02:12:15.428"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:12:15.428" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:15.428" endtime="20170518 02:12:15.428"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:15.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:15.429" endtime="20170518 02:12:15.429"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.782" endtime="20170518 02:12:15.429"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.781" endtime="20170518 02:12:15.429"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.781" endtime="20170518 02:12:15.429"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:12:15.430" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170518 02:12:15.430" endtime="20170518 02:12:15.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:15.432" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:15.431" endtime="20170518 02:12:15.432"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:15.433" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:15.433" endtime="20170518 02:12:15.433"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:15.432" endtime="20170518 02:12:15.433"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:15.431" endtime="20170518 02:12:15.433"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:15.430" endtime="20170518 02:12:15.433"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:12:18.922" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170518 02:12:18.922" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:15.434" endtime="20170518 02:12:18.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:18.924" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:18.923" endtime="20170518 02:12:18.924"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:18.925" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:18.925" endtime="20170518 02:12:18.925"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:18.924" endtime="20170518 02:12:18.925"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:18.923" endtime="20170518 02:12:18.926"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:18.922" endtime="20170518 02:12:18.926"></status>
</kw>
<msg timestamp="20170518 02:12:18.926" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:14.780" endtime="20170518 02:12:18.926"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:18.926" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:18.926" endtime="20170518 02:12:18.927"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:12:18.927" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:12:18.927" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:12:18.927" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:12:18.927" endtime="20170518 02:12:18.927"></status>
</kw>
<msg timestamp="20170518 02:12:18.927" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170518 02:12:14.780" endtime="20170518 02:12:18.928"></status>
</kw>
<msg timestamp="20170518 02:12:18.928" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20170518 02:12:14.779" endtime="20170518 02:12:18.928"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170518 02:12:18.929" level="FAIL">Running != Off</msg>
<status status="FAIL" starttime="20170518 02:12:18.928" endtime="20170518 02:12:18.929"></status>
</kw>
<status status="FAIL" starttime="20170518 02:12:14.779" endtime="20170518 02:12:18.929"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:12:28.933" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:12:28.933" endtime="20170518 02:12:28.933"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:12:28.934" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:12:28.934" endtime="20170518 02:12:28.934"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:12:28.935" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:12:28.934" endtime="20170518 02:12:28.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:12:28.935" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:12:28.935" endtime="20170518 02:12:28.935"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:12:29.119" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:12:28.936" endtime="20170518 02:12:29.119"></status>
</kw>
<msg timestamp="20170518 02:12:29.119" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:12:29.119" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:28.936" endtime="20170518 02:12:29.119"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:12:29.120" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:29.120" endtime="20170518 02:12:29.120"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:29.121" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:29.120" endtime="20170518 02:12:29.121"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:28.932" endtime="20170518 02:12:29.121"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:28.932" endtime="20170518 02:12:29.121"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:28.931" endtime="20170518 02:12:29.121"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:12:29.122" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170518 02:12:29.121" endtime="20170518 02:12:29.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:29.124" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:29.123" endtime="20170518 02:12:29.124"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:29.125" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:29.124" endtime="20170518 02:12:29.125"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:29.124" endtime="20170518 02:12:29.125"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:29.122" endtime="20170518 02:12:29.125"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:29.122" endtime="20170518 02:12:29.125"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:12:29.188" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170518 02:12:29.188" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:29.125" endtime="20170518 02:12:29.188"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:29.190" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:29.189" endtime="20170518 02:12:29.190"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:29.190" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:29.190" endtime="20170518 02:12:29.191"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:29.190" endtime="20170518 02:12:29.191"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:29.189" endtime="20170518 02:12:29.191"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:29.188" endtime="20170518 02:12:29.191"></status>
</kw>
<msg timestamp="20170518 02:12:29.191" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:28.931" endtime="20170518 02:12:29.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:29.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:29.191" endtime="20170518 02:12:29.192"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:12:29.192" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:12:29.192" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:12:29.192" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:12:29.192" endtime="20170518 02:12:29.193"></status>
</kw>
<msg timestamp="20170518 02:12:29.193" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170518 02:12:28.930" endtime="20170518 02:12:29.193"></status>
</kw>
<msg timestamp="20170518 02:12:29.193" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170518 02:12:28.930" endtime="20170518 02:12:29.193"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:12:29.193" endtime="20170518 02:12:29.194"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:28.929" endtime="20170518 02:12:29.194"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.779" endtime="20170518 02:12:29.194"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:14.088" endtime="20170518 02:12:29.194"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:12:29.199" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:12:29.199" endtime="20170518 02:12:29.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:12:29.200" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:12:29.200" endtime="20170518 02:12:29.200"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:12:29.201" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:12:29.201" endtime="20170518 02:12:29.201"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:12:29.202" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:12:29.202" endtime="20170518 02:12:29.202"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:12:29.397" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:12:29.203" endtime="20170518 02:12:29.397"></status>
</kw>
<msg timestamp="20170518 02:12:29.398" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:12:29.398" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:29.203" endtime="20170518 02:12:29.398"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:12:29.398" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:29.398" endtime="20170518 02:12:29.398"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:29.399" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:29.399" endtime="20170518 02:12:29.399"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:29.197" endtime="20170518 02:12:29.399"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:29.197" endtime="20170518 02:12:29.399"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:29.196" endtime="20170518 02:12:29.399"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:12:29.400" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:12:29.399" endtime="20170518 02:12:29.400"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:29.402" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:29.401" endtime="20170518 02:12:29.402"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:29.403" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:29.403" endtime="20170518 02:12:29.403"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:29.402" endtime="20170518 02:12:29.403"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:29.401" endtime="20170518 02:12:29.403"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:29.400" endtime="20170518 02:12:29.403"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:12:29.470" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:12:29.470" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:29.403" endtime="20170518 02:12:29.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:29.472" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:29.472" endtime="20170518 02:12:29.472"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:29.473" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:29.473" endtime="20170518 02:12:29.473"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:29.472" endtime="20170518 02:12:29.474"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:29.471" endtime="20170518 02:12:29.474"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:29.471" endtime="20170518 02:12:29.474"></status>
</kw>
<msg timestamp="20170518 02:12:29.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:29.196" endtime="20170518 02:12:29.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:29.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:29.474" endtime="20170518 02:12:29.475"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:12:29.475" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:12:29.475" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:12:29.475" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:12:29.475" endtime="20170518 02:12:29.475"></status>
</kw>
<msg timestamp="20170518 02:12:29.476" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170518 02:12:29.195" endtime="20170518 02:12:29.476"></status>
</kw>
<msg timestamp="20170518 02:12:29.476" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170518 02:12:29.195" endtime="20170518 02:12:29.476"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:12:29.477" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:12:29.476" endtime="20170518 02:12:29.477"></status>
</kw>
<status status="FAIL" starttime="20170518 02:12:29.195" endtime="20170518 02:12:29.477"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:12:39.482" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:12:39.481" endtime="20170518 02:12:39.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:12:39.483" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:12:39.482" endtime="20170518 02:12:39.483"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:12:39.483" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:12:39.483" endtime="20170518 02:12:39.483"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:12:39.484" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:12:39.483" endtime="20170518 02:12:39.484"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:12:39.663" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:12:39.485" endtime="20170518 02:12:39.663"></status>
</kw>
<msg timestamp="20170518 02:12:39.663" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:12:39.663" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:39.484" endtime="20170518 02:12:39.663"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:12:39.664" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:39.663" endtime="20170518 02:12:39.664"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:39.665" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:39.664" endtime="20170518 02:12:39.665"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:39.481" endtime="20170518 02:12:39.665"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:39.480" endtime="20170518 02:12:39.665"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:39.480" endtime="20170518 02:12:39.665"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:12:39.666" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:12:39.665" endtime="20170518 02:12:39.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:39.668" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:39.667" endtime="20170518 02:12:39.668"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:39.669" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:39.668" endtime="20170518 02:12:39.669"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:39.668" endtime="20170518 02:12:39.669"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:39.666" endtime="20170518 02:12:39.669"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:39.666" endtime="20170518 02:12:39.669"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:12:39.735" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:12:39.735" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:39.669" endtime="20170518 02:12:39.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:39.737" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:39.737" endtime="20170518 02:12:39.737"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:39.738" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:39.738" endtime="20170518 02:12:39.738"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:39.737" endtime="20170518 02:12:39.738"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:39.736" endtime="20170518 02:12:39.738"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:39.736" endtime="20170518 02:12:39.738"></status>
</kw>
<msg timestamp="20170518 02:12:39.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:39.479" endtime="20170518 02:12:39.739"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:39.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:39.739" endtime="20170518 02:12:39.739"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:12:39.740" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:12:39.740" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:12:39.740" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:12:39.740" endtime="20170518 02:12:39.740"></status>
</kw>
<msg timestamp="20170518 02:12:39.740" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170518 02:12:39.478" endtime="20170518 02:12:39.740"></status>
</kw>
<msg timestamp="20170518 02:12:39.741" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170518 02:12:39.478" endtime="20170518 02:12:39.741"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:12:39.741" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:12:39.741" endtime="20170518 02:12:39.741"></status>
</kw>
<status status="FAIL" starttime="20170518 02:12:39.477" endtime="20170518 02:12:39.741"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:12:49.747" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:12:49.746" endtime="20170518 02:12:49.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:12:49.747" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:12:49.747" endtime="20170518 02:12:49.747"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:12:49.748" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:12:49.748" endtime="20170518 02:12:49.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:12:49.749" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:12:49.748" endtime="20170518 02:12:49.749"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:12:49.945" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:12:49.749" endtime="20170518 02:12:49.945"></status>
</kw>
<msg timestamp="20170518 02:12:49.945" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:12:49.945" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:49.749" endtime="20170518 02:12:49.945"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:12:49.946" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:49.946" endtime="20170518 02:12:49.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:49.947" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:49.946" endtime="20170518 02:12:49.947"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:49.745" endtime="20170518 02:12:49.947"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:49.745" endtime="20170518 02:12:49.947"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:49.744" endtime="20170518 02:12:49.947"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:12:49.948" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:12:49.947" endtime="20170518 02:12:49.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:49.950" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:49.949" endtime="20170518 02:12:49.950"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:49.950" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:12:49.950" endtime="20170518 02:12:49.951"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:49.950" endtime="20170518 02:12:49.951"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:49.948" endtime="20170518 02:12:49.951"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:49.948" endtime="20170518 02:12:49.951"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:12:50.025" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:12:50.025" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:49.951" endtime="20170518 02:12:50.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:12:50.027" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:50.026" endtime="20170518 02:12:50.027"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:12:50.028" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:12:50.028" endtime="20170518 02:12:50.028"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:50.027" endtime="20170518 02:12:50.028"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:50.026" endtime="20170518 02:12:50.028"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:50.025" endtime="20170518 02:12:50.028"></status>
</kw>
<msg timestamp="20170518 02:12:50.029" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:12:49.744" endtime="20170518 02:12:50.029"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:12:50.029" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:12:50.029" endtime="20170518 02:12:50.029"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:12:50.030" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:12:50.030" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:12:50.030" level="INFO">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:12:50.030" endtime="20170518 02:12:50.030"></status>
</kw>
<msg timestamp="20170518 02:12:50.030" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170518 02:12:49.743" endtime="20170518 02:12:50.030"></status>
</kw>
<msg timestamp="20170518 02:12:50.031" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170518 02:12:49.743" endtime="20170518 02:12:50.031"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:12:50.031" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:12:50.031" endtime="20170518 02:12:50.031"></status>
</kw>
<status status="FAIL" starttime="20170518 02:12:49.742" endtime="20170518 02:12:50.032"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:13:00.036" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:13:00.036" endtime="20170518 02:13:00.037"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:13:00.037" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:13:00.037" endtime="20170518 02:13:00.037"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:13:00.038" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:13:00.038" endtime="20170518 02:13:00.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:13:00.039" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:13:00.038" endtime="20170518 02:13:00.039"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:13:00.539" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:13:00.039" endtime="20170518 02:13:00.539"></status>
</kw>
<msg timestamp="20170518 02:13:00.539" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:13:00.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:00.039" endtime="20170518 02:13:00.539"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:13:00.540" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:00.539" endtime="20170518 02:13:00.540"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:13:00.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:00.540" endtime="20170518 02:13:00.541"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:00.035" endtime="20170518 02:13:00.541"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:00.035" endtime="20170518 02:13:00.541"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:00.034" endtime="20170518 02:13:00.541"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:13:00.541" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:13:00.541" endtime="20170518 02:13:00.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:13:00.544" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:13:00.543" endtime="20170518 02:13:00.544"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:13:00.544" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:13:00.544" endtime="20170518 02:13:00.545"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:00.544" endtime="20170518 02:13:00.545"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:00.542" endtime="20170518 02:13:00.545"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:00.542" endtime="20170518 02:13:00.545"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:13:00.712" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:13:00.712" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:00.545" endtime="20170518 02:13:00.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:13:00.714" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:13:00.713" endtime="20170518 02:13:00.714"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:13:00.715" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:13:00.715" endtime="20170518 02:13:00.715"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:00.714" endtime="20170518 02:13:00.715"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:00.713" endtime="20170518 02:13:00.715"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:00.712" endtime="20170518 02:13:00.715"></status>
</kw>
<msg timestamp="20170518 02:13:00.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:00.034" endtime="20170518 02:13:00.715"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:13:00.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:00.716" endtime="20170518 02:13:00.716"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:13:00.717" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:13:00.717" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:13:00.717" level="INFO">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:13:00.716" endtime="20170518 02:13:00.717"></status>
</kw>
<msg timestamp="20170518 02:13:00.717" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:13:00.033" endtime="20170518 02:13:00.717"></status>
</kw>
<msg timestamp="20170518 02:13:00.717" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:13:00.033" endtime="20170518 02:13:00.717"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:13:00.718" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:13:00.718" endtime="20170518 02:13:00.718"></status>
</kw>
<status status="FAIL" starttime="20170518 02:13:00.032" endtime="20170518 02:13:00.718"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:13:10.723" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:13:10.723" endtime="20170518 02:13:10.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:13:10.724" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:13:10.724" endtime="20170518 02:13:10.724"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:13:10.725" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:13:10.724" endtime="20170518 02:13:10.725"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:13:10.725" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:13:10.725" endtime="20170518 02:13:10.725"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:13:10.998" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:13:10.726" endtime="20170518 02:13:10.998"></status>
</kw>
<msg timestamp="20170518 02:13:10.998" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:13:10.999" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:10.725" endtime="20170518 02:13:10.999"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:13:10.999" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:10.999" endtime="20170518 02:13:10.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:13:11.000" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:11.000" endtime="20170518 02:13:11.000"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:10.722" endtime="20170518 02:13:11.001"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:10.721" endtime="20170518 02:13:11.001"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:10.721" endtime="20170518 02:13:11.001"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:13:11.002" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:13:11.001" endtime="20170518 02:13:11.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:13:11.004" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:13:11.003" endtime="20170518 02:13:11.004"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:13:11.005" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:13:11.005" endtime="20170518 02:13:11.005"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:11.004" endtime="20170518 02:13:11.005"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:11.003" endtime="20170518 02:13:11.005"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:11.002" endtime="20170518 02:13:11.005"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:13:11.079" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:13:11.080" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:11.005" endtime="20170518 02:13:11.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:13:11.082" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:13:11.081" endtime="20170518 02:13:11.082"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:13:11.083" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:13:11.082" endtime="20170518 02:13:11.083"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:11.082" endtime="20170518 02:13:11.083"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:11.080" endtime="20170518 02:13:11.083"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:11.080" endtime="20170518 02:13:11.083"></status>
</kw>
<msg timestamp="20170518 02:13:11.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:10.720" endtime="20170518 02:13:11.083"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:13:11.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:11.084" endtime="20170518 02:13:11.084"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:13:11.084" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:13:11.085" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:13:11.085" level="INFO">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:13:11.084" endtime="20170518 02:13:11.085"></status>
</kw>
<msg timestamp="20170518 02:13:11.085" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:13:10.719" endtime="20170518 02:13:11.085"></status>
</kw>
<msg timestamp="20170518 02:13:11.085" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:13:10.719" endtime="20170518 02:13:11.085"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:13:11.086" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:13:11.085" endtime="20170518 02:13:11.086"></status>
</kw>
<status status="FAIL" starttime="20170518 02:13:10.719" endtime="20170518 02:13:11.086"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:13:21.091" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:13:21.090" endtime="20170518 02:13:21.091"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:13:21.092" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:13:21.091" endtime="20170518 02:13:21.092"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:13:21.092" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:13:21.092" endtime="20170518 02:13:21.092"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:13:21.093" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:13:21.092" endtime="20170518 02:13:21.093"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:13:21.381" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:13:21.094" endtime="20170518 02:13:21.381"></status>
</kw>
<msg timestamp="20170518 02:13:21.381" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:13:21.381" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:21.093" endtime="20170518 02:13:21.382"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:13:21.382" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:21.382" endtime="20170518 02:13:21.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:13:21.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:21.383" endtime="20170518 02:13:21.383"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:21.090" endtime="20170518 02:13:21.383"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:21.089" endtime="20170518 02:13:21.383"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:21.089" endtime="20170518 02:13:21.383"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:13:21.384" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:13:21.384" endtime="20170518 02:13:21.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:13:21.386" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:13:21.385" endtime="20170518 02:13:21.386"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:13:21.387" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:13:21.387" endtime="20170518 02:13:21.387"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:21.386" endtime="20170518 02:13:21.387"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:21.385" endtime="20170518 02:13:21.387"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:21.384" endtime="20170518 02:13:21.387"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:13:21.455" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:13:21.455" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:21.388" endtime="20170518 02:13:21.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:13:21.457" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:13:21.456" endtime="20170518 02:13:21.457"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:13:21.458" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:13:21.457" endtime="20170518 02:13:21.458"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:21.457" endtime="20170518 02:13:21.458"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:21.456" endtime="20170518 02:13:21.458"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:21.455" endtime="20170518 02:13:21.458"></status>
</kw>
<msg timestamp="20170518 02:13:21.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:21.088" endtime="20170518 02:13:21.458"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:13:21.459" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:21.459" endtime="20170518 02:13:21.459"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:13:21.459" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:13:21.460" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:13:21.460" level="INFO">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:13:21.459" endtime="20170518 02:13:21.460"></status>
</kw>
<msg timestamp="20170518 02:13:21.460" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:13:21.087" endtime="20170518 02:13:21.460"></status>
</kw>
<msg timestamp="20170518 02:13:21.460" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:13:21.087" endtime="20170518 02:13:21.460"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:13:21.461" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:13:21.460" endtime="20170518 02:13:21.461"></status>
</kw>
<status status="FAIL" starttime="20170518 02:13:21.086" endtime="20170518 02:13:21.461"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:13:31.467" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:13:31.466" endtime="20170518 02:13:31.467"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:13:31.468" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:13:31.467" endtime="20170518 02:13:31.468"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:13:31.468" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:13:31.468" endtime="20170518 02:13:31.468"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:13:31.469" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:13:31.469" endtime="20170518 02:13:31.469"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:13:31.750" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:13:31.470" endtime="20170518 02:13:31.750"></status>
</kw>
<msg timestamp="20170518 02:13:31.750" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:13:31.750" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:31.469" endtime="20170518 02:13:31.750"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:13:31.751" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:31.751" endtime="20170518 02:13:31.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:13:31.752" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:31.751" endtime="20170518 02:13:31.752"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:31.465" endtime="20170518 02:13:31.752"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:31.465" endtime="20170518 02:13:31.752"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:31.464" endtime="20170518 02:13:31.752"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:13:31.753" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:13:31.752" endtime="20170518 02:13:31.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:13:31.755" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:13:31.754" endtime="20170518 02:13:31.755"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:13:31.756" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:13:31.755" endtime="20170518 02:13:31.756"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:31.755" endtime="20170518 02:13:31.756"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:31.753" endtime="20170518 02:13:31.756"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:31.753" endtime="20170518 02:13:31.756"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:13:31.823" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:13:31.823" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:31.756" endtime="20170518 02:13:31.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:13:31.825" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:13:31.825" endtime="20170518 02:13:31.825"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:13:31.826" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:13:31.826" endtime="20170518 02:13:31.826"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:31.825" endtime="20170518 02:13:31.827"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:31.824" endtime="20170518 02:13:31.827"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:31.824" endtime="20170518 02:13:31.827"></status>
</kw>
<msg timestamp="20170518 02:13:31.827" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:31.464" endtime="20170518 02:13:31.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:13:31.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:31.827" endtime="20170518 02:13:31.828"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:13:31.828" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:13:31.828" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:13:31.828" level="INFO">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:13:31.828" endtime="20170518 02:13:31.828"></status>
</kw>
<msg timestamp="20170518 02:13:31.829" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:13:31.463" endtime="20170518 02:13:31.829"></status>
</kw>
<msg timestamp="20170518 02:13:31.829" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:13:31.463" endtime="20170518 02:13:31.829"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:13:31.830" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:13:31.829" endtime="20170518 02:13:31.830"></status>
</kw>
<status status="FAIL" starttime="20170518 02:13:31.462" endtime="20170518 02:13:31.830"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:13:41.838" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:13:41.838" endtime="20170518 02:13:41.839"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:13:41.840" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:13:41.840" endtime="20170518 02:13:41.840"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:13:41.841" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:13:41.840" endtime="20170518 02:13:41.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:13:41.841" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:13:41.841" endtime="20170518 02:13:41.841"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:13:42.043" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:13:41.842" endtime="20170518 02:13:42.043"></status>
</kw>
<msg timestamp="20170518 02:13:42.043" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:13:42.043" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:41.842" endtime="20170518 02:13:42.043"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:13:42.044" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:42.044" endtime="20170518 02:13:42.044"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:13:42.045" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:42.044" endtime="20170518 02:13:42.045"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:41.837" endtime="20170518 02:13:42.046"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:41.837" endtime="20170518 02:13:42.046"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:41.836" endtime="20170518 02:13:42.046"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:13:42.047" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:13:42.046" endtime="20170518 02:13:42.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:13:42.049" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:13:42.049" endtime="20170518 02:13:42.050"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:13:42.051" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:13:42.050" endtime="20170518 02:13:42.051"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:42.050" endtime="20170518 02:13:42.051"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:42.048" endtime="20170518 02:13:42.051"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:42.047" endtime="20170518 02:13:42.051"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:13:42.148" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:13:42.148" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:42.051" endtime="20170518 02:13:42.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:13:42.152" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:13:42.150" endtime="20170518 02:13:42.153"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:13:42.155" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:13:42.154" endtime="20170518 02:13:42.155"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:42.153" endtime="20170518 02:13:42.155"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:42.149" endtime="20170518 02:13:42.155"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:42.149" endtime="20170518 02:13:42.155"></status>
</kw>
<msg timestamp="20170518 02:13:42.155" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:41.835" endtime="20170518 02:13:42.155"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:13:42.156" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:42.156" endtime="20170518 02:13:42.156"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:13:42.156" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:13:42.157" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:13:42.157" level="INFO">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:13:42.156" endtime="20170518 02:13:42.157"></status>
</kw>
<msg timestamp="20170518 02:13:42.157" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:13:41.833" endtime="20170518 02:13:42.157"></status>
</kw>
<msg timestamp="20170518 02:13:42.157" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:13:41.832" endtime="20170518 02:13:42.157"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:13:42.158" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:13:42.157" endtime="20170518 02:13:42.158"></status>
</kw>
<status status="FAIL" starttime="20170518 02:13:41.831" endtime="20170518 02:13:42.158"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:13:52.169" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:13:52.169" endtime="20170518 02:13:52.170"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:13:52.171" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:13:52.171" endtime="20170518 02:13:52.171"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:13:52.172" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:13:52.172" endtime="20170518 02:13:52.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:13:52.173" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:13:52.172" endtime="20170518 02:13:52.173"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:13:52.358" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:13:52.174" endtime="20170518 02:13:52.358"></status>
</kw>
<msg timestamp="20170518 02:13:52.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:13:52.359" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:52.173" endtime="20170518 02:13:52.359"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:13:52.359" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:52.359" endtime="20170518 02:13:52.360"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:13:52.360" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:52.360" endtime="20170518 02:13:52.360"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:52.167" endtime="20170518 02:13:52.360"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:52.167" endtime="20170518 02:13:52.361"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:52.166" endtime="20170518 02:13:52.361"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:13:52.362" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:13:52.361" endtime="20170518 02:13:52.362"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:13:52.364" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:13:52.364" endtime="20170518 02:13:52.364"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:13:52.366" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:13:52.365" endtime="20170518 02:13:52.366"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:52.365" endtime="20170518 02:13:52.366"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:52.363" endtime="20170518 02:13:52.367"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:52.363" endtime="20170518 02:13:52.367"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:13:52.455" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:13:52.456" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:52.367" endtime="20170518 02:13:52.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:13:52.459" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:13:52.458" endtime="20170518 02:13:52.459"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:13:52.460" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:13:52.459" endtime="20170518 02:13:52.460"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:52.459" endtime="20170518 02:13:52.460"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:52.457" endtime="20170518 02:13:52.460"></status>
</kw>
<status status="PASS" starttime="20170518 02:13:52.456" endtime="20170518 02:13:52.460"></status>
</kw>
<msg timestamp="20170518 02:13:52.461" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:13:52.165" endtime="20170518 02:13:52.461"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:13:52.462" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:13:52.461" endtime="20170518 02:13:52.463"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:13:52.463" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:13:52.463" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:13:52.463" level="INFO">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:13:52.463" endtime="20170518 02:13:52.463"></status>
</kw>
<msg timestamp="20170518 02:13:52.464" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:13:52.164" endtime="20170518 02:13:52.464"></status>
</kw>
<msg timestamp="20170518 02:13:52.464" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:13:52.164" endtime="20170518 02:13:52.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:13:52.465" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:13:52.464" endtime="20170518 02:13:52.465"></status>
</kw>
<status status="FAIL" starttime="20170518 02:13:52.161" endtime="20170518 02:13:52.465"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:14:02.482" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:14:02.481" endtime="20170518 02:14:02.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:14:02.483" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:14:02.483" endtime="20170518 02:14:02.483"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:14:02.484" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:14:02.483" endtime="20170518 02:14:02.484"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:14:02.484" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:14:02.484" endtime="20170518 02:14:02.484"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:14:02.670" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:14:02.485" endtime="20170518 02:14:02.670"></status>
</kw>
<msg timestamp="20170518 02:14:02.670" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:02.671" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:02.485" endtime="20170518 02:14:02.671"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:14:02.671" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:02.671" endtime="20170518 02:14:02.671"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:02.672" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:02.672" endtime="20170518 02:14:02.672"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:02.481" endtime="20170518 02:14:02.672"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:02.480" endtime="20170518 02:14:02.672"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:02.479" endtime="20170518 02:14:02.672"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:14:02.673" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:14:02.673" endtime="20170518 02:14:02.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:14:02.675" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:14:02.675" endtime="20170518 02:14:02.675"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:14:02.676" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:14:02.676" endtime="20170518 02:14:02.676"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:02.675" endtime="20170518 02:14:02.676"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:02.674" endtime="20170518 02:14:02.677"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:02.673" endtime="20170518 02:14:02.677"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:14:02.743" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:14:02.743" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:02.677" endtime="20170518 02:14:02.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:14:02.745" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:14:02.744" endtime="20170518 02:14:02.745"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:14:02.746" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:14:02.746" endtime="20170518 02:14:02.746"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:02.745" endtime="20170518 02:14:02.746"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:02.744" endtime="20170518 02:14:02.746"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:02.744" endtime="20170518 02:14:02.746"></status>
</kw>
<msg timestamp="20170518 02:14:02.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:02.478" endtime="20170518 02:14:02.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:02.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:02.747" endtime="20170518 02:14:02.747"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:14:02.748" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:14:02.748" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:14:02.748" level="INFO">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:14:02.747" endtime="20170518 02:14:02.748"></status>
</kw>
<msg timestamp="20170518 02:14:02.748" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:14:02.478" endtime="20170518 02:14:02.748"></status>
</kw>
<msg timestamp="20170518 02:14:02.748" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170518 02:14:02.477" endtime="20170518 02:14:02.748"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170518 02:14:02.749" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170518 02:14:02.749" endtime="20170518 02:14:02.749"></status>
</kw>
<status status="FAIL" starttime="20170518 02:14:02.476" endtime="20170518 02:14:02.749"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:14:12.796" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:14:12.795" endtime="20170518 02:14:12.798"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:14:12.801" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:14:12.799" endtime="20170518 02:14:12.801"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:14:12.805" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:14:12.803" endtime="20170518 02:14:12.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:14:12.808" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:14:12.806" endtime="20170518 02:14:12.808"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:14:13.060" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:14:12.812" endtime="20170518 02:14:13.061"></status>
</kw>
<msg timestamp="20170518 02:14:13.061" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:13.061" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:12.810" endtime="20170518 02:14:13.062"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:14:13.065" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:13.063" endtime="20170518 02:14:13.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:13.068" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:13.067" endtime="20170518 02:14:13.069"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:12.791" endtime="20170518 02:14:13.070"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:12.789" endtime="20170518 02:14:13.070"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:12.785" endtime="20170518 02:14:13.070"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:14:13.074" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170518 02:14:13.072" endtime="20170518 02:14:13.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:14:13.085" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:14:13.081" endtime="20170518 02:14:13.085"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:14:13.090" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:14:13.089" endtime="20170518 02:14:13.091"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.086" endtime="20170518 02:14:13.091"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.078" endtime="20170518 02:14:13.092"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.075" endtime="20170518 02:14:13.092"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:14:13.181" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170518 02:14:13.181" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:13.093" endtime="20170518 02:14:13.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:14:13.191" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:14:13.188" endtime="20170518 02:14:13.191"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:14:13.198" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:14:13.196" endtime="20170518 02:14:13.198"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.192" endtime="20170518 02:14:13.199"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.186" endtime="20170518 02:14:13.200"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.183" endtime="20170518 02:14:13.200"></status>
</kw>
<msg timestamp="20170518 02:14:13.201" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:12.782" endtime="20170518 02:14:13.201"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:13.205" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:13.203" endtime="20170518 02:14:13.205"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:14:13.208" level="INFO">To JSON using : content={
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:14:13.208" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:14:13.208" level="INFO">${content} = {u'status': u'ok', u'data': u'FW Progress, Starting OS', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:14:13.206" endtime="20170518 02:14:13.209"></status>
</kw>
<msg timestamp="20170518 02:14:13.210" level="INFO">${state} = FW Progress, Starting OS</msg>
<status status="PASS" starttime="20170518 02:14:12.779" endtime="20170518 02:14:13.210"></status>
</kw>
<msg timestamp="20170518 02:14:13.211" level="INFO">${boot_progress} = FW Progress, Starting OS</msg>
<status status="PASS" starttime="20170518 02:14:12.777" endtime="20170518 02:14:13.211"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:13.213" endtime="20170518 02:14:13.214"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:12.775" endtime="20170518 02:14:13.215"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:29.194" endtime="20170518 02:14:13.215"></status>
</kw>
<kw name="Flush REST Sessions" library="utils">
<doc>Removes all the active session objects</doc>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170518 02:14:13.219" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170518 02:14:13.218" endtime="20170518 02:14:13.225"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.216" endtime="20170518 02:14:13.226"></status>
</kw>
<status status="PASS" starttime="20170518 02:12:01.036" endtime="20170518 02:14:13.226"></status>
</kw>
<status status="PASS" starttime="20170518 02:09:48.380" endtime="20170518 02:14:13.227"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:14:13.253" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:14:13.251" endtime="20170518 02:14:13.255"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:14:13.258" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:14:13.257" endtime="20170518 02:14:13.258"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:14:13.261" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:14:13.260" endtime="20170518 02:14:13.262"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:14:13.265" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:14:13.263" endtime="20170518 02:14:13.266"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:14:13.552" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:14:13.270" endtime="20170518 02:14:13.553"></status>
</kw>
<msg timestamp="20170518 02:14:13.553" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:13.554" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:13.267" endtime="20170518 02:14:13.554"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:14:13.557" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:13.555" endtime="20170518 02:14:13.558"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:13.561" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:13.559" endtime="20170518 02:14:13.561"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.248" endtime="20170518 02:14:13.562"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.245" endtime="20170518 02:14:13.562"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.241" endtime="20170518 02:14:13.563"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:14:13.566" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170518 02:14:13.564" endtime="20170518 02:14:13.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:14:13.582" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:14:13.578" endtime="20170518 02:14:13.582"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:14:13.595" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:14:13.594" endtime="20170518 02:14:13.596"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.583" endtime="20170518 02:14:13.596"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.570" endtime="20170518 02:14:13.597"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.568" endtime="20170518 02:14:13.597"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:14:13.669" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170518 02:14:13.670" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:13.599" endtime="20170518 02:14:13.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:14:13.679" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:14:13.677" endtime="20170518 02:14:13.680"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:14:13.684" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:14:13.683" endtime="20170518 02:14:13.685"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.680" endtime="20170518 02:14:13.686"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.674" endtime="20170518 02:14:13.686"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.672" endtime="20170518 02:14:13.686"></status>
</kw>
<msg timestamp="20170518 02:14:13.687" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:13.238" endtime="20170518 02:14:13.688"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:13.691" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:13.689" endtime="20170518 02:14:13.691"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:14:13.695" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:14:13.695" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:14:13.695" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:14:13.693" endtime="20170518 02:14:13.696"></status>
</kw>
<msg timestamp="20170518 02:14:13.697" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170518 02:14:13.235" endtime="20170518 02:14:13.697"></status>
</kw>
<msg timestamp="20170518 02:14:13.699" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170518 02:14:13.234" endtime="20170518 02:14:13.699"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170518 02:14:13.705" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170518 02:14:13.703" endtime="20170518 02:14:13.706"></status>
</kw>
<msg timestamp="20170518 02:14:13.706" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170518 02:14:13.700" endtime="20170518 02:14:13.706"></status>
</kw>
<msg timestamp="20170518 02:14:13.708" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170518 02:14:13.232" endtime="20170518 02:14:13.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:13.709" endtime="20170518 02:14:13.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:13.713" endtime="20170518 02:14:13.715"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170518 02:14:13.770" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170518 02:14:13.719" endtime="20170518 02:14:13.770"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170518 02:14:13.774" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/23477/obmc-robot/logs/20170518020948141959_TestsSecurityTestSsl/20170518020948141959_TestSSLConnection/</msg>
<status status="PASS" starttime="20170518 02:14:13.772" endtime="20170518 02:14:13.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:13.775" endtime="20170518 02:14:13.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:13.784" endtime="20170518 02:14:13.786"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170518 02:14:13.788" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs"&gt;/tmp/fspcibld/23477/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20170518 02:14:13.787" endtime="20170518 02:14:13.789"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170518 02:14:13.792" level="INFO" html="yes">File '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20170518 02:14:13.791" endtime="20170518 02:14:13.793"></status>
</kw>
<msg timestamp="20170518 02:14:13.793" level="INFO">${exist} = True</msg>
<status status="PASS" starttime="20170518 02:14:13.790" endtime="20170518 02:14:13.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:13.794" endtime="20170518 02:14:13.796"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:13.797" endtime="20170518 02:14:13.798"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170518 02:14:13.802" level="INFO">${cur_time} = 2017-05-18 02:14:13:801714</msg>
<status status="PASS" starttime="20170518 02:14:13.801" endtime="20170518 02:14:13.802"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170518 02:14:13.807" level="INFO">${cur_time} = 20170518021413801714</msg>
<status status="PASS" starttime="20170518 02:14:13.804" endtime="20170518 02:14:13.807"></status>
</kw>
<msg timestamp="20170518 02:14:13.808" level="INFO">${cur_time} = 20170518021413801714</msg>
<status status="PASS" starttime="20170518 02:14:13.799" endtime="20170518 02:14:13.809"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170518 02:14:13.813" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:13.810" endtime="20170518 02:14:13.814"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.716" endtime="20170518 02:14:13.814"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.230" endtime="20170518 02:14:13.815"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170518 02:14:13.822" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:14:13.820" endtime="20170518 02:14:13.822"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170518 02:14:13.827" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:14:13.825" endtime="20170518 02:14:13.827"></status>
</kw>
<msg timestamp="20170518 02:14:13.828" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:14:13.818" endtime="20170518 02:14:13.828"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:13.831" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170518 02:14:13.830" endtime="20170518 02:14:13.831"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:13.832" endtime="20170518 02:14:13.872"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170518 02:14:13.883" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170518 02:14:13.892" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:14:13.893" level="INFO">${output} = /tmp/fspcibld/23477/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170518 02:14:13.874" endtime="20170518 02:14:13.893"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:13.897" endtime="20170518 02:14:13.945"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:13.946" endtime="20170518 02:14:13.948"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:13.952" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170518 02:14:13.950" endtime="20170518 02:14:13.952"></status>
</kw>
<msg timestamp="20170518 02:14:13.953" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170518 02:14:13.829" endtime="20170518 02:14:13.953"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:13.956" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170518 02:14:13.954" endtime="20170518 02:14:13.956"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:13.957" endtime="20170518 02:14:13.998"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170518 02:14:14.012" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170518 02:14:14.078" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:14:14.079" level="INFO">${os_con_pid} = 193</msg>
<status status="PASS" starttime="20170518 02:14:14.001" endtime="20170518 02:14:14.079"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:14.081" endtime="20170518 02:14:14.127"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:14.130" level="INFO">${cmd_buf} = kill -9 193</msg>
<status status="PASS" starttime="20170518 02:14:14.128" endtime="20170518 02:14:14.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:14.135" endtime="20170518 02:14:14.181"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:14.132" endtime="20170518 02:14:14.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg timestamp="20170518 02:14:14.238" level="INFO">Running command 'kill -9 193 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20170518 02:14:14.219" endtime="20170518 02:14:14.241"></status>
</kw>
<msg timestamp="20170518 02:14:14.243" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:14:14.243" level="INFO">${output} = </msg>
<status status="PASS" starttime="20170518 02:14:14.184" endtime="20170518 02:14:14.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:14.251" endtime="20170518 02:14:14.295"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:14.247" endtime="20170518 02:14:14.296"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:14.299" level="INFO">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170518 02:14:14.297" endtime="20170518 02:14:14.299"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:14.300" endtime="20170518 02:14:14.344"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170518 02:14:14.356" level="INFO">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg timestamp="20170518 02:14:14.409" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:14:14.410" level="INFO">${output} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:gMCtopUMYpxiyP85C0VORiMp9Fjox3UGLCsLwPOSKH8...</msg>
<status status="PASS" starttime="20170518 02:14:14.346" endtime="20170518 02:14:14.410"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:14.413" endtime="20170518 02:14:14.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:14.501" endtime="20170518 02:14:14.503"></status>
</kw>
<msg timestamp="20170518 02:14:14.505" level="INFO">${sol_log} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:gMCtopUMYpxiyP85C0VORiMp9Fjox3UGLCsLwPOSKH8...</msg>
<status status="PASS" starttime="20170518 02:14:13.816" endtime="20170518 02:14:14.505"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170518 02:14:14.508" level="INFO">spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:gMCtopUMYpxiyP85C0VORiMp9Fjox3UGLCsLwPOSKH8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
[[0;32m  OK  [0m] Started LSB: Start htx daemon.
[[0;32m  OK  [0m] Reached target Multi-User System.
[[0;32m  OK  [0m] Reached target Graphical Interface.
         Starting Update UTMP about System Runlevel Changes...
[[0;32m  OK  [0m] Started Stop ureadahead data collection 45s after completed startup.
[[0;32m  OK  [0m] Started Update UTMP about System Runlevel Changes.


--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.16318|secure|SecureROM invalid - skipping functionality
 11.81795|ISTEP  6. 5
 12.50307|ISTEP  6. 6
 12.50355|ISTEP  6. 7
 13.26938|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.26939|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 13.57429|ISTEP  6. 8
 13.62643|SECURE|Security Access Bit&gt; 0x0000000000000000
 13.62644|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 13.62661|ISTEP  6. 9
 14.26436|ISTEP  6.10
 14.31525|ISTEP  6.11
 14.31576|ISTEP  6.12
 14.57070|ISTEP  7. 2
 16.58702|ISTEP  7. 3
 17.23460|ISTEP  7. 4
 20.05000|ISTEP  7. 5
 20.12815|ISTEP  8. 1
 20.55839|ISTEP  8. 2
 20.61070|ISTEP  8. 3
 20.68954|ISTEP  8. 4
 32.27107|ISTEP  8. 5
 32.29750|ISTEP  8. 6
 32.30062|ISTEP  8. 7
 32.48694|ISTEP  8. 8
 32.53738|ISTEP  8. 9
 32.66434|ISTEP  8.10
 32.66608|ISTEP  8.11
 32.66666|ISTEP  8.12
 33.14428|ISTEP  8.13
 36.85125|ISTEP  8.14
 36.85340|ISTEP  8.15
 36.85508|ISTEP  8.16
 37.11760|ISTEP  8.17
 37.41265|================================================
 37.41266|Error reported by istep (0x1700) PLID 0x9000000B
 37.43803|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
 37.43804|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
 37.43805|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
 37.43806|  UserData1  Target processor chip's HUID : 0x00050001002d0004
 37.43807|  UserData2  Target PEC HUID : 0x0000000000000000
 37.46348|------------------------------------------------
 37.46349|  Callout type             : Procedure Callout
 37.46350|  Procedure                : EPUB_PRC_HB_CODE
 37.46351|  Priority                 : SRCI_PRIORITY_HIGH
 37.46352|------------------------------------------------
 37.46353|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 37.46353|================================================
 38.45974|ISTEP  8.18
 38.46123|ISTEP  8.19
 38.47610|ISTEP  8.20
 38.48430|ISTEP  9. 1
 38.61073|ISTEP  9. 2
 39.72631|ISTEP  9. 3
 39.75196|ISTEP  9. 4
 40.09533|ISTEP  9. 5
 40.12210|ISTEP  9. 6
 40.17489|ISTEP  9. 7
 40.26504|ISTEP  9. 8
 40.29702|ISTEP 10. 1
 40.87472|ISTEP 10. 2
 40.97337|================================================
 40.97338|Error reported by i2c (0x0700) PLID 0x9000000C
 40.99918|  Timed out waiting for command complete.
 40.99919|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 40.99920|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 41.02565|  UserData1  Status Register Value : 0x0001000000050001
 41.02566|  UserData2  Master Target : 0x0200ffff0190004d
 41.02567|------------------------------------------------
 41.02567|  Callout type             : Hardware Callout
 41.02568|  CPU id                   : 6
 41.02569|  Target                   : Physical:/Sys0/Node0/Proc1
 41.02570|  Deconfig State           : NO_DECONFIG
 41.02571|  GARD Error Type          : GARD_NULL
 41.02572|  Priority                 : SRCI_PRIORITY_HIGH
 41.02573|------------------------------------------------
 41.02574|  Callout type             : Procedure Callout
 41.02574|  Procedure                : EPUB_PRC_HB_CODE
 41.02575|  Priority                 : SRCI_PRIORITY_LOW
 41.02576|------------------------------------------------
 41.02577|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 41.02578|================================================
 44.61828|ISTEP 10. 3
 44.87419|ISTEP 11. 1
 44.95201|ISTEP 12. 1
 45.00519|ISTEP 13. 1
 46.12880|ISTEP 13. 2
 46.36209|ISTEP 13. 3
 46.68800|ISTEP 13. 4
 46.71213|ISTEP 13. 6
 46.92161|ISTEP 13. 7
 46.92307|ISTEP 13. 8
 49.19989|ISTEP 13. 9
 49.74639|ISTEP 13.10
 51.14511|ISTEP 13.11
 51.80466|ISTEP 13.12
 51.80714|ISTEP 13.13
 52.02838|ISTEP 14. 1
103.07149|ISTEP 14. 2
103.12660|ISTEP 14. 3
103.23541|ISTEP 14. 4
103.23787|ISTEP 14. 5
103.55307|ISTEP 14. 6
103.60778|ISTEP 14. 7
103.61379|ISTEP 15. 1
106.66245|ISTEP 15. 2
106.69072|ISTEP 15. 3
106.74950|ISTEP 15. 4
106.90880|ISTEP 16. 1
  0.03027|ISTEP 16. 2
108.50094|ISTEP 16. 3
108.54278|ISTEP 16. 4
108.62819|ISTEP 16. 5
108.70528|ISTEP 18.11
109.48629|ISTEP 18.12
109.48803|ISTEP 20. 1
111.36073|ISTEP 20. 2


--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.37949|secure|SecureROM invalid - skipping functionality
  8.23882|ERRL|Dumping errors reported prior to registration
  8.38783|================================================
  8.38784|Error reported by istep (0x1700) PLID 0x9000000B
  8.41277|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
  8.41278|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
  8.41279|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
  8.41279|  UserData1  Target processor chip's HUID : 0x00050001002d0004
  8.41280|  UserData2  Target PEC HUID : 0x0000000000000000
  8.46331|------------------------------------------------
  8.46331|  Callout type             : Procedure Callout
  8.46332|  Procedure                : EPUB_PRC_HB_CODE
  8.46333|  Priority                 : SRCI_PRIORITY_HIGH
  8.46333|------------------------------------------------
  8.46334|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
  8.46335|================================================
 10.48171|================================================
 10.48172|Error reported by i2c (0x0700) PLID 0x9000000C
 10.53367|  Timed out waiting for command complete.
 10.53368|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 10.53368|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 10.55934|  UserData1  Status Register Value : 0x0001000000050001
 10.55935|  UserData2  Master Target : 0x0200ffff0190004d
 10.55936|------------------------------------------------
 10.55937|  Callout type             : Hardware Callout
 10.55937|  CPU id                   : 6
 10.55939|  Target                   : Physical:/Sys0/Node0/Proc1
 10.55939|  Deconfig State           : NO_DECONFIG
 10.55940|  GARD Error Type          : GARD_NULL
 10.55941|  Priority                 : SRCI_PRIORITY_HIGH
 10.55942|------------------------------------------------
 10.55942|  Callout type             : Procedure Callout
 10.55943|  Procedure                : EPUB_PRC_HB_CODE
 10.55944|  Priority                 : SRCI_PRIORITY_LOW
 10.55945|------------------------------------------------
 10.55945|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 10.55946|================================================
 12.42419|ISTEP  6. 5
 13.08473|ISTEP  6. 6
 13.08567|ISTEP  6. 7
 13.85375|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.85376|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 14.15872|ISTEP  6. 8
 14.21074|SECURE|Security Access Bit&gt; 0x0000000000000000
 14.21075|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 14.21091|ISTEP  6. 9
 14.84610|ISTEP  6.10
 14.89705|ISTEP  6.11
 14.89773|ISTEP  6.12
 15.15314|ISTEP  7. 2
 17.17029|ISTEP  7. 3
 17.81505|ISTEP  7. 4
 20.63341|ISTEP  7. 5
 20.71171|ISTEP  8. 1
 21.14180|ISTEP  8. 2
 21.19393|ISTEP  8. 3
 21.27260|ISTEP  8. 4
 32.85432|ISTEP  8. 5
 32.87990|ISTEP  8. 6
 32.88271|ISTEP  8. 7
 33.06830|ISTEP  8. 8
 33.11868|ISTEP  8. 9
 33.24609|ISTEP  8.10
 33.24771|ISTEP  8.11
 33.24820|ISTEP  8.12
 33.72414|ISTEP  8.13
 37.42720|ISTEP  8.14
 37.42962|ISTEP  8.15
 37.43126|ISTEP  8.16
 37.69220|ISTEP  8.17
 37.81202|================================================
 37.81203|Error reported by istep (0x1700) PLID 0x9000000E
 37.81205|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
 37.81206|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
 37.81207|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
 37.81208|  UserData1  Target processor chip's HUID : 0x00050001002d0004
 37.81209|  UserData2  Target PEC HUID : 0x0000000000000000
 37.81209|------------------------------------------------
 37.81210|  Callout type             : Procedure Callout
 37.81211|  Procedure                : EPUB_PRC_HB_CODE
 37.81212|  Priority                 : SRCI_PRIORITY_HIGH
 37.81213|------------------------------------------------
 37.81213|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 37.81214|================================================
 38.89439|ISTEP  8.18
 38.89594|ISTEP  8.19
 38.91070|ISTEP  8.20
 38.91935|ISTEP  9. 1
 39.04565|ISTEP  9. 2
 40.14137|ISTEP  9. 3
 40.16708|ISTEP  9. 4
 40.51020|ISTEP  9. 5
 40.53629|ISTEP  9. 6
 40.58917|ISTEP  9. 7
 40.67859|ISTEP  9. 8
 40.70949|ISTEP 10. 1
 41.28542|ISTEP 10. 2
 41.30810|================================================
 41.30811|Error reported by i2c (0x0700) PLID 0x9000000F
 41.30811|  Timed out waiting for command complete.
 41.30812|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 41.30813|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 41.30814|  UserData1  Status Register Value : 0x0001000000050001
 41.30815|  UserData2  Master Target : 0x0200ffff0190004d
 41.30816|------------------------------------------------
 41.30817|  Callout type             : Hardware Callout
 41.30818|  CPU id                   : 5
 41.30819|  Target                   : Physical:/Sys0/Node0/Proc1
 41.30820|  Deconfig State           : NO_DECONFIG
 41.30821|  GARD Error Type          : GARD_NULL
 41.30822|  Priority                 : SRCI_PRIORITY_HIGH
 41.30823|------------------------------------------------
 41.30824|  Callout type             : Procedure Callout
 41.30825|  Procedure                : EPUB_PRC_HB_CODE
 41.30826|  Priority                 : SRCI_PRIORITY_LOW
 41.30827|------------------------------------------------
 41.30828|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 41.30828|================================================
 44.93121|ISTEP 10. 3
 45.23728|ISTEP 11. 1
 45.31510|ISTEP 12. 1
 45.36725|ISTEP 13. 1
 46.49075|ISTEP 13. 2
 46.72363|ISTEP 13. 3
 47.04402|ISTEP 13. 4
 47.06833|ISTEP 13. 6
 47.27820|ISTEP 13. 7
 47.27966|ISTEP 13. 8
 49.55737|ISTEP 13. 9
 50.10677|ISTEP 13.10
 51.50554|ISTEP 13.11
 52.13982|ISTEP 13.12
 52.14223|ISTEP 13.13
 52.36373|ISTEP 14. 1
103.40233|ISTEP 14. 2
103.45750|ISTEP 14. 3
103.56637|ISTEP 14. 4
103.56885|ISTEP 14. 5
103.88589|ISTEP 14. 6
103.94042|ISTEP 14. 7
103.94562|ISTEP 15. 1
106.98920|ISTEP 15. 2
107.01700|ISTEP 15. 3
107.07521|ISTEP 15. 4
107.23647|ISTEP 16. 1
108.65656|ISTEP 16. 2
108.82757|ISTEP 16. 3
108.86256|ISTEP 16. 4
108.94643|ISTEP 16. 5
109.00485|ISTEP 18.11
109.86409|ISTEP 18.12
109.81485|ISTEP 20. 1
111.85456|ISTEP 20. 2
114.99936|ISTEP 21. 1</msg>
<status status="PASS" starttime="20170518 02:14:14.507" endtime="20170518 02:14:14.510"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:13.228" endtime="20170518 02:14:14.511"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status critical="yes" status="PASS" starttime="20170518 02:09:48.198" endtime="20170518 02:14:14.511"></status>
</test>
<test id="s1-s2-t2" name="Check For Application Failures">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170518 02:14:14.524" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:14:14.522" endtime="20170518 02:14:14.524"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170518 02:14:14.527" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:14:14.525" endtime="20170518 02:14:14.527"></status>
</kw>
<msg timestamp="20170518 02:14:14.528" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:14:14.520" endtime="20170518 02:14:14.529"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170518 02:14:14.537" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:14:14.535" endtime="20170518 02:14:14.537"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170518 02:14:14.541" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:14:14.539" endtime="20170518 02:14:14.542"></status>
</kw>
<msg timestamp="20170518 02:14:14.543" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:14:14.532" endtime="20170518 02:14:14.543"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:14.548" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170518 02:14:14.547" endtime="20170518 02:14:14.548"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:14.549" endtime="20170518 02:14:14.597"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170518 02:14:14.608" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170518 02:14:14.620" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:14:14.621" level="INFO">${output} = /tmp/fspcibld/23477/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170518 02:14:14.598" endtime="20170518 02:14:14.621"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:14.624" endtime="20170518 02:14:14.661"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:14.663" endtime="20170518 02:14:14.665"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:14.669" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170518 02:14:14.667" endtime="20170518 02:14:14.669"></status>
</kw>
<msg timestamp="20170518 02:14:14.670" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170518 02:14:14.544" endtime="20170518 02:14:14.670"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:14.673" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170518 02:14:14.671" endtime="20170518 02:14:14.673"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:14.674" endtime="20170518 02:14:14.747"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170518 02:14:14.806" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170518 02:14:14.846" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:14:14.846" level="INFO">${os_con_pid} = </msg>
<status status="PASS" starttime="20170518 02:14:14.764" endtime="20170518 02:14:14.846"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:14.849" endtime="20170518 02:14:14.893"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:14.896" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20170518 02:14:14.894" endtime="20170518 02:14:14.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:14.898" endtime="20170518 02:14:14.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170518 02:14:14.904" level="INFO">${rc} = None</msg>
<msg timestamp="20170518 02:14:14.904" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20170518 02:14:14.902" endtime="20170518 02:14:14.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:14.906" endtime="20170518 02:14:14.908"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:14.910" level="INFO">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170518 02:14:14.909" endtime="20170518 02:14:14.911"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:14.912" endtime="20170518 02:14:14.954"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170518 02:14:15.006" level="INFO">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg timestamp="20170518 02:14:15.012" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:14:15.013" level="INFO">${output} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:gMCtopUMYpxiyP85C0VORiMp9Fjox3UGLCsLwPOSKH8...</msg>
<status status="PASS" starttime="20170518 02:14:14.984" endtime="20170518 02:14:15.014"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:15.016" endtime="20170518 02:14:15.103"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:15.119" endtime="20170518 02:14:15.134"></status>
</kw>
<msg timestamp="20170518 02:14:15.141" level="INFO">${log_output} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:gMCtopUMYpxiyP85C0VORiMp9Fjox3UGLCsLwPOSKH8...</msg>
<status status="PASS" starttime="20170518 02:14:14.530" endtime="20170518 02:14:15.141"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170518 02:14:15.145" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:15.143" endtime="20170518 02:14:15.145"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:15.150" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170518 02:14:15.149" endtime="20170518 02:14:15.150"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:15.151" endtime="20170518 02:14:15.191"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170518 02:14:15.248" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170518 02:14:15.252" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:14:15.252" level="INFO">${output} = /tmp/fspcibld/23477/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170518 02:14:15.194" endtime="20170518 02:14:15.252"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:15.256" endtime="20170518 02:14:15.346"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:15.348" endtime="20170518 02:14:15.350"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:15.354" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170518 02:14:15.351" endtime="20170518 02:14:15.354"></status>
</kw>
<msg timestamp="20170518 02:14:15.355" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170518 02:14:15.146" endtime="20170518 02:14:15.355"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:15.358" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" starttime="20170518 02:14:15.356" endtime="20170518 02:14:15.359"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:15.360" endtime="20170518 02:14:15.400"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170518 02:14:15.416" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170518 02:14:15.448" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:14:15.448" level="INFO">${output} = </msg>
<status status="PASS" starttime="20170518 02:14:15.402" endtime="20170518 02:14:15.449"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:15.453" endtime="20170518 02:14:15.455"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:14.517" endtime="20170518 02:14:15.456"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170518 02:14:15.467" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170518 02:14:15.465" endtime="20170518 02:14:15.467"></status>
</kw>
<msg timestamp="20170518 02:14:15.468" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170518 02:14:15.462" endtime="20170518 02:14:15.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:15.472" endtime="20170518 02:14:15.474"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:15.469" endtime="20170518 02:14:15.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170518 02:14:15.485" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170518 02:14:15.481" endtime="20170518 02:14:15.485"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170518 02:14:15.488" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170518 02:14:15.486" endtime="20170518 02:14:15.488"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170518 02:14:15.491" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170518 02:14:15.489" endtime="20170518 02:14:15.491"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170518 02:14:15.495" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170518 02:14:15.492" endtime="20170518 02:14:15.495"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:15.479" endtime="20170518 02:14:15.496"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:15.476" endtime="20170518 02:14:15.496"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170518 02:14:15.502" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170518 02:14:15.500" endtime="20170518 02:14:15.502"></status>
</kw>
<msg timestamp="20170518 02:14:15.503" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170518 02:14:15.498" endtime="20170518 02:14:15.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:15.511" endtime="20170518 02:14:15.512"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:15.513" endtime="20170518 02:14:15.516"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:15.508" endtime="20170518 02:14:15.517"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:15.505" endtime="20170518 02:14:15.517"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170518 02:14:15.519" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170518 02:14:18.035" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170518 02:14:15.518" endtime="20170518 02:14:18.036"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:15.458" endtime="20170518 02:14:18.037"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>journalctl --no-pager | egrep '${ERROR_REGEX}'</arg>
</arguments>
<assign>
<var>${journal_log}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:14:18.043" level="INFO">Executing command 'journalctl --no-pager | egrep 'SEGV|core-dump''.</msg>
<msg timestamp="20170518 02:14:21.688" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:14:21.690" level="INFO">${stdout} = Apr 20 17:35:52 witherspoon systemd[1]: xyz.openbmc_project.Hwmon@ahb-apb-i2c\x401e78a000-i2c\x2dbus\x40400-ucd90160\x4064.service: Failed with result 'core-dump'.
Apr 20 17:41:48 witherspoon systemd[...</msg>
<msg timestamp="20170518 02:14:21.690" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:14:18.041" endtime="20170518 02:14:21.691"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170518 02:14:21.693" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170518 02:14:21.692" endtime="20170518 02:14:21.694"></status>
</kw>
<msg timestamp="20170518 02:14:21.695" level="INFO">${journal_log} = Apr 20 17:35:52 witherspoon systemd[1]: xyz.openbmc_project.Hwmon@ahb-apb-i2c\x401e78a000-i2c\x2dbus\x40400-ucd90160\x4064.service: Failed with result 'core-dump'.
Apr 20 17:41:48 witherspoon systemd[...</msg>
<status status="PASS" starttime="20170518 02:14:18.038" endtime="20170518 02:14:21.695"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${journal_log}</arg>
</arguments>
<msg timestamp="20170518 02:14:21.697" level="INFO">Length is 327</msg>
<msg timestamp="20170518 02:14:21.698" level="FAIL">'Apr 20 17:35:52 witherspoon systemd[1]: xyz.openbmc_project.Hwmon@ahb-apb-i2c\x401e78a000-i2c\x2dbus\x40400-ucd90160\x4064.service: Failed with result 'core-dump'.
Apr 20 17:41:48 witherspoon systemd[1]: xyz.openbmc_project.Hwmon@ahb-apb-i2c\x401e78a000-i2c\x2dbus\x40400-ucd90160\x4064.service: Failed with result 'core-dump'.' should be empty.</msg>
<status status="FAIL" starttime="20170518 02:14:21.696" endtime="20170518 02:14:21.699"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:14:21.727" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:14:21.725" endtime="20170518 02:14:21.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:14:21.732" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:14:21.730" endtime="20170518 02:14:21.732"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:14:21.736" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:14:21.734" endtime="20170518 02:14:21.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:14:21.740" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:14:21.737" endtime="20170518 02:14:21.740"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:14:22.078" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:14:21.744" endtime="20170518 02:14:22.078"></status>
</kw>
<msg timestamp="20170518 02:14:22.079" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:22.079" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:21.742" endtime="20170518 02:14:22.079"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:14:22.083" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:22.081" endtime="20170518 02:14:22.083"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:22.086" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:22.084" endtime="20170518 02:14:22.087"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:21.722" endtime="20170518 02:14:22.087"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:21.720" endtime="20170518 02:14:22.088"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:21.716" endtime="20170518 02:14:22.088"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:14:22.091" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170518 02:14:22.090" endtime="20170518 02:14:22.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:14:22.114" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:14:22.102" endtime="20170518 02:14:22.114"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:14:22.120" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170518 02:14:22.119" endtime="20170518 02:14:22.121"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:22.115" endtime="20170518 02:14:22.121"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:22.099" endtime="20170518 02:14:22.122"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:22.092" endtime="20170518 02:14:22.122"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:14:22.197" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170518 02:14:22.198" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:22.123" endtime="20170518 02:14:22.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170518 02:14:22.208" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:14:22.205" endtime="20170518 02:14:22.208"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170518 02:14:22.213" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:14:22.212" endtime="20170518 02:14:22.213"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:22.209" endtime="20170518 02:14:22.214"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:22.202" endtime="20170518 02:14:22.215"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:22.200" endtime="20170518 02:14:22.215"></status>
</kw>
<msg timestamp="20170518 02:14:22.216" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:21.713" endtime="20170518 02:14:22.216"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:22.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:22.217" endtime="20170518 02:14:22.219"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:14:22.222" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:14:22.222" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:14:22.223" level="INFO">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170518 02:14:22.221" endtime="20170518 02:14:22.223"></status>
</kw>
<msg timestamp="20170518 02:14:22.225" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170518 02:14:21.708" endtime="20170518 02:14:22.226"></status>
</kw>
<msg timestamp="20170518 02:14:22.227" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170518 02:14:21.706" endtime="20170518 02:14:22.234"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170518 02:14:22.239" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170518 02:14:22.237" endtime="20170518 02:14:22.239"></status>
</kw>
<msg timestamp="20170518 02:14:22.240" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170518 02:14:22.235" endtime="20170518 02:14:22.240"></status>
</kw>
<msg timestamp="20170518 02:14:22.240" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170518 02:14:21.704" endtime="20170518 02:14:22.241"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170518 02:14:23.162" level="INFO">Length is 12</msg>
<status status="PASS" starttime="20170518 02:14:23.161" endtime="20170518 02:14:23.163"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170518 02:14:23.192" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170518 02:14:26.206" level="INFO">${RC} = 0</msg>
<msg timestamp="20170518 02:14:26.207" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=8.02 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=1.04 ms
64 bytes from 9.41.166.169:...</msg>
<status status="PASS" starttime="20170518 02:14:23.164" endtime="20170518 02:14:26.208"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170518 02:14:26.214" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=8.02 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=1.04 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=6.77 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.846 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3003ms
rtt min/avg/max/mdev = 0.846/4.174/8.026/3.258 ms</msg>
<status status="PASS" starttime="20170518 02:14:26.211" endtime="20170518 02:14:26.214"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:26.216" endtime="20170518 02:14:26.217"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:23.158" endtime="20170518 02:14:26.218"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170518 02:14:26.325" level="INFO">${cur_time} = 2017-05-18 02:14:26:323913</msg>
<status status="PASS" starttime="20170518 02:14:26.323" endtime="20170518 02:14:26.325"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170518 02:14:26.329" level="INFO">${cur_time} = 20170518021426323913</msg>
<status status="PASS" starttime="20170518 02:14:26.327" endtime="20170518 02:14:26.329"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.319" endtime="20170518 02:14:26.330"></status>
</kw>
<msg timestamp="20170518 02:14:26.331" level="INFO">${FFDC_TIME} = 20170518021426323913</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170518 02:14:26.383" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20170518 02:14:26.381" endtime="20170518 02:14:26.383"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170518 02:14:26.386" level="INFO">${suite_name} = 20170518021426323913_TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20170518 02:14:26.384" endtime="20170518 02:14:26.386"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170518 02:14:26.389" level="INFO">${test_name} = CheckForApplicationFailures</msg>
<status status="PASS" starttime="20170518 02:14:26.388" endtime="20170518 02:14:26.389"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170518 02:14:26.392" level="INFO">${test_name} = 20170518021426323913_CheckForApplicationFailures</msg>
<status status="PASS" starttime="20170518 02:14:26.391" endtime="20170518 02:14:26.392"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.378" endtime="20170518 02:14:26.393"></status>
</kw>
<msg timestamp="20170518 02:14:26.395" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/</msg>
<msg timestamp="20170518 02:14:26.396" level="INFO">${FFDC_PREFIX} = 20170518021426323913_</msg>
<msg timestamp="20170518 02:14:26.511" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/</arg>
</arguments>
<msg timestamp="20170518 02:14:26.516" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:26.514" endtime="20170518 02:14:26.517"></status>
</kw>
<msg timestamp="20170518 02:14:26.541" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:26.653" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:26.651" endtime="20170518 02:14:26.654"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.647" endtime="20170518 02:14:26.654"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:26.660" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:26.658" endtime="20170518 02:14:26.661"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.655" endtime="20170518 02:14:26.662"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:26.668" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:26.666" endtime="20170518 02:14:26.669"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.663" endtime="20170518 02:14:26.669"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:26.684" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:26.674" endtime="20170518 02:14:26.685"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.670" endtime="20170518 02:14:26.686"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:26.692" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:26.690" endtime="20170518 02:14:26.692"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.687" endtime="20170518 02:14:26.692"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:26.698" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:26.696" endtime="20170518 02:14:26.702"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.693" endtime="20170518 02:14:26.703"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:26.709" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:26.707" endtime="20170518 02:14:26.709"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.703" endtime="20170518 02:14:26.710"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:26.716" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:26.714" endtime="20170518 02:14:26.716"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.710" endtime="20170518 02:14:26.717"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:26.723" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:26.721" endtime="20170518 02:14:26.723"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.718" endtime="20170518 02:14:26.724"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:26.734" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:26.732" endtime="20170518 02:14:26.735"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.727" endtime="20170518 02:14:26.736"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:26.742" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:26.740" endtime="20170518 02:14:26.742"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.737" endtime="20170518 02:14:26.743"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:26.749" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:26.747" endtime="20170518 02:14:26.750"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.744" endtime="20170518 02:14:26.750"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:26.761" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:26.759" endtime="20170518 02:14:26.761"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.751" endtime="20170518 02:14:26.762"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170518 02:14:26.772" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170518 02:14:26.770" endtime="20170518 02:14:26.773"></status>
</kw>
<msg timestamp="20170518 02:14:26.773" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170518 02:14:26.768" endtime="20170518 02:14:26.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:26.779" endtime="20170518 02:14:26.781"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.775" endtime="20170518 02:14:26.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170518 02:14:26.803" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170518 02:14:26.797" endtime="20170518 02:14:26.803"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170518 02:14:26.806" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170518 02:14:26.805" endtime="20170518 02:14:26.806"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170518 02:14:26.809" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170518 02:14:26.807" endtime="20170518 02:14:26.809"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170518 02:14:26.813" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170518 02:14:26.810" endtime="20170518 02:14:26.813"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.795" endtime="20170518 02:14:26.814"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.783" endtime="20170518 02:14:26.814"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170518 02:14:26.819" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170518 02:14:26.817" endtime="20170518 02:14:26.819"></status>
</kw>
<msg timestamp="20170518 02:14:26.820" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170518 02:14:26.815" endtime="20170518 02:14:26.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:26.828" endtime="20170518 02:14:26.830"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:26.831" endtime="20170518 02:14:26.835"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.825" endtime="20170518 02:14:26.836"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.821" endtime="20170518 02:14:26.836"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170518 02:14:26.839" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170518 02:14:28.587" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170518 02:14:26.837" endtime="20170518 02:14:28.588"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.765" endtime="20170518 02:14:28.588"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:14:28.592" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170518 02:14:28.674" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:14:28.675" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170518 02:14:28.675" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:14:28.590" endtime="20170518 02:14:28.676"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170518 02:14:28.678" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170518 02:14:28.677" endtime="20170518 02:14:28.678"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170518 02:14:28.681" level="INFO">Length is 11</msg>
<status status="PASS" starttime="20170518 02:14:28.680" endtime="20170518 02:14:28.681"></status>
</kw>
<msg timestamp="20170518 02:14:28.682" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" starttime="20170518 02:14:26.763" endtime="20170518 02:14:28.683"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:28.695" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:28.692" endtime="20170518 02:14:28.695"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.683" endtime="20170518 02:14:28.696"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.725" endtime="20170518 02:14:28.696"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:28.703" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:28.701" endtime="20170518 02:14:28.703"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.697" endtime="20170518 02:14:28.704"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170518 02:14:28.707" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status status="PASS" starttime="20170518 02:14:28.705" endtime="20170518 02:14:28.707"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:28.719" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:28.712" endtime="20170518 02:14:28.719"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.709" endtime="20170518 02:14:28.720"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:28.726" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:28.724" endtime="20170518 02:14:28.727"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.721" endtime="20170518 02:14:28.728"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.708" endtime="20170518 02:14:28.728"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:28.735" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:28.733" endtime="20170518 02:14:28.736"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.729" endtime="20170518 02:14:28.736"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:28.743" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:28.740" endtime="20170518 02:14:28.743"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.737" endtime="20170518 02:14:28.744"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.728" endtime="20170518 02:14:28.744"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:28.756" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:28.749" endtime="20170518 02:14:28.757"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.746" endtime="20170518 02:14:28.757"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:28.765" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:28.763" endtime="20170518 02:14:28.766"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.758" endtime="20170518 02:14:28.767"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.745" endtime="20170518 02:14:28.767"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.707" endtime="20170518 02:14:28.767"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:28.773" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:28.771" endtime="20170518 02:14:28.774"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.768" endtime="20170518 02:14:28.774"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:26.645" endtime="20170518 02:14:28.775"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170518 02:14:28.809" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" starttime="20170518 02:14:28.808" endtime="20170518 02:14:28.809"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170518 02:14:28.820" level="INFO">@{method_list} = [ ('SEL Log', 'Collect eSEL Log') | ('OS FFDC', 'OS FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('BMC Specific Files', 'BMC FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest...</msg>
<status status="PASS" starttime="20170518 02:14:28.819" endtime="20170518 02:14:28.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:28.826" endtime="20170518 02:14:28.827"></status>
</kw>
<msg timestamp="20170518 02:14:28.828" level="INFO">@{ffdc_function_list} = [ SEL Log | OS FFDC | Get Request FFDC | BMC Specific Files | FFDC Generic Report | Core Files ]</msg>
<status status="PASS" starttime="20170518 02:14:28.822" endtime="20170518 02:14:28.828"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:28.837" endtime="20170518 02:14:28.839"></status>
</kw>
<msg timestamp="20170518 02:14:28.839" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:28.840" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170518 02:14:28.835" endtime="20170518 02:14:28.840"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:28.841" endtime="20170518 02:14:28.843"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:14:28.994" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:14:28.992" endtime="20170518 02:14:28.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:14:29.000" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:14:28.998" endtime="20170518 02:14:29.000"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:14:29.004" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:14:29.002" endtime="20170518 02:14:29.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:14:29.008" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:14:29.006" endtime="20170518 02:14:29.008"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:14:29.227" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:14:29.013" endtime="20170518 02:14:29.227"></status>
</kw>
<msg timestamp="20170518 02:14:29.228" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:29.228" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:29.010" endtime="20170518 02:14:29.228"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:14:29.231" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:29.230" endtime="20170518 02:14:29.232"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:29.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:29.233" endtime="20170518 02:14:29.236"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.989" endtime="20170518 02:14:29.236"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.986" endtime="20170518 02:14:29.237"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.982" endtime="20170518 02:14:29.238"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:14:29.241" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" starttime="20170518 02:14:29.239" endtime="20170518 02:14:29.241"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:29.243" endtime="20170518 02:14:29.245"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:14:29.445" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170518 02:14:29.451" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:29.247" endtime="20170518 02:14:29.451"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:29.453" endtime="20170518 02:14:29.455"></status>
</kw>
<msg timestamp="20170518 02:14:29.456" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:28.979" endtime="20170518 02:14:29.456"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:29.461" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:29.460" endtime="20170518 02:14:29.462"></status>
</kw>
<msg timestamp="20170518 02:14:29.466" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170518 02:14:29.458" endtime="20170518 02:14:29.466"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:29.468" endtime="20170518 02:14:29.469"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:14:29.472" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 70 63 3c 26 00 00 00 04 70 64 05 90 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710035814, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 e0 15 6f a4 00 00 00 04 e0 17 e1 68 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90 00 00 0c 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 28 34 48 cb 14 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 28 34 4b d9 4c 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 28 34 4b ea b1 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 28 34 4c 1e 25 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 28 35 7a 3c 57 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710038955, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 81 ed 34 ce 00 00 00 04 81 ee 53 e2 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710166755, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 ec 9d 45 d0 00 00 00 04 ec 9e 2b 66 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 05 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 29 11 28 b9 3f 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 29 11 2b bc ea 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 29 11 2b ce 26 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 29 11 2c 01 4b 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 29 12 58 bf ff 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710169810, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:14:29.474" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:14:29.478" level="INFO">${content} = {u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'Id': 1, u'Timestamp': 1492710035814, u'Message': u'org.open_power.Error.Host.Event.Event', u'Severity': u'xyz.o...</msg>
<status status="PASS" starttime="20170518 02:14:29.470" endtime="20170518 02:14:29.478"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170518 02:14:29.481" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4']</msg>
<status status="PASS" starttime="20170518 02:14:29.479" endtime="20170518 02:14:29.482"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170518 02:14:29.485" level="INFO">${logpath} = /tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel</msg>
<status status="PASS" starttime="20170518 02:14:29.483" endtime="20170518 02:14:29.485"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170518 02:14:29.488" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:29.486" endtime="20170518 02:14:29.489"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:14:29.509" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:14:29.508" endtime="20170518 02:14:29.511"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:14:29.513" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:14:29.512" endtime="20170518 02:14:29.513"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:14:29.516" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:14:29.515" endtime="20170518 02:14:29.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:14:29.520" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:14:29.518" endtime="20170518 02:14:29.520"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:14:29.724" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:14:29.524" endtime="20170518 02:14:29.725"></status>
</kw>
<msg timestamp="20170518 02:14:29.725" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:29.726" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:29.522" endtime="20170518 02:14:29.726"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:14:29.729" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:29.727" endtime="20170518 02:14:29.730"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:29.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:29.731" endtime="20170518 02:14:29.734"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:29.505" endtime="20170518 02:14:29.735"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:29.502" endtime="20170518 02:14:29.735"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:29.499" endtime="20170518 02:14:29.736"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:14:29.739" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" starttime="20170518 02:14:29.737" endtime="20170518 02:14:29.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:29.741" endtime="20170518 02:14:29.786"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:14:29.911" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170518 02:14:29.911" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:29.788" endtime="20170518 02:14:29.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:29.913" endtime="20170518 02:14:29.915"></status>
</kw>
<msg timestamp="20170518 02:14:29.916" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:29.495" endtime="20170518 02:14:29.917"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:29.920" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:29.918" endtime="20170518 02:14:29.920"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:14:29.923" level="INFO">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 70 63 3c 26 00 00 00 04 70 64 05 90 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:14:29.923" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:14:29.924" level="INFO">${content} = {u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 70 63 3c 26 00 00 00 04 70 64 05 90 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00...</msg>
<status status="PASS" starttime="20170518 02:14:29.921" endtime="20170518 02:14:29.924"></status>
</kw>
<msg timestamp="20170518 02:14:29.925" level="INFO">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 70 63 3c 26 00 00 00 04 70 64 05 90 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b ...</msg>
<status status="PASS" starttime="20170518 02:14:29.491" endtime="20170518 02:14:29.926"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170518 02:14:29.928" level="INFO">Length is 1</msg>
<msg timestamp="20170518 02:14:29.929" level="INFO">${length} = 1</msg>
<status status="PASS" starttime="20170518 02:14:29.927" endtime="20170518 02:14:29.929"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:29.930" endtime="20170518 02:14:29.932"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:29.944" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:29.941" endtime="20170518 02:14:29.944"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:29.932" endtime="20170518 02:14:29.945"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:29.951" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:29.949" endtime="20170518 02:14:29.952"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:29.946" endtime="20170518 02:14:29.953"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:29.490" endtime="20170518 02:14:29.953"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:14:29.973" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:14:29.971" endtime="20170518 02:14:29.975"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:14:29.978" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:14:29.976" endtime="20170518 02:14:29.979"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:14:29.982" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:14:29.980" endtime="20170518 02:14:29.982"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:14:29.986" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:14:29.984" endtime="20170518 02:14:29.986"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:14:30.294" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:14:29.990" endtime="20170518 02:14:30.294"></status>
</kw>
<msg timestamp="20170518 02:14:30.295" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:30.295" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:29.987" endtime="20170518 02:14:30.295"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:14:30.298" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:30.297" endtime="20170518 02:14:30.299"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:30.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:30.300" endtime="20170518 02:14:30.303"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:29.968" endtime="20170518 02:14:30.303"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:29.965" endtime="20170518 02:14:30.304"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:29.961" endtime="20170518 02:14:30.304"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:14:30.307" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" starttime="20170518 02:14:30.306" endtime="20170518 02:14:30.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:30.309" endtime="20170518 02:14:30.315"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:14:30.415" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170518 02:14:30.416" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:30.317" endtime="20170518 02:14:30.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:30.417" endtime="20170518 02:14:30.419"></status>
</kw>
<msg timestamp="20170518 02:14:30.420" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:29.957" endtime="20170518 02:14:30.420"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:30.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:30.421" endtime="20170518 02:14:30.423"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:14:30.426" level="INFO">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 e0 15 6f a4 00 00 00 04 e0 17 e1 68 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90 00 00 0c 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 28 34 48 cb 14 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 28 34 4b d9 4c 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 28 34 4b ea b1 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 28 34 4c 1e 25 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 28 35 7a 3c 57 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:14:30.426" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:14:30.427" level="INFO">${content} = {u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 e0 15 6f a4 00 00 00 04 e0 17 e1 68 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00...</msg>
<status status="PASS" starttime="20170518 02:14:30.424" endtime="20170518 02:14:30.427"></status>
</kw>
<msg timestamp="20170518 02:14:30.428" level="INFO">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 e0 15 6f a4 00 00 00 04 e0 17 e1 68 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90 00 00 0c ...</msg>
<status status="PASS" starttime="20170518 02:14:29.954" endtime="20170518 02:14:30.428"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170518 02:14:30.430" level="INFO">Length is 1</msg>
<msg timestamp="20170518 02:14:30.431" level="INFO">${length} = 1</msg>
<status status="PASS" starttime="20170518 02:14:30.429" endtime="20170518 02:14:30.431"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:30.432" endtime="20170518 02:14:30.433"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:30.440" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:30.438" endtime="20170518 02:14:30.440"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:30.434" endtime="20170518 02:14:30.441"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:30.447" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:30.445" endtime="20170518 02:14:30.448"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:30.442" endtime="20170518 02:14:30.448"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:29.953" endtime="20170518 02:14:30.448"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:14:30.466" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:14:30.464" endtime="20170518 02:14:30.468"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:14:30.471" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:14:30.469" endtime="20170518 02:14:30.471"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:14:30.474" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:14:30.472" endtime="20170518 02:14:30.474"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:14:30.478" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:14:30.476" endtime="20170518 02:14:30.478"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:14:30.749" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:14:30.482" endtime="20170518 02:14:30.750"></status>
</kw>
<msg timestamp="20170518 02:14:30.750" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:30.751" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:30.480" endtime="20170518 02:14:30.751"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:14:30.758" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:30.753" endtime="20170518 02:14:30.759"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:30.767" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:30.760" endtime="20170518 02:14:30.767"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:30.461" endtime="20170518 02:14:30.768"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:30.459" endtime="20170518 02:14:30.768"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:30.456" endtime="20170518 02:14:30.769"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:14:30.772" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status status="PASS" starttime="20170518 02:14:30.770" endtime="20170518 02:14:30.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:30.774" endtime="20170518 02:14:30.776"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:14:30.936" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170518 02:14:30.937" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:30.777" endtime="20170518 02:14:30.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:30.939" endtime="20170518 02:14:30.941"></status>
</kw>
<msg timestamp="20170518 02:14:30.942" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:30.452" endtime="20170518 02:14:30.942"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:30.945" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:30.943" endtime="20170518 02:14:30.946"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:14:30.948" level="INFO">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 81 ed 34 ce 00 00 00 04 81 ee 53 e2 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:14:30.949" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:14:30.949" level="INFO">${content} = {u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 81 ed 34 ce 00 00 00 04 81 ee 53 e2 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00...</msg>
<status status="PASS" starttime="20170518 02:14:30.947" endtime="20170518 02:14:30.949"></status>
</kw>
<msg timestamp="20170518 02:14:30.951" level="INFO">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 81 ed 34 ce 00 00 00 04 81 ee 53 e2 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e ...</msg>
<status status="PASS" starttime="20170518 02:14:30.450" endtime="20170518 02:14:30.951"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170518 02:14:30.954" level="INFO">Length is 1</msg>
<msg timestamp="20170518 02:14:30.955" level="INFO">${length} = 1</msg>
<status status="PASS" starttime="20170518 02:14:30.953" endtime="20170518 02:14:30.955"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:30.956" endtime="20170518 02:14:30.959"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:30.971" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:30.968" endtime="20170518 02:14:30.971"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:30.959" endtime="20170518 02:14:30.972"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:30.978" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:30.976" endtime="20170518 02:14:30.978"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:30.973" endtime="20170518 02:14:30.979"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:30.449" endtime="20170518 02:14:30.979"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:14:31.000" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:14:30.998" endtime="20170518 02:14:31.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:14:31.006" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:14:31.004" endtime="20170518 02:14:31.006"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:14:31.012" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:14:31.007" endtime="20170518 02:14:31.012"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:14:31.016" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:14:31.014" endtime="20170518 02:14:31.016"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:14:31.241" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:14:31.021" endtime="20170518 02:14:31.241"></status>
</kw>
<msg timestamp="20170518 02:14:31.242" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:31.242" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:31.018" endtime="20170518 02:14:31.243"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:14:31.246" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:31.244" endtime="20170518 02:14:31.246"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:31.250" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:31.248" endtime="20170518 02:14:31.250"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:30.994" endtime="20170518 02:14:31.251"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:30.991" endtime="20170518 02:14:31.251"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:30.988" endtime="20170518 02:14:31.252"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:14:31.255" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status status="PASS" starttime="20170518 02:14:31.253" endtime="20170518 02:14:31.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:31.256" endtime="20170518 02:14:31.258"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:14:31.427" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170518 02:14:31.428" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:31.260" endtime="20170518 02:14:31.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:31.430" endtime="20170518 02:14:31.432"></status>
</kw>
<msg timestamp="20170518 02:14:31.432" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:30.983" endtime="20170518 02:14:31.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:31.436" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:31.434" endtime="20170518 02:14:31.436"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170518 02:14:31.439" level="INFO">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 ec 9d 45 d0 00 00 00 04 ec 9e 2b 66 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 05 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 29 11 28 b9 3f 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 29 11 2b bc ea 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 29 11 2b ce 26 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 29 11 2c 01 4b 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 29 12 58 bf ff 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:14:31.440" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170518 02:14:31.440" level="INFO">${content} = {u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 ec 9d 45 d0 00 00 00 04 ec 9e 2b 66 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00...</msg>
<status status="PASS" starttime="20170518 02:14:31.437" endtime="20170518 02:14:31.441"></status>
</kw>
<msg timestamp="20170518 02:14:31.442" level="INFO">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 ec 9d 45 d0 00 00 00 04 ec 9e 2b 66 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f ...</msg>
<status status="PASS" starttime="20170518 02:14:30.980" endtime="20170518 02:14:31.442"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170518 02:14:31.445" level="INFO">Length is 1</msg>
<msg timestamp="20170518 02:14:31.445" level="INFO">${length} = 1</msg>
<status status="PASS" starttime="20170518 02:14:31.444" endtime="20170518 02:14:31.445"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:31.447" endtime="20170518 02:14:31.449"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:31.459" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:31.457" endtime="20170518 02:14:31.460"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:31.449" endtime="20170518 02:14:31.460"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:31.466" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:31.464" endtime="20170518 02:14:31.467"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:31.461" endtime="20170518 02:14:31.467"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:30.979" endtime="20170518 02:14:31.467"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:29.489" endtime="20170518 02:14:31.468"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170518 02:14:31.483" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170518 02:14:31.512" level="INFO">${out} = </msg>
<status status="PASS" starttime="20170518 02:14:31.469" endtime="20170518 02:14:31.513"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170518 02:14:31.521" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" starttime="20170518 02:14:31.519" endtime="20170518 02:14:31.522"></status>
</kw>
<msg timestamp="20170518 02:14:31.522" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170518 02:14:31.516" endtime="20170518 02:14:31.523"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170518 02:14:31.526" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170518 02:14:31.524" endtime="20170518 02:14:31.527"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.977" endtime="20170518 02:14:31.528"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.844" endtime="20170518 02:14:31.529"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.830" endtime="20170518 02:14:31.529"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.829" endtime="20170518 02:14:31.530"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:31.539" endtime="20170518 02:14:31.541"></status>
</kw>
<msg timestamp="20170518 02:14:31.541" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:31.542" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170518 02:14:31.537" endtime="20170518 02:14:31.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:31.543" endtime="20170518 02:14:31.545"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170518 02:14:31.692" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170518 02:14:31.690" endtime="20170518 02:14:31.693"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:31.687" endtime="20170518 02:14:31.694"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:31.546" endtime="20170518 02:14:31.695"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:31.532" endtime="20170518 02:14:31.695"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:31.530" endtime="20170518 02:14:31.696"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:31.704" endtime="20170518 02:14:31.706"></status>
</kw>
<msg timestamp="20170518 02:14:31.707" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:31.707" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170518 02:14:31.702" endtime="20170518 02:14:31.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:31.709" endtime="20170518 02:14:31.710"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170518 02:14:31.856" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170518 02:14:31.854" endtime="20170518 02:14:31.857"></status>
</kw>
<msg timestamp="20170518 02:14:31.857" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170518 02:14:31.848" endtime="20170518 02:14:31.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:31.862" endtime="20170518 02:14:31.864"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:31.859" endtime="20170518 02:14:31.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170518 02:14:31.873" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170518 02:14:31.871" endtime="20170518 02:14:31.873"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170518 02:14:31.876" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170518 02:14:31.874" endtime="20170518 02:14:31.876"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170518 02:14:31.879" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170518 02:14:31.877" endtime="20170518 02:14:31.879"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170518 02:14:31.884" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170518 02:14:31.881" endtime="20170518 02:14:31.884"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:31.869" endtime="20170518 02:14:31.885"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:31.866" endtime="20170518 02:14:31.885"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170518 02:14:31.891" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170518 02:14:31.889" endtime="20170518 02:14:31.891"></status>
</kw>
<msg timestamp="20170518 02:14:31.891" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170518 02:14:31.886" endtime="20170518 02:14:31.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:31.912" endtime="20170518 02:14:31.914"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:31.915" endtime="20170518 02:14:31.919"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:31.909" endtime="20170518 02:14:31.919"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:31.904" endtime="20170518 02:14:31.920"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170518 02:14:31.922" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170518 02:14:34.256" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170518 02:14:31.921" endtime="20170518 02:14:34.259"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:31.844" endtime="20170518 02:14:34.260"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170518 02:14:34.263" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" starttime="20170518 02:14:34.261" endtime="20170518 02:14:34.263"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170518 02:14:34.272" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_led', '/org/op...</msg>
<status status="PASS" starttime="20170518 02:14:34.271" endtime="20170518 02:14:34.273"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170518 02:14:34.277" level="INFO">${logpath} = /tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_sensor_list.txt</msg>
<status status="PASS" starttime="20170518 02:14:34.275" endtime="20170518 02:14:34.277"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:14:34.295" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:14:34.293" endtime="20170518 02:14:34.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:14:34.301" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:14:34.300" endtime="20170518 02:14:34.302"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:14:34.306" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:14:34.303" endtime="20170518 02:14:34.306"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:14:34.310" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:14:34.308" endtime="20170518 02:14:34.310"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:14:34.621" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:14:34.314" endtime="20170518 02:14:34.622"></status>
</kw>
<msg timestamp="20170518 02:14:34.623" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:34.623" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:34.311" endtime="20170518 02:14:34.623"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:14:34.627" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:34.625" endtime="20170518 02:14:34.628"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:34.632" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:34.629" endtime="20170518 02:14:34.632"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:34.290" endtime="20170518 02:14:34.633"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:34.288" endtime="20170518 02:14:34.633"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:34.280" endtime="20170518 02:14:34.638"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:14:34.642" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" starttime="20170518 02:14:34.640" endtime="20170518 02:14:34.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:34.656" endtime="20170518 02:14:34.658"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:14:34.914" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170518 02:14:34.915" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:34.660" endtime="20170518 02:14:34.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:34.917" endtime="20170518 02:14:34.919"></status>
</kw>
<msg timestamp="20170518 02:14:34.920" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:34.278" endtime="20170518 02:14:34.920"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:34.926" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:34.924" endtime="20170518 02:14:34.926"></status>
</kw>
<msg timestamp="20170518 02:14:34.927" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170518 02:14:34.922" endtime="20170518 02:14:34.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:34.936" endtime="20170518 02:14:34.938"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170518 02:14:34.947" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Starting OS"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:14:34.947" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170518 02:14:34.948" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" starttime="20170518 02:14:34.939" endtime="20170518 02:14:34.948"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:34.957" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_sensor_list.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:34.952" endtime="20170518 02:14:34.957"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:34.949" endtime="20170518 02:14:34.958"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:34.274" endtime="20170518 02:14:34.958"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170518 02:14:34.961" level="INFO">${logpath} = /tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_record_log.txt</msg>
<status status="PASS" starttime="20170518 02:14:34.959" endtime="20170518 02:14:34.961"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:14:34.972" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:14:34.971" endtime="20170518 02:14:34.976"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:14:34.984" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:14:34.977" endtime="20170518 02:14:34.984"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:14:34.988" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:14:34.986" endtime="20170518 02:14:34.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:14:34.991" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:14:34.989" endtime="20170518 02:14:34.992"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:14:35.588" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:14:34.995" endtime="20170518 02:14:35.589"></status>
</kw>
<msg timestamp="20170518 02:14:35.589" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:35.589" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:34.993" endtime="20170518 02:14:35.590"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:14:35.593" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:35.591" endtime="20170518 02:14:35.593"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:35.597" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:35.595" endtime="20170518 02:14:35.597"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:34.968" endtime="20170518 02:14:35.598"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:34.965" endtime="20170518 02:14:35.598"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:34.964" endtime="20170518 02:14:35.599"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:14:35.602" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" starttime="20170518 02:14:35.600" endtime="20170518 02:14:35.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:35.604" endtime="20170518 02:14:35.606"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:14:35.741" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170518 02:14:35.742" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:35.607" endtime="20170518 02:14:35.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:35.744" endtime="20170518 02:14:35.746"></status>
</kw>
<msg timestamp="20170518 02:14:35.747" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:34.961" endtime="20170518 02:14:35.748"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:35.754" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170518 02:14:35.755" level="FAIL">404 != 200</msg>
<status status="FAIL" starttime="20170518 02:14:35.752" endtime="20170518 02:14:35.755"></status>
</kw>
<msg timestamp="20170518 02:14:35.756" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170518 02:14:35.749" endtime="20170518 02:14:35.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170518 02:14:35.762" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170518 02:14:35.761" endtime="20170518 02:14:35.762"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:35.758" endtime="20170518 02:14:35.763"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:34.958" endtime="20170518 02:14:35.763"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170518 02:14:35.768" level="INFO">${logpath} = /tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_elog.txt</msg>
<status status="PASS" starttime="20170518 02:14:35.765" endtime="20170518 02:14:35.768"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:14:35.785" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:14:35.783" endtime="20170518 02:14:35.788"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:14:35.791" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:14:35.789" endtime="20170518 02:14:35.791"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:14:35.795" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:14:35.793" endtime="20170518 02:14:35.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:14:35.798" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:14:35.796" endtime="20170518 02:14:35.798"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:14:36.332" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:14:35.801" endtime="20170518 02:14:36.332"></status>
</kw>
<msg timestamp="20170518 02:14:36.333" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:36.333" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:35.799" endtime="20170518 02:14:36.333"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:14:36.337" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:36.335" endtime="20170518 02:14:36.337"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:36.341" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:36.339" endtime="20170518 02:14:36.341"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:35.780" endtime="20170518 02:14:36.342"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:35.778" endtime="20170518 02:14:36.342"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:35.774" endtime="20170518 02:14:36.343"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:14:36.350" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" starttime="20170518 02:14:36.344" endtime="20170518 02:14:36.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:36.352" endtime="20170518 02:14:36.354"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:14:36.541" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170518 02:14:36.542" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:36.355" endtime="20170518 02:14:36.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:36.543" endtime="20170518 02:14:36.545"></status>
</kw>
<msg timestamp="20170518 02:14:36.546" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:35.769" endtime="20170518 02:14:36.546"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:36.552" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:36.550" endtime="20170518 02:14:36.552"></status>
</kw>
<msg timestamp="20170518 02:14:36.553" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170518 02:14:36.548" endtime="20170518 02:14:36.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:36.554" endtime="20170518 02:14:36.556"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170518 02:14:36.562" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 70 63 3c 26 00 00 00 04 70 64 05 90 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710035814, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 e0 15 6f a4 00 00 00 04 e0 17 e1 68 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90 00 00 0c 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 28 34 48 cb 14 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 28 34 4b d9 4c 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 28 34 4b ea b1 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 28 34 4c 1e 25 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 28 35 7a 3c 57 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710038955, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 81 ed 34 ce 00 00 00 04 81 ee 53 e2 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710166755, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 ec 9d 45 d0 00 00 00 04 ec 9e 2b 66 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 05 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 29 11 28 b9 3f 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 29 11 2b bc ea 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 29 11 2b ce 26 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 29 11 2c 01 4b 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 29 12 58 bf ff 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710169810, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:14:36.563" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170518 02:14:36.564" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [
                "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00...</msg>
<status status="PASS" starttime="20170518 02:14:36.558" endtime="20170518 02:14:36.564"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:36.585" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_elog.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:36.569" endtime="20170518 02:14:36.586"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:36.565" endtime="20170518 02:14:36.587"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:35.764" endtime="20170518 02:14:36.587"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170518 02:14:36.591" level="INFO">${logpath} = /tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_led.txt</msg>
<status status="PASS" starttime="20170518 02:14:36.589" endtime="20170518 02:14:36.591"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:14:36.607" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:14:36.605" endtime="20170518 02:14:36.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:14:36.611" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:14:36.610" endtime="20170518 02:14:36.611"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:14:36.615" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:14:36.613" endtime="20170518 02:14:36.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:14:36.618" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:14:36.616" endtime="20170518 02:14:36.619"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:14:37.018" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:14:36.622" endtime="20170518 02:14:37.019"></status>
</kw>
<msg timestamp="20170518 02:14:37.019" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:37.020" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:36.620" endtime="20170518 02:14:37.020"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:14:37.023" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:37.021" endtime="20170518 02:14:37.024"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:37.027" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:37.025" endtime="20170518 02:14:37.028"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:36.601" endtime="20170518 02:14:37.028"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:36.598" endtime="20170518 02:14:37.029"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:36.595" endtime="20170518 02:14:37.029"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:14:37.032" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" starttime="20170518 02:14:37.031" endtime="20170518 02:14:37.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:37.034" endtime="20170518 02:14:37.036"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:14:37.218" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170518 02:14:37.219" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:37.037" endtime="20170518 02:14:37.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:37.221" endtime="20170518 02:14:37.222"></status>
</kw>
<msg timestamp="20170518 02:14:37.224" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:36.592" endtime="20170518 02:14:37.224"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:37.229" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:37.227" endtime="20170518 02:14:37.230"></status>
</kw>
<msg timestamp="20170518 02:14:37.230" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170518 02:14:37.225" endtime="20170518 02:14:37.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:37.232" endtime="20170518 02:14:37.234"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170518 02:14:37.237" level="INFO">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:14:37.237" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170518 02:14:37.238" level="INFO">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status status="PASS" starttime="20170518 02:14:37.235" endtime="20170518 02:14:37.238"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:37.250" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_led.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:37.243" endtime="20170518 02:14:37.251"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:37.239" endtime="20170518 02:14:37.251"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:36.587" endtime="20170518 02:14:37.252"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170518 02:14:37.256" level="INFO">${logpath} = /tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_inventory.txt</msg>
<status status="PASS" starttime="20170518 02:14:37.253" endtime="20170518 02:14:37.256"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170518 02:14:37.271" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170518 02:14:37.269" endtime="20170518 02:14:37.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170518 02:14:37.276" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170518 02:14:37.275" endtime="20170518 02:14:37.277"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170518 02:14:37.280" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170518 02:14:37.278" endtime="20170518 02:14:37.280"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170518 02:14:37.284" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170518 02:14:37.282" endtime="20170518 02:14:37.284"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170518 02:14:37.636" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170518 02:14:37.289" endtime="20170518 02:14:37.637"></status>
</kw>
<msg timestamp="20170518 02:14:37.637" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:37.638" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:37.286" endtime="20170518 02:14:37.638"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170518 02:14:37.641" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:37.639" endtime="20170518 02:14:37.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:37.645" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:37.643" endtime="20170518 02:14:37.646"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:37.266" endtime="20170518 02:14:37.646"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:37.263" endtime="20170518 02:14:37.647"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:37.260" endtime="20170518 02:14:37.647"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170518 02:14:37.650" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" starttime="20170518 02:14:37.648" endtime="20170518 02:14:37.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:37.652" endtime="20170518 02:14:37.654"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170518 02:14:40.727" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170518 02:14:40.728" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:37.655" endtime="20170518 02:14:40.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:40.730" endtime="20170518 02:14:40.732"></status>
</kw>
<msg timestamp="20170518 02:14:40.733" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170518 02:14:37.257" endtime="20170518 02:14:40.733"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170518 02:14:40.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170518 02:14:40.737" endtime="20170518 02:14:40.740"></status>
</kw>
<msg timestamp="20170518 02:14:40.740" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170518 02:14:40.735" endtime="20170518 02:14:40.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:40.742" endtime="20170518 02:14:40.744"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170518 02:14:40.766" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "2", 
      "PartNumber": "0000000000000000", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "0000000", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933815990", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817514", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0d83", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e72", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dad", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e8f", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9d", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e95", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ec3", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0da9", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e73", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170518 02:14:40.769" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170518 02:14:40.770" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
 ...</msg>
<status status="PASS" starttime="20170518 02:14:40.746" endtime="20170518 02:14:40.771"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:40.779" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_inventory.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:40.776" endtime="20170518 02:14:40.779"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:40.771" endtime="20170518 02:14:40.780"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:37.252" endtime="20170518 02:14:40.780"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:34.273" endtime="20170518 02:14:40.780"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:34.268" endtime="20170518 02:14:40.781"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:34.267" endtime="20170518 02:14:40.781"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:34.264" endtime="20170518 02:14:40.781"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:31.842" endtime="20170518 02:14:40.782"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:31.711" endtime="20170518 02:14:40.782"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:31.697" endtime="20170518 02:14:40.783"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:31.696" endtime="20170518 02:14:40.783"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:40.791" endtime="20170518 02:14:40.793"></status>
</kw>
<msg timestamp="20170518 02:14:40.794" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:40.794" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170518 02:14:40.789" endtime="20170518 02:14:40.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:40.796" endtime="20170518 02:14:40.797"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170518 02:14:40.985" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170518 02:14:40.984" endtime="20170518 02:14:40.986"></status>
</kw>
<msg timestamp="20170518 02:14:40.986" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170518 02:14:40.982" endtime="20170518 02:14:40.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:40.989" endtime="20170518 02:14:40.991"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:40.987" endtime="20170518 02:14:40.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170518 02:14:40.998" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170518 02:14:40.997" endtime="20170518 02:14:40.999"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170518 02:14:41.001" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170518 02:14:41.000" endtime="20170518 02:14:41.001"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170518 02:14:41.005" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170518 02:14:41.003" endtime="20170518 02:14:41.005"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170518 02:14:41.009" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170518 02:14:41.006" endtime="20170518 02:14:41.009"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:40.994" endtime="20170518 02:14:41.010"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:40.992" endtime="20170518 02:14:41.010"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170518 02:14:41.016" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170518 02:14:41.014" endtime="20170518 02:14:41.017"></status>
</kw>
<msg timestamp="20170518 02:14:41.017" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170518 02:14:41.012" endtime="20170518 02:14:41.017"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:41.025" endtime="20170518 02:14:41.027"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:41.028" endtime="20170518 02:14:41.029"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:41.023" endtime="20170518 02:14:41.030"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:41.019" endtime="20170518 02:14:41.030"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170518 02:14:41.032" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170518 02:14:43.465" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170518 02:14:41.031" endtime="20170518 02:14:43.466"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:40.979" endtime="20170518 02:14:43.467"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170518 02:14:43.469" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" starttime="20170518 02:14:43.468" endtime="20170518 02:14:43.470"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170518 02:14:43.476" level="INFO">@{cmd_list} = [ ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_dmesg', 'dmesg') ]</msg>
<status status="PASS" starttime="20170518 02:14:43.474" endtime="20170518 02:14:43.476"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170518 02:14:43.480" level="INFO">${logpath} = /tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_journalctl.txt</msg>
<status status="PASS" starttime="20170518 02:14:43.478" endtime="20170518 02:14:43.480"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:43.483" endtime="20170518 02:14:43.485"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:14:43.495" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170518 02:14:49.803" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:14:49.817" level="INFO">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:29 UTC, end at Thu 2017-04-20 17:44:17 UTC. --
Apr 20 17:29:29 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:29 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170518 02:14:49.818" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:14:43.486" endtime="20170518 02:14:49.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:49.872" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_journalctl.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:49.860" endtime="20170518 02:14:49.872"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:49.844" endtime="20170518 02:14:49.873"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:49.820" endtime="20170518 02:14:49.873"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:43.481" endtime="20170518 02:14:49.874"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:43.477" endtime="20170518 02:14:49.877"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170518 02:14:49.881" level="INFO">${logpath} = /tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_meminfo.txt</msg>
<status status="PASS" starttime="20170518 02:14:49.879" endtime="20170518 02:14:49.881"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:49.887" endtime="20170518 02:14:49.889"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:14:49.892" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170518 02:14:50.058" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:14:50.059" level="INFO">${stdout} = MemTotal:         432876 kB
MemFree:          277920 kB
MemAvailable:     319824 kB
Buffers:           10512 kB
Cached:            50224 kB
SwapCached:            0 kB
Active:           106940 kB
Inac...</msg>
<msg timestamp="20170518 02:14:50.060" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:14:49.890" endtime="20170518 02:14:50.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:50.096" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_meminfo.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:50.093" endtime="20170518 02:14:50.096"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.089" endtime="20170518 02:14:50.097"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.061" endtime="20170518 02:14:50.097"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:49.882" endtime="20170518 02:14:50.098"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:49.877" endtime="20170518 02:14:50.098"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170518 02:14:50.103" level="INFO">${logpath} = /tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_proc_list.txt</msg>
<status status="PASS" starttime="20170518 02:14:50.100" endtime="20170518 02:14:50.103"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:50.108" endtime="20170518 02:14:50.110"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:14:50.113" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170518 02:14:50.616" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:14:50.617" level="INFO">${stdout} = Mem: 154924K used, 277952K free, 14984K shrd, 10512K buff, 50228K cached
CPU:   0% usr 100% sys   0% nic   0% idle   0% io   0% irq   0% sirq
Load average: 0.95 1.01 0.80 3/141 2233
  PID  PPID USER  ...</msg>
<msg timestamp="20170518 02:14:50.617" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:14:50.112" endtime="20170518 02:14:50.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:50.656" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_proc_list.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:50.653" endtime="20170518 02:14:50.656"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.649" endtime="20170518 02:14:50.657"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.619" endtime="20170518 02:14:50.657"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.104" endtime="20170518 02:14:50.658"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.099" endtime="20170518 02:14:50.658"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170518 02:14:50.662" level="INFO">${logpath} = /tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_procinfo.txt</msg>
<status status="PASS" starttime="20170518 02:14:50.660" endtime="20170518 02:14:50.662"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:50.667" endtime="20170518 02:14:50.669"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:14:50.672" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170518 02:14:50.782" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:14:50.783" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170518 02:14:50.783" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:14:50.671" endtime="20170518 02:14:50.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:50.818" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_procinfo.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:50.815" endtime="20170518 02:14:50.819"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.811" endtime="20170518 02:14:50.819"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.785" endtime="20170518 02:14:50.820"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.663" endtime="20170518 02:14:50.820"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.658" endtime="20170518 02:14:50.821"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170518 02:14:50.825" level="INFO">${logpath} = /tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_dmesg.txt</msg>
<status status="PASS" starttime="20170518 02:14:50.823" endtime="20170518 02:14:50.826"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:50.831" endtime="20170518 02:14:50.832"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:14:50.835" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170518 02:14:50.906" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:14:50.907" level="INFO">${stdout} =  slave@01:00: status: 0x04000500, sisc: 0x00040000
 slave@01:00: status: 0x04000500, sisc: 0x00040000
 slave@01:00: status: 0x04000500, sisc: 0x00040000
 slave@01:00: status: 0x04000500, sisc: 0x00040...</msg>
<msg timestamp="20170518 02:14:50.907" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:14:50.834" endtime="20170518 02:14:50.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:50.942" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_dmesg.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:50.938" endtime="20170518 02:14:50.942"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.934" endtime="20170518 02:14:50.943"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.909" endtime="20170518 02:14:50.943"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.826" endtime="20170518 02:14:50.944"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.821" endtime="20170518 02:14:50.944"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:43.476" endtime="20170518 02:14:50.944"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:43.471" endtime="20170518 02:14:50.945"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:43.471" endtime="20170518 02:14:50.945"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:43.470" endtime="20170518 02:14:50.945"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:40.977" endtime="20170518 02:14:50.946"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:40.799" endtime="20170518 02:14:50.947"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:40.785" endtime="20170518 02:14:50.947"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:40.784" endtime="20170518 02:14:50.964"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:50.973" endtime="20170518 02:14:50.975"></status>
</kw>
<msg timestamp="20170518 02:14:50.976" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:50.976" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170518 02:14:50.971" endtime="20170518 02:14:50.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:50.978" endtime="20170518 02:14:50.979"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170518 02:14:51.132" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170518 02:14:51.130" endtime="20170518 02:14:51.132"></status>
</kw>
<msg timestamp="20170518 02:14:51.133" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170518 02:14:51.126" endtime="20170518 02:14:51.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:51.137" endtime="20170518 02:14:51.139"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:51.134" endtime="20170518 02:14:51.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170518 02:14:51.149" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170518 02:14:51.147" endtime="20170518 02:14:51.149"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170518 02:14:51.152" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170518 02:14:51.150" endtime="20170518 02:14:51.152"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170518 02:14:51.155" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170518 02:14:51.153" endtime="20170518 02:14:51.155"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170518 02:14:51.159" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170518 02:14:51.156" endtime="20170518 02:14:51.159"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:51.143" endtime="20170518 02:14:51.160"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:51.140" endtime="20170518 02:14:51.160"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170518 02:14:51.166" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170518 02:14:51.164" endtime="20170518 02:14:51.166"></status>
</kw>
<msg timestamp="20170518 02:14:51.167" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170518 02:14:51.162" endtime="20170518 02:14:51.167"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:51.174" endtime="20170518 02:14:51.176"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:51.177" endtime="20170518 02:14:51.180"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:51.172" endtime="20170518 02:14:51.180"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:51.168" endtime="20170518 02:14:51.181"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170518 02:14:51.183" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170518 02:14:53.453" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170518 02:14:51.182" endtime="20170518 02:14:53.454"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:51.122" endtime="20170518 02:14:53.455"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170518 02:14:53.458" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status status="PASS" starttime="20170518 02:14:53.456" endtime="20170518 02:14:53.458"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170518 02:14:53.464" level="INFO">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') ]</msg>
<status status="PASS" starttime="20170518 02:14:53.462" endtime="20170518 02:14:53.464"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.490" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" starttime="20170518 02:14:53.466" endtime="20170518 02:14:53.490"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.507" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:53.505" endtime="20170518 02:14:53.508"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.502" endtime="20170518 02:14:53.508"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.516" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:53.514" endtime="20170518 02:14:53.516"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.509" endtime="20170518 02:14:53.517"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.522" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:53.521" endtime="20170518 02:14:53.523"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.518" endtime="20170518 02:14:53.524"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.530" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:53.528" endtime="20170518 02:14:53.531"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.525" endtime="20170518 02:14:53.531"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.499" endtime="20170518 02:14:53.532"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.497" endtime="20170518 02:14:53.532"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:14:53.535" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170518 02:14:53.589" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:14:53.590" level="INFO">${stdout} = Linux witherspoon 4.10.5-8736136e756ec127de0bbe2c7e2de683204d4512 #1 Thu May 18 01:48:13 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170518 02:14:53.591" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:14:53.534" endtime="20170518 02:14:53.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.622" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:53.619" endtime="20170518 02:14:53.622"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.615" endtime="20170518 02:14:53.623"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.592" endtime="20170518 02:14:53.623"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.492" endtime="20170518 02:14:53.624"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.491" endtime="20170518 02:14:53.624"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.642" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:53.640" endtime="20170518 02:14:53.643"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.636" endtime="20170518 02:14:53.643"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.650" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:53.648" endtime="20170518 02:14:53.651"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.644" endtime="20170518 02:14:53.651"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.657" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:53.655" endtime="20170518 02:14:53.658"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.652" endtime="20170518 02:14:53.659"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.666" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:53.664" endtime="20170518 02:14:53.667"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.659" endtime="20170518 02:14:53.667"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.633" endtime="20170518 02:14:53.668"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.630" endtime="20170518 02:14:53.668"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:14:53.670" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170518 02:14:53.773" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:14:53.774" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg timestamp="20170518 02:14:53.775" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:14:53.669" endtime="20170518 02:14:53.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.802" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:53.801" endtime="20170518 02:14:53.803"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.797" endtime="20170518 02:14:53.804"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.776" endtime="20170518 02:14:53.804"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.625" endtime="20170518 02:14:53.804"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.624" endtime="20170518 02:14:53.805"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.819" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:53.817" endtime="20170518 02:14:53.819"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.814" endtime="20170518 02:14:53.820"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.826" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:53.824" endtime="20170518 02:14:53.827"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.820" endtime="20170518 02:14:53.827"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.832" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:53.831" endtime="20170518 02:14:53.833"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.828" endtime="20170518 02:14:53.833"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.838" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:53.837" endtime="20170518 02:14:53.839"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.834" endtime="20170518 02:14:53.839"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.812" endtime="20170518 02:14:53.840"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.810" endtime="20170518 02:14:53.840"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:14:53.843" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170518 02:14:53.936" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:14:53.937" level="INFO">${stdout} =  17:44:27 up 15 min,  load average: 0.87, 0.99, 0.79</msg>
<msg timestamp="20170518 02:14:53.937" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:14:53.841" endtime="20170518 02:14:53.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.969" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:53.967" endtime="20170518 02:14:53.969"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.963" endtime="20170518 02:14:53.970"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.939" endtime="20170518 02:14:53.971"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.806" endtime="20170518 02:14:53.971"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.805" endtime="20170518 02:14:53.971"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.491" endtime="20170518 02:14:53.972"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.460" endtime="20170518 02:14:53.972"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.459" endtime="20170518 02:14:53.972"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170518 02:14:53.978" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" starttime="20170518 02:14:53.976" endtime="20170518 02:14:53.978"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170518 02:14:53.982" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" starttime="20170518 02:14:53.980" endtime="20170518 02:14:53.982"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:54.000" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:53.998" endtime="20170518 02:14:54.000"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.995" endtime="20170518 02:14:54.001"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:54.007" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:54.006" endtime="20170518 02:14:54.008"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.002" endtime="20170518 02:14:54.008"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:54.014" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:54.012" endtime="20170518 02:14:54.015"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.009" endtime="20170518 02:14:54.015"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:54.021" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:54.019" endtime="20170518 02:14:54.022"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.016" endtime="20170518 02:14:54.022"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.990" endtime="20170518 02:14:54.023"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.988" endtime="20170518 02:14:54.023"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:14:54.026" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170518 02:14:54.074" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170518 02:14:54.075" level="INFO">${stdout} = </msg>
<msg timestamp="20170518 02:14:54.075" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" starttime="20170518 02:14:54.025" endtime="20170518 02:14:54.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:54.108" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:54.106" endtime="20170518 02:14:54.108"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.101" endtime="20170518 02:14:54.109"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.077" endtime="20170518 02:14:54.109"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.984" endtime="20170518 02:14:54.110"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.983" endtime="20170518 02:14:54.110"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:54.127" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:54.125" endtime="20170518 02:14:54.127"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.121" endtime="20170518 02:14:54.128"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:54.134" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:54.132" endtime="20170518 02:14:54.135"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.129" endtime="20170518 02:14:54.135"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:54.141" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:54.139" endtime="20170518 02:14:54.141"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.136" endtime="20170518 02:14:54.142"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:54.150" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:54.146" endtime="20170518 02:14:54.150"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.143" endtime="20170518 02:14:54.151"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.119" endtime="20170518 02:14:54.152"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.116" endtime="20170518 02:14:54.152"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:14:54.155" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170518 02:14:54.299" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:14:54.300" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.5-45"
VERSION_ID="v1.99.5-45-g4c26a5f"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170518 02:14:54.300" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:14:54.153" endtime="20170518 02:14:54.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:54.335" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:54.333" endtime="20170518 02:14:54.335"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.329" endtime="20170518 02:14:54.336"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.302" endtime="20170518 02:14:54.336"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.112" endtime="20170518 02:14:54.337"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.111" endtime="20170518 02:14:54.337"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.982" endtime="20170518 02:14:54.337"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.974" endtime="20170518 02:14:54.338"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.973" endtime="20170518 02:14:54.338"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170518 02:14:54.344" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" starttime="20170518 02:14:54.342" endtime="20170518 02:14:54.344"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170518 02:14:54.348" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" starttime="20170518 02:14:54.346" endtime="20170518 02:14:54.349"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:54.368" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:54.365" endtime="20170518 02:14:54.368"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.362" endtime="20170518 02:14:54.369"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:54.380" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:54.378" endtime="20170518 02:14:54.381"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.374" endtime="20170518 02:14:54.381"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:54.387" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:54.385" endtime="20170518 02:14:54.387"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.382" endtime="20170518 02:14:54.388"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:54.393" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:54.392" endtime="20170518 02:14:54.394"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.389" endtime="20170518 02:14:54.394"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.359" endtime="20170518 02:14:54.395"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.356" endtime="20170518 02:14:54.395"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:14:54.398" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170518 02:14:56.021" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:14:56.022" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg timestamp="20170518 02:14:56.022" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:14:54.396" endtime="20170518 02:14:56.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170518 02:14:56.055" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/20170518021426323913_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:56.052" endtime="20170518 02:14:56.055"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:56.048" endtime="20170518 02:14:56.056"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:56.024" endtime="20170518 02:14:56.056"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.351" endtime="20170518 02:14:56.057"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.350" endtime="20170518 02:14:56.057"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.349" endtime="20170518 02:14:56.057"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.339" endtime="20170518 02:14:56.058"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:54.338" endtime="20170518 02:14:56.058"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:53.458" endtime="20170518 02:14:56.058"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:51.120" endtime="20170518 02:14:56.059"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.981" endtime="20170518 02:14:56.059"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.966" endtime="20170518 02:14:56.060"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:50.965" endtime="20170518 02:14:56.060"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:56.069" endtime="20170518 02:14:56.072"></status>
</kw>
<msg timestamp="20170518 02:14:56.072" level="INFO">${status} = PASS</msg>
<msg timestamp="20170518 02:14:56.073" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170518 02:14:56.067" endtime="20170518 02:14:56.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:56.075" endtime="20170518 02:14:56.076"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170518 02:14:56.230" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170518 02:14:56.228" endtime="20170518 02:14:56.231"></status>
</kw>
<msg timestamp="20170518 02:14:56.231" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170518 02:14:56.226" endtime="20170518 02:14:56.232"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:56.236" endtime="20170518 02:14:56.238"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:56.233" endtime="20170518 02:14:56.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170518 02:14:56.247" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170518 02:14:56.245" endtime="20170518 02:14:56.247"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170518 02:14:56.250" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170518 02:14:56.249" endtime="20170518 02:14:56.250"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170518 02:14:56.253" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170518 02:14:56.251" endtime="20170518 02:14:56.253"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170518 02:14:56.257" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170518 02:14:56.255" endtime="20170518 02:14:56.258"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:56.243" endtime="20170518 02:14:56.258"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:56.240" endtime="20170518 02:14:56.259"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170518 02:14:56.265" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170518 02:14:56.263" endtime="20170518 02:14:56.265"></status>
</kw>
<msg timestamp="20170518 02:14:56.266" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170518 02:14:56.260" endtime="20170518 02:14:56.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:56.275" endtime="20170518 02:14:56.277"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:56.278" endtime="20170518 02:14:56.280"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:56.272" endtime="20170518 02:14:56.281"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:56.268" endtime="20170518 02:14:56.281"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170518 02:14:56.284" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170518 02:14:58.086" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170518 02:14:56.283" endtime="20170518 02:14:58.087"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:56.223" endtime="20170518 02:14:58.088"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170518 02:14:58.090" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170518 02:14:58.142" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:14:58.143" level="INFO">${core_files} = /tmp/core_phosphor-hwmon-.1442</msg>
<status status="PASS" starttime="20170518 02:14:58.089" endtime="20170518 02:14:58.143"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170518 02:14:58.148" level="INFO">@{core_list} = [ /tmp/core_phosphor-hwmon-.1442 ]</msg>
<status status="PASS" starttime="20170518 02:14:58.144" endtime="20170518 02:14:58.148"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:58.151" endtime="20170518 02:14:58.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:58.179" endtime="20170518 02:14:58.955"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:58.177" endtime="20170518 02:14:58.955"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:58.174" endtime="20170518 02:14:58.956"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:58.149" endtime="20170518 02:14:58.956"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.1442">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:58.958" endtime="20170518 02:14:59.220"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170518 02:14:59.225" level="INFO">Executing command 'rm /tmp/core_phosphor-hwmon-.1442'.</msg>
<msg timestamp="20170518 02:14:59.276" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170518 02:14:59.276" level="INFO">${stdout} = </msg>
<msg timestamp="20170518 02:14:59.277" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170518 02:14:59.224" endtime="20170518 02:14:59.277"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170518 02:14:59.280" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170518 02:14:59.278" endtime="20170518 02:14:59.280"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:59.221" endtime="20170518 02:14:59.281"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:58.957" endtime="20170518 02:14:59.281"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:58.957" endtime="20170518 02:14:59.281"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:56.220" endtime="20170518 02:14:59.282"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:56.078" endtime="20170518 02:14:59.282"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:56.062" endtime="20170518 02:14:59.283"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:56.061" endtime="20170518 02:14:59.283"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.829" endtime="20170518 02:14:59.283"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.815" endtime="20170518 02:14:59.284"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.814" endtime="20170518 02:14:59.284"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.809" endtime="20170518 02:14:59.285"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20170518 02:14:59.286" endtime="20170518 02:14:59.475"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:28.805" endtime="20170518 02:14:59.476"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:22.244" endtime="20170518 02:14:59.477"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:22.242" endtime="20170518 02:14:59.478"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:59.479" endtime="20170518 02:14:59.482"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170518 02:14:59.529" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170518 02:14:59.487" endtime="20170518 02:14:59.529"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170518 02:14:59.533" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/23477/obmc-robot/logs/20170518021426323913_TestsTestBasicPoweron/20170518021426323913_CheckForApplicationFailures/</msg>
<status status="PASS" starttime="20170518 02:14:59.531" endtime="20170518 02:14:59.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:59.535" endtime="20170518 02:14:59.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:59.538" endtime="20170518 02:14:59.541"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170518 02:14:59.544" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs"&gt;/tmp/fspcibld/23477/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20170518 02:14:59.542" endtime="20170518 02:14:59.544"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170518 02:14:59.550" level="INFO" html="yes">File '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20170518 02:14:59.548" endtime="20170518 02:14:59.550"></status>
</kw>
<msg timestamp="20170518 02:14:59.551" level="INFO">${exist} = True</msg>
<status status="PASS" starttime="20170518 02:14:59.546" endtime="20170518 02:14:59.551"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:59.552" endtime="20170518 02:14:59.554"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:59.555" endtime="20170518 02:14:59.557"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170518 02:14:59.562" level="INFO">${cur_time} = 2017-05-18 02:14:59:561377</msg>
<status status="PASS" starttime="20170518 02:14:59.560" endtime="20170518 02:14:59.562"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170518 02:14:59.565" level="INFO">${cur_time} = 20170518021459561377</msg>
<status status="PASS" starttime="20170518 02:14:59.564" endtime="20170518 02:14:59.565"></status>
</kw>
<msg timestamp="20170518 02:14:59.566" level="INFO">${cur_time} = 20170518021459561377</msg>
<status status="PASS" starttime="20170518 02:14:59.558" endtime="20170518 02:14:59.566"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170518 02:14:59.571" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23477/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23477/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170518 02:14:59.568" endtime="20170518 02:14:59.571"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:59.483" endtime="20170518 02:14:59.572"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:21.702" endtime="20170518 02:14:59.572"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170518 02:14:59.580" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:14:59.578" endtime="20170518 02:14:59.580"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170518 02:14:59.583" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:14:59.581" endtime="20170518 02:14:59.584"></status>
</kw>
<msg timestamp="20170518 02:14:59.585" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170518 02:14:59.576" endtime="20170518 02:14:59.585"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:59.589" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170518 02:14:59.588" endtime="20170518 02:14:59.589"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:59.591" endtime="20170518 02:14:59.632"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170518 02:14:59.646" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170518 02:14:59.653" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:14:59.654" level="INFO">${output} = /tmp/fspcibld/23477/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170518 02:14:59.633" endtime="20170518 02:14:59.654"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:59.656" endtime="20170518 02:14:59.687"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:59.688" endtime="20170518 02:14:59.690"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:59.692" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170518 02:14:59.691" endtime="20170518 02:14:59.692"></status>
</kw>
<msg timestamp="20170518 02:14:59.693" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170518 02:14:59.586" endtime="20170518 02:14:59.693"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:59.695" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170518 02:14:59.694" endtime="20170518 02:14:59.695"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:59.696" endtime="20170518 02:14:59.728"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170518 02:14:59.736" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170518 02:14:59.761" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:14:59.761" level="INFO">${os_con_pid} = 222</msg>
<status status="PASS" starttime="20170518 02:14:59.730" endtime="20170518 02:14:59.762"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:59.765" endtime="20170518 02:14:59.805"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:59.807" level="INFO">${cmd_buf} = kill -9 222</msg>
<status status="PASS" starttime="20170518 02:14:59.806" endtime="20170518 02:14:59.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:59.811" endtime="20170518 02:14:59.846"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:59.808" endtime="20170518 02:14:59.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg timestamp="20170518 02:14:59.858" level="INFO">Running command 'kill -9 222 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20170518 02:14:59.852" endtime="20170518 02:14:59.862"></status>
</kw>
<msg timestamp="20170518 02:14:59.863" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:14:59.863" level="INFO">${output} = </msg>
<status status="PASS" starttime="20170518 02:14:59.848" endtime="20170518 02:14:59.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:59.870" endtime="20170518 02:14:59.893"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:59.867" endtime="20170518 02:14:59.893"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170518 02:14:59.895" level="INFO">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170518 02:14:59.894" endtime="20170518 02:14:59.895"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:59.895" endtime="20170518 02:14:59.912"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170518 02:14:59.918" level="INFO">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg timestamp="20170518 02:14:59.925" level="INFO">${rc} = 0</msg>
<msg timestamp="20170518 02:14:59.925" level="INFO">${output} = spawn ssh -p 2200 root@9.41.166.169
root@9.41.166.169's password: 
114.99936|ISTEP 21. 1
135.04697|ISTEP 21. 2
135.04753|ISTEP 21. 3
[  135.414675669,5] SkiBoot skiboot-5.5.0-rc3 starting...
[  135.41...</msg>
<status status="PASS" starttime="20170518 02:14:59.913" endtime="20170518 02:14:59.925"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:59.927" endtime="20170518 02:14:59.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" starttime="20170518 02:14:59.943" endtime="20170518 02:14:59.944"></status>
</kw>
<msg timestamp="20170518 02:14:59.945" level="INFO">${sol_log} = spawn ssh -p 2200 root@9.41.166.169
root@9.41.166.169's password: 
114.99936|ISTEP 21. 1
135.04697|ISTEP 21. 2
135.04753|ISTEP 21. 3
[  135.414675669,5] SkiBoot skiboot-5.5.0-rc3 starting...
[  135.41...</msg>
<status status="PASS" starttime="20170518 02:14:59.573" endtime="20170518 02:14:59.945"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170518 02:14:59.946" level="INFO">spawn ssh -p 2200 root@9.41.166.169
root@9.41.166.169's password: 
114.99936|ISTEP 21. 1
135.04697|ISTEP 21. 2
135.04753|ISTEP 21. 3
[  135.414675669,5] SkiBoot skiboot-5.5.0-rc3 starting...
[  135.414679051,5] initial console log level: memory 7, driver 5
[  135.414681855,6] CPU: P9 generation processor(max 4 threads/core)
[  135.414684467,7] CPU: Boot CPU PIR is 0x002c PVR is 0x004e0100
[  135.414687133,7] CPU: Initial max PIR set to 0x7fff
[  135.415919841,5] OPAL table: 0x300d2740 .. 0x300d2c00, branch table: 0x30002000
[  135.415926843,7] Parsing HDAT...
[  135.415929099,5] SPIRA-S found.
[  135.415934136,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[  135.415938902,6] SP Family is ibm,ast2500,openbmc
[  135.415946656,7] LPC: IOPATH chip id = 0
[  135.415948605,7] LPC: FW BAR       = f0000000
[  135.415950705,7] LPC: MEM BAR      = e0000000
[  135.415952760,7] LPC: IO BAR       = d0010000
[  135.415954820,7] LPC: Internal BAR = c0012000
[  135.415971057,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[  135.415974835,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[  135.416521099,5] UART: Using UART at 0x60300d00103f8
[  135.417615340,5] IOHUB: PHB4 active bridge mask fc
[  135.417752250,5] IOHUB: PHB4 active bridge mask 9c
[  135.417853207,4] VPD: Model name 0000000000000000 not known
[  135.417960836,5] P9 DD1.03 detected
[  135.417997997,5] XSCOM: chip 0x0 at 0x603fc00000000 [P9N DD1.0]
[  135.418044841,5] P9 DD1.03 detected
[  135.418069151,5] XSCOM: chip 0x8 at 0x623fc00000000 [P9N DD1.0]
[  135.418161516,5] LPC: LPC[000]: Initialized, access via MMIO @0x6030000000000
[  135.418247250,5] LPC: LPC: Default bus on chip 0x0
[  135.418320909,4] HOMER image is not reserved! Reserving
[  135.418379436,4] HOMER image is not reserved! Reserving
[  135.418433869,5] SLW: Enabling: stop0_lite
[  135.418533040,5] PLAT: Using virtual UART
[  135.418679668,7] LPC: LPC: Routing irq 9, policy: 0 (r=1)
[  135.418682459,7] LPC: LPC: SerIRQ 9 using route 0 targetted at OPAL
[  135.418786523,5] PLAT: Detected Witherspoon platform
[  135.419515893,4] XIVE[ IC 00  ] IC BAR invalid, reconfiguring
[  135.422816093,4] XIVE[ IC 08  ] IC BAR invalid, reconfiguring
[  135.441597682,5] PSI[0x000]: ESB MMIO invalid, reconfiguring...
[  135.441668839,5] PSI[0x000]: ESB MMIO at @0x60302031c0000
[  135.441725084,5] PSI[0x000]: Found PSI bridge [active=0]
[  135.441779551,5] PSI[0x008]: ESB MMIO invalid, reconfiguring...
[  135.441819038,5] PSI[0x008]: ESB MMIO at @0x62302031c0000
[  135.441873360,5] PSI[0x008]: Found PSI bridge [active=0]
[  135.443018324,5] CPU: All 32 processors called in...
[    0.286195264,3] LPC-MBOX: Got a status bit set that don't know about: 0x80
[    1.389490576,5] FLASH: Found system flash:  id:0
[    1.389564224,5] BT: Interface initialized, IO 0x00e4
[    1.389605008,7] LPC: LPC: Routing irq 10, policy: 0 (r=1)
[    1.389607712,7] LPC: LPC: SerIRQ 10 using route 1 targetted at OPAL
[    2.338617552,5] NVRAM: Size is 576 KB
[    3.343073248,5] STB: secure and trusted boot not supported
[    3.343123552,5] OPAL: Using OPAL UART console
[    3.343162464,7] LPC: LPC: Routing irq 4, policy: 0 (r=1)
[    3.343164864,7] LPC: LPC: SerIRQ 4 using route 2 targetted at OPAL
[    3.343236736,5] SLW: Init chip 0x0
[    3.343257280,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.343307856,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.343346160,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.343382512,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.343424624,5] SLW: Init chip 0x8
[    3.343455648,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.343496320,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.343536432,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.343572160,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.343629536,5] CAPI: WARNING: no compat thing found
[    3.343671280,5] FLASH: Queueing preload of 0/0
[    3.343695888,5] FLASH: Queueing preload of 1/0
[    3.343701440,7] LPC-MBOX: Sending BMC interrupt
[    3.343843168,5] PHB: Chip 0 Found PHB4 PBCQ0 Stack 0 at /xscom@603fc00000000/pbcq@4010c00/stack@0
[    3.343903664,3] PHB[0:0] No PHB BAR set ! Overriding
[    3.343932400,3] PHB[0:0] REGS     = 0x000600c3c0000000 [4k]
[    3.343963392,3] PHB[0:0] No IRQ BAR set ! Overriding
[    3.343988384,3] PHB[0:0] ESB      = 0x000600c300000000 [...]
[    3.344022320,3] PHB[0:0] No MMIO BAR set ! Overriding
[    3.344060192,3] ETU reset: 0
[    3.344599360,3] Version reg: 0x000000a400000001
[    3.344660512,5] PHB: Chip 0 Found PHB4 PBCQ1 Stack 0 at /xscom@603fc00000000/pbcq@4011000/stack@0
[    3.344715008,3] PHB[0:1] No PHB BAR set ! Overriding
[    3.344757424,3] PHB[0:1] REGS     = 0x000600c3c0100000 [4k]
[    3.344786256,3] PHB[0:1] No IRQ BAR set ! Overriding
[    3.344812752,3] PHB[0:1] ESB      = 0x000600c320000000 [...]
[    3.344847760,3] PHB[0:1] No MMIO BAR set ! Overriding
[    3.344886752,3] ETU reset: 0
[    3.345416304,3] Version reg: 0x000000a400000001
[    3.345470224,5] PHB: Chip 0 Found PHB4 PBCQ1 Stack 1 at /xscom@603fc00000000/pbcq@4011000/stack@1
[    3.345525856,3] PHB[0:2] No PHB BAR set ! Overriding
[    3.345556640,3] PHB[0:2] REGS     = 0x000600c3c0200000 [4k]
[    3.345589984,3] PHB[0:2] No IRQ BAR set ! Overriding
[    3.345618256,3] PHB[0:2] ESB      = 0x000600c340000000 [...]
[    3.345656480,3] PHB[0:2] No MMIO BAR set ! Overriding
[    3.345692048,3] ETU reset: 0
[    3.346221456,3] Version reg: 0x000000a400000001
[    3.346275568,5] PHB: Chip 0 Found PHB4 PBCQ2 Stack 0 at /xscom@603fc00000000/pbcq@4011400/stack@0
[    3.346330736,3] PHB[0:3] No PHB BAR set ! Overriding
[    3.346361120,3] PHB[0:3] REGS     = 0x000600c3c0300000 [4k]
[    3.346390368,3] PHB[0:3] No IRQ BAR set ! Overriding
[    3.346415296,3] PHB[0:3] ESB      = 0x000600c360000000 [...]
[    3.346447648,3] PHB[0:3] No MMIO BAR set ! Overriding
[    3.346484512,3] ETU reset: 0
[    3.347018288,3] Version reg: 0x000000a400000001
[    3.347064544,5] PHB: Chip 0 Found PHB4 PBCQ2 Stack 1 at /xscom@603fc00000000/pbcq@4011400/stack@1
[    3.347121664,3] PHB[0:4] No PHB BAR set ! Overriding
[    3.347187200,3] PHB[0:4] REGS     = 0x000600c3c0400000 [4k]
[    3.347231200,3] PHB[0:4] No IRQ BAR set ! Overriding
[    3.347256576,3] PHB[0:4] ESB      = 0x000600c380000000 [...]
[    3.347297440,3] PHB[0:4] No MMIO BAR set ! Overriding
[    3.347333520,3] ETU reset: 0
[    3.347865104,3] Version reg: 0x000000a400000001
[    3.347925120,5] PHB: Chip 0 Found PHB4 PBCQ2 Stack 2 at /xscom@603fc00000000/pbcq@4011400/stack@2
[    3.347980544,3] PHB[0:5] No PHB BAR set ! Overriding
[    3.348010992,3] PHB[0:5] REGS     = 0x000600c3c0500000 [4k]
[    3.348042208,3] PHB[0:5] No IRQ BAR set ! Overriding
[    3.348068880,3] PHB[0:5] ESB      = 0x000600c3a0000000 [...]
[    3.348100960,3] PHB[0:5] No MMIO BAR set ! Overriding
[    3.348136960,3] ETU reset: 0
[    3.348666864,3] Version reg: 0x000000a400000001
[    3.348721248,5] PHB: Chip 8 Found PHB4 PBCQ0 Stack 0 at /xscom@623fc00000000/pbcq@4010c00/stack@0
[    3.348783504,3] PHB[8:0] No PHB BAR set ! Overriding
[    3.348819360,3] PHB[8:0] REGS     = 0x000620c3c0000000 [4k]
[    3.348851936,3] PHB[8:0] No IRQ BAR set ! Overriding
[    3.348879040,3] PHB[8:0] ESB      = 0x000620c300000000 [...]
[    3.348912864,3] PHB[8:0] No MMIO BAR set ! Overriding
[    3.348948656,3] ETU reset: 0
[    3.349482064,3] Version reg: 0x000000a400000001
[    3.349536480,5] PHB: Chip 8 Found PHB4 PBCQ2 Stack 0 at /xscom@623fc00000000/pbcq@4011400/stack@0
[    3.349595072,3] PHB[8:3] No PHB BAR set ! Overriding
[    3.349625840,3] PHB[8:3] REGS     = 0x000620c3c0300000 [4k]
[    3.349655744,3] PHB[8:3] No IRQ BAR set ! Overriding
[    3.349680816,3] PHB[8:3] ESB      = 0x000620c360000000 [...]
[    3.349715456,3] PHB[8:3] No MMIO BAR set ! Overriding
[    3.349751008,3] ETU reset: 0
[    3.350282688,3] Version reg: 0x000000a400000001
[    3.350343696,5] PHB: Chip 8 Found PHB4 PBCQ2 Stack 1 at /xscom@623fc00000000/pbcq@4011400/stack@1
[    3.350400064,3] PHB[8:4] No PHB BAR set ! Overriding
[    3.350431024,3] PHB[8:4] REGS     = 0x000620c3c0400000 [4k]
[    3.350462816,3] PHB[8:4] No IRQ BAR set ! Overriding
[    3.350488320,3] PHB[8:4] ESB      = 0x000620c380000000 [...]
[    3.350522000,3] PHB[8:4] No MMIO BAR set ! Overriding
[    3.350557040,3] ETU reset: 0
[    3.351091296,3] Version reg: 0x000000a400000001
[    3.351143472,5] PHB: Chip 8 Found PHB4 PBCQ2 Stack 2 at /xscom@623fc00000000/pbcq@4011400/stack@2
[    3.351199152,3] PHB[8:5] No PHB BAR set ! Overriding
[    3.351231424,3] PHB[8:5] REGS     = 0x000620c3c0500000 [4k]
[    3.351264864,3] PHB[8:5] No IRQ BAR set ! Overriding
[    3.351291200,3] PHB[8:5] ESB      = 0x000620c3a0000000 [...]
[    3.351329952,3] PHB[8:5] No MMIO BAR set ! Overriding
[    3.351366000,3] ETU reset: 0
[    3.351895648,3] Version reg: 0x000000a400000001
[    3.351991936,3] PHB#0000[0:0]: Base location code not found !
[    3.352990064,3] PHB#0001[0:1]: Base location code not found !
[    3.353870672,3] PHB#0002[0:2]: Base location code not found !
[    3.354754688,3] PHB#0003[0:3]: Base location code not found !
[    3.355756048,3] PHB#0004[0:4]: Base location code not found !
[    3.356642112,3] PHB#0005[0:5]: Base location code not found !
[    3.357531568,3] PHB#0030[8:0]: Base location code not found !
[    3.358694432,3] PHB#0033[8:3]: Base location code not found !
[    3.359852352,3] PHB#0034[8:4]: Base location code not found !
[    3.360818656,3] PHB#0035[8:5]: Base location code not found !
[    3.361864640,5] PCI: Resetting PHBs...
[   10.467659232,5] PCI: Probing slots...
[   11.013344368,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   11.013408656,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[   11.014525952,5] PHB#0001:01:00.0 [EP  ] 104c 8241 R:02 C:0c0330 (      usb-xhci) 
[   11.017671824,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[   11.020711056,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[   11.096908832,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[   11.137002800,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   11.145234416,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..12 
[   11.166233824,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..12 
[   11.167338480,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[   11.169862784,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[   11.175626656,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..08 
[   11.189063072,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:09..0d 
[   11.193360208,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:0e..12 
[   11.194423040,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   11.201092272,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   11.201193840,7] MBOX-FLASH: Adjusting the window
[   11.201260192,7] LPC-MBOX: Sending BMC interrupt
[   11.201313440,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   11.201365600,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   11.201416560,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[   11.201463584,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[   11.201518352,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[   11.201567088,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   11.201614448,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   11.201658944,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   11.201704304,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..0c 
[   11.201753104,5] PHB#0035:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..0c 
[   11.201809744,5] PHB#0035:02:08.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..07 
[   11.201859808,5] PHB#0035:02:0d.0 [SWDN] 10b5 8725 R:ca C:060400 B:08..0c 
[   11.221089152,5] irq ffff0 name: psi:fsp (7/0)
[   11.221137456,5] irq ffff1 name: psi:occ (7/8)
[   11.221161472,5] irq ffff2 name: psi:fsi (7/16)
[   11.221188352,5] irq ffff3 name: psi:lpchc (9/24)
[   11.221215744,5] irq ffff4 name: psi:local_err (13/34)
[   11.221252128,5] irq ffff5 name: psi:global_err (14/48)
[   11.221278992,5] irq ffff6 name: psi:external (12/63)
[   11.221310816,5] irq ffff7 name: psi:lpc_serirq_mux0 (19/76)
[   11.221348016,5] irq ffff8 name: psi:lpc_serirq_mux1 (19/96)
[   11.221385920,5] irq ffff9 name: psi:lpc_serirq_mux2 (19/116)
[   11.221422544,5] irq ffffa name: psi:lpc_serirq_mux3 (19/136)
[   11.221460320,5] irq ffffb name: psi:i2c (7/156)
[   11.221492992,5] irq ffffc name: psi:dio (7/164)
[   11.221523520,5] irq ffffd name: psi:psu (7/172)
[   11.221555344,5] irq 1ffff0 name: psi:fsp (7/180)
[   11.221579584,5] irq 1ffff1 name: psi:occ (7/188)
[   11.221611568,5] irq 1ffff2 name: psi:fsi (7/196)
[   11.221641408,5] irq 1ffff3 name: psi:lpchc (9/204)
[   11.221673712,5] irq 1ffff4 name: psi:local_err (13/214)
[   11.221709008,5] irq 1ffff5 name: psi:global_err (14/228)
[   11.221744048,5] irq 1ffff6 name: psi:external (12/243)
[   11.221776064,5] irq 1ffffb name: psi:i2c (7/256)
[   11.221802960,5] irq 1ffffc name: psi:dio (7/264)
[   11.221828352,5] irq 1ffffd name: psi:psu (7/272)
[   11.222119696,5] Releasing unused memory:
[   11.222145584,5]     ibm,firmware-heap: 5372024/13631488 used
[   11.222182336,5]     ibm,firmware-allocs-memory@200000000000: 21504000/68677533696 used
[   11.222264224,5]     ibm,firmware-allocs-memory@0: 26746880/67347939328 used
[   11.222309760,5]     ibm,firmware-allocs-memory@200000000000: 0/33554432 used
[   11.222360448,5] Reserved regions:
[   11.222383936,5]   0x200ffdc00000..200ffdffffff : ibm,homer-image
[   11.222424608,5]   0x200ffd800000..200ffdbfffff : ibm,homer-image
[   11.222466288,5]   0x000031c00000..000033d5ffff : ibm,firmware-stacks
[   11.222505456,5]   0x000031000000..000031bfffff : ibm,firmware-data
[   11.222543952,5]   0x000030300000..000030ffffff : ibm,firmware-heap
[   11.222581440,5]   0x000030000000..0000302fffff : ibm,firmware-code
[   11.222620144,5]   0x200000000000..200001481fff : ibm,firmware-allocs-memory@200000000000
[   11.222669936,5]   0x200ffd470000..200ffd694287 : ibm,hbrt-code-image
[   11.222708928,5]   0x200ffd6a0000..200ffd6f9fff : ibm,hbrt-target-image
[   11.222751456,5]   0x200ffd700000..200ffd7fffff : ibm,hbrt-vpd-image
[   11.222792208,5]   0x000051c00000..000053581fff : ibm,firmware-allocs-memory@0
[   11.222891040,5] INIT: Waiting for kernel...
[   20.434616528,5] STB: sb_verify skipped resource 0, secure_mode=0
[   20.434674416,5] STB: tb_measure skipped resource 0, trusted_mode=0
[   20.436867392,5] INIT: Kernel loaded, size: 13866600 bytes (0 = unknown preload)
[   20.436941056,5] INIT: 64-bit LE kernel discovered
[   20.436964416,5] INIT: 64-bit kernel entry at 0x20010000, size 0xd39668
[   21.128312800,3] FLASH: Failed to get ROOTFS partition info
[   21.138942800,5] Free space in HEAP memory regions:
[   21.139009248,5] Region ibm,firmware-heap free: 7644e0
[   21.139056752,5] Region ibm,firmware-allocs-memory@200000000000 free: 5f7620
[   21.139105008,5] Region ibm,firmware-allocs-memory@0 free: a755c0
[   21.139146992,5] Total free: 24973504
[   21.139165760,5] INIT: stdout-path: /ibm,opal/consoles/serial@0
[   21.139199104,5] INIT: Starting kernel at 0x20010000, fdt at 0x30820578 197659 bytes)
[   22.375609056,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c000200fffff0000
[    0.000000] Mapping range 0x0 - 0x1000000000 with 0x40000000
[    0.000000] Mapping range 0x200000000000 - 0x201000000000 with 0x40000000
[    0.000000] Process table c000200fff000000 and radix root for kernel: c0000000013a0000
[    0.000000] Linux version 4.10.7-openpower1 (fspbld@gfwa611.aus.stglabs.ibm.com) (gcc version 4.9.4 (Buildroot 2017.02-00004-gc28573e) ) #2 SMP Thu Apr 6 09:28:47 CDT 2017
[    0.000000] OPAL: Power8 LPC bus found, chip ID 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 31
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x2000000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x477c7afd18500249
[    0.000000]   possible        = 0x7f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaec00000
[    0.000000] mmu_features      = 0x3c004041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa: Initmem setup node 0 [mem 0x00000000-0xfffffffff]
[    0.000000] numa:   NODE_DATA [mem 0xfffff6700-0xfffffffff]
[    0.000000] numa: Initmem setup node 8 [mem 0x200000000000-0x200fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x200ffffac200-0x200ffffb5aff]
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006001fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x2000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006002000000000..0x0006003fffffffff -&gt; 0x0006002000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006005fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006006000000000..0x0006007fffffffff -&gt; 0x0006006000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x2000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x0006009fffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x000600a000000000..0x000600bfffffffff -&gt; 0x000600a000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006201fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x2000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006206000000000..0x0006207fffffffff -&gt; 0x0006206000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x2000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006208000000000..0x0006209fffffffff -&gt; 0x0006208000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x000620a000000000..0x000620bfffffffff -&gt; 0x000620a000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x0000200fffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000000fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200fffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000000fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x0000200fffffffff]
[    0.000000] percpu: Embedded 2 pages/cpu @c000000ffc3c0000 s58136 r0 d72936 u131072
[    0.000000] Built 2 zonelists in Node order, mobility grouping on.  Total pages: 2095360
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 133937024K/134217728K available (6272K kernel code, 832K rwdata, 1956K rodata, 11008K init, 1658K bss, 280704K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=32, Nodes=9
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	Build-time adjustment of leaf fanout to 64.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=32.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=32
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] XICS: Using OPAL ICP fallbacks
[    0.000000] ICS OPAL backend registered
[    0.000004] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000219] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.000573] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001014] Console: colour dummy device 80x25
[    0.002739] console [tty0] enabled
[    0.002877] console [hvc0] enabled
[    0.002877] console [hvc0] enabled
[    0.003053] bootconsole [udbg0] disabled
[    0.003053] bootconsole [udbg0] disabled
[    0.004279] pid_max: default: 32768 minimum: 301
[    0.008356] Security Framework initialized
[    0.011686] Dentry cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.076425] Inode-cache hash table entries: 8388608 (order: 10, 67108864 bytes)
[    0.108700] Mount-cache hash table entries: 262144 (order: 5, 2097152 bytes)
[    0.108895] Mountpoint-cache hash table entries: 262144 (order: 5, 2097152 bytes)
[    0.115035] EEH: PowerNV platform initialized
[    0.115138] POWER9 performance monitor hardware support registered
[    0.115997] smp: Bringing up secondary CPUs ...
[    0.133774] smp: Brought up 2 nodes, 32 CPUs
[    0.133886] numa: Node 0 CPUs: 0-15
[    0.133958] numa: Node 8 CPUs: 16-31
[    0.143554] devtmpfs: initialized
[    0.151204] evm: security.capability
[    0.152113] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.152321] futex hash table entries: 8192 (order: 4, 1048576 bytes)
[    0.153528] NET: Registered protocol family 16
[    0.211056] cpuidle: using governor menu
[    0.232488] PCI: Probing PCI hardware
[    0.232675] PCI host bridge to bus 0000:00
[    0.232774] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.232989] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6001fbfffffff 64bit pref]
[    0.233166] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.233659] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.233946] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    0.234185] PCI host bridge to bus 0001:00
[    0.234279] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.234476] pci_bus 0001:00: root bus resource [mem 0x6002000000000-0x6003f7fffffff 64bit pref]
[    0.234643] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.235569] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.235852] PCI host bridge to bus 0002:00
[    0.235946] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.236147] pci_bus 0002:00: root bus resource [mem 0x6004000000000-0x6005f7fffffff 64bit pref]
[    0.236321] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.237229] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.237954] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.238216] PCI host bridge to bus 0003:00
[    0.238309] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.238512] pci_bus 0003:00: root bus resource [mem 0x6006000000000-0x6007fbfffffff 64bit pref]
[    0.238676] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.239093] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.239364] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    0.239599] PCI host bridge to bus 0004:00
[    0.239687] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.239902] pci_bus 0004:00: root bus resource [mem 0x6008000000000-0x6009f7fffffff 64bit pref]
[    0.240071] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.242553] pci 0004:00:00.0: PCI bridge to [bus 01-12]
[    0.244634] pci 0004:01:00.0: PCI bridge to [bus 02-12]
[    0.245918] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.246197] pci 0004:02:0a.0: PCI bridge to [bus 04-08]
[    0.246462] pci 0004:02:0b.0: PCI bridge to [bus 09-0d]
[    0.246717] pci 0004:02:0c.0: PCI bridge to [bus 0e-12]
[    0.247019] PCI host bridge to bus 0005:00
[    0.247111] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.247311] pci_bus 0005:00: root bus resource [mem 0x600a000000000-0x600bf7fffffff 64bit pref]
[    0.247486] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.248906] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.249225] PCI host bridge to bus 0030:00
[    0.249313] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.249528] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6201fbfffffff 64bit pref]
[    0.249703] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.250167] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.250447] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.250702] PCI host bridge to bus 0033:00
[    0.250790] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.251001] pci_bus 0033:00: root bus resource [mem 0x6206000000000-0x6207fbfffffff 64bit pref]
[    0.251183] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.251627] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.251929] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    0.252157] PCI host bridge to bus 0034:00
[    0.252250] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.252450] pci_bus 0034:00: root bus resource [mem 0x6208000000000-0x6209f7fffffff 64bit pref]
[    0.252620] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.253067] pci 0034:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.253356] pci 0034:00:00.0: PCI bridge to [bus 01-ff]
[    0.253601] PCI host bridge to bus 0035:00
[    0.253694] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.253894] pci_bus 0035:00: root bus resource [mem 0x620a000000000-0x620bf7fffffff 64bit pref]
[    0.254068] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.255114] pci 0035:00:00.0: PCI bridge to [bus 01-0c]
[    0.256384] pci 0035:01:00.0: PCI bridge to [bus 02-0c]
[    0.256976] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.257250] pci 0035:02:0d.0: PCI bridge to [bus 08-0c]
[    0.257503] pci 0000:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.257707] pci 0000:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.257915] pci 0000:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.258494] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.258673] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c080ffffff]
[    0.258830] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.259015] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.259192] pci 0001:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.259773] pci 0001:01     : [PE# 7d] Secondary bus 1 associated with PE#7d
[    0.260369] pci 0001:01     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    0.272291] IOMMU table initialized, virtual merging enabled
[    0.272410] pci 0001:01     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    0.272756] pci 0001:01     : [PE# 7d] Enabling 64-bit DMA bypass
[    0.272884] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.272996] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.273225] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
[    0.273384] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
[    0.273550] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.273678] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.273806] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.273967] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.274129] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.274254] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.274395] pci 0002:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.274976] pci 0002:02     : [PE# 7d] Secondary bus 2..2 associated with PE#7d
[    0.275567] pci 0002:02     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    0.287483] pci 0002:02     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    0.287642] pci 0002:02     : [PE# 7d] Enabling 64-bit DMA bypass
[    0.287766] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.287875] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.288048] pci 0002:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
[    0.288625] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.288741] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.288905] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.289135] pci 0003:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.289338] pci 0003:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.289530] pci 0003:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.290108] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.290438] pci 0004:00:00.0: BAR 9: assigned [mem 0x6008000000000-0x600803fffffff 64bit pref]
[    0.290607] random: fast init done
[    0.290691] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c201ffffff]
[    0.290868] pci 0004:01:00.0: BAR 9: assigned [mem 0x6008000000000-0x600803fffffff 64bit pref]
[    0.291039] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.291198] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c201000000-0x600c20103ffff]
[    0.291362] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c201040000-0x600c201041fff]
[    0.291521] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c201042000-0x600c201043fff]
[    0.291684] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c201044000-0x600c201045fff]
[    0.291841] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c201046000-0x600c201047fff]
[    0.292004] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.292126] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.292257] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.292383] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.292531] pci 0004:02:02.0: BAR 9: assigned [mem 0x6008000000000-0x600803fffffff 64bit pref]
[    0.292706] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.292863] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.292985] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.293114] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.293239] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.293367] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
[    0.293525] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
[    0.293688] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.293811] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.293939] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.294062] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.294191] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.294315] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.294440] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.294565] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.294692] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.294815] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.294945] pci 0004:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.295525] pci 0004:03     : [PE# 7d] Secondary bus 3 associated with PE#7d
[    0.296107] pci 0004:03     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    0.308012] pci 0004:03     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    0.308151] pci 0004:03     : [PE# 7d] Enabling 64-bit DMA bypass
[    0.308307] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.308428] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c200ffffff]
[    0.308587] pci 0004:02:02.0:   bridge window [mem 0x6008000000000-0x600803fffffff 64bit pref]
[    0.308765] pci 0004:02:0a.0: PCI bridge to [bus 04-08]
[    0.308892] pci 0004:02:0b.0: PCI bridge to [bus 09-0d]
[    0.309018] pci 0004:02:0c.0: PCI bridge to [bus 0e-12]
[    0.309149] pci 0004:02     : [PE# 7c] Secondary bus 2 associated with PE#7c
[    0.309728] pci 0004:01:00.0: PCI bridge to [bus 02-12]
[    0.309851] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.310010] pci 0004:01:00.0:   bridge window [mem 0x6008000000000-0x6009f7ff0ffff 64bit pref]
[    0.310192] pci 0004:01     : [PE# 7b] Secondary bus 1 associated with PE#7b
[    0.310776] pci 0004:01     : [PE# 7b] Setting up 32-bit TCE table at 0..80000000
[    0.322710] pci 0004:01     : [PE# 7b] Setting up window#0 0..7fffffff pg=1000
[    0.322860] pci 0004:01     : [PE# 7b] Enabling 64-bit DMA bypass
[    0.322997] pci 0004:00:00.0: PCI bridge to [bus 01-12]
[    0.323112] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.323272] pci 0004:00:00.0:   bridge window [mem 0x6008000000000-0x6009f7ff0ffff 64bit pref]
[    0.323453] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.323719] pci 0005:00:00.0: BAR 9: assigned [mem 0x600a000000000-0x600a03fffffff 64bit pref]
[    0.323897] pci 0005:01:00.0: BAR 0: assigned [mem 0x600a000000000-0x600a00000ffff 64bit pref]
[    0.324090] pci 0005:01:00.0: BAR 2: assigned [mem 0x600a000010000-0x600a00001ffff 64bit pref]
[    0.324277] pci 0005:01:00.0: BAR 4: assigned [mem 0x600a000020000-0x600a00002ffff 64bit pref]
[    0.324464] pci 0005:01:00.1: BAR 0: assigned [mem 0x600a000030000-0x600a00003ffff 64bit pref]
[    0.324661] pci 0005:01:00.1: BAR 2: assigned [mem 0x600a000040000-0x600a00004ffff 64bit pref]
[    0.324848] pci 0005:01:00.1: BAR 4: assigned [mem 0x600a000050000-0x600a00005ffff 64bit pref]
[    0.325040] pci 0005:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.325631] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.326202] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.338118] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.338264] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.338396] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.338530] pci 0005:00:00.0:   bridge window [mem 0x600a000000000-0x600bf7fffffff 64bit pref]
[    0.338759] pci 0030:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.338960] pci 0030:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.339156] pci 0030:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.339732] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.339921] pci 0033:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.340121] pci 0033:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.340314] pci 0033:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.340898] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.341067] pci 0034:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.341279] pci 0034:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.341477] pci 0034:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.342054] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.342284] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c280ffffff]
[    0.342444] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.342604] pci 0035:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.343186] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.343335] pci 0035:02:0d.0: PCI bridge to [bus 08-0c]
[    0.343468] pci 0035:02     : [PE# 7d] Secondary bus 2 associated with PE#7d
[    0.344049] pci 0035:01:00.0: PCI bridge to [bus 02-0c]
[    0.344189] pci 0035:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
[    0.344768] pci 0035:00:00.0: PCI bridge to [bus 01-0c]
[    0.344882] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.347082] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.414267] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.414429] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.414560] vgaarb: loaded
[    0.415150] SCSI subsystem initialized
[    0.415426] usbcore: registered new interface driver usbfs
[    0.415559] usbcore: registered new interface driver hub
[    0.416750] usbcore: registered new device driver usb
[    0.416908] pps_core: LinuxPPS API ver. 1 registered
[    0.417008] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.417200] PTP clock support registered
[    0.418251] clocksource: Switched to clocksource timebase
[    0.424330] NET: Registered protocol family 2
[    0.424913] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.428273] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.428823] TCP: Hash tables configured (established 524288 bind 65536)
[    0.429029] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.430328] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.431764] NET: Registered protocol family 1
[    0.431919] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)</msg>
<status status="PASS" starttime="20170518 02:14:59.945" endtime="20170518 02:14:59.948"></status>
</kw>
<status status="PASS" starttime="20170518 02:14:21.700" endtime="20170518 02:14:59.948"></status>
</kw>
<doc>Parse the journal log and check for failures.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Check_For_Application_Failures</tag>
</tags>
<status critical="yes" status="FAIL" starttime="20170518 02:14:14.513" endtime="20170518 02:14:59.948">'Apr 20 17:35:52 witherspoon systemd[1]: xyz.openbmc_project.Hwmon@ahb-apb-i2c\x401e78a000-i2c\x2dbus\x40400-ucd90160\x4064.service: Failed with result 'core-dump'.
Apr 20 17:41:48 witherspoon systemd[1]: xyz.openbmc_project.Hwmon@ahb-apb-i2c\x401e78a000-i2c\x2dbus\x40400-ucd90160\x4064.service: Failed with result 'core-dump'.' should be empty.</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" starttime="20170518 02:09:48.168" endtime="20170518 02:14:59.950"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" starttime="20170518 02:09:40.539" endtime="20170518 02:14:59.959"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="2">Critical Tests</stat>
<stat fail="1" pass="2">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="1">chassisboot</stat>
<stat fail="1" pass="0">Check_For_Application_Failures</stat>
<stat fail="0" pass="1">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" fail="1" pass="2" name="Tests">Tests</stat>
<stat id="s1-s1" fail="0" pass="1" name="Security">Tests.Security</stat>
<stat id="s1-s1-s1" fail="0" pass="1" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" fail="1" pass="1" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
